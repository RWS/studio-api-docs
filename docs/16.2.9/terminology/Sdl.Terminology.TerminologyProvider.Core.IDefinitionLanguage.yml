### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  id: IDefinitionLanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  - Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  langs:
  - csharp
  - vb
  name: IDefinitionLanguage
  nameWithType: IDefinitionLanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  type: Interface
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe language for the termbase provider definition\n"
  syntax:
    content: 'public interface IDefinitionLanguage : ILanguage'
    content.vb: >-
      Public Interface IDefinitionLanguage
          Inherits ILanguage
  inheritedMembers:
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  id: TargetOnly
  parent: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  langs:
  - csharp
  - vb
  name: TargetOnly
  nameWithType: IDefinitionLanguage.TargetOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines if it is available for the target language only\n"
  syntax:
    content: bool? TargetOnly { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: ReadOnly Property TargetOnly As Boolean?
  overload: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  id: IsBidirectional
  parent: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  langs:
  - csharp
  - vb
  name: IsBidirectional
  nameWithType: IDefinitionLanguage.IsBidirectional
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines if the language is bidirectional\n"
  syntax:
    content: bool? IsBidirectional { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: ReadOnly Property IsBidirectional As Boolean?
  overload: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  parent: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  isExternal: true
  name: Name
  nameWithType: ILanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  parent: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  isExternal: true
  name: Locale
  nameWithType: ILanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.ILanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: ILanguage
  nameWithType: ILanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  isExternal: true
  name: TargetOnly
  nameWithType: IDefinitionLanguage.TargetOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  isExternal: true
  name: IsBidirectional
  nameWithType: IDefinitionLanguage.IsBidirectional
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
