### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IEntry
  id: IEntry
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields
  - Sdl.Terminology.TerminologyProvider.Core.IEntry.Id
  - Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages
  - Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions
  langs:
  - csharp
  - vb
  name: IEntry
  nameWithType: IEntry
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry
  type: Interface
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe terminology provider entry\n"
  syntax:
    content: public interface IEntry
    content.vb: Public Interface IEntry
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Id
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntry.Id
  id: Id
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntry
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: IEntry.Id
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Id
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe entry id that identify it in termbase\n"
  syntax:
    content: int Id { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Id As Integer
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntry.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields
  id: Fields
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntry
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: IEntry.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nEntry level fields\n"
  syntax:
    content: IList<IEntryField> Fields { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryField}
    content.vb: ReadOnly Property Fields As IList(Of IEntryField)
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions
  id: Transactions
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntry
  langs:
  - csharp
  - vb
  name: Transactions
  nameWithType: IEntry.Transactions
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe transactions (creation/modification) for this entry\n"
  syntax:
    content: IList<IEntryTransaction> Transactions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction}
    content.vb: ReadOnly Property Transactions As IList(Of IEntryTransaction)
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages
  id: Languages
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntry
  langs:
  - csharp
  - vb
  name: Languages
  nameWithType: IEntry.Languages
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe Languages for which entries exist\n"
  syntax:
    content: IList<IEntryLanguage> Languages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage}
    content.vb: ReadOnly Property Languages As IList(Of IEntryLanguage)
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Id*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntry.Id
  isExternal: true
  name: Id
  nameWithType: IEntry.Id
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Id
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields
  isExternal: true
  name: Fields
  nameWithType: IEntry.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Fields
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryField}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEntryField>
  nameWithType: IList<IEntryField>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.IEntryField>
  nameWithType.vb: IList(Of IEntryField)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.IEntryField)
  name.vb: IList(Of IEntryField)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    name: IEntryField
    nameWithType: IEntryField
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    name: IEntryField
    nameWithType: IEntryField
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions
  isExternal: true
  name: Transactions
  nameWithType: IEntry.Transactions
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Transactions
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEntryTransaction>
  nameWithType: IList<IEntryTransaction>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction>
  nameWithType.vb: IList(Of IEntryTransaction)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction)
  name.vb: IList(Of IEntryTransaction)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction
    name: IEntryTransaction
    nameWithType: IEntryTransaction
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction
    name: IEntryTransaction
    nameWithType: IEntryTransaction
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages
  isExternal: true
  name: Languages
  nameWithType: IEntry.Languages
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry.Languages
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEntryLanguage>
  nameWithType: IList<IEntryLanguage>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage>
  nameWithType.vb: IList(Of IEntryLanguage)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage)
  name.vb: IList(Of IEntryLanguage)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage
    name: IEntryLanguage
    nameWithType: IEntryLanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage
    name: IEntryLanguage
    nameWithType: IEntryLanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryLanguage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
