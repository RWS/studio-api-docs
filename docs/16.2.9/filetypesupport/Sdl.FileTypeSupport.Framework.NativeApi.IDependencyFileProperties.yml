### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  id: IDependencyFileProperties
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  children:
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage
  - Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile
  langs:
  - csharp
  - vb
  name: IDependencyFileProperties
  nameWithType: IDependencyFileProperties
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nInformation on a dependency file used during file conversion.\n"
  remarks: "\n<p>\nSome examples of dependency files include: \n<ul><li></li><li></li><li></li><li></li><li></li></ul>\n</p>\n<p>\nDependency files are not processed for localizable content.\n</p>\n<p>\nInformation on dependency files is particularly important when moving bilingual\ndocuments between systems (or even between different locations on the same system). After\nsaving a bilingual document <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles\" data-throw-if-not-resolved=\"false\"></xref>, \nthis contains information on which dependency files (if any) were explicitly linked rather than \nembedded in the bilingual file.\n</p>\n"
  syntax:
    content: 'public interface IDependencyFileProperties : ICloneable'
    content.vb: >-
      Public Interface IDependencyFileProperties
          Inherits ICloneable
  inheritedMembers:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id
  id: Id
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: IDependencyFileProperties.Id
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nId associated with this dependency file. (optional)\n"
  remarks: "\n<p>\nCan be used by related file type components to ensure that they pick the right\nfile to use for the right purpose.\n</p>\n<p>\nTo avoid interference between unrelated components working together it is \nrecommended to use a URI as the id.\n</p>\n"
  syntax:
    content: string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Id As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists
  id: FileExists
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: FileExists
  nameWithType: IDependencyFileProperties.FileExists
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\n<code>True</code> if the <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath\" data-throw-if-not-resolved=\"false\"></xref> references a file\nthat exists.\n"
  syntax:
    content: bool FileExists { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property FileExists As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath
  id: CurrentFilePath
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: CurrentFilePath
  nameWithType: IDependencyFileProperties.CurrentFilePath
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThe current path to the dependency file\n"
  syntax:
    content: string CurrentFilePath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property CurrentFilePath As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile
  id: ZippedCurrentFile
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: ZippedCurrentFile
  nameWithType: IDependencyFileProperties.ZippedCurrentFile
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nA <xref href=\"Sdl.FileTypeSupport.Framework.FileJanitor\" data-throw-if-not-resolved=\"false\"></xref> instance managing the lifetime of a temporary .zip file containing a copy of the file stored in <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThe zipped file is generated on demand, and will also be deleted during garbage collection.\n</p>\n"
  syntax:
    content: FileJanitor ZippedCurrentFile { get; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.FileJanitor
    content.vb: ReadOnly Property ZippedCurrentFile As FileJanitor
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath
  id: OriginalFilePath
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: OriginalFilePath
  nameWithType: IDependencyFileProperties.OriginalFilePath
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThe original path of the dependency file (if known)\n"
  remarks: "\n<p>\nTemporarily generated dependency files may not have an original file path.\n</p>\n"
  syntax:
    content: string OriginalFilePath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property OriginalFilePath As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate
  id: OriginalLastChangeDate
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: OriginalLastChangeDate
  nameWithType: IDependencyFileProperties.OriginalLastChangeDate
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThe timestamp (the last change date) of the original dependency file (if known)\n"
  syntax:
    content: DateTime OriginalLastChangeDate { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Property OriginalLastChangeDate As Date
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted
  id: PathRelativeToConverted
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: PathRelativeToConverted
  nameWithType: IDependencyFileProperties.PathRelativeToConverted
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIf the file is a direct dependency of the file being converted, and it is linked rather than embedded,\nthen this property may contain the path to the linked dependency file relative to the .sdlxliff file\nthat refers to it.\n"
  remarks: "\n<p>\nThis property can be <code>null</code> if no relative path should be associated with\nthis dependency.\n</p>\n"
  syntax:
    content: string PathRelativeToConverted { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property PathRelativeToConverted As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description
  id: Description
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: IDependencyFileProperties.Description
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nOptional clear text description of the file. This can be used e.g. to explain \nthe origin and purpose of the file to other users and developers.\n"
  syntax:
    content: string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Description As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage
  id: ExpectedUsage
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: ExpectedUsage
  nameWithType: IDependencyFileProperties.ExpectedUsage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nExpected usage for this dependency file (optional)\n"
  remarks: "\n<p>\nThis does not limit the possible usage of the file, it merely serves as a hint on\nwhat it is used for.\n</p>\n"
  syntax:
    content: DependencyFileUsage ExpectedUsage { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage
    content.vb: Property ExpectedUsage As DependencyFileUsage
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage
  id: PreferredLinkage
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: PreferredLinkage
  nameWithType: IDependencyFileProperties.PreferredLinkage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIndicates the preferred way of handling this file when writing intermediate\nbilingual content. (optional)\n"
  remarks: "\n<p>\nSet this value e.g. to specifically request that the dependency file gets \nreferenced as an external link rather than being embedded when saving \nto an intermediate bilingual format such as SDL XLIFF.\n</p>\n<p>\nNote that this serves as a recommendation only, the writer is not \nrequired to honor this setting. For some file formats it may e.g. not\nbe possible to embed dependency files. The host application needs to check\nthe properties of the writer after conversion to find out which \nexternal dependencies it produced.\n</p>\n"
  syntax:
    content: DependencyFileLinkOption PreferredLinkage { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption
    content.vb: Property PreferredLinkage As DependencyFileLinkOption
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject
  id: DisposableObject
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
  langs:
  - csharp
  - vb
  name: DisposableObject
  nameWithType: IDependencyFileProperties.DisposableObject
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThis property can be used to hold a reference to a disposable object,\nsuch as a temp file that should be deleted when it has no more references. (optional)\n"
  remarks: "\n<p>\nYou can assign a temp file object with a finalizer that deletes the temp file to\nthis property, and the file should be kept alive as long as anyone has\na reference to it (unless, of course, someone explicitly calls <code>Dispose</code> on it).\n</p>\n<p>\nNormally, users should NOT explicitly invoke <code>Dispose</code> on this object,\nas it may still be referenced by others. The <code>IDisposable</code> interface\nis used here mainly to indicate that the object is expected\nto do some clean-up work at some point when it is no longer needed.\n</p>\n<p>\nThis property is (for obvious reasons) not serialized.\n</p>\n"
  syntax:
    content: IDisposable DisposableObject { get; set; }
    parameters: []
    return:
      type: System.IDisposable
    content.vb: Property DisposableObject As IDisposable
  overload: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.FileTypeSupport.Framework.NativeApi
  commentId: N:Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.NativeApi
  nameWithType: Sdl.FileTypeSupport.Framework.NativeApi
  fullName: Sdl.FileTypeSupport.Framework.NativeApi
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id
  isExternal: true
  name: Id
  nameWithType: IDependencyFileProperties.Id
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists
  isExternal: true
  name: FileExists
  nameWithType: IDependencyFileProperties.FileExists
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.FileExists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath
  isExternal: true
  name: CurrentFilePath
  nameWithType: IDependencyFileProperties.CurrentFilePath
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.CurrentFilePath
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile
  isExternal: true
  name: ZippedCurrentFile
  nameWithType: IDependencyFileProperties.ZippedCurrentFile
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ZippedCurrentFile
- uid: Sdl.FileTypeSupport.Framework.FileJanitor
  commentId: T:Sdl.FileTypeSupport.Framework.FileJanitor
  parent: Sdl.FileTypeSupport.Framework
  isExternal: true
  name: FileJanitor
  nameWithType: FileJanitor
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor
- uid: Sdl.FileTypeSupport.Framework
  commentId: N:Sdl.FileTypeSupport.Framework
  isExternal: true
  name: Sdl.FileTypeSupport.Framework
  nameWithType: Sdl.FileTypeSupport.Framework
  fullName: Sdl.FileTypeSupport.Framework
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath
  isExternal: true
  name: OriginalFilePath
  nameWithType: IDependencyFileProperties.OriginalFilePath
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalFilePath
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate
  isExternal: true
  name: OriginalLastChangeDate
  nameWithType: IDependencyFileProperties.OriginalLastChangeDate
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.OriginalLastChangeDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted
  isExternal: true
  name: PathRelativeToConverted
  nameWithType: IDependencyFileProperties.PathRelativeToConverted
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PathRelativeToConverted
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description
  isExternal: true
  name: Description
  nameWithType: IDependencyFileProperties.Description
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.Description
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage
  isExternal: true
  name: ExpectedUsage
  nameWithType: IDependencyFileProperties.ExpectedUsage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.ExpectedUsage
- uid: Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: DependencyFileUsage
  nameWithType: DependencyFileUsage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileUsage
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage
  isExternal: true
  name: PreferredLinkage
  nameWithType: IDependencyFileProperties.PreferredLinkage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.PreferredLinkage
- uid: Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: DependencyFileLinkOption
  nameWithType: DependencyFileLinkOption
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.DependencyFileLinkOption
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject
  isExternal: true
  name: DisposableObject
  nameWithType: IDependencyFileProperties.DisposableObject
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties.DisposableObject
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
