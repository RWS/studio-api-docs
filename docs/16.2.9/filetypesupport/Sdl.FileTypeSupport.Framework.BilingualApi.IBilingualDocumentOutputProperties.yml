### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties
  id: IBilingualDocumentOutputProperties
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  children:
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath
  langs:
  - csharp
  - vb
  name: IBilingualDocumentOutputProperties
  nameWithType: IBilingualDocumentOutputProperties
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nOutput properties of a bilingual document file; communicated to file type components\nthrough the IBilingualDocumentOutputPropertiesAware interface during generation with\na <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis includes the path to the output file that will be created. This may be changed\nby bilingual content processors, or by the bilingual document file writers.\n</p>\n"
  syntax:
    content: public interface IBilingualDocumentOutputProperties
    content.vb: Public Interface IBilingualDocumentOutputProperties
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath
  id: OutputFilePath
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties
  langs:
  - csharp
  - vb
  name: OutputFilePath
  nameWithType: IBilingualDocumentOutputProperties.OutputFilePath
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nFull path to the bilingual document file\n"
  syntax:
    content: string OutputFilePath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property OutputFilePath As String
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles
  id: LinkedDependencyFiles
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties
  langs:
  - csharp
  - vb
  name: LinkedDependencyFiles
  nameWithType: IBilingualDocumentOutputProperties.LinkedDependencyFiles
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nUpdated by a bilingual file writer during the writing process to indicate which dependency files \nwere not embedded in the output file, and must therefore be explicitly made\navailable by the host application at the expected locations (which \ncan be absolute paths or paths relative to the original file) when the \noutput file is to be parsed.\n"
  remarks: "\n<p>\nThis property should only be set by the bilingual writer; the host\napplication should not modify this collection. \n</p>\n<p>\nWhen the bilingual output file is opened, the dependency files in this\nlist must be located at the same paths (either absolute or relative to\nthe output file) for them to be found by the parser. This is the responsibility\nof the host application.\n</p>\n"
  syntax:
    content: IList<IDependencyFileProperties> LinkedDependencyFiles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties}
    content.vb: ReadOnly Property LinkedDependencyFiles As IList(Of IDependencyFileProperties)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.FileTypeSupport.Framework.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath
  isExternal: true
  name: OutputFilePath
  nameWithType: IBilingualDocumentOutputProperties.OutputFilePath
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.OutputFilePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles
  isExternal: true
  name: LinkedDependencyFiles
  nameWithType: IBilingualDocumentOutputProperties.LinkedDependencyFiles
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentOutputProperties.LinkedDependencyFiles
- uid: System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties}
  commentId: T:System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IDependencyFileProperties>
  nameWithType: IList<IDependencyFileProperties>
  fullName: System.Collections.Generic.IList<Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties>
  nameWithType.vb: IList(Of IDependencyFileProperties)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties)
  name.vb: IList(Of IDependencyFileProperties)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
    name: IDependencyFileProperties
    nameWithType: IDependencyFileProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
    name: IDependencyFileProperties
    nameWithType: IDependencyFileProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IDependencyFileProperties
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
