### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  id: FileTypeSettingsBase
  parent: Sdl.FileTypeSupport.Framework.Core.Settings
  children:
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.#ctor
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged(System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PropertyChanged
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0,``0)
  langs:
  - csharp
  - vb
  name: FileTypeSettingsBase
  nameWithType: FileTypeSettingsBase
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nThis base class defines the common operations for settings objects used for processing a given file type.\n"
  remarks: "\n<p>\nSettings implementations are not required to implement this class, but it is recommended.\n</p>\n<p>\nThe <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface facilitates dynamic\nUI updates for operations such as <xref href=\"Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults\" data-throw-if-not-resolved=\"false\"></xref> if data binding is used. Note that\nfor this to work properly, all relevant property setters must raise the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event\nor call <xref href=\"Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: 'public abstract class FileTypeSettingsBase : INotifyPropertyChanged'
    content.vb: >-
      Public MustInherit Class FileTypeSettingsBase
          Implements INotifyPropertyChanged
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.FileTypeSupport.Framework.Core.Settings.FontMappingSettings
  - Sdl.FileTypeSupport.Framework.Core.Settings.Serialization.AbstractSettingsClass
  implements:
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  id: PopulateFromSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: PopulateFromSettingsBundle(ISettingsBundle, String)
  nameWithType: FileTypeSettingsBase.PopulateFromSettingsBundle(ISettingsBundle, String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle(Sdl.Core.Settings.ISettingsBundle, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nPopulates the settings for a specific file type configuration.\n"
  syntax:
    content: public abstract void PopulateFromSettingsBundle(ISettingsBundle settingsBundle, string fileTypeConfigurationId)
    parameters:
    - id: settingsBundle
      type: Sdl.Core.Settings.ISettingsBundle
      description: The settings bundle to read settings from.
    - id: fileTypeConfigurationId
      type: System.String
      description: "Id that can be used (as key) to retrieve the \nsettings group with file type specific settings from the settings bundle (this is normally\nequal to the file type definition id). Default settings should be used if no settings\ngroup exists with the specified configuration id."
    content.vb: Public MustOverride Sub PopulateFromSettingsBundle(settingsBundle As ISettingsBundle, fileTypeConfigurationId As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  id: SaveToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: SaveToSettingsBundle(ISettingsBundle, String)
  nameWithType: FileTypeSettingsBase.SaveToSettingsBundle(ISettingsBundle, String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle(Sdl.Core.Settings.ISettingsBundle, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nStores settings for a specified file type configuration.\n"
  syntax:
    content: public abstract void SaveToSettingsBundle(ISettingsBundle settingsBundle, string fileTypeConfigurationId)
    parameters:
    - id: settingsBundle
      type: Sdl.Core.Settings.ISettingsBundle
      description: The settings bundle in which the settings should be stored.
    - id: fileTypeConfigurationId
      type: System.String
      description: >-
        Id for the settings group that

        file type specific settings should be stored in.
    content.vb: Public MustOverride Sub SaveToSettingsBundle(settingsBundle As ISettingsBundle, fileTypeConfigurationId As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults
  id: ResetToDefaults
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: ResetToDefaults()
  nameWithType: FileTypeSettingsBase.ResetToDefaults()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRestore all settings to default values.\n"
  syntax:
    content: public abstract void ResetToDefaults()
    content.vb: Public MustOverride Sub ResetToDefaults
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  id: SaveDefaultsToSettingsBundle(Sdl.Core.Settings.ISettingsBundle,System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: SaveDefaultsToSettingsBundle(ISettingsBundle, String)
  nameWithType: FileTypeSettingsBase.SaveDefaultsToSettingsBundle(ISettingsBundle, String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle(Sdl.Core.Settings.ISettingsBundle, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nStores default settings for a specified file type configuration. Each setting must have its\ndefault value explicitly stored.\n"
  syntax:
    content: public virtual void SaveDefaultsToSettingsBundle(ISettingsBundle settingsBundle, string fileTypeConfigurationId)
    parameters:
    - id: settingsBundle
      type: Sdl.Core.Settings.ISettingsBundle
      description: The default settings bundle in which the settings should be stored.
    - id: fileTypeConfigurationId
      type: System.String
      description: >-
        Id for the settings group that

        file type specific settings should be stored in.
    content.vb: Public Overridable Sub SaveDefaultsToSettingsBundle(settingsBundle As ISettingsBundle, fileTypeConfigurationId As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged(System.String)
  id: OnPropertyChanged(System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(String)
  nameWithType: FileTypeSettingsBase.OnPropertyChanged(String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged(System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nFires the <xref href=\"Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event with the propertyName used as the event argument. This\nneeds to be called from the setter of every property when using binding (for example, in WPF UIs).\n"
  syntax:
    content: protected virtual void OnPropertyChanged(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the property that has been changed.
    content.vb: Protected Overridable Sub OnPropertyChanged(propertyName As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  id: GetSettingFromSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: GetSettingFromSettingsGroup<T>(ISettingsGroup, String, T)
  nameWithType: FileTypeSettingsBase.GetSettingFromSettingsGroup<T>(ISettingsGroup, String, T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup<T>(Sdl.Core.Settings.ISettingsGroup, System.String, T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nChecks whether the setting exists in the settings group, and retrieves its value (if it exists). If it does\nnot exist, the default value is returned instead.\n"
  syntax:
    content: protected T GetSettingFromSettingsGroup<T>(ISettingsGroup settingsGroup, string settingName, T defaultValue)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group in which the setting should be located.
    - id: settingName
      type: System.String
      description: The name of the setting to retrieve.
    - id: defaultValue
      type: '{T}'
      description: The default value to return if the setting has not been found.
    typeParameters:
    - id: T
      description: "The type of the setting to retrieve. The type must be the same as at the point \nof save, or it will not be found. See <xref href=\"Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup%60%601(Sdl.Core.Settings.ISettingsGroup%2cSystem.String%2c%60%600%2c%60%600)\" data-throw-if-not-resolved=\"false\"></xref>."
    return:
      type: '{T}'
    content.vb: Protected Function GetSettingFromSettingsGroup(Of T)(settingsGroup As ISettingsGroup, settingName As String, defaultValue As T) As T
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup*
  nameWithType.vb: FileTypeSettingsBase.GetSettingFromSettingsGroup(Of T)(ISettingsGroup, String, T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup(Of T)(Sdl.Core.Settings.ISettingsGroup, System.String, T)
  name.vb: GetSettingFromSettingsGroup(Of T)(ISettingsGroup, String, T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0,``0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0,``0)
  id: UpdateSettingInSettingsGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0,``0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: UpdateSettingInSettingsGroup<T>(ISettingsGroup, String, T, T)
  nameWithType: FileTypeSettingsBase.UpdateSettingInSettingsGroup<T>(ISettingsGroup, String, T, T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup<T>(Sdl.Core.Settings.ISettingsGroup, System.String, T, T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nChecks whether the setting exists in the settings group. If the setting does exist, then it \nis updated with the new value; if it does not exist, a new setting is created, but only \nif the value is not the same as the default value (in which case the call is effectively ignored).\n"
  syntax:
    content: protected void UpdateSettingInSettingsGroup<T>(ISettingsGroup settingsGroup, string settingName, T settingValue, T defaultValue)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group in which the setting should be saved.
    - id: settingName
      type: System.String
      description: The name of the setting to save.
    - id: settingValue
      type: '{T}'
      description: The value of the setting to save.
    - id: defaultValue
      type: '{T}'
      description: >-
        The default value of the setting. This is used to prevent creating unnecessary

        settings when the setting to be created is equal to the default value. This does not affect updating a setting,

        it only applies when creating a new one.
    typeParameters:
    - id: T
      description: >-
        The type of the setting to save. The type must be the same as at the point of

        retrieval, or it will not be returned again correctly. See <xref href="Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup%60%601(Sdl.Core.Settings.ISettingsGroup%2cSystem.String%2c%60%600)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Sub UpdateSettingInSettingsGroup(Of T)(settingsGroup As ISettingsGroup, settingName As String, settingValue As T, defaultValue As T)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup*
  nameWithType.vb: FileTypeSettingsBase.UpdateSettingInSettingsGroup(Of T)(ISettingsGroup, String, T, T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup(Of T)(Sdl.Core.Settings.ISettingsGroup, System.String, T, T)
  name.vb: UpdateSettingInSettingsGroup(Of T)(ISettingsGroup, String, T, T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  id: SaveInGroup``1(Sdl.Core.Settings.ISettingsGroup,System.String,``0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: SaveInGroup<T>(ISettingsGroup, String, T)
  nameWithType: FileTypeSettingsBase.SaveInGroup<T>(ISettingsGroup, String, T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup<T>(Sdl.Core.Settings.ISettingsGroup, System.String, T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nChecks whether the setting exists in the settings group. If the setting does exist, then it \nis updated with the new value; if it does not exist, a new setting is created.\n"
  syntax:
    content: protected void SaveInGroup<T>(ISettingsGroup settingsGroup, string settingName, T settingValue)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group in which the setting should be saved.
    - id: settingName
      type: System.String
      description: The name of the setting to save.
    - id: settingValue
      type: '{T}'
      description: The value of the setting to save.
    typeParameters:
    - id: T
      description: >-
        The type of the setting to save. The type must be the same as at the point of

        retrieval, or it will not be returned again correctly. See <xref href="Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup%60%601(Sdl.Core.Settings.ISettingsGroup%2cSystem.String%2c%60%600)" data-throw-if-not-resolved="false"></xref>.
    content.vb: Protected Sub SaveInGroup(Of T)(settingsGroup As ISettingsGroup, settingName As String, settingValue As T)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup*
  nameWithType.vb: FileTypeSettingsBase.SaveInGroup(Of T)(ISettingsGroup, String, T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup(Of T)(Sdl.Core.Settings.ISettingsGroup, System.String, T)
  name.vb: SaveInGroup(Of T)(ISettingsGroup, String, T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.#ctor
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.#ctor
  id: '#ctor'
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: FileTypeSettingsBase()
  nameWithType: FileTypeSettingsBase.FileTypeSettingsBase()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.FileTypeSettingsBase()
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  syntax:
    content: protected FileTypeSettingsBase()
    content.vb: Protected Sub New
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PropertyChanged
  commentId: E:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PropertyChanged
  id: PropertyChanged
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: FileTypeSettingsBase.PropertyChanged
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PropertyChanged
  type: Event
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nAll property setters must fire this event if data binding is to be used. The recommended approach is to use\n<xref href=\"Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.FileTypeSupport.Framework.Core.Settings
  commentId: N:Sdl.FileTypeSupport.Framework.Core.Settings
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.Core.Settings
  nameWithType: Sdl.FileTypeSupport.Framework.Core.Settings
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle
  isExternal: true
  name: PopulateFromSettingsBundle
  nameWithType: FileTypeSettingsBase.PopulateFromSettingsBundle
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.PopulateFromSettingsBundle
- uid: Sdl.Core.Settings.ISettingsBundle
  isExternal: true
  name: ISettingsBundle
  nameWithType: ISettingsBundle
  fullName: Sdl.Core.Settings.ISettingsBundle
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle
  isExternal: true
  name: SaveToSettingsBundle
  nameWithType: FileTypeSettingsBase.SaveToSettingsBundle
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveToSettingsBundle
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults
  isExternal: true
  name: ResetToDefaults
  nameWithType: FileTypeSettingsBase.ResetToDefaults
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.ResetToDefaults
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle
  isExternal: true
  name: SaveDefaultsToSettingsBundle
  nameWithType: FileTypeSettingsBase.SaveDefaultsToSettingsBundle
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveDefaultsToSettingsBundle
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged
  isExternal: true
  name: OnPropertyChanged
  nameWithType: FileTypeSettingsBase.OnPropertyChanged
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.OnPropertyChanged
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup
  isExternal: true
  name: GetSettingFromSettingsGroup
  nameWithType: FileTypeSettingsBase.GetSettingFromSettingsGroup
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.GetSettingFromSettingsGroup
- uid: Sdl.Core.Settings.ISettingsGroup
  isExternal: true
  name: ISettingsGroup
  nameWithType: ISettingsGroup
  fullName: Sdl.Core.Settings.ISettingsGroup
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup
  isExternal: true
  name: UpdateSettingInSettingsGroup
  nameWithType: FileTypeSettingsBase.UpdateSettingInSettingsGroup
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.UpdateSettingInSettingsGroup
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup
  isExternal: true
  name: SaveInGroup
  nameWithType: FileTypeSettingsBase.SaveInGroup
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.SaveInGroup
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.#ctor
  isExternal: true
  name: FileTypeSettingsBase
  nameWithType: FileTypeSettingsBase.FileTypeSettingsBase
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.FileTypeSettingsBase.FileTypeSettingsBase
- uid: System.ComponentModel.PropertyChangedEventHandler
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
