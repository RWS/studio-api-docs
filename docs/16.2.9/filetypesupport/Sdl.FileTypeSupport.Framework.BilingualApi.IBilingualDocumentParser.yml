### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser
  id: IBilingualDocumentParser
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  children:
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction
  langs:
  - csharp
  - vb
  name: IBilingualDocumentParser
  nameWithType: IBilingualDocumentParser
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nParser for intermediate bilingual document formats such as SDL XLIFF,\nwhich are used for persistence of the entire bilingual object model. \n"
  remarks: "\n<p>\nThis interface should not be implemented by parsers that handle content\nfrom a single native input file, even if that content is bilingual (like TTX or ITD).\nSuch parsers should just implement <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: 'public interface IBilingualDocumentParser : IBilingualParser, IParser, IDisposable, IBilingualFileTypeComponent'
    content.vb: >-
      Public Interface IBilingualDocumentParser
          Inherits IBilingualParser, IParser, IDisposable, IBilingualFileTypeComponent
  seealso:
  - linkId: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter
    commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter
  inheritedMembers:
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.DocumentProperties
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.Output
  - Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
  - Sdl.FileTypeSupport.Framework.NativeApi.IParser.Progress
  - System.IDisposable.Dispose
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory
  - Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.MessageReporter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator
  id: DependencyFileLocator
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser
  langs:
  - csharp
  - vb
  name: DependencyFileLocator
  nameWithType: IBilingualDocumentParser.DependencyFileLocator
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nIf specified, this delegate can be used to locate dependency files that are linked, but missing.\n"
  syntax:
    content: DependencyFileLocator DependencyFileLocator { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.BilingualApi.DependencyFileLocator
    content.vb: Property DependencyFileLocator As DependencyFileLocator
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction
  id: FileRestriction
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser
  langs:
  - csharp
  - vb
  name: FileRestriction
  nameWithType: IBilingualDocumentParser.FileRestriction
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nThis property is set by the framework during initialization.\nThe delegate will be invoked to determine which files in a multi-file\ndocument should generate output.\n"
  remarks: "\n<p>\nThe bilingual parser is not required to test this delegate for each\nfile it processes. The framework will invoke the delegate to block\ncontent from files from being propagated through the framework.\nThe delegate is provided through this property to give the \nbilingual parser implementation a chance to optimize its processing\nby directly skipping files who&apos;s content will anyway not be propagated\nthrough the framework.\n</p>\n<p>\nIf this property is <code>null</code> no restrictions apply and all files\nwill be processed.\n</p>\n"
  syntax:
    content: Predicate<IPersistentFileConversionProperties> FileRestriction { get; set; }
    parameters: []
    return:
      type: System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties}
    content.vb: Property FileRestriction As Predicate(Of IPersistentFileConversionProperties)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.FileTypeSupport.Framework.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.DocumentProperties
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.DocumentProperties
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
  isExternal: true
  name: DocumentProperties
  nameWithType: IBilingualParser.DocumentProperties
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.DocumentProperties
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.Output
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.Output
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
  isExternal: true
  name: Output
  nameWithType: IBilingualParser.Output
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser.Output
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IParser
  isExternal: true
  name: ParseNext()
  nameWithType: IParser.ParseNext()
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext()
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
    name: ParseNext
    nameWithType: IParser.ParseNext
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
    name: ParseNext
    nameWithType: IParser.ParseNext
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParser.ParseNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IParser.Progress
  commentId: E:Sdl.FileTypeSupport.Framework.NativeApi.IParser.Progress
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IParser
  isExternal: true
  name: Progress
  nameWithType: IParser.Progress
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParser.Progress
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent
  isExternal: true
  name: ItemFactory
  nameWithType: IBilingualFileTypeComponent.ItemFactory
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.ItemFactory
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.MessageReporter
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.MessageReporter
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent
  isExternal: true
  name: MessageReporter
  nameWithType: IBilingualFileTypeComponent.MessageReporter
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent.MessageReporter
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter
  isExternal: true
  name: IBilingualDocumentFileWriter
  nameWithType: IBilingualDocumentFileWriter
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentFileWriter
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IBilingualParser
  nameWithType: IBilingualParser
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IParser
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.IParser
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: IParser
  nameWithType: IParser
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParser
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IBilingualFileTypeComponent
  nameWithType: IBilingualFileTypeComponent
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualFileTypeComponent
- uid: Sdl.FileTypeSupport.Framework.NativeApi
  commentId: N:Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.NativeApi
  nameWithType: Sdl.FileTypeSupport.Framework.NativeApi
  fullName: Sdl.FileTypeSupport.Framework.NativeApi
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator
  isExternal: true
  name: DependencyFileLocator
  nameWithType: IBilingualDocumentParser.DependencyFileLocator
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.DependencyFileLocator
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.DependencyFileLocator
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.DependencyFileLocator
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: DependencyFileLocator
  nameWithType: DependencyFileLocator
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.DependencyFileLocator
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction
  isExternal: true
  name: FileRestriction
  nameWithType: IBilingualDocumentParser.FileRestriction
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentParser.FileRestriction
- uid: System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties}
  commentId: T:System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IPersistentFileConversionProperties>
  nameWithType: Predicate<IPersistentFileConversionProperties>
  fullName: System.Predicate<Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties>
  nameWithType.vb: Predicate(Of IPersistentFileConversionProperties)
  fullName.vb: System.Predicate(Of Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  name.vb: Predicate(Of IPersistentFileConversionProperties)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    name: IPersistentFileConversionProperties
    nameWithType: IPersistentFileConversionProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    name: IPersistentFileConversionProperties
    nameWithType: IPersistentFileConversionProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
