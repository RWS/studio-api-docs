### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo
  commentId: T:Sdl.DesktopEditor.EditorApi.IRowInfo
  id: IRowInfo
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  - Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition(Sdl.DesktopEditor.EditorApi.IRowInfo)
  - Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode
  - Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions
  - Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs
  - Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges
  - Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor
  - Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore
  - Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor
  - Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition
  - Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition
  - Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor(System.Drawing.Color)
  - Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden
  - Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor
  - Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  - Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment
  - Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible
  - Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow
  - Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer
  - Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow
  - Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph
  - Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph
  - Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber
  - Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter
  - Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer
  - Sdl.DesktopEditor.EditorApi.IRowInfo.Selected
  - Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded
  - Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter
  langs:
  - csharp
  - vb
  name: IRowInfo
  nameWithType: IRowInfo
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<p>\nInformation associated with a row in the edit control. A row is a layout concept that is\nindependent of, but related to, the structure of the document. For example, a row can be related\nto a segment in the document or it could be related to the content between the start of a paragraph\nand the start of the first segment. It could also relate to the content between segments.\n</p>\n<p>\nThe layout engine in the edit control works on a row-by-row basis and will update the layout of\nrows as they become invalid. Rows can also be visible or hidden, depending on different settings\nand display filters, or whether they only contain content that the user should never see (e.g.\nsegment and paragraph tags).\n</p>\n"
  syntax:
    content: public interface IRowInfo
    content.vb: Public Interface IRowInfo
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible
  commentId: M:Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible
  id: IsVisible
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: IsVisible()
  nameWithType: IRowInfo.IsVisible()
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nWhether the row is currently visible or hidden (folded) in the editor.\n"
  remarks: "\n<p>\nTo change the visibility of rows in the control, use <xref href=\"Sdl.DesktopEditor.EditorApi.IEditControl.SetRowsVisibility(System.Predicate%7bSdl.DesktopEditor.EditorApi.IRowInfo%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: bool IsVisible()
    return:
      type: System.Boolean
    content.vb: Function IsVisible As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IEditControl.VisibleRows
    commentId: P:Sdl.DesktopEditor.EditorApi.IEditControl.VisibleRows
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter
  commentId: M:Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter
  id: ScrollToCenter
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: ScrollToCenter()
  nameWithType: IRowInfo.ScrollToCenter()
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nScrolls this row to the vertical center of the visible area in the edit control.\n"
  syntax:
    content: void ScrollToCenter()
    content.vb: Sub ScrollToCenter
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter*
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition(Sdl.DesktopEditor.EditorApi.IRowInfo)
  commentId: M:Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition(Sdl.DesktopEditor.EditorApi.IRowInfo)
  id: AutoScrollToRowPosition(Sdl.DesktopEditor.EditorApi.IRowInfo)
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: AutoScrollToRowPosition(IRowInfo)
  nameWithType: IRowInfo.AutoScrollToRowPosition(IRowInfo)
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition(Sdl.DesktopEditor.EditorApi.IRowInfo)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nScrolls this row to the location of rowAtPosition. Note: This only scrolls if the row position \nwill pass a threshold at the top or bottom of the document. This is used, for example, to prevent \nthe active row from moving to the very bottom of the document while the user is navigating.\n"
  syntax:
    content: void AutoScrollToRowPosition(IRowInfo rowAtPosition)
    parameters:
    - id: rowAtPosition
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
      description: The row at the position that this row will be scrolled to.
    content.vb: Sub AutoScrollToRowPosition(rowAtPosition As IRowInfo)
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition*
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor(System.Drawing.Color)
  commentId: M:Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor(System.Drawing.Color)
  id: GetShadedColor(System.Drawing.Color)
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: GetShadedColor(Color)
  nameWithType: IRowInfo.GetShadedColor(Color)
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor(System.Drawing.Color)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalculates the shading color that will be used for the row taking current settings into account.\nNote that if shading is not applied to the row then the color will be the same as that passed in.\n"
  syntax:
    content: Color GetShadedColor(Color color)
    parameters:
    - id: color
      type: System.Drawing.Color
      description: The color to apply shading settings to.
    return:
      type: System.Drawing.Color
      description: "\nThe shaded color, will be the same if <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"Sdl.DesktopEditor.EditorApi.Shading.NotShaded\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Function GetShadedColor(color As Color) As Color
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor*
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition
  commentId: M:Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition
  id: GetFirstContentPosition
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: GetFirstContentPosition()
  nameWithType: IRowInfo.GetFirstContentPosition()
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReturns the first position in the row that can be used to insert content (this can be used, for example,\nwhen moving the selection to the front of the row).\n"
  syntax:
    content: Position GetFirstContentPosition()
    return:
      type: Sdl.DesktopEditor.EditorApi.Position
    content.vb: Function GetFirstContentPosition As Position
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition*
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition
  commentId: M:Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition
  id: GetLastContentPosition
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: GetLastContentPosition()
  nameWithType: IRowInfo.GetLastContentPosition()
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReturns the last position in the row that can be used to insert content (this can be used, for example,\nwhen moving the selection to the end of the row).\n"
  syntax:
    content: Position GetLastContentPosition()
    return:
      type: Sdl.DesktopEditor.EditorApi.Position
    content.vb: Function GetLastContentPosition As Position
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition*
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter
  id: StartsAfter
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: StartsAfter
  nameWithType: IRowInfo.StartsAfter
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe content of the row starts after this (immutable) node.\n"
  remarks: "\n<p>This is a node that is guaranteed not to change during the lifetime of the \nrow (unlike the actual first node in the row), such as a paragraph or segment start end node.\n</p>\n"
  syntax:
    content: IAbstractContentNode StartsAfter { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
    content.vb: Property StartsAfter As IAbstractContentNode
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore
  id: EndsBefore
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: EndsBefore
  nameWithType: IRowInfo.EndsBefore
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThis node is the &apos;upto&apos; node for the content of the row. \nThe effective row content ends just before this (immutable) node.\n"
  remarks: "\n<p>\nThis is a node that is guaranteed to not change during the lifetime of the\nrow (unlike the actual last node in the row), such as a paragraph or segment start end node.\n</p>\n"
  syntax:
    content: IAbstractContentNode EndsBefore { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
    content.vb: Property EndsBefore As IAbstractContentNode
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber
  id: RowNumber
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: RowNumber
  nameWithType: IRowInfo.RowNumber
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe row number identifies this row in the the layout and is unique to each row in the control.\n"
  remarks: "\n<p>\nRows are numbered sequentially. Not all rows need to be visible at all times,\nwhich could mean that there may be gaps in the visible row numbers for a control.\n</p>\n<p>\nThe row number should be the same for rows with corresponding content ranges\nin different edit controls (e.g. in the source and target controls in a side-by-side\neditor).\n</p>\n"
  syntax:
    content: int RowNumber { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Property RowNumber As Integer
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  id: Active
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: Active
  nameWithType: IRowInfo.Active
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nIndicates if this is the currently active row in the edit control.\nSetting this property changes the active row (there can only be one at any one time).\n"
  remarks: "\n<p>\nThe active row may be shown with a border or a different background color in the edit control.\n</p>\n"
  syntax:
    content: bool Active { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property Active As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.Active*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
    commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  - linkId: Sdl.DesktopEditor.EditorApi.IEditControl.ActiveRow
    commentId: P:Sdl.DesktopEditor.EditorApi.IEditControl.ActiveRow
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  id: Highlighted
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: Highlighted
  nameWithType: IRowInfo.Highlighted
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nIndicates whether this row is highlighted in the edit control.\nSetting this property adds or removes the row from the collection of highlighted rows.\n"
  remarks: "\n<p>\nHighlighted rows may be shown with the <xref href=\"Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedBackColor\" data-throw-if-not-resolved=\"false\"></xref> color.\n</p>\n"
  syntax:
    content: bool Highlighted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property Highlighted As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IRowInfo.Active
    commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  - linkId: Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedRows
    commentId: P:Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedRows
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Selected
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Selected
  id: Selected
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: Selected
  nameWithType: IRowInfo.Selected
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Selected
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nIndicates whether this row is selected in the edit control. Some operations require rows to be\nselected before they can proceed, for example, merging segments. The currently active row in the\nedit control is always treated as selected.\n"
  syntax:
    content: bool Selected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Selected As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.Selected*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded
  id: Shaded
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: Shaded
  nameWithType: IRowInfo.Shaded
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nDetermines whether this row is currently displayed with a shaded background in the editor. Row shading\ntakes the current background color of the row and darkens it slightly.\n"
  syntax:
    content: Shading Shaded { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.Shading
    content.vb: ReadOnly Property Shaded As Shading
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor
  id: EffectiveBackColor
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: EffectiveBackColor
  nameWithType: IRowInfo.EffectiveBackColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nActual background color currently used to display this row in the editor.\n"
  remarks: "\n<p>\nThe effective background color for a row is calculated from the <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor\" data-throw-if-not-resolved=\"false\"></xref>\nand is affected by the <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.Active\" data-throw-if-not-resolved=\"false\"></xref> properties.\n</p>\n"
  syntax:
    content: Color EffectiveBackColor { get; }
    parameters: []
    return:
      type: System.Drawing.Color
    content.vb: ReadOnly Property EffectiveBackColor As Color
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor
  id: FundamentalBackColor
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: FundamentalBackColor
  nameWithType: IRowInfo.FundamentalBackColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe base background color which is used as the row background color if a row is not active, highlighted \nor shaded. This color may be used when calculating the effective background color (e.g. if a row is shaded).\n"
  remarks: "\n<p>\nSetting this property to <xref href=\"System.Drawing.Color.Empty\" data-throw-if-not-resolved=\"false\"></xref> will reset the fundamental\nbackground color to either the default edit control color (if one is available)\nor <xref href=\"System.Drawing.SystemColors.Window\" data-throw-if-not-resolved=\"false\"></xref> otherwise.\n</p>\n"
  syntax:
    content: Color FundamentalBackColor { get; set; }
    parameters: []
    return:
      type: System.Drawing.Color
    content.vb: Property FundamentalBackColor As Color
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor
  id: HighlightBackColor
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: HighlightBackColor
  nameWithType: IRowInfo.HighlightBackColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe background color that is used as the row color when the row has been highlighted. \nThis color may be used when calculating the effective background color.\n"
  remarks: "\n<p>\nIf this property is not explicitly set, the highlighting color is taken from \n<xref href=\"Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedBackColor\" data-throw-if-not-resolved=\"false\"></xref>.  To restore this as the highlighting\ncolor, set this property to <xref href=\"System.Drawing.Color.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: Color HighlightBackColor { get; set; }
    parameters: []
    return:
      type: System.Drawing.Color
    content.vb: Property HighlightBackColor As Color
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions
  id: ContainsRevisions
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: ContainsRevisions
  nameWithType: IRowInfo.ContainsRevisions
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReturns <code>true</code> if this row contains revision information.\n"
  syntax:
    content: bool ContainsRevisions { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ContainsRevisions As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges
  id: ContainsTrackChanges
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: ContainsTrackChanges
  nameWithType: IRowInfo.ContainsTrackChanges
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReturns <code>true</code> if this row contains Track Changes information.\n"
  syntax:
    content: bool ContainsTrackChanges { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ContainsTrackChanges As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs
  id: ContainsTQAs
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: ContainsTQAs
  nameWithType: IRowInfo.ContainsTQAs
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReturns <code>true</code> if this row contains TQA information.\n"
  syntax:
    content: bool ContainsTQAs { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ContainsTQAs As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow
  id: NextVisibleRow
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: NextVisibleRow
  nameWithType: IRowInfo.NextVisibleRow
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nAllows convenient access to the next row that is visible to the user. This is tested\nusing <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: IRowInfo NextVisibleRow { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
    content.vb: ReadOnly Property NextVisibleRow As IRowInfo
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow
  id: PreviousVisibleRow
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: PreviousVisibleRow
  nameWithType: IRowInfo.PreviousVisibleRow
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nAllows convenient access to the preceding that is visible to the user. This is tested\nusing <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: IRowInfo PreviousVisibleRow { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
    content.vb: ReadOnly Property PreviousVisibleRow As IRowInfo
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph
  id: RowAboveIsDifferentParagraph
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: RowAboveIsDifferentParagraph
  nameWithType: IRowInfo.RowAboveIsDifferentParagraph
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nFor visible rows this indicates whether the preceding visible row above this one\nis in a different paragraph.\n"
  remarks: "\n<p>\nThis can be used to determine whether paragraph boundaries should be drawn\nat the top of a custom column for this row.\n</p>\n"
  syntax:
    content: bool RowAboveIsDifferentParagraph { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property RowAboveIsDifferentParagraph As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph
  id: RowBelowIsDifferentParagraph
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: RowBelowIsDifferentParagraph
  nameWithType: IRowInfo.RowBelowIsDifferentParagraph
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nFor visible rows this indicates whether the next visible row, below this one,\nis in a different paragraph.\n"
  remarks: "\n<p>\nThis can be used to determine whether paragraph boundaries should be drawn\nat the bottom of a custom column for this row.\n</p>\n"
  syntax:
    content: bool RowBelowIsDifferentParagraph { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property RowBelowIsDifferentParagraph As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment
  id: IsSegment
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: IsSegment
  nameWithType: IRowInfo.IsSegment
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if this row represents the content of a segment.\n"
  remarks: "\nThe actual segment can be retrieved using the <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  syntax:
    content: bool IsSegment { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsSegment As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer
  id: SegmentContainer
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: SegmentContainer
  nameWithType: IRowInfo.SegmentContainer
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe segment container node associated with this row or <code>null</code> if \nthis is not a row that shows the content of a segment.\n"
  syntax:
    content: ISegmentContainerNode SegmentContainer { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
    content.vb: ReadOnly Property SegmentContainer As ISegmentContainerNode
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer
  id: ParagraphContainer
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: ParagraphContainer
  nameWithType: IRowInfo.ParagraphContainer
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe paragraph container node for the paragraph the content of this\nrow appears inside or <code>null</code> if the row represents content that\ndoes not appear in a paragraph (e.g. file boundaries).\n"
  syntax:
    content: IParagraphUnitContainerNode ParagraphContainer { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IParagraphUnitContainerNode
    content.vb: ReadOnly Property ParagraphContainer As IParagraphUnitContainerNode
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode
  id: ContainsDocumentStartEndNode
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: ContainsDocumentStartEndNode
  nameWithType: IRowInfo.ContainsDocumentStartEndNode
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nWhether the row contains a document (or file) start or end node.  This is\nuseful for folding filters since it is not always easy to discover where\nthese nodes are when working outside of the edit control.\n"
  syntax:
    content: bool ContainsDocumentStartEndNode { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ContainsDocumentStartEndNode As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden
  id: Hidden
  parent: Sdl.DesktopEditor.EditorApi.IRowInfo
  langs:
  - csharp
  - vb
  name: Hidden
  nameWithType: IRowInfo.Hidden
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReturns true if this row has been hidden by a filter\n"
  syntax:
    content: bool Hidden { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Hidden As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible
  isExternal: true
  name: IsVisible
  nameWithType: IRowInfo.IsVisible
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.IsVisible
- uid: Sdl.DesktopEditor.EditorApi.IEditControl.VisibleRows
  commentId: P:Sdl.DesktopEditor.EditorApi.IEditControl.VisibleRows
  parent: Sdl.DesktopEditor.EditorApi.IEditControl
  isExternal: true
  name: VisibleRows
  nameWithType: IEditControl.VisibleRows
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl.VisibleRows
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.DesktopEditor.EditorApi.IEditControl
  commentId: T:Sdl.DesktopEditor.EditorApi.IEditControl
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IEditControl
  nameWithType: IEditControl
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter
  isExternal: true
  name: ScrollToCenter
  nameWithType: IRowInfo.ScrollToCenter
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ScrollToCenter
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition
  isExternal: true
  name: AutoScrollToRowPosition
  nameWithType: IRowInfo.AutoScrollToRowPosition
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.AutoScrollToRowPosition
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo
  commentId: T:Sdl.DesktopEditor.EditorApi.IRowInfo
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IRowInfo
  nameWithType: IRowInfo
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor
  isExternal: true
  name: GetShadedColor
  nameWithType: IRowInfo.GetShadedColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.GetShadedColor
- uid: System.Drawing.Color
  isExternal: true
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition
  isExternal: true
  name: GetFirstContentPosition
  nameWithType: IRowInfo.GetFirstContentPosition
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.GetFirstContentPosition
- uid: Sdl.DesktopEditor.EditorApi.Position
  commentId: T:Sdl.DesktopEditor.EditorApi.Position
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Position
  nameWithType: Position
  fullName: Sdl.DesktopEditor.EditorApi.Position
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition
  isExternal: true
  name: GetLastContentPosition
  nameWithType: IRowInfo.GetLastContentPosition
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.GetLastContentPosition
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter
  isExternal: true
  name: StartsAfter
  nameWithType: IRowInfo.StartsAfter
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.StartsAfter
- uid: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
  commentId: T:Sdl.DesktopEditor.EditorApi.IAbstractContentNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IAbstractContentNode
  nameWithType: IAbstractContentNode
  fullName: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore
  isExternal: true
  name: EndsBefore
  nameWithType: IRowInfo.EndsBefore
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.EndsBefore
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber
  isExternal: true
  name: RowNumber
  nameWithType: IRowInfo.RowNumber
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Active*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  isExternal: true
  name: Active
  nameWithType: IRowInfo.Active
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Active
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IEditControl.ActiveRow
  commentId: P:Sdl.DesktopEditor.EditorApi.IEditControl.ActiveRow
  parent: Sdl.DesktopEditor.EditorApi.IEditControl
  isExternal: true
  name: ActiveRow
  nameWithType: IEditControl.ActiveRow
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl.ActiveRow
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
  isExternal: true
  name: Highlighted
  nameWithType: IRowInfo.Highlighted
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Highlighted
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  commentId: P:Sdl.DesktopEditor.EditorApi.IRowInfo.Active
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedRows
  commentId: P:Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedRows
  parent: Sdl.DesktopEditor.EditorApi.IEditControl
  isExternal: true
  name: HighlightedRows
  nameWithType: IEditControl.HighlightedRows
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl.HighlightedRows
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Selected*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.Selected
  isExternal: true
  name: Selected
  nameWithType: IRowInfo.Selected
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Selected
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded
  isExternal: true
  name: Shaded
  nameWithType: IRowInfo.Shaded
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Shaded
- uid: Sdl.DesktopEditor.EditorApi.Shading
  commentId: T:Sdl.DesktopEditor.EditorApi.Shading
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Shading
  nameWithType: Shading
  fullName: Sdl.DesktopEditor.EditorApi.Shading
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor
  isExternal: true
  name: EffectiveBackColor
  nameWithType: IRowInfo.EffectiveBackColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.EffectiveBackColor
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor
  isExternal: true
  name: FundamentalBackColor
  nameWithType: IRowInfo.FundamentalBackColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.FundamentalBackColor
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor
  isExternal: true
  name: HighlightBackColor
  nameWithType: IRowInfo.HighlightBackColor
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.HighlightBackColor
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions
  isExternal: true
  name: ContainsRevisions
  nameWithType: IRowInfo.ContainsRevisions
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsRevisions
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges
  isExternal: true
  name: ContainsTrackChanges
  nameWithType: IRowInfo.ContainsTrackChanges
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTrackChanges
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs
  isExternal: true
  name: ContainsTQAs
  nameWithType: IRowInfo.ContainsTQAs
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsTQAs
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow
  isExternal: true
  name: NextVisibleRow
  nameWithType: IRowInfo.NextVisibleRow
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.NextVisibleRow
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow
  isExternal: true
  name: PreviousVisibleRow
  nameWithType: IRowInfo.PreviousVisibleRow
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.PreviousVisibleRow
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph
  isExternal: true
  name: RowAboveIsDifferentParagraph
  nameWithType: IRowInfo.RowAboveIsDifferentParagraph
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.RowAboveIsDifferentParagraph
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph
  isExternal: true
  name: RowBelowIsDifferentParagraph
  nameWithType: IRowInfo.RowBelowIsDifferentParagraph
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.RowBelowIsDifferentParagraph
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment
  isExternal: true
  name: IsSegment
  nameWithType: IRowInfo.IsSegment
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.IsSegment
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer
  isExternal: true
  name: SegmentContainer
  nameWithType: IRowInfo.SegmentContainer
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.SegmentContainer
- uid: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
  commentId: T:Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ISegmentContainerNode
  nameWithType: ISegmentContainerNode
  fullName: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer
  isExternal: true
  name: ParagraphContainer
  nameWithType: IRowInfo.ParagraphContainer
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ParagraphContainer
- uid: Sdl.DesktopEditor.EditorApi.IParagraphUnitContainerNode
  commentId: T:Sdl.DesktopEditor.EditorApi.IParagraphUnitContainerNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IParagraphUnitContainerNode
  nameWithType: IParagraphUnitContainerNode
  fullName: Sdl.DesktopEditor.EditorApi.IParagraphUnitContainerNode
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode
  isExternal: true
  name: ContainsDocumentStartEndNode
  nameWithType: IRowInfo.ContainsDocumentStartEndNode
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.ContainsDocumentStartEndNode
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden
  isExternal: true
  name: Hidden
  nameWithType: IRowInfo.Hidden
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo.Hidden
