### YamlMime:ManagedReference
items:
- uid: Sdl.Common.Licensing.AppSupport.Product
  commentId: T:Sdl.Common.Licensing.AppSupport.Product
  id: Product
  parent: Sdl.Common.Licensing.AppSupport
  children:
  - Sdl.Common.Licensing.AppSupport.Product.#ctor
  - Sdl.Common.Licensing.AppSupport.Product.CompanyName
  - Sdl.Common.Licensing.AppSupport.Product.Description
  - Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix
  - Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures
  - Sdl.Common.Licensing.AppSupport.Product.LicenseFileName
  - Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate
  - Sdl.Common.Licensing.AppSupport.Product.LicenseTypes
  - Sdl.Common.Licensing.AppSupport.Product.LicenseVersion
  - Sdl.Common.Licensing.AppSupport.Product.Name
  - Sdl.Common.Licensing.AppSupport.Product.ShortName
  langs:
  - csharp
  - vb
  name: Product
  nameWithType: Product
  fullName: Sdl.Common.Licensing.AppSupport.Product
  type: Class
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public class Product
    content.vb: Public Class Product
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Common.Licensing.AppSupport.Product.#ctor
  commentId: M:Sdl.Common.Licensing.AppSupport.Product.#ctor
  id: '#ctor'
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: Product()
  nameWithType: Product.Product()
  fullName: Sdl.Common.Licensing.AppSupport.Product.Product()
  type: Constructor
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public Product()
    content.vb: Public Sub New
  overload: Sdl.Common.Licensing.AppSupport.Product.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.CompanyName
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.CompanyName
  id: CompanyName
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: CompanyName
  nameWithType: Product.CompanyName
  fullName: Sdl.Common.Licensing.AppSupport.Product.CompanyName
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe company name used in various licensing registry keys and folder path names\n"
  syntax:
    content: public string CompanyName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CompanyName As String
  overload: Sdl.Common.Licensing.AppSupport.Product.CompanyName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.Name
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.Name
  id: Name
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Product.Name
  fullName: Sdl.Common.Licensing.AppSupport.Product.Name
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe full name of the application \n"
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Sdl.Common.Licensing.AppSupport.Product.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.ShortName
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.ShortName
  id: ShortName
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: ShortName
  nameWithType: Product.ShortName
  fullName: Sdl.Common.Licensing.AppSupport.Product.ShortName
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe shortened name of the application. This must be the same as the prefix on the product license definitions\non the EMS. Also used in folder and filenames. E.g. the license file\n"
  syntax:
    content: public string ShortName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ShortName As String
  overload: Sdl.Common.Licensing.AppSupport.Product.ShortName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix
  id: LicenseDefinitionPrefix
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: LicenseDefinitionPrefix
  nameWithType: Product.LicenseDefinitionPrefix
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe prefix used on all license definitions for this product\n"
  syntax:
    content: public string LicenseDefinitionPrefix { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LicenseDefinitionPrefix As String
  overload: Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseFileName
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.LicenseFileName
  id: LicenseFileName
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: LicenseFileName
  nameWithType: Product.LicenseFileName
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseFileName
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe license filename (including extension)\n"
  syntax:
    content: public string LicenseFileName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LicenseFileName As String
  overload: Sdl.Common.Licensing.AppSupport.Product.LicenseFileName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.Description
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.Description
  id: Description
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Product.Description
  fullName: Sdl.Common.Licensing.AppSupport.Product.Description
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nShort description of the application shown in the licensing UI\n"
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: Sdl.Common.Licensing.AppSupport.Product.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseVersion
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.LicenseVersion
  id: LicenseVersion
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: LicenseVersion
  nameWithType: Product.LicenseVersion
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseVersion
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe version used for the features in the product license definition features. Also used in folder and file names.\n"
  syntax:
    content: public string LicenseVersion { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LicenseVersion As String
  overload: Sdl.Common.Licensing.AppSupport.Product.LicenseVersion*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseTypes
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.LicenseTypes
  id: LicenseTypes
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: LicenseTypes
  nameWithType: Product.LicenseTypes
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseTypes
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe license definition type names (also known as product edition features)\nThese must be identical to the corresponding EMS feature names\n"
  syntax:
    content: public List<KeyValuePair<int, string>> LicenseTypes { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}}
    content.vb: Public Property LicenseTypes As List(Of KeyValuePair(Of Integer, String))
  overload: Sdl.Common.Licensing.AppSupport.Product.LicenseTypes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures
  id: LicenseFeatures
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: LicenseFeatures
  nameWithType: Product.LicenseFeatures
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe license definition feature names. These must be identical to the corresponding EMS feature names\n"
  syntax:
    content: public List<KeyValuePair<int, string>> LicenseFeatures { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}}
    content.vb: Public Property LicenseFeatures As List(Of KeyValuePair(Of Integer, String))
  overload: Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate
  commentId: P:Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate
  id: LicenseSummaryDelegate
  parent: Sdl.Common.Licensing.AppSupport.Product
  langs:
  - csharp
  - vb
  name: LicenseSummaryDelegate
  nameWithType: Product.LicenseSummaryDelegate
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nDelegate used to obtain the UI license descriptions from the application\n"
  syntax:
    content: public LicenseSummaryDelegate LicenseSummaryDelegate { get; set; }
    parameters: []
    return:
      type: Sdl.Common.Licensing.AppSupport.LicenseSummaryDelegate
    content.vb: Public Property LicenseSummaryDelegate As LicenseSummaryDelegate
  overload: Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Common.Licensing.AppSupport
  commentId: N:Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: Sdl.Common.Licensing.AppSupport
  nameWithType: Sdl.Common.Licensing.AppSupport
  fullName: Sdl.Common.Licensing.AppSupport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Common.Licensing.AppSupport.Product.#ctor*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.#ctor
  isExternal: true
  name: Product
  nameWithType: Product.Product
  fullName: Sdl.Common.Licensing.AppSupport.Product.Product
- uid: Sdl.Common.Licensing.AppSupport.Product.CompanyName*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.CompanyName
  isExternal: true
  name: CompanyName
  nameWithType: Product.CompanyName
  fullName: Sdl.Common.Licensing.AppSupport.Product.CompanyName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Common.Licensing.AppSupport.Product.Name*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.Name
  isExternal: true
  name: Name
  nameWithType: Product.Name
  fullName: Sdl.Common.Licensing.AppSupport.Product.Name
- uid: Sdl.Common.Licensing.AppSupport.Product.ShortName*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.ShortName
  isExternal: true
  name: ShortName
  nameWithType: Product.ShortName
  fullName: Sdl.Common.Licensing.AppSupport.Product.ShortName
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix
  isExternal: true
  name: LicenseDefinitionPrefix
  nameWithType: Product.LicenseDefinitionPrefix
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseDefinitionPrefix
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseFileName*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.LicenseFileName
  isExternal: true
  name: LicenseFileName
  nameWithType: Product.LicenseFileName
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseFileName
- uid: Sdl.Common.Licensing.AppSupport.Product.Description*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.Description
  isExternal: true
  name: Description
  nameWithType: Product.Description
  fullName: Sdl.Common.Licensing.AppSupport.Product.Description
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseVersion*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.LicenseVersion
  isExternal: true
  name: LicenseVersion
  nameWithType: Product.LicenseVersion
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseVersion
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseTypes*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.LicenseTypes
  isExternal: true
  name: LicenseTypes
  nameWithType: Product.LicenseTypes
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseTypes
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<Int32, String>>
  nameWithType: List<KeyValuePair<Int32, String>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.Int32, System.String>>
  nameWithType.vb: List(Of KeyValuePair(Of Int32, String))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of System.Int32, System.String))
  name.vb: List(Of KeyValuePair(Of Int32, String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures
  isExternal: true
  name: LicenseFeatures
  nameWithType: Product.LicenseFeatures
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseFeatures
- uid: Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate
  isExternal: true
  name: LicenseSummaryDelegate
  nameWithType: Product.LicenseSummaryDelegate
  fullName: Sdl.Common.Licensing.AppSupport.Product.LicenseSummaryDelegate
- uid: Sdl.Common.Licensing.AppSupport.LicenseSummaryDelegate
  commentId: T:Sdl.Common.Licensing.AppSupport.LicenseSummaryDelegate
  parent: Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: LicenseSummaryDelegate
  nameWithType: LicenseSummaryDelegate
  fullName: Sdl.Common.Licensing.AppSupport.LicenseSummaryDelegate
