### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  commentId: T:Sdl.DesktopEditor.EditorApi.IUndoBuffer
  id: IUndoBuffer
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand(Sdl.DesktopEditor.EditorApi.IUndoCommand)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation(System.String)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation(System.String)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.ContentChanged
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple(System.Int64)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple(System.Int64)
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName
  - Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames
  langs:
  - csharp
  - vb
  name: IUndoBuffer
  nameWithType: IUndoBuffer
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nInformation about the undo/redo commands for content changes in the edit control.\n"
  remarks: "\n<p>\nAll operations that change the content of the edit control are inserted in the undo buffer.\n</p>\n<p>\nOnce the Undo command for an operation is executed the operation can be re-executed through the Redo command,\nhowever if an other edit operation is performed all Redo operations are removed from the buffer and can no longer\nbe executed.\n</p>\n"
  syntax:
    content: public interface IUndoBuffer
    content.vb: Public Interface IUndoBuffer
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand(Sdl.DesktopEditor.EditorApi.IUndoCommand)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand(Sdl.DesktopEditor.EditorApi.IUndoCommand)
  id: AddCommand(Sdl.DesktopEditor.EditorApi.IUndoCommand)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: AddCommand(IUndoCommand)
  nameWithType: IUndoBuffer.AddCommand(IUndoCommand)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand(Sdl.DesktopEditor.EditorApi.IUndoCommand)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nAdds the command to the undo buffer.\n"
  syntax:
    content: void AddCommand(IUndoCommand command)
    parameters:
    - id: command
      type: Sdl.DesktopEditor.EditorApi.IUndoCommand
      description: The command to add to the buffer.
    content.vb: Sub AddCommand(command As IUndoCommand)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation(System.String)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation(System.String)
  id: BeginCommonCompositeOperation(System.String)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: BeginCommonCompositeOperation(String)
  nameWithType: IUndoBuffer.BeginCommonCompositeOperation(String)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation(System.String)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCreates a composite command in the undo buffer, wrapping all commands in both the source and target into\none command common to both controls.\nThis should only be used for operations where the document structure for both source and target may \nchange without controls getting to know about it (e.g. when splitting and merging segments).\n"
  remarks: "\nEach call to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref> should have a corresponding call to \n<xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> to mark the end of the operation.\n"
  syntax:
    content: void BeginCommonCompositeOperation(string operationName)
    parameters:
    - id: operationName
      type: System.String
      description: User-friendly name of the operation or <code>null</code> if none.
    content.vb: Sub BeginCommonCompositeOperation(operationName As String)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation
  id: EndCommonCompositeOperation
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: EndCommonCompositeOperation()
  nameWithType: IUndoBuffer.EndCommonCompositeOperation()
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCloses a composite command in the undo buffer that was started with <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis should only be used for operations where the document structure for both source and target may \nchange without controls getting to know about it (e.g. when splitting and merging segments).\n"
  syntax:
    content: void EndCommonCompositeOperation()
    content.vb: Sub
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)
  id: BeginCompositeOperation(System.String)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: BeginCompositeOperation(String)
  nameWithType: IUndoBuffer.BeginCompositeOperation(String)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nInitiates a composite operation that should be treated as one unit during Undo and Redo.\n"
  remarks: "\n<p>\nEach call to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref> should have a corresponding call\nto <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> (or <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>) to mark the end \nof the composite operation.\n</p>\n<p>\nFor nested composite operations only the &quot;outermost&quot; operation (i.e. the one that was initiated\nfirst) will be effectively used and named (since all parts of it should be treated as one unit, \nwhether those parts are themselves composite operations or not).\n</p>\n"
  syntax:
    content: void BeginCompositeOperation(string operationName)
    parameters:
    - id: operationName
      type: System.String
      description: User friendly name of the operation, or <code>null</code> if none.
    content.vb: Sub BeginCompositeOperation(operationName As String)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation(System.String)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation(System.String)
  id: BeginCompositeOperationExtendingLastOperation(System.String)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: BeginCompositeOperationExtendingLastOperation(String)
  nameWithType: IUndoBuffer.BeginCompositeOperationExtendingLastOperation(String)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation(System.String)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nBegin a composite operation extending the last edit operation in the history.\nThe last operation executed will be removed from the history and added to this\ncomposite operation.\n"
  remarks: "\n<p>\nThis is used, for example, to merge a segment status change with the content change operation\nthat triggered it.\n</p>\n"
  syntax:
    content: void BeginCompositeOperationExtendingLastOperation(string commandName)
    parameters:
    - id: commandName
      type: System.String
      description: User friendly name of the operation, or <code>null</code> if none.
    content.vb: Sub BeginCompositeOperationExtendingLastOperation(commandName As String)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation
  id: EndCompositeOperation
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: EndCompositeOperation()
  nameWithType: IUndoBuffer.EndCompositeOperation()
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMarks the successful end of a composite operation that was initiated with <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: void EndCompositeOperation()
    content.vb: Sub
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  id: AbortCompositeOperation(System.String)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: AbortCompositeOperation(String)
  nameWithType: IUndoBuffer.AbortCompositeOperation(String)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nFlags the composite operation for aborting. This call should match a preceding \ncall to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>. Once all currently nested composite operations\nhave been ended the entire composite command will be rolled back and removed from the undo buffer. \nThe associated message will be passed to the <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted\" data-throw-if-not-resolved=\"false\"></xref> event,\nand may be shown to the user to indicate why the operation was not allowed.\n"
  remarks: "\n<p>You may want to check the <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> property before calling this method,\nin order to determine if the operation is already being aborted (in which case you should not abort it again, as\nthat may overwrite the original message to the user with something that may not be the root cause of the problem).</p>\n<p>\nThe original call to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref> should always be matched with either a call to\n<xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> or a call to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, never both.\n</p>\n<p>\nAfter calling this method you may also want to throw an exception, to properly abort other related processing.\n</p>\n"
  syntax:
    content: void AbortCompositeOperation(string message)
    parameters:
    - id: message
      type: System.String
      description: >
        A message explaining to the user why the operation was not permitted.

        <p>

        If an operation is already flagged for aborting you can get the current message from the

        <xref href="Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage" data-throw-if-not-resolved="false"></xref> property.

        </p>
    content.vb: Sub AbortCompositeOperation(message As String)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush
  id: Flush
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: IUndoBuffer.Flush()
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nRemove all operations from the buffer.\n"
  remarks: This operation cannot be undone :-)
  syntax:
    content: void Flush()
    content.vb: Sub Flush
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple(System.Int64)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple(System.Int64)
  id: UndoMultiple(System.Int64)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: UndoMultiple(Int64)
  nameWithType: IUndoBuffer.UndoMultiple(Int64)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple(System.Int64)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nExecute multiple undo operations in one go.\n"
  remarks: "\n<p>\nIf a control is available it is preferable to execute undo and redo operations through the control \ninstead, as that will move the selection in the control to the correct location too.\n</p>\n"
  syntax:
    content: void UndoMultiple(long count)
    parameters:
    - id: count
      type: System.Int64
      description: "The number of operations to undo. This must be a number between 0 and the \nvalue of <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount\" data-throw-if-not-resolved=\"false\"></xref>."
    content.vb: Sub UndoMultiple(count As Long)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple(System.Int64)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple(System.Int64)
  id: RedoMultiple(System.Int64)
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: RedoMultiple(Int64)
  nameWithType: IUndoBuffer.RedoMultiple(Int64)
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple(System.Int64)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nExecute multiple redo operations in one go.\n"
  remarks: "\n<p>\nIf a control is available it is preferable to execute undo and redo operations through the control \ninstead, as that will move the selection in the control to the correct location too.\n</p>\n"
  syntax:
    content: void RedoMultiple(long count)
    parameters:
    - id: count
      type: System.Int64
      description: "The number of operations to redo. This must be a number between 0 and the \nvalue of <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount\" data-throw-if-not-resolved=\"false\"></xref>."
    content.vb: Sub RedoMultiple(count As Long)
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple*
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo
  id: CanRedo
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: CanRedo
  nameWithType: IUndoBuffer.CanRedo
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if there is at least one operation in the buffer that can be re-done\n(after an Undo operation).\n"
  syntax:
    content: bool CanRedo { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanRedo As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo
  id: CanUndo
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: CanUndo
  nameWithType: IUndoBuffer.CanUndo
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if there is at least one operation in the buffer that can be un-done.\n"
  syntax:
    content: bool CanUndo { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanUndo As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource
  id: IsSource
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: IsSource
  nameWithType: IUndoBuffer.IsSource
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nFlag to determine if buffer is in source mode. If true, all added commands get the IsSource flag set.\n"
  syntax:
    content: bool IsSource { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsSource As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource
  id: UndoOperationIsSource
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: UndoOperationIsSource
  nameWithType: IUndoBuffer.UndoOperationIsSource
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nUsed in SideBySide editor to determine which control to use\n"
  syntax:
    content: bool UndoOperationIsSource { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property UndoOperationIsSource As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource
  id: RedoOperationIsSource
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: RedoOperationIsSource
  nameWithType: IUndoBuffer.RedoOperationIsSource
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nUsed in SideBySide editor to determine which control to use\n"
  syntax:
    content: bool RedoOperationIsSource { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property RedoOperationIsSource As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName
  id: UndoOperationName
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: UndoOperationName
  nameWithType: IUndoBuffer.UndoOperationName
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe name of the next operation that can be un-done, <code>null</code> if none, or an\nempty string if the operation has not been named.\n"
  syntax:
    content: string UndoOperationName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property UndoOperationName As String
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName
  id: RedoOperationName
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: RedoOperationName
  nameWithType: IUndoBuffer.RedoOperationName
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe name of the next operation that can be re-done, <code>null</code> if none, or an\nempty string if the operation has not been named.\n"
  syntax:
    content: string RedoOperationName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property RedoOperationName As String
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames
  id: UndoOperationNames
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: UndoOperationNames
  nameWithType: IUndoBuffer.UndoOperationNames
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nA list of all operations that can be un-done. \n"
  remarks: "\n<p>\nThe number of strings returned always correspond to the number of available undo operations.\nOperations that are not named show up as null or an empty string in the list.\n</p>\n<p>\nThe next undo operation is first in the list.\n</p>\n<p>\nThis can be used to implement a visual list of undo operations. You can call <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> to execute\nseveral undo operations in one go.\n</p>\n"
  syntax:
    content: string[] UndoOperationNames { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: ReadOnly Property UndoOperationNames As String()
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
    commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  id: RedoOperationNames
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: RedoOperationNames
  nameWithType: IUndoBuffer.RedoOperationNames
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nA list of all operations that can be re-done. \n"
  remarks: "\n<p>\nThe number of strings returned always correspond to the number of available redo operations.\nOperations that are not named show up as null or an empty string in the list.\n</p>\n<p>\nThe next redo operation is first in the list.\n</p>\n<p>\nThis can be used to implement a visual list of redo operations. You can call <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> to execute\nseveral redo operations in one go.\n</p>\n"
  syntax:
    content: string[] RedoOperationNames { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: ReadOnly Property RedoOperationNames As String()
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
    commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count
  id: Count
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: IUndoBuffer.Count
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nTotal number of undo plus redo operations in the buffer.\n"
  syntax:
    content: long Count { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property Count As Long
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount
  id: UndoOperationCount
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: UndoOperationCount
  nameWithType: IUndoBuffer.UndoOperationCount
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe number of operations that can be un-done.\n"
  syntax:
    content: long UndoOperationCount { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property UndoOperationCount As Long
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount
  id: RedoOperationCount
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: RedoOperationCount
  nameWithType: IUndoBuffer.RedoOperationCount
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe number of operations that can be re-done.\n"
  syntax:
    content: long RedoOperationCount { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: ReadOnly Property RedoOperationCount As Long
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  id: IsAbortingCompositeOperation
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: IsAbortingCompositeOperation
  nameWithType: IUndoBuffer.IsAbortingCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if the current composite operation is flagged for aborting.\n"
  remarks: "\n<p>If this is <code>true</code> the reason the operation is being aborted\ncan be retrieved from the <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: bool IsAbortingCompositeOperation { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsAbortingCompositeOperation As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
    commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage
  id: AbortMessage
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: AbortMessage
  nameWithType: IUndoBuffer.AbortMessage
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nWhen a composite operation is being aborted this property contains the message\nthat explains to the user why the operation is not permitted.\n"
  syntax:
    content: string AbortMessage { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property AbortMessage As String
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
    commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  - linkId: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
    commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating
  id: IsCurrentlyOperating
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: IsCurrentlyOperating
  nameWithType: IUndoBuffer.IsCurrentlyOperating
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nFlag that determines whether the undo buffer is currently in operation so that external operations\ncan ignore changes, etc.\n"
  syntax:
    content: bool IsCurrentlyOperating { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsCurrentlyOperating As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.ContentChanged
  commentId: E:Sdl.DesktopEditor.EditorApi.IUndoBuffer.ContentChanged
  id: ContentChanged
  parent: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  langs:
  - csharp
  - vb
  name: ContentChanged
  nameWithType: IUndoBuffer.ContentChanged
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.ContentChanged
  type: Event
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nRaised when content of the Undo buffer changes in any way.\n"
  syntax:
    content: event EventHandler<UndoBufferContentChangedEventArgs> ContentChanged
    return:
      type: System.EventHandler{Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs}
    content.vb: Event ContentChanged As EventHandler(Of UndoBufferContentChangedEventArgs)
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand
  isExternal: true
  name: AddCommand
  nameWithType: IUndoBuffer.AddCommand
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AddCommand
- uid: Sdl.DesktopEditor.EditorApi.IUndoCommand
  commentId: T:Sdl.DesktopEditor.EditorApi.IUndoCommand
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IUndoCommand
  nameWithType: IUndoCommand
  fullName: Sdl.DesktopEditor.EditorApi.IUndoCommand
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation
  isExternal: true
  name: BeginCommonCompositeOperation
  nameWithType: IUndoBuffer.BeginCommonCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCommonCompositeOperation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation
  isExternal: true
  name: EndCommonCompositeOperation
  nameWithType: IUndoBuffer.EndCommonCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCommonCompositeOperation
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation
  isExternal: true
  name: BeginCompositeOperation
  nameWithType: IUndoBuffer.BeginCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation
  isExternal: true
  name: BeginCompositeOperationExtendingLastOperation
  nameWithType: IUndoBuffer.BeginCompositeOperationExtendingLastOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperationExtendingLastOperation
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation
  isExternal: true
  name: EndCompositeOperation
  nameWithType: IUndoBuffer.EndCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation
  isExternal: true
  name: AbortCompositeOperation
  nameWithType: IUndoBuffer.AbortCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush
  isExternal: true
  name: Flush
  nameWithType: IUndoBuffer.Flush
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Flush
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple
  isExternal: true
  name: UndoMultiple
  nameWithType: IUndoBuffer.UndoMultiple
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoMultiple
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple
  isExternal: true
  name: RedoMultiple
  nameWithType: IUndoBuffer.RedoMultiple
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoMultiple
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo
  isExternal: true
  name: CanRedo
  nameWithType: IUndoBuffer.CanRedo
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanRedo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo
  isExternal: true
  name: CanUndo
  nameWithType: IUndoBuffer.CanUndo
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.CanUndo
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource
  isExternal: true
  name: IsSource
  nameWithType: IUndoBuffer.IsSource
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsSource
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource
  isExternal: true
  name: UndoOperationIsSource
  nameWithType: IUndoBuffer.UndoOperationIsSource
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationIsSource
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource
  isExternal: true
  name: RedoOperationIsSource
  nameWithType: IUndoBuffer.RedoOperationIsSource
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationIsSource
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName
  isExternal: true
  name: UndoOperationName
  nameWithType: IUndoBuffer.UndoOperationName
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationName
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName
  isExternal: true
  name: RedoOperationName
  nameWithType: IUndoBuffer.RedoOperationName
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationName
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames
  isExternal: true
  name: UndoOperationNames
  nameWithType: IUndoBuffer.UndoOperationNames
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationNames
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  isExternal: true
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
  isExternal: true
  name: RedoOperationNames
  nameWithType: IUndoBuffer.RedoOperationNames
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationNames
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count
  isExternal: true
  name: Count
  nameWithType: IUndoBuffer.Count
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.Count
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount
  isExternal: true
  name: UndoOperationCount
  nameWithType: IUndoBuffer.UndoOperationCount
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.UndoOperationCount
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount
  isExternal: true
  name: RedoOperationCount
  nameWithType: IUndoBuffer.RedoOperationCount
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.RedoOperationCount
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  isExternal: true
  name: IsAbortingCompositeOperation
  nameWithType: IUndoBuffer.IsAbortingCompositeOperation
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  commentId: M:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage
  isExternal: true
  name: AbortMessage
  nameWithType: IUndoBuffer.AbortMessage
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortMessage
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  commentId: P:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsAbortingCompositeOperation
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating
  isExternal: true
  name: IsCurrentlyOperating
  nameWithType: IUndoBuffer.IsCurrentlyOperating
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer.IsCurrentlyOperating
- uid: System.EventHandler{Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs}
  commentId: T:System.EventHandler{Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<UndoBufferContentChangedEventArgs>
  nameWithType: EventHandler<UndoBufferContentChangedEventArgs>
  fullName: System.EventHandler<Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs>
  nameWithType.vb: EventHandler(Of UndoBufferContentChangedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs)
  name.vb: EventHandler(Of UndoBufferContentChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs
    name: UndoBufferContentChangedEventArgs
    nameWithType: UndoBufferContentChangedEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs
    name: UndoBufferContentChangedEventArgs
    nameWithType: UndoBufferContentChangedEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.UndoBufferContentChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
