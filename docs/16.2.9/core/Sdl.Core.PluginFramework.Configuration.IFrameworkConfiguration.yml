### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  commentId: T:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  id: IFrameworkConfiguration
  parent: Sdl.Core.PluginFramework.Configuration
  children:
  - Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions
  - Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions
  - Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  - Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled
  - Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  langs:
  - csharp
  - vb
  name: IFrameworkConfiguration
  nameWithType: IFrameworkConfiguration
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Configuration
  syntax:
    content: public interface IFrameworkConfiguration
    content.vb: Public Interface IFrameworkConfiguration
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions
  commentId: P:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions
  id: ProductVersions
  parent: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  langs:
  - csharp
  - vb
  name: ProductVersions
  nameWithType: IFrameworkConfiguration.ProductVersions
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Configuration
  summary: "\nGets the installed product versions.\n"
  syntax:
    content: Dictionary<string, Version> ProductVersions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Version}
    content.vb: ReadOnly Property ProductVersions As Dictionary(Of String, Version)
  overload: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions
  commentId: P:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions
  id: ApiVersions
  parent: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  langs:
  - csharp
  - vb
  name: ApiVersions
  nameWithType: IFrameworkConfiguration.ApiVersions
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Configuration
  summary: "\nGets the installed API versions.\n"
  syntax:
    content: Dictionary<string, Version> ApiVersions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Version}
    content.vb: ReadOnly Property ApiVersions As Dictionary(Of String, Version)
  overload: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled
  commentId: P:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled
  id: ThirdPartyPluginsEnabled
  parent: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  langs:
  - csharp
  - vb
  name: ThirdPartyPluginsEnabled
  nameWithType: IFrameworkConfiguration.ThirdPartyPluginsEnabled
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Configuration
  summary: "\nGets or sets if third-party plugins are enabled.\n"
  syntax:
    content: bool ThirdPartyPluginsEnabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property ThirdPartyPluginsEnabled As Boolean
  overload: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  commentId: P:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  id: ThirdPartyPluginsRelativePath
  parent: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  langs:
  - csharp
  - vb
  name: ThirdPartyPluginsRelativePath
  nameWithType: IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Configuration
  summary: "\nGets or sets the configured third-party plugin-root folder\n"
  syntax:
    content: string ThirdPartyPluginsRelativePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ThirdPartyPluginsRelativePath As String
  overload: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  commentId: P:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  id: ThirdPartyPluginPackagesRelativePath
  parent: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration
  langs:
  - csharp
  - vb
  name: ThirdPartyPluginPackagesRelativePath
  nameWithType: IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Configuration
  summary: "\nGets or sets the configured third-party package storage folder\n"
  syntax:
    content: string ThirdPartyPluginPackagesRelativePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ThirdPartyPluginPackagesRelativePath As String
  overload: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework.Configuration
  commentId: N:Sdl.Core.PluginFramework.Configuration
  isExternal: true
  name: Sdl.Core.PluginFramework.Configuration
  nameWithType: Sdl.Core.PluginFramework.Configuration
  fullName: Sdl.Core.PluginFramework.Configuration
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions*
  commentId: Overload:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions
  isExternal: true
  name: ProductVersions
  nameWithType: IFrameworkConfiguration.ProductVersions
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ProductVersions
- uid: System.Collections.Generic.Dictionary{System.String,System.Version}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Version}'
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Version>
  nameWithType: Dictionary<String, Version>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Version>
  nameWithType.vb: Dictionary(Of String, Version)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Version)
  name.vb: Dictionary(Of String, Version)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions*
  commentId: Overload:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions
  isExternal: true
  name: ApiVersions
  nameWithType: IFrameworkConfiguration.ApiVersions
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ApiVersions
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled*
  commentId: Overload:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled
  isExternal: true
  name: ThirdPartyPluginsEnabled
  nameWithType: IFrameworkConfiguration.ThirdPartyPluginsEnabled
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath*
  commentId: Overload:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  isExternal: true
  name: ThirdPartyPluginsRelativePath
  nameWithType: IFrameworkConfiguration.ThirdPartyPluginsRelativePath
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginsRelativePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath*
  commentId: Overload:Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  isExternal: true
  name: ThirdPartyPluginPackagesRelativePath
  nameWithType: IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
  fullName: Sdl.Core.PluginFramework.Configuration.IFrameworkConfiguration.ThirdPartyPluginPackagesRelativePath
