### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.IPluginInitializer
  commentId: T:Sdl.Core.PluginFramework.IPluginInitializer
  id: IPluginInitializer
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  - Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  - Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginCompleted
  - Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginProgressChanged
  langs:
  - csharp
  - vb
  name: IPluginInitializer
  nameWithType: IPluginInitializer
  fullName: Sdl.Core.PluginFramework.IPluginInitializer
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nComponent that is used by a plug-in registry (<xref href=\"Sdl.Core.PluginFramework.IPluginRegistry\" data-throw-if-not-resolved=\"false\"></xref>) to initailize plug-ins.\nThis component ensures that the plug-in is ready to be used; i.e. its extensions are ready to be instantiated.\n"
  syntax:
    content: public interface IPluginInitializer
    content.vb: Public Interface IPluginInitializer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  commentId: M:Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  id: InitializePluginAsync(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  parent: Sdl.Core.PluginFramework.IPluginInitializer
  langs:
  - csharp
  - vb
  name: InitializePluginAsync(IEnumerable<IPlugin>)
  nameWithType: IPluginInitializer.InitializePluginAsync(IEnumerable<IPlugin>)
  fullName: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync(System.Collections.Generic.IEnumerable<Sdl.Core.PluginFramework.IPlugin>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nStarts the initialization of the specified plug-in.\n"
  syntax:
    content: void InitializePluginAsync(IEnumerable<IPlugin> plugin)
    parameters:
    - id: plugin
      type: System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin}
      description: The plug-ins to be initialized.
    content.vb: Sub InitializePluginAsync(plugin As IEnumerable(Of IPlugin))
  overload: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync*
  nameWithType.vb: IPluginInitializer.InitializePluginAsync(IEnumerable(Of IPlugin))
  fullName.vb: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync(System.Collections.Generic.IEnumerable(Of Sdl.Core.PluginFramework.IPlugin))
  name.vb: InitializePluginAsync(IEnumerable(Of IPlugin))
- uid: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  commentId: M:Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  id: InitializePluginAsyncCancel(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin})
  parent: Sdl.Core.PluginFramework.IPluginInitializer
  langs:
  - csharp
  - vb
  name: InitializePluginAsyncCancel(IEnumerable<IPlugin>)
  nameWithType: IPluginInitializer.InitializePluginAsyncCancel(IEnumerable<IPlugin>)
  fullName: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel(System.Collections.Generic.IEnumerable<Sdl.Core.PluginFramework.IPlugin>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nCancels the initailization of the specified plug-in.\n"
  syntax:
    content: void InitializePluginAsyncCancel(IEnumerable<IPlugin> plugin)
    parameters:
    - id: plugin
      type: System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin}
      description: The plug-ins for which initialization should be cancelled.
    content.vb: Sub InitializePluginAsyncCancel(plugin As IEnumerable(Of IPlugin))
  overload: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel*
  nameWithType.vb: IPluginInitializer.InitializePluginAsyncCancel(IEnumerable(Of IPlugin))
  fullName.vb: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel(System.Collections.Generic.IEnumerable(Of Sdl.Core.PluginFramework.IPlugin))
  name.vb: InitializePluginAsyncCancel(IEnumerable(Of IPlugin))
- uid: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginCompleted
  commentId: E:Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginCompleted
  id: InitializePluginCompleted
  parent: Sdl.Core.PluginFramework.IPluginInitializer
  langs:
  - csharp
  - vb
  name: InitializePluginCompleted
  nameWithType: IPluginInitializer.InitializePluginCompleted
  fullName: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginCompleted
  type: Event
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nRaised when a plug-in has been initialized, successfully or not.\n"
  syntax:
    content: event EventHandler<InitializePluginCompletedEventArgs> InitializePluginCompleted
    return:
      type: System.EventHandler{Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs}
    content.vb: Event InitializePluginCompleted As EventHandler(Of InitializePluginCompletedEventArgs)
- uid: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginProgressChanged
  commentId: E:Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginProgressChanged
  id: InitializePluginProgressChanged
  parent: Sdl.Core.PluginFramework.IPluginInitializer
  langs:
  - csharp
  - vb
  name: InitializePluginProgressChanged
  nameWithType: IPluginInitializer.InitializePluginProgressChanged
  fullName: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginProgressChanged
  type: Event
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nRaised while a plug-in is being initailized. Can be used to monitor initialization progress.\n"
  syntax:
    content: event EventHandler<InitializePluginProgressChangedEventArgs> InitializePluginProgressChanged
    return:
      type: System.EventHandler{Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs}
    content.vb: Event InitializePluginProgressChanged As EventHandler(Of InitializePluginProgressChangedEventArgs)
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync*
  commentId: Overload:Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync
  isExternal: true
  name: InitializePluginAsync
  nameWithType: IPluginInitializer.InitializePluginAsync
  fullName: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsync
- uid: System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin}
  commentId: '!:System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IPlugin}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IPlugin>
  nameWithType: IEnumerable<IPlugin>
  fullName: System.Collections.Generic.IEnumerable<Sdl.Core.PluginFramework.IPlugin>
  nameWithType.vb: IEnumerable(Of IPlugin)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.Core.PluginFramework.IPlugin)
  name.vb: IEnumerable(Of IPlugin)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IPlugin
    name: IPlugin
    nameWithType: IPlugin
    fullName: Sdl.Core.PluginFramework.IPlugin
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IPlugin
    name: IPlugin
    nameWithType: IPlugin
    fullName: Sdl.Core.PluginFramework.IPlugin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel*
  commentId: Overload:Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel
  isExternal: true
  name: InitializePluginAsyncCancel
  nameWithType: IPluginInitializer.InitializePluginAsyncCancel
  fullName: Sdl.Core.PluginFramework.IPluginInitializer.InitializePluginAsyncCancel
- uid: System.EventHandler{Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs}
  commentId: '!:System.EventHandler{Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs}'
  definition: System.EventHandler`1
  name: EventHandler<InitializePluginCompletedEventArgs>
  nameWithType: EventHandler<InitializePluginCompletedEventArgs>
  fullName: System.EventHandler<Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs>
  nameWithType.vb: EventHandler(Of InitializePluginCompletedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs)
  name.vb: EventHandler(Of InitializePluginCompletedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs
    name: InitializePluginCompletedEventArgs
    nameWithType: InitializePluginCompletedEventArgs
    fullName: Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs
    name: InitializePluginCompletedEventArgs
    nameWithType: InitializePluginCompletedEventArgs
    fullName: Sdl.Core.PluginFramework.InitializePluginCompletedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<>
  nameWithType: EventHandler<>
  fullName: System.EventHandler<>
  nameWithType.vb: EventHandler(Of )
  fullName.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs}
  commentId: '!:System.EventHandler{Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs}'
  definition: System.EventHandler`1
  name: EventHandler<InitializePluginProgressChangedEventArgs>
  nameWithType: EventHandler<InitializePluginProgressChangedEventArgs>
  fullName: System.EventHandler<Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs>
  nameWithType.vb: EventHandler(Of InitializePluginProgressChangedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs)
  name.vb: EventHandler(Of InitializePluginProgressChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs
    name: InitializePluginProgressChangedEventArgs
    nameWithType: InitializePluginProgressChangedEventArgs
    fullName: Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs
    name: InitializePluginProgressChangedEventArgs
    nameWithType: InitializePluginProgressChangedEventArgs
    fullName: Sdl.Core.PluginFramework.InitializePluginProgressChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
