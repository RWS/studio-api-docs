### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.Sorter`1
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.Sorter`1
  id: Sorter`1
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  - Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator)
  - Sdl.LanguagePlatform.TranslationMemory.Sorter`1.Compare(`0,`0)
  langs:
  - csharp
  - vb
  name: Sorter<T>
  nameWithType: Sorter<T>
  fullName: Sdl.LanguagePlatform.TranslationMemory.Sorter<T>
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nA Sorter&lt;T> implements the generic IComparer&lt;T> interface to compare two \nobjects of type T, using a caller-supplied sort specification (which includes the fields \nto consider during sorting, and the sort direction). A field value resolver then is used\nto retrieve, for a specific field, the value of that field in each of the two instaces\nwhich are currently compared. \n"
  syntax:
    content: 'public class Sorter<T> : IComparer<T>'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class Sorter(Of T)
          Implements IComparer(Of T)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{{T}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Sorter(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.Sorter(Of T)
  name.vb: Sorter(Of T)
- uid: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  id: '#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification)'
  parent: Sdl.LanguagePlatform.TranslationMemory.Sorter`1
  langs:
  - csharp
  - vb
  name: Sorter(IFieldValueComparer<T>, SortSpecification)
  nameWithType: Sorter<T>.Sorter(IFieldValueComparer<T>, SortSpecification)
  fullName: Sdl.LanguagePlatform.TranslationMemory.Sorter<T>.Sorter(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer<T>, Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance of the Sorter class with a specified comparer and sort specification.\n"
  syntax:
    content: public Sorter(IFieldValueComparer<T> comparer, SortSpecification sortSpecification)
    parameters:
    - id: comparer
      type: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{{T}}
      description: The field comparer object used for sorting.
    - id: sortSpecification
      type: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
      description: The sort specification.
    content.vb: Public Sub New(comparer As IFieldValueComparer(Of T), sortSpecification As SortSpecification)
  overload: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor*
  nameWithType.vb: Sorter(Of T).Sorter(IFieldValueComparer(Of T), SortSpecification)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.Sorter(Of T).Sorter(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer(Of T), Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  name.vb: Sorter(IFieldValueComparer(Of T), SortSpecification)
- uid: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator)
  id: '#ctor(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0},Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator)'
  parent: Sdl.LanguagePlatform.TranslationMemory.Sorter`1
  langs:
  - csharp
  - vb
  name: Sorter(IFieldValueComparer<T>, SortSpecification, SortDisambiguator)
  nameWithType: Sorter<T>.Sorter(IFieldValueComparer<T>, SortSpecification, SortDisambiguator)
  fullName: Sdl.LanguagePlatform.TranslationMemory.Sorter<T>.Sorter(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer<T>, Sdl.LanguagePlatform.TranslationMemory.SortSpecification, Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance of the Sorter class with a specified comparer and sort specification.\n"
  syntax:
    content: public Sorter(IFieldValueComparer<T> comparer, SortSpecification sortSpecification, SortDisambiguator sortDisambiguator)
    parameters:
    - id: comparer
      type: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{{T}}
      description: The field comparer object used for sorting.
    - id: sortSpecification
      type: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
      description: The sort specification.
    - id: sortDisambiguator
      type: Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator
      description: "An optional disambiguator which is called if the sort criteria \ndo not sufficiently define the sort order between two search result objects."
    content.vb: Public Sub New(comparer As IFieldValueComparer(Of T), sortSpecification As SortSpecification, sortDisambiguator As SortDisambiguator)
  overload: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor*
  nameWithType.vb: Sorter(Of T).Sorter(IFieldValueComparer(Of T), SortSpecification, SortDisambiguator)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.Sorter(Of T).Sorter(Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer(Of T), Sdl.LanguagePlatform.TranslationMemory.SortSpecification, Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator)
  name.vb: Sorter(IFieldValueComparer(Of T), SortSpecification, SortDisambiguator)
- uid: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.Compare(`0,`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.Sorter`1.Compare(`0,`0)
  id: Compare(`0,`0)
  parent: Sdl.LanguagePlatform.TranslationMemory.Sorter`1
  langs:
  - csharp
  - vb
  name: Compare(T, T)
  nameWithType: Sorter<T>.Compare(T, T)
  fullName: Sdl.LanguagePlatform.TranslationMemory.Sorter<T>.Compare(T, T)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nCompares the two items and returns an indication of their relative value.\n"
  syntax:
    content: public int Compare(T x, T y)
    parameters:
    - id: x
      type: '{T}'
      description: The first of the two items to compare.
    - id: y
      type: '{T}'
      description: The second of the two items to compare.
    return:
      type: System.Int32
      description: Less than zero if x is less than y, zero if x equals y, greater than zero if x is greater than y.
    content.vb: Public Function Compare(x As T, y As T) As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.Compare*
  implements:
  - System.Collections.Generic.IComparer{{T}}.Compare({T},{T})
  nameWithType.vb: Sorter(Of T).Compare(T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.Sorter(Of T).Compare(T, T)
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.Sorter`1.#ctor
  isExternal: true
  name: Sorter
  nameWithType: Sorter<T>.Sorter
  fullName: Sdl.LanguagePlatform.TranslationMemory.Sorter<T>.Sorter
  nameWithType.vb: Sorter(Of T).Sorter
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.Sorter(Of T).Sorter
- uid: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{{T}}
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer{`0}
  parent: Sdl.LanguagePlatform.TranslationMemory
  definition: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
  name: IFieldValueComparer<T>
  nameWithType: IFieldValueComparer<T>
  fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer<T>
  nameWithType.vb: IFieldValueComparer(Of T)
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer(Of T)
  name.vb: IFieldValueComparer(Of T)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
    name: IFieldValueComparer
    nameWithType: IFieldValueComparer
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
    name: IFieldValueComparer
    nameWithType: IFieldValueComparer
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SortSpecification
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SortSpecification
  nameWithType: SortSpecification
  fullName: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
- uid: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
  isExternal: true
  name: IFieldValueComparer<T>
  nameWithType: IFieldValueComparer<T>
  fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer<T>
  nameWithType.vb: IFieldValueComparer(Of T)
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer(Of T)
  name.vb: IFieldValueComparer(Of T)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
    name: IFieldValueComparer
    nameWithType: IFieldValueComparer
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer`1
    name: IFieldValueComparer
    nameWithType: IFieldValueComparer
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldValueComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SortDisambiguator
  nameWithType: SortDisambiguator
  fullName: Sdl.LanguagePlatform.TranslationMemory.SortDisambiguator
- uid: Sdl.LanguagePlatform.TranslationMemory.Sorter`1.Compare*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.Sorter`1.Compare
  isExternal: true
  name: Compare
  nameWithType: Sorter<T>.Compare
  fullName: Sdl.LanguagePlatform.TranslationMemory.Sorter<T>.Compare
  nameWithType.vb: Sorter(Of T).Compare
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.Sorter(Of T).Compare
- uid: System.Collections.Generic.IComparer{{T}}.Compare({T},{T})
  commentId: M:System.Collections.Generic.IComparer{`0}.Compare(`0,`0)
  parent: System.Collections.Generic.IComparer{{T}}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
