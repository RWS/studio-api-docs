### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  id: CurrencyFormat
  parent: Sdl.LanguagePlatform.Core.Tokenization
  children:
  - Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.#ctor
  - Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category
  - Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone
  - Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions
  - Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators
  - Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol
  langs:
  - csharp
  - vb
  name: CurrencyFormat
  nameWithType: CurrencyFormat
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nDefines a currency symbol (e.g. $, £, USD) along with permissible options for positioning and separator\n"
  syntax:
    content: 'public class CurrencyFormat : ICloneable'
    content.vb: >-
      Public Class CurrencyFormat
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: CurrencyFormat.Clone()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  langs:
  - csharp
  - vb
  name: CurrencyFormat()
  nameWithType: CurrencyFormat.CurrencyFormat()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencyFormat()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  syntax:
    content: public CurrencyFormat()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol
  id: Symbol
  parent: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  langs:
  - csharp
  - vb
  name: Symbol
  nameWithType: CurrencyFormat.Symbol
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nThe symbol for this currency format, e.g. $, £, USD\n"
  syntax:
    content: public string Symbol { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Symbol As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category
  id: Category
  parent: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: CurrencyFormat.Category
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nIdentifies equivalences if needed between currency symbols e.g. to ensure USD is localized as $\n"
  syntax:
    content: public string Category { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Category As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions
  id: CurrencySymbolPositions
  parent: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  langs:
  - csharp
  - vb
  name: CurrencySymbolPositions
  nameWithType: CurrencyFormat.CurrencySymbolPositions
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nThe permissible position(s) for the symbol with respect to the currency amount\n"
  remarks: If specified, the first position in the list is preferred when localizing.
  syntax:
    content: public List<CurrencySymbolPosition> CurrencySymbolPositions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition}
    content.vb: Public Property CurrencySymbolPositions As List(Of CurrencySymbolPosition)
  overload: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators
  id: Separators
  parent: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat
  langs:
  - csharp
  - vb
  name: Separators
  nameWithType: CurrencyFormat.Separators
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nThe separators permissible between the symbol and the amount. This can include &apos;\\0&apos;\n(no separator) or any whitespace character (space, non-break-space, wide space etc.)\nIf null or empty, a default set of whitespace characters and &apos;\\0&apos; will be used.\n"
  syntax:
    content: public HashSet<char> Separators { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.HashSet{System.Char}
    content.vb: Public Property Separators As HashSet(Of Char)
  overload: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Tokenization
  commentId: N:Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Tokenization
  nameWithType: Sdl.LanguagePlatform.Core.Tokenization
  fullName: Sdl.LanguagePlatform.Core.Tokenization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone
  isExternal: true
  name: Clone
  nameWithType: CurrencyFormat.Clone
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.#ctor
  isExternal: true
  name: CurrencyFormat
  nameWithType: CurrencyFormat.CurrencyFormat
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencyFormat
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol
  isExternal: true
  name: Symbol
  nameWithType: CurrencyFormat.Symbol
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Symbol
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category
  isExternal: true
  name: Category
  nameWithType: CurrencyFormat.Category
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Category
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions
  isExternal: true
  name: CurrencySymbolPositions
  nameWithType: CurrencyFormat.CurrencySymbolPositions
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.CurrencySymbolPositions
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CurrencySymbolPosition>
  nameWithType: List<CurrencySymbolPosition>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition>
  nameWithType.vb: List(Of CurrencySymbolPosition)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition)
  name.vb: List(Of CurrencySymbolPosition)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition
    name: CurrencySymbolPosition
    nameWithType: CurrencySymbolPosition
    fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition
    name: CurrencySymbolPosition
    nameWithType: CurrencySymbolPosition
    fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencySymbolPosition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators
  isExternal: true
  name: Separators
  nameWithType: CurrencyFormat.Separators
  fullName: Sdl.LanguagePlatform.Core.Tokenization.CurrencyFormat.Separators
- uid: System.Collections.Generic.HashSet{System.Char}
  commentId: '!:System.Collections.Generic.HashSet{System.Char}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Char>
  nameWithType: HashSet<Char>
  fullName: System.Collections.Generic.HashSet<System.Char>
  nameWithType.vb: HashSet(Of Char)
  fullName.vb: System.Collections.Generic.HashSet(Of System.Char)
  name.vb: HashSet(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: System.Collections.Generic.HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: System.Collections.Generic.HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
