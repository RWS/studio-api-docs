### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  commentId: T:Sdl.LanguagePlatform.Core.CultureInfoExtensions
  id: CultureInfoExtensions
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  langs:
  - csharp
  - vb
  name: CultureInfoExtensions
  nameWithType: CultureInfoExtensions
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nUtilities related to <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects.\n"
  syntax:
    content: public static class CultureInfoExtensions
    content.vb: Public Module CultureInfoExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  id: GetCultureInfo(System.Int32)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(Int32)
  nameWithType: CultureInfoExtensions.GetCultureInfo(Int32)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the culture which corresponds to the specified LCID. If the LCID is unknown or\ninvalid, an exception is thrown. Note that this will also be the case for custom cultures,\nwhich seem to always get the same LCID (4096).\n"
  syntax:
    content: public static CultureInfo GetCultureInfo(int lcid)
    parameters:
    - id: lcid
      type: System.Int32
      description: The locale identifier (lcid)
    return:
      type: System.Globalization.CultureInfo
      description: A CultureInfo object, or throws for unknown LCIDs.
    content.vb: Public Shared Function GetCultureInfo(lcid As Integer) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  id: GetMappedCultureCodeForLegacyCode(System.String)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetMappedCultureCodeForLegacyCode(String)
  nameWithType: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(String)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAssumes the passed culture code is a legacy code and returns the mapped\nequivalent. null is returned if no mapping exists (which means that the\ncode is not a legacy code or no mapping is required or yet specified).\n"
  syntax:
    content: public static string GetMappedCultureCodeForLegacyCode(string legacyCode)
    parameters:
    - id: legacyCode
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetMappedCultureCodeForLegacyCode(legacyCode As String) As String
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)
  id: GetCultureInfo(System.Int32,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(Int32, Boolean)
  nameWithType: CultureInfoExtensions.GetCultureInfo(Int32, Boolean)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the culture which corresponds to the specified locale, which may be a legacy LCID \nused internally by SDLX or Trados Translator&apos;s Workbench.\n"
  syntax:
    content: public static CultureInfo GetCultureInfo(int lcid, bool returnNullForUnknowns)
    parameters:
    - id: lcid
      type: System.Int32
      description: The locale identifier (lcid)
    - id: returnNullForUnknowns
      type: System.Boolean
      description: "If true, null is returned for unknown languages. Otherwise, an exception\nis thrown. This will also be the case if the lcid represets a custom culture (in most cases, \nthe lcid will be 4096 in this case)."
    return:
      type: System.Globalization.CultureInfo
      description: A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> object, or null if <code data-dev-comment-type="paramref" class="paramref">returnNullForUnknowns</code> is true.
    content.vb: Public Shared Function GetCultureInfo(lcid As Integer, returnNullForUnknowns As Boolean) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  id: GetCultureInfo(System.String)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(String)
  nameWithType: CultureInfoExtensions.GetCultureInfo(String)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nSimilar to <xref href=\"System.Globalization.CultureInfo.GetCultureInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, but \ncovers culture names (&lt;language-code>-&lt;region-code>) which are used\nby SDLX and Trados Translator&apos;s Workbench, but have a different code in .Net. \n<p>Use this method to transparently map language codes (current and legacy ones)\nto cultures, for example when processing TTX, ITD, or TMX.</p>\n"
  remarks: "To avoid an exception to be thrown, and to get <code>null</code> for unknown \nculture codes, use <xref href=\"Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>."
  syntax:
    content: public static CultureInfo GetCultureInfo(string name)
    parameters:
    - id: name
      type: System.String
      description: The culture code
    return:
      type: System.Globalization.CultureInfo
      description: >
        A CultureInfo object, using appropriate fallbacks for backwards compatibility. Throws

        an exeption if neither the fallback heuristics nor .Net can resolve the culture name.
    content.vb: Public Shared Function GetCultureInfo(name As String) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  id: GetCultureInfo(System.String,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(String, Boolean)
  nameWithType: CultureInfoExtensions.GetCultureInfo(String, Boolean)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nSimilar to <xref href=\"System.Globalization.CultureInfo.GetCultureInfo(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, but \ncovers culture names (&lt;language-code>-&lt;region-code>) which are used\nby SDLX and Trados Translator&apos;s Workbench, but have a different code in .Net. \n<p>Use this method to transparently map language codes (current and legacy ones)\nto cultures, for example when processing TTX, ITD, or TMX.</p>\n"
  syntax:
    content: public static CultureInfo GetCultureInfo(string name, bool returnNullForUnknowns)
    parameters:
    - id: name
      type: System.String
      description: The culture code
    - id: returnNullForUnknowns
      type: System.Boolean
      description: >-
        If true, null is returned for unknown culture codes. If false, an exception is thrown if

        the culture code cannot be resolved.
    return:
      type: System.Globalization.CultureInfo
      description: "A CultureInfo object, using appropriate fallbacks for backwards compatibility, or \nnull if the culture code cannot be resolved and <code data-dev-comment-type=\"paramref\" class=\"paramref\">returnNullForUnknowns</code> is <code>true</code>.\n"
    content.vb: Public Shared Function GetCultureInfo(name As String, returnNullForUnknowns As Boolean) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(System.Globalization.CultureInfo)
  id: IsRomanceLanguage(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: IsRomanceLanguage(CultureInfo)
  nameWithType: CultureInfoExtensions.IsRomanceLanguage(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the specified culture info is any of the romance languages: French, Spanish, Portuguese, \nItalian, Romanian, Galician or Catalan.\n"
  syntax:
    content: public static bool IsRomanceLanguage(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture info.
    return:
      type: System.Boolean
      description: true if culture is any of the romance languages, otherwise false.
    content.vb: Public Shared Function IsRomanceLanguage(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(System.Globalization.CultureInfo)
  id: UseBlankAsWordSeparator(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UseBlankAsWordSeparator(CultureInfo)
  nameWithType: CultureInfoExtensions.UseBlankAsWordSeparator(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the specified culture uses blanks as word separators. This is \ntrue for all cultures except those based on Japanese, Thai, or Chinese.\n"
  syntax:
    content: public static bool UseBlankAsWordSeparator(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture to test.
    return:
      type: System.Boolean
      description: true iff the language associated with the culture uses blanks as word separators.
    content.vb: Public Shared Function UseBlankAsWordSeparator(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(System.Globalization.CultureInfo)
  id: UseBlankAsSentenceSeparator(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UseBlankAsSentenceSeparator(CultureInfo)
  nameWithType: CultureInfoExtensions.UseBlankAsSentenceSeparator(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the specified culture uses blanks as sentence separators. This is \ncurrently only true for Thai.\n"
  syntax:
    content: public static bool UseBlankAsSentenceSeparator(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture to test.
    return:
      type: System.Boolean
      description: true iff the language associated with the culture uses blanks as sentence separators.
    content.vb: Public Shared Function UseBlankAsSentenceSeparator(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  id: GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionQualifiedCulture(CultureInfo)
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCulture(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nHeuristically computes and returns the region-specified (&quot;default&quot;) culture for a given\nlanguage. If the input culture is not neutral (i.e. it is region-specific), it is returned. \nOtherwise the method will find the region-qualified culture which most likely represents \nthe culture&apos;s default/major region.\n"
  syntax:
    content: public static CultureInfo GetRegionQualifiedCulture(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The input culture
    return:
      type: System.Globalization.CultureInfo
      description: The input parameter, if it&apos;s a region-qualified/non-neutral culture, or the default region-qualified culture otheriwise.
    content.vb: Public Shared Function GetRegionQualifiedCulture(culture As CultureInfo) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  id: GetRegionQualifiedCulture(System.String)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionQualifiedCulture(String)
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCulture(String)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nHeuristically computes and returns the region-specified (&quot;default&quot;) culture code for a given\nlanguage code. If the input culture is not neutral or does not have a region-qualified \nequivalent, null is returned.\n"
  syntax:
    content: public static string GetRegionQualifiedCulture(string cultureCode)
    parameters:
    - id: cultureCode
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetRegionQualifiedCulture(cultureCode As String) As String
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  id: GetRegionNeutralCulture(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionNeutralCulture(CultureInfo)
  nameWithType: CultureInfoExtensions.GetRegionNeutralCulture(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nComputes and returns the region-neutral parent culture of the input culture. If the input\nculture is already neutral, it is returned. Otherwise, the parent culture hierarchy is \ntraversed until a region-neutral culture is found.\n"
  remarks: >-
    A region-neutral culture is not necessarily one &quot;without dashes&quot;. For example,

    the region-neutral parent culture of <code>zh-CN</code> (Chinese, PRC) is <code>zh-CHS</code> or <code>zh-Hans</code> (Simplified

    Chinese). The exact result may depend on the operating system version and the .Net version.
  syntax:
    content: public static CultureInfo GetRegionNeutralCulture(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The input culture
    return:
      type: System.Globalization.CultureInfo
      description: The region-neutral parent culture of the input culture
    content.vb: Public Shared Function GetRegionNeutralCulture(culture As CultureInfo) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  id: AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: AreCompatible(CultureInfo, CultureInfo)
  nameWithType: CultureInfoExtensions.AreCompatible(CultureInfo, CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo, System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nChecks whether two cultures (languages) are compatible. Two cultures are \ncompatible if they denote the same language which means they have to be identical or \ntheir closest region-neutral parents are identical.\n"
  syntax:
    content: public static bool AreCompatible(CultureInfo c1, CultureInfo c2)
    parameters:
    - id: c1
      type: System.Globalization.CultureInfo
    - id: c2
      type: System.Globalization.CultureInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function AreCompatible(c1 As CultureInfo, c2 As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(System.Globalization.CultureInfo)
  id: UsesClitics(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UsesClitics(CultureInfo)
  nameWithType: CultureInfoExtensions.UsesClitics(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the specified culture uses clitics (English and the romance languages).\n"
  syntax:
    content: public static bool UsesClitics(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture.
    return:
      type: System.Boolean
      description: true if culture contains clitics, otherwise false.
    content.vb: Public Shared Function UsesClitics(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  id: GetLanguageGroupID(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLanguageGroupID(CultureInfo)
  nameWithType: CultureInfoExtensions.GetLanguageGroupID(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the <xref href=\"Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID\" data-throw-if-not-resolved=\"false\"></xref> associated with the specified culture.\n"
  syntax:
    content: public static CultureInfoExtensions.LanguageGroupID GetLanguageGroupID(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
    content.vb: Public Shared Function GetLanguageGroupID(culture As CultureInfo) As CultureInfoExtensions.LanguageGroupID
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  id: GetLanguageGroupName(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLanguageGroupName(CultureInfo)
  nameWithType: CultureInfoExtensions.GetLanguageGroupName(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the name of the language group for the specified culture as a string.\n"
  syntax:
    content: public static string GetLanguageGroupName(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (may not be null)
    return:
      type: System.String
      description: >-
        The name of the language group the culture belongs to, or <code>null</code> if

        the group is unknown.
    content.vb: Public Shared Function GetLanguageGroupName(culture As CultureInfo) As String
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(System.Globalization.CultureInfo)
  id: GetLeadingClitics(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLeadingClitics(CultureInfo)
  nameWithType: CultureInfoExtensions.GetLeadingClitics(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns a case-sensitive string hash set containing the leading separable clitics for the provided\nculture, or <code>null</code> if none are defined.\n"
  syntax:
    content: public static HashSet<string> GetLeadingClitics(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Shared Function GetLeadingClitics(culture As CultureInfo) As HashSet(Of String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  id: GetTrailingClitics(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetTrailingClitics(CultureInfo)
  nameWithType: CultureInfoExtensions.GetTrailingClitics(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns a case-sensitive string hash set containing the trailing separable clitics for the provided\nculture, or <code>null</code> if none are defined.\n"
  syntax:
    content: public static HashSet<string> GetTrailingClitics(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Shared Function GetTrailingClitics(culture As CultureInfo) As HashSet(Of String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  id: UsesDefaultDigits(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UsesDefaultDigits(CultureInfo)
  nameWithType: CultureInfoExtensions.UsesDefaultDigits(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the specified culture uses the standard default digits.\n"
  syntax:
    content: public static bool UsesDefaultDigits(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture, which must not be null or a neutral culture
    return:
      type: System.Boolean
      description: <code>true</code> if the culture uses the default digits (0-9), and <code>false</code> otherwise.
    content.vb: Public Shared Function UsesDefaultDigits(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  id: UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UsesStandardNumberGrouping(CultureInfo)
  nameWithType: CultureInfoExtensions.UsesStandardNumberGrouping(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the provided culture uses standard three-digit grouping for number\nformatting. \n"
  syntax:
    content: public static bool UsesStandardNumberGrouping(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture, which must not be null or a neutral culture
    return:
      type: System.Boolean
      description: true if the culture uses standard three-digit grouping, and false otherwise
    content.vb: Public Shared Function UsesStandardNumberGrouping(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(System.Globalization.CultureInfo)
  id: UseFullWidth(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UseFullWidth(CultureInfo)
  nameWithType: CultureInfoExtensions.UseFullWidth(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nreturns true for CJK cultures\n"
  syntax:
    content: public static bool UseFullWidth(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Boolean
    content.vb: Public Shared Function UseFullWidth(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  commentId: P:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  id: LegacyLanguageCodeMapping
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: LegacyLanguageCodeMapping
  nameWithType: CultureInfoExtensions.LegacyLanguageCodeMapping
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets a mapping from legacy language codes to .Net language codes. The mapping maps from\nlegacy language codes as they are used by SDLX and Trados Translator&apos;s Workbench and\nrelated applications to the closest language code used by .Net. \n<p>This is an internal data structure which should not be directly used and \nnot be modified. To look up a legacy code,\nuse <xref href=\"Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static Dictionary<string, string> LegacyLanguageCodeMapping { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared ReadOnly Property LegacyLanguageCodeMapping As Dictionary(Of String, String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo
  isExternal: true
  name: GetCultureInfo
  nameWithType: CultureInfoExtensions.GetCultureInfo
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode
  isExternal: true
  name: GetMappedCultureCodeForLegacyCode
  nameWithType: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage
  isExternal: true
  name: IsRomanceLanguage
  nameWithType: CultureInfoExtensions.IsRomanceLanguage
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator
  isExternal: true
  name: UseBlankAsWordSeparator
  nameWithType: CultureInfoExtensions.UseBlankAsWordSeparator
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator
  isExternal: true
  name: UseBlankAsSentenceSeparator
  nameWithType: CultureInfoExtensions.UseBlankAsSentenceSeparator
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture
  isExternal: true
  name: GetRegionQualifiedCulture
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCulture
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture
  isExternal: true
  name: GetRegionNeutralCulture
  nameWithType: CultureInfoExtensions.GetRegionNeutralCulture
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible
  isExternal: true
  name: AreCompatible
  nameWithType: CultureInfoExtensions.AreCompatible
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics
  isExternal: true
  name: UsesClitics
  nameWithType: CultureInfoExtensions.UsesClitics
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID
  isExternal: true
  name: GetLanguageGroupID
  nameWithType: CultureInfoExtensions.GetLanguageGroupID
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
  commentId: T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: CultureInfoExtensions.LanguageGroupID
  nameWithType: CultureInfoExtensions.LanguageGroupID
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName
  isExternal: true
  name: GetLanguageGroupName
  nameWithType: CultureInfoExtensions.GetLanguageGroupName
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics
  isExternal: true
  name: GetLeadingClitics
  nameWithType: CultureInfoExtensions.GetLeadingClitics
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: '!:System.Collections.Generic.HashSet{System.String}'
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<String>
  nameWithType: HashSet<String>
  fullName: System.Collections.Generic.HashSet<System.String>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of System.String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<>
  nameWithType: HashSet<>
  fullName: System.Collections.Generic.HashSet<>
  nameWithType.vb: HashSet(Of )
  fullName.vb: System.Collections.Generic.HashSet(Of )
  name.vb: HashSet(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: System.Collections.Generic.HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics
  isExternal: true
  name: GetTrailingClitics
  nameWithType: CultureInfoExtensions.GetTrailingClitics
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits
  isExternal: true
  name: UsesDefaultDigits
  nameWithType: CultureInfoExtensions.UsesDefaultDigits
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping
  isExternal: true
  name: UsesStandardNumberGrouping
  nameWithType: CultureInfoExtensions.UsesStandardNumberGrouping
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth
  isExternal: true
  name: UseFullWidth
  nameWithType: CultureInfoExtensions.UseFullWidth
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  isExternal: true
  name: LegacyLanguageCodeMapping
  nameWithType: CultureInfoExtensions.LegacyLanguageCodeMapping
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
