### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn
  commentId: T:Sdl.DesktopEditor.EditorApi.ICustomColumn
  id: ICustomColumn
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo)
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo,System.Drawing.Rectangle,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth(System.Drawing.Graphics)
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow(Sdl.DesktopEditor.EditorApi.IRowInfo)
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor(Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor)
  - Sdl.DesktopEditor.EditorApi.ICustomColumn.Width
  langs:
  - csharp
  - vb
  name: ICustomColumn
  nameWithType: ICustomColumn
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nBase interface implemented by custom columns that can appear to the left and right of an edit control.\n"
  remarks: "\n<p>\nThis interface defines what is needed to support a read-only column. \n</p>\n<p>\nColumns that need to interact with the user, e.g. to respond to mouse events\nshould implement <xref href=\"Sdl.DesktopEditor.EditorApi.IInteractiveCustomColumn\" data-throw-if-not-resolved=\"false\"></xref>, which derives from this interface.\n</p>\n<p>\nThe edit control uses this interface to interact with the custom columns.\n</p>\n<p>\nCustom columns can be added to an edit control by creating object instances that implement\nthis interface and passing them to <xref href=\"Sdl.DesktopEditor.EditorApi.IEditControl.AddColumn(Sdl.DesktopEditor.EditorApi.ICustomColumn%2cSdl.DesktopEditor.EditorApi.CustomColumnLocation)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nDuring initialization the <xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth(System.Drawing.Graphics)\" data-throw-if-not-resolved=\"false\"></xref> method will be called to\ndetermine and used to set the <xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.Width\" data-throw-if-not-resolved=\"false\"></xref> property. \n</p>\n<p>\n<xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics%2cSdl.DesktopEditor.EditorApi.IRowInfo)\" data-throw-if-not-resolved=\"false\"></xref> will be called for each row in the column when rows are sized. \n</p>\n<p>\n<xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell(System.Drawing.Graphics%2cSdl.DesktopEditor.EditorApi.IRowInfo%2cSystem.Drawing.Rectangle%2cSystem.Drawing.Pen%2cSystem.Drawing.Pen%2cSystem.Drawing.Pen%2cSystem.Drawing.Pen)\" data-throw-if-not-resolved=\"false\"></xref> is called when a cell needs to be displayed.\n</p>\n"
  syntax:
    content: public interface ICustomColumn
    content.vb: Public Interface ICustomColumn
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth(System.Drawing.Graphics)
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth(System.Drawing.Graphics)
  id: GetOptimalWidth(System.Drawing.Graphics)
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: GetOptimalWidth(Graphics)
  nameWithType: ICustomColumn.GetOptimalWidth(Graphics)
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth(System.Drawing.Graphics)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled by the edit control to request the optimal width of the column as part of \nsetting the initial <xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.Width\" data-throw-if-not-resolved=\"false\"></xref> for the column.\n"
  remarks: >-
    There is no guarantee this width will be used, but it will likely be used

    if sufficient space is available.
  syntax:
    content: int GetOptimalWidth(Graphics g)
    parameters:
    - id: g
      type: System.Drawing.Graphics
    return:
      type: System.Int32
      description: The most suitable width of the column.
    content.vb: Function GetOptimalWidth(g As Graphics) As Integer
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo)
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo)
  id: CalculateCellContentHeight(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo)
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: CalculateCellContentHeight(Graphics, IRowInfo)
  nameWithType: ICustomColumn.CalculateCellContentHeight(Graphics, IRowInfo)
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics, Sdl.DesktopEditor.EditorApi.IRowInfo)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled by the control to determine the minimum height of the content of this column\nfor a specific row, given the current value of the <xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.Width\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  syntax:
    content: int CalculateCellContentHeight(Graphics g, IRowInfo row)
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: The graphics context to use for drawing column content for this cell.
    - id: row
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
      description: The row for the cell.
    return:
      type: System.Int32
      description: The height in pixels required to display the full content of the cell.
    content.vb: Function CalculateCellContentHeight(g As Graphics, row As IRowInfo) As Integer
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw
  id: BeginDraw
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: BeginDraw()
  nameWithType: ICustomColumn.BeginDraw()
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled by the control when a repaint is needed.\nThis is called once before a range of DrawCell calls.\n"
  syntax:
    content: void BeginDraw()
    content.vb: Sub BeginDraw
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo,System.Drawing.Rectangle,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo,System.Drawing.Rectangle,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)
  id: DrawCell(System.Drawing.Graphics,Sdl.DesktopEditor.EditorApi.IRowInfo,System.Drawing.Rectangle,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: DrawCell(Graphics, IRowInfo, Rectangle, Pen, Pen, Pen, Pen)
  nameWithType: ICustomColumn.DrawCell(Graphics, IRowInfo, Rectangle, Pen, Pen, Pen, Pen)
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell(System.Drawing.Graphics, Sdl.DesktopEditor.EditorApi.IRowInfo, System.Drawing.Rectangle, System.Drawing.Pen, System.Drawing.Pen, System.Drawing.Pen, System.Drawing.Pen)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled to render a row (cell) of the column.\n"
  remarks: "\n<p>\nThe implementation should draw the background, cell borders and cell content within the specified rectangle.\n</p>\n<p>\nIt is up to the implementation which cell boundaries to draw. For consistency with surrounding\ncontent it is highly recommended to draw any borders using the respective specified pens.\n</p>\n"
  syntax:
    content: void DrawCell(Graphics g, IRowInfo row, Rectangle cellBounds, Pen leftBorderPen, Pen rightBorderPen, Pen topBorderPen, Pen bottomBorderPen)
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: The graphics context to use for drawing column content for this cell.
    - id: row
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
      description: The row for the cell.
    - id: cellBounds
      type: System.Drawing.Rectangle
      description: The rectangle in which to draw the cell content.
    - id: leftBorderPen
      type: System.Drawing.Pen
      description: The pen to use if a border on the left should be drawn. May be <code>null</code>.
    - id: rightBorderPen
      type: System.Drawing.Pen
      description: The pen to use if a border on the right should be drawn. May be <code>null</code>.
    - id: topBorderPen
      type: System.Drawing.Pen
      description: The pen to use if a border on the top should be drawn. May be <code>null</code>.
    - id: bottomBorderPen
      type: System.Drawing.Pen
      description: The pen to use if a border on the bottom should be drawn. May be <code>null</code>.
    content.vb: Sub DrawCell(g As Graphics, row As IRowInfo, cellBounds As Rectangle, leftBorderPen As Pen, rightBorderPen As Pen, topBorderPen As Pen, bottomBorderPen As Pen)
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor(Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor)
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor(Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor)
  id: SetRowSizeAccessor(Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor)
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: SetRowSizeAccessor(RowSizeAccessor)
  nameWithType: ICustomColumn.SetRowSizeAccessor(RowSizeAccessor)
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor(Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nAllows the Editor to pass in a row size delegate which can be used to get the current <xref href=\"System.Drawing.Rectangle\" data-throw-if-not-resolved=\"false\"></xref>\nof any row in the Editor.\n"
  syntax:
    content: void SetRowSizeAccessor(RowSizeAccessor rowSizeAccessor)
    parameters:
    - id: rowSizeAccessor
      type: Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor
      description: Delegate that will be passed into the row when registered with the Editor.
    content.vb: Sub SetRowSizeAccessor(rowSizeAccessor As RowSizeAccessor)
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows
  id: PrepareRegisterRows
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: PrepareRegisterRows()
  nameWithType: ICustomColumn.PrepareRegisterRows()
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled from the Editor before RegisterRows are called. Unfortunately RegisterRow is called for all rows when\na change occurs in structure, even the row was already &apos;registered&apos;.\n"
  syntax:
    content: void PrepareRegisterRows()
    content.vb: Sub PrepareRegisterRows
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow(Sdl.DesktopEditor.EditorApi.IRowInfo)
  commentId: M:Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow(Sdl.DesktopEditor.EditorApi.IRowInfo)
  id: RegisterRow(Sdl.DesktopEditor.EditorApi.IRowInfo)
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: RegisterRow(IRowInfo)
  nameWithType: ICustomColumn.RegisterRow(IRowInfo)
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow(Sdl.DesktopEditor.EditorApi.IRowInfo)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled from the Editor when a row has been created. Allows a column to keep track of the rows available in the Editor\nand collect any information it needs about it.\n"
  syntax:
    content: void RegisterRow(IRowInfo row)
    parameters:
    - id: row
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
      description: The row that has been created in the Editor.
    content.vb: Sub RegisterRow(row As IRowInfo)
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow*
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl
  commentId: P:Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl
  id: EditControl
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: EditControl
  nameWithType: ICustomColumn.EditControl
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe edit control hosting this column.\n"
  remarks: "\nThis is set during initialization.\n"
  syntax:
    content: IEditControl EditControl { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IEditControl
    content.vb: Property EditControl As IEditControl
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.Width
  commentId: P:Sdl.DesktopEditor.EditorApi.ICustomColumn.Width
  id: Width
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: Width
  nameWithType: ICustomColumn.Width
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.Width
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe width of the column, in pixels. The editor will set this property\nbefore the first call to <xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics%2cSdl.DesktopEditor.EditorApi.IRowInfo)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nIf the column width changes, all the cell heights will need to be re-calculated.\nThe edit control will call <xref href=\"Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight(System.Drawing.Graphics%2cSdl.DesktopEditor.EditorApi.IRowInfo)\" data-throw-if-not-resolved=\"false\"></xref> to calculate the height of each row.\n</p>\n"
  syntax:
    content: int Width { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Property Width As Integer
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.Width*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex
  commentId: P:Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex
  id: IsComplex
  parent: Sdl.DesktopEditor.EditorApi.ICustomColumn
  langs:
  - csharp
  - vb
  name: IsComplex
  nameWithType: ICustomColumn.IsComplex
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nDetermines whether the column is complex or not. A normal column can draw each row\nindependently of other rows. However, a complex column cannot draw each row \nindependently of other rows. So complex columns need to be entirely redrawn when \nrows are changed or resized.\n"
  syntax:
    content: bool IsComplex { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsComplex As Boolean
  overload: Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth
  isExternal: true
  name: GetOptimalWidth
  nameWithType: ICustomColumn.GetOptimalWidth
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.GetOptimalWidth
- uid: System.Drawing.Graphics
  isExternal: true
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight
  isExternal: true
  name: CalculateCellContentHeight
  nameWithType: ICustomColumn.CalculateCellContentHeight
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.CalculateCellContentHeight
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo
  commentId: T:Sdl.DesktopEditor.EditorApi.IRowInfo
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IRowInfo
  nameWithType: IRowInfo
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw
  isExternal: true
  name: BeginDraw
  nameWithType: ICustomColumn.BeginDraw
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.BeginDraw
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell
  isExternal: true
  name: DrawCell
  nameWithType: ICustomColumn.DrawCell
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.DrawCell
- uid: System.Drawing.Rectangle
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Pen
  isExternal: true
  name: Pen
  nameWithType: Pen
  fullName: System.Drawing.Pen
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor
  isExternal: true
  name: SetRowSizeAccessor
  nameWithType: ICustomColumn.SetRowSizeAccessor
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.SetRowSizeAccessor
- uid: Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor
  commentId: T:Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor
  parent: Sdl.DesktopEditor.EditorApi.Implementation
  isExternal: true
  name: RowSizeAccessor
  nameWithType: RowSizeAccessor
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.RowSizeAccessor
- uid: Sdl.DesktopEditor.EditorApi.Implementation
  commentId: N:Sdl.DesktopEditor.EditorApi.Implementation
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi.Implementation
  nameWithType: Sdl.DesktopEditor.EditorApi.Implementation
  fullName: Sdl.DesktopEditor.EditorApi.Implementation
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows
  isExternal: true
  name: PrepareRegisterRows
  nameWithType: ICustomColumn.PrepareRegisterRows
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.PrepareRegisterRows
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow
  isExternal: true
  name: RegisterRow
  nameWithType: ICustomColumn.RegisterRow
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.RegisterRow
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl
  isExternal: true
  name: EditControl
  nameWithType: ICustomColumn.EditControl
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.EditControl
- uid: Sdl.DesktopEditor.EditorApi.IEditControl
  commentId: T:Sdl.DesktopEditor.EditorApi.IEditControl
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IEditControl
  nameWithType: IEditControl
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.Width*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.Width
  isExternal: true
  name: Width
  nameWithType: ICustomColumn.Width
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.Width
- uid: Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex
  isExternal: true
  name: IsComplex
  nameWithType: ICustomColumn.IsComplex
  fullName: Sdl.DesktopEditor.EditorApi.ICustomColumn.IsComplex
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
