### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  commentId: T:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  id: ILayoutSynchronizer
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,System.Int32,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  - Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  langs:
  - csharp
  - vb
  name: ILayoutSynchronizer
  nameWithType: ILayoutSynchronizer
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nEnsures the synchronization of rows between multiple <see ref=\"ISynchronizableLayout\"></see> components.\nThis is used, for example, to synchronise the rows in the source and target edit controls\nwithin the side-by-side editor.\n"
  remarks: "\nThe <xref href=\"Sdl.DesktopEditor.EditorApi.IRowInfo.RowNumber\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"Sdl.DesktopEditor.EditorApi.ISynchronizableCell.Row\" data-throw-if-not-resolved=\"false\"></xref> is used\nto determine which rows correspond across the different layouts.\n"
  syntax:
    content: public interface ILayoutSynchronizer
    content.vb: Public Interface ILayoutSynchronizer
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,System.Int32,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,System.Int32,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: CellHeightChanged(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,System.Int32,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: CellHeightChanged(ISynchronizableCell, Int32, ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.CellHeightChanged(ISynchronizableCell, Int32, ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged(Sdl.DesktopEditor.EditorApi.ISynchronizableCell, System.Int32, Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nInform the layout synchronizer that the height of the specified cell in the given layout has\nchanged.\n"
  syntax:
    content: void CellHeightChanged(ISynchronizableCell cell, int newHeight, ISynchronizableLayout layout)
    parameters:
    - id: cell
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableCell
      description: The cell that has changed.
    - id: newHeight
      type: System.Int32
      description: The requested new height of the cell (the cell may not yet have been updated)
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
      description: The layout this change applies to.
    content.vb: Sub CellHeightChanged(cell As ISynchronizableCell, newHeight As Integer, layout As ISynchronizableLayout)
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: GetRowHeight(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: GetRowHeight(ISynchronizableCell, ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.GetRowHeight(ISynchronizableCell, ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight(Sdl.DesktopEditor.EditorApi.ISynchronizableCell, Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCalled by controls to determine the current height to be used for the specified cell.\n"
  remarks: "\nThis is used by controls to determine the max height of all synchronized cells in the row,\ne.g. to determine if the content will fit in this row. If it does not fit the control should\ncall <xref href=\"Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged(Sdl.DesktopEditor.EditorApi.ISynchronizableCell%2cSystem.Int32%2cSdl.DesktopEditor.EditorApi.ISynchronizableLayout)\" data-throw-if-not-resolved=\"false\"></xref> to communicate the new required cell height to all other\nsynchronized cells.\n"
  syntax:
    content: int GetRowHeight(ISynchronizableCell cell, ISynchronizableLayout layout)
    parameters:
    - id: cell
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableCell
      description: The cell in the layout the query refers to. This is used to locate the correct row.
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
      description: The layout that is requesting the current row height
    return:
      type: System.Int32
      description: the height of the row
    content.vb: Function GetRowHeight(cell As ISynchronizableCell, layout As ISynchronizableLayout) As Integer
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: RegisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: RegisterCell(ISynchronizableCell, ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.RegisterCell(ISynchronizableCell, ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell, Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nRegister a cell for synchronization against the layout provided.\n"
  remarks: "\nIn earlier implementations it was required that cell registration\nfollowed the same pattern for each layout, however this requirement\nhas been lifted now that each synchronizable cell has a row associated\nwith it. The row number will be used for the synchronization, i.e.\ncells with the same row number will be synchronized across the different\nlayouts.\n"
  syntax:
    content: void RegisterCell(ISynchronizableCell cell, ISynchronizableLayout layout)
    parameters:
    - id: cell
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableCell
      description: The cell to be registered.
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
      description: The layout in which the cell belongs.
    content.vb: Sub RegisterCell(cell As ISynchronizableCell, layout As ISynchronizableLayout)
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: UnregisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell,Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: UnregisterCell(ISynchronizableCell, ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.UnregisterCell(ISynchronizableCell, ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell(Sdl.DesktopEditor.EditorApi.ISynchronizableCell, Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nUnregister a cell for synchronization against the layout provided.\n"
  syntax:
    content: void UnregisterCell(ISynchronizableCell cell, ISynchronizableLayout layout)
    parameters:
    - id: cell
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableCell
      description: The cell to be unregistered.
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
      description: The layout in which the cell belongs.
    content.vb: Sub UnregisterCell(cell As ISynchronizableCell, layout As ISynchronizableLayout)
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: UnregisterAll(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: UnregisterAll(ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.UnregisterAll(ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nShortcut to unregister all registered cells for the specified layout.\n"
  syntax:
    content: void UnregisterAll(ISynchronizableLayout layout)
    parameters:
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
    content.vb: Sub UnregisterAll(layout As ISynchronizableLayout)
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: NotifyLayoutCompleted(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: NotifyLayoutCompleted(ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.NotifyLayoutCompleted(ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nControls call this when they are able to draw all\nvisible layout items in the display area.  The synchronizer will wait for all registered\ncontrols to call this method before asking them to draw.\n"
  syntax:
    content: void NotifyLayoutCompleted(ISynchronizableLayout layout)
    parameters:
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
    content.vb: Sub NotifyLayoutCompleted(layout As ISynchronizableLayout)
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  commentId: M:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  id: NotifyStructureChanging(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: NotifyStructureChanging(ISynchronizableLayout)
  nameWithType: ILayoutSynchronizer.NotifyStructureChanging(ISynchronizableLayout)
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging(Sdl.DesktopEditor.EditorApi.ISynchronizableLayout)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nNotify the layout synchronizer that the structure to be synchronized needs changing.\n"
  remarks: "\n<p>\nThe synchronized cells for the specified layout will be removed from the synchronizer\nas part of this call. Synchronization will be suspended for all layouts until all \nof them have called this method. Once that happens the synchronizer will\ncall <xref href=\"Sdl.DesktopEditor.EditorApi.ISynchronizableLayout.StructureChanged\" data-throw-if-not-resolved=\"false\"></xref> on each of the registered layouts.\nThe implementaiton of this method would then typically register all synchronizable cells\nin the layout (using the new common structure).\n</p>\n"
  syntax:
    content: void NotifyStructureChanging(ISynchronizableLayout layout)
    parameters:
    - id: layout
      type: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
    content.vb: Sub NotifyStructureChanging(layout As ISynchronizableLayout)
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging*
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended
  commentId: P:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended
  id: IsSynchronizationSuspended
  parent: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer
  langs:
  - csharp
  - vb
  name: IsSynchronizationSuspended
  nameWithType: ILayoutSynchronizer.IsSynchronizationSuspended
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nRead-only property that indicates if synchronization is currently suspended\nwhile waiting for all layouts to call NotifyStructureChanging()\n"
  syntax:
    content: bool IsSynchronizationSuspended { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsSynchronizationSuspended As Boolean
  overload: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged
  isExternal: true
  name: CellHeightChanged
  nameWithType: ILayoutSynchronizer.CellHeightChanged
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.CellHeightChanged
- uid: Sdl.DesktopEditor.EditorApi.ISynchronizableCell
  commentId: T:Sdl.DesktopEditor.EditorApi.ISynchronizableCell
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ISynchronizableCell
  nameWithType: ISynchronizableCell
  fullName: Sdl.DesktopEditor.EditorApi.ISynchronizableCell
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
  commentId: T:Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ISynchronizableLayout
  nameWithType: ISynchronizableLayout
  fullName: Sdl.DesktopEditor.EditorApi.ISynchronizableLayout
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight
  isExternal: true
  name: GetRowHeight
  nameWithType: ILayoutSynchronizer.GetRowHeight
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.GetRowHeight
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell
  isExternal: true
  name: RegisterCell
  nameWithType: ILayoutSynchronizer.RegisterCell
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.RegisterCell
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell
  isExternal: true
  name: UnregisterCell
  nameWithType: ILayoutSynchronizer.UnregisterCell
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterCell
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll
  isExternal: true
  name: UnregisterAll
  nameWithType: ILayoutSynchronizer.UnregisterAll
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.UnregisterAll
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted
  isExternal: true
  name: NotifyLayoutCompleted
  nameWithType: ILayoutSynchronizer.NotifyLayoutCompleted
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyLayoutCompleted
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging
  isExternal: true
  name: NotifyStructureChanging
  nameWithType: ILayoutSynchronizer.NotifyStructureChanging
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.NotifyStructureChanging
- uid: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended
  isExternal: true
  name: IsSynchronizationSuspended
  nameWithType: ILayoutSynchronizer.IsSynchronizationSuspended
  fullName: Sdl.DesktopEditor.EditorApi.ILayoutSynchronizer.IsSynchronizationSuspended
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
