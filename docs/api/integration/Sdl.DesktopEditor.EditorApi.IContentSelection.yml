### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection
  commentId: T:Sdl.DesktopEditor.EditorApi.IContentSelection
  id: IContentSelection
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  - Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  - Sdl.DesktopEditor.EditorApi.IContentSelection.Contains(Sdl.DesktopEditor.EditorApi.Position)
  - Sdl.DesktopEditor.EditorApi.IContentSelection.Control
  - Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd
  - Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd
  - Sdl.DesktopEditor.EditorApi.IContentSelection.From
  - Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow
  - Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  - Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  - Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid
  - Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move,System.Boolean)
  - Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.ContentRange)
  - Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position,System.Boolean)
  - Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  - Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  - Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView
  - Sdl.DesktopEditor.EditorApi.IContentSelection.Upto
  - Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow
  langs:
  - csharp
  - vb
  name: IContentSelection
  nameWithType: IContentSelection
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe currently selected content in the edit control.\n<p>\nThe selection is represented by two positions: <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref>, where the from \nposition is the start of the selection and the upto position is the active end of the selection, i.e. the end that\ntypically moves when the user presses Shift + arrow keys, or selects text using the mouse.\n</p>\n<p>\nWhen no content is selected the from and upto positions are the same. This can\nbe tested through the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty\" data-throw-if-not-resolved=\"false\"></xref> property of the selection.\n</p>\n<p>\nThe selection can be made empty by explicitly calling <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nThe from position does not need to be before the upto position. This can happen e.g. if the user selects \ntext starting from the right and moving left in the document. In such cases the selection is said to be reversed. \nThis can be tested through the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed\" data-throw-if-not-resolved=\"false\"></xref> property of the selection. \n</p>\n<p>\nThe from and upto positions of the selection can be swapped by calling the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse\" data-throw-if-not-resolved=\"false\"></xref>\nmethod. Calling the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize\" data-throw-if-not-resolved=\"false\"></xref> method ensures that the from position in the selection\nis not after the upto position, by testing if the selection is reversed and in that case reversing it.\n</p>\n<p>\nThe selection can be explicitly moved through the methods <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nThe selection is never <code>null</code> but may not always be valid. Use <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid\" data-throw-if-not-resolved=\"false\"></xref> to test whether\nthe selection is in a safe state to use.\n</p>\n"
  syntax:
    content: public interface IContentSelection
    content.vb: Public Interface IContentSelection
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Contains(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Contains(Sdl.DesktopEditor.EditorApi.Position)
  id: Contains(Sdl.DesktopEditor.EditorApi.Position)
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: Contains(Position)
  nameWithType: IContentSelection.Contains(Position)
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Contains(Sdl.DesktopEditor.EditorApi.Position)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nDetermine if a position is inside the selection.\n"
  remarks: "\n<p>\nThe position is considered to be &quot;inside&quot; if it is at the same location as the first \nposition in the selection (i.e. the From position if the range is normalized, or the Upto position if not).\nIt is considered &quot;outside&quot; if it is at (i.e. same as) the last part of the selection.\nIf the selection is empty the position is not considered to be &quot;inside&quot;.\n</p>\n"
  syntax:
    content: bool Contains(Position position)
    parameters:
    - id: position
      type: Sdl.DesktopEditor.EditorApi.Position
      description: The position to test.
    return:
      type: System.Boolean
      description: <code>true</code> if the position is considered to be inside the selection.
    content.vb: Function Contains(position As Position) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.Contains*
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView
  id: ScrollIntoView
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: ScrollIntoView()
  nameWithType: IContentSelection.ScrollIntoView()
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nScroll the content at the current selection into view.\n"
  remarks: "\n<p>\nNote that there is seldom a need to call this method as the selection is\nautomatically scrolled into view when it is moved. However if you resize\nthe window (for example) the selection may end up outside of the view as a result - calling\nthis method will bring it back into view.\n</p>\n<p>\nIf the entire selection cannot be scrolled into view the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> end\nof the selection should at least be scrolled in, with as much of the rest\nof the selection visible as possible.\n</p>\n"
  syntax:
    content: void ScrollIntoView()
    content.vb: Sub ScrollIntoView
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView*
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  id: CollapseToFrom
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: CollapseToFrom()
  nameWithType: IContentSelection.CollapseToFrom()
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMakes the selection empty by moving <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> position.\n"
  syntax:
    content: void CollapseToFrom()
    content.vb: Sub CollapseToFrom
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
    commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  id: CollapseToUpto
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: CollapseToUpto()
  nameWithType: IContentSelection.CollapseToUpto()
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMakes the selection empty by moving <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> position.\n"
  syntax:
    content: void CollapseToUpto()
    content.vb: Sub CollapseToUpto
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
    commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  id: Reverse
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: IContentSelection.Reverse()
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nSwaps the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> positions.\n"
  remarks: This operation has no effect if the selection is empty.
  syntax:
    content: void Reverse()
    content.vb: Sub Reverse
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
    commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  id: Normalize
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: Normalize()
  nameWithType: IContentSelection.Normalize()
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nSwaps the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> positions if the selection\nis reversed, to ensure that From always appears before (or in the same place as) Upto.\n"
  remarks: This operation has no effect if the selection is empty or if it is not reversed.
  syntax:
    content: void Normalize()
    content.vb: Sub Normalize
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
    commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move,System.Boolean)
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move,System.Boolean)
  id: Move(Sdl.DesktopEditor.EditorApi.Move,System.Boolean)
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: Move(Move, Boolean)
  nameWithType: IContentSelection.Move(Move, Boolean)
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move, System.Boolean)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMove the selection relative to its current location.\n"
  remarks: "\n<p>\nIf the selection is not visible it is automatically scrolled into view.\n</p>\n"
  syntax:
    content: bool Move(Move direction, bool extendSelection)
    parameters:
    - id: direction
      type: Sdl.DesktopEditor.EditorApi.Move
      description: Indicates how the selection should be moved.
    - id: extendSelection
      type: System.Boolean
      description: >-
        If <code>true</code> only the active end (<xref href="Sdl.DesktopEditor.EditorApi.IContentSelection.Upto" data-throw-if-not-resolved="false"></xref>)

        is moved. If <code>false</code> both <xref href="Sdl.DesktopEditor.EditorApi.IContentSelection.From" data-throw-if-not-resolved="false"></xref> and <xref href="Sdl.DesktopEditor.EditorApi.IContentSelection.Upto" data-throw-if-not-resolved="false"></xref> are moved.
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the selection was moved as a result of the operation. (For example
                    moving to the start of the line when the selection is already at the start of the line
                    will not change the selection.)
    content.vb: Function Move(direction As Move, extendSelection As Boolean) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.Move*
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position,System.Boolean)
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position,System.Boolean)
  id: MoveTo(Sdl.DesktopEditor.EditorApi.Position,System.Boolean)
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: MoveTo(Position, Boolean)
  nameWithType: IContentSelection.MoveTo(Position, Boolean)
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position, System.Boolean)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMove the selection to a specific location.\n"
  remarks: "\n<p>\nIf the selection is not visible it is automatically scrolled into view.\n</p>\n"
  syntax:
    content: bool MoveTo(Position destination, bool extendSelection)
    parameters:
    - id: destination
      type: Sdl.DesktopEditor.EditorApi.Position
      description: The location to which the selection should be moved.
    - id: extendSelection
      type: System.Boolean
      description: >-
        If <code>true</code> only the active end (<xref href="Sdl.DesktopEditor.EditorApi.IContentSelection.Upto" data-throw-if-not-resolved="false"></xref>)

        is moved. If <code>false</code> both <xref href="Sdl.DesktopEditor.EditorApi.IContentSelection.From" data-throw-if-not-resolved="false"></xref> and <xref href="Sdl.DesktopEditor.EditorApi.IContentSelection.Upto" data-throw-if-not-resolved="false"></xref> are moved.
    return:
      type: System.Boolean
      description: <code>true</code> if the selection was moved as a result of the operation.
    content.vb: Function MoveTo(destination As Position, extendSelection As Boolean) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo*
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.ContentRange)
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.ContentRange)
  id: MoveTo(Sdl.DesktopEditor.EditorApi.ContentRange)
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: MoveTo(ContentRange)
  nameWithType: IContentSelection.MoveTo(ContentRange)
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.ContentRange)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMove the selection so that it spans the specified range.\n"
  remarks: "\n<p>\nIf the selection is not visible it is automatically scrolled into view.\n</p>\n"
  syntax:
    content: bool MoveTo(ContentRange range)
    parameters:
    - id: range
      type: Sdl.DesktopEditor.EditorApi.ContentRange
      description: The range that the selection should span.
    return:
      type: System.Boolean
      description: <code>true</code> if the selection was moved as a result of this operation.
    content.vb: Function MoveTo(range As ContentRange) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo*
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Control
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.Control
  id: Control
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: Control
  nameWithType: IContentSelection.Control
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Control
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe edit control the selection belongs to.\n"
  syntax:
    content: IEditControl Control { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IEditControl
    content.vb: ReadOnly Property Control As IEditControl
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.Control*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  id: IsEmpty
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: IContentSelection.IsEmpty
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if the selection is empty (when the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> position\nis equivalent to the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> position).\n"
  syntax:
    content: bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsEmpty As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  id: IsReversed
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: IsReversed
  nameWithType: IContentSelection.IsReversed
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if the selection is reversed (the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref>\nposition is before the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> position).\n"
  syntax:
    content: bool IsReversed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsReversed As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  - linkId: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
    commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid
  id: IsValid
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: IContentSelection.IsValid
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nTests whether the current selection is valid. The selection is valid when both\nfrom and upto positions are valid, otherwise it is not valid.  This is useful for\ntesting whether the selection has been initialized properly yet, or is visible on the screen.\n"
  syntax:
    content: bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsValid As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.From
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.From
  id: From
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: From
  nameWithType: IContentSelection.From
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.From
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe start of the currently selected content in the edit control.\n"
  remarks: "\n<p>This is the non-active end of the selection, i.e. the end that does not move when selecting \ntext using arrow keys or the mouse (or the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> methods).</p>\n<p>The From position may appear before the Upto position if the selection is reversed.</p>\n<p>\nAssigning to this property moves the selection. If the selection is not visible it is also scrolled into view.\n</p>\n"
  syntax:
    content: Position From { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.Position
    content.vb: Property From As Position
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.From*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Upto
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.Upto
  id: Upto
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: Upto
  nameWithType: IContentSelection.Upto
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Upto
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe active end of the currently selected content in the edit control.\n"
  remarks: "\n<p>This is the part of the selection that moves when selecting text using arrow keys or the mouse \n(or the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Move(Sdl.DesktopEditor.EditorApi.Move%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo(Sdl.DesktopEditor.EditorApi.Position%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> methods).</p>\n<p>The Upto position may appear after the From position if the selection is reversed.</p>\n<p>\nAssigning to this property moves the selection. If the selection is not visible it is also scrolled into view.\n</p>\n"
  syntax:
    content: Position Upto { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.Position
    content.vb: Property Upto As Position
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.Upto*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow
  id: FromRow
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: FromRow
  nameWithType: IContentSelection.FromRow
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe row at the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.From\" data-throw-if-not-resolved=\"false\"></xref> position of the current selection. Can be <code>null</code> if there is\nno row at that position (either because from is invalid or the layout has not be fully generated yet).\n"
  remarks: "\n<p>\nThis property can also be used to gain access to the <xref href=\"Sdl.DesktopEditor.EditorApi.ISegmentContainerNode\" data-throw-if-not-resolved=\"false\"></xref>\nand the <xref href=\"Sdl.DesktopEditor.EditorApi.IParagraphUnitContainerNode\" data-throw-if-not-resolved=\"false\"></xref> at the from end of selection.\n</p>\n"
  syntax:
    content: IRowInfo FromRow { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
    content.vb: ReadOnly Property FromRow As IRowInfo
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow
  id: UptoRow
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: UptoRow
  nameWithType: IContentSelection.UptoRow
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe row at the <xref href=\"Sdl.DesktopEditor.EditorApi.IContentSelection.Upto\" data-throw-if-not-resolved=\"false\"></xref> position of the current selection. Can be <code>null</code> if there is\nno row at that position (either because upto is invalid or the layout has not be fully generated yet).\n"
  remarks: "\n<p>\nThis property can also be used to gain access to the <xref href=\"Sdl.DesktopEditor.EditorApi.ISegmentContainerNode\" data-throw-if-not-resolved=\"false\"></xref>\nand the <xref href=\"Sdl.DesktopEditor.EditorApi.IParagraphUnitContainerNode\" data-throw-if-not-resolved=\"false\"></xref> at the upto end of selection.\n</p>\n"
  syntax:
    content: IRowInfo UptoRow { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IRowInfo
    content.vb: ReadOnly Property UptoRow As IRowInfo
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd
  id: FileAtActiveEnd
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: FileAtActiveEnd
  nameWithType: IContentSelection.FileAtActiveEnd
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nSome editing operations should not work if the selection spans file boundaries.\nThis method can be used for checking these condition.\n"
  syntax:
    content: IFileContainerNode FileAtActiveEnd { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IFileContainerNode
      description: The file container for the active end of the selection.
    content.vb: ReadOnly Property FileAtActiveEnd As IFileContainerNode
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd
  id: FileAtNonactiveEnd
  parent: Sdl.DesktopEditor.EditorApi.IContentSelection
  langs:
  - csharp
  - vb
  name: FileAtNonactiveEnd
  nameWithType: IContentSelection.FileAtNonactiveEnd
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nSome editing operations should not work if the selection spans file boundaries.\nThis method can be used for checking these condition.\n"
  syntax:
    content: IFileContainerNode FileAtNonactiveEnd { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IFileContainerNode
      description: The file container for the non-active end of the selection.
    content.vb: ReadOnly Property FileAtNonactiveEnd As IFileContainerNode
  overload: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Contains*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.Contains
  isExternal: true
  name: Contains
  nameWithType: IContentSelection.Contains
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Contains
- uid: Sdl.DesktopEditor.EditorApi.Position
  commentId: T:Sdl.DesktopEditor.EditorApi.Position
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Position
  nameWithType: Position
  fullName: Sdl.DesktopEditor.EditorApi.Position
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView
  isExternal: true
  name: ScrollIntoView
  nameWithType: IContentSelection.ScrollIntoView
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.ScrollIntoView
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  isExternal: true
  name: CollapseToFrom
  nameWithType: IContentSelection.CollapseToFrom
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
  isExternal: true
  name: CollapseToUpto
  nameWithType: IContentSelection.CollapseToUpto
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToUpto
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.CollapseToFrom
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  isExternal: true
  name: Reverse
  nameWithType: IContentSelection.Reverse
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  commentId: P:Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
  isExternal: true
  name: Normalize
  nameWithType: IContentSelection.Normalize
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Normalize
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  commentId: M:Sdl.DesktopEditor.EditorApi.IContentSelection.Reverse
  isExternal: true
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Move*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.Move
  isExternal: true
  name: Move
  nameWithType: IContentSelection.Move
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Move
- uid: Sdl.DesktopEditor.EditorApi.Move
  commentId: T:Sdl.DesktopEditor.EditorApi.Move
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Move
  nameWithType: Move
  fullName: Sdl.DesktopEditor.EditorApi.Move
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo
  isExternal: true
  name: MoveTo
  nameWithType: IContentSelection.MoveTo
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.MoveTo
- uid: Sdl.DesktopEditor.EditorApi.ContentRange
  commentId: T:Sdl.DesktopEditor.EditorApi.ContentRange
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ContentRange
  nameWithType: ContentRange
  fullName: Sdl.DesktopEditor.EditorApi.ContentRange
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Control*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.Control
  isExternal: true
  name: Control
  nameWithType: IContentSelection.Control
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Control
- uid: Sdl.DesktopEditor.EditorApi.IEditControl
  commentId: T:Sdl.DesktopEditor.EditorApi.IEditControl
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IEditControl
  nameWithType: IEditControl
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
  isExternal: true
  name: IsEmpty
  nameWithType: IContentSelection.IsEmpty
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.IsEmpty
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
  isExternal: true
  name: IsReversed
  nameWithType: IContentSelection.IsReversed
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.IsReversed
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid
  isExternal: true
  name: IsValid
  nameWithType: IContentSelection.IsValid
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.IsValid
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.From*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.From
  isExternal: true
  name: From
  nameWithType: IContentSelection.From
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.From
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.Upto*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.Upto
  isExternal: true
  name: Upto
  nameWithType: IContentSelection.Upto
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.Upto
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow
  isExternal: true
  name: FromRow
  nameWithType: IContentSelection.FromRow
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.FromRow
- uid: Sdl.DesktopEditor.EditorApi.IRowInfo
  commentId: T:Sdl.DesktopEditor.EditorApi.IRowInfo
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IRowInfo
  nameWithType: IRowInfo
  fullName: Sdl.DesktopEditor.EditorApi.IRowInfo
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow
  isExternal: true
  name: UptoRow
  nameWithType: IContentSelection.UptoRow
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.UptoRow
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd
  isExternal: true
  name: FileAtActiveEnd
  nameWithType: IContentSelection.FileAtActiveEnd
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtActiveEnd
- uid: Sdl.DesktopEditor.EditorApi.IFileContainerNode
  commentId: T:Sdl.DesktopEditor.EditorApi.IFileContainerNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IFileContainerNode
  nameWithType: IFileContainerNode
  fullName: Sdl.DesktopEditor.EditorApi.IFileContainerNode
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd
  isExternal: true
  name: FileAtNonactiveEnd
  nameWithType: IContentSelection.FileAtNonactiveEnd
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection.FileAtNonactiveEnd
