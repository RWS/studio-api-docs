### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  id: ScoringResult
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.#ctor
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter(System.String,System.Int32)
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty(Sdl.LanguagePlatform.TranslationMemory.Penalty)
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch
  - Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements
  langs:
  - csharp
  - vb
  name: ScoringResult
  nameWithType: ScoringResult
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRepresents the score for a search result.\n"
  syntax:
    content: public class ScoringResult
    content.vb: Public Class ScoringResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.#ctor
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: ScoringResult()
  nameWithType: ScoringResult.ScoringResult()
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ScoringResult()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance with default values.\n"
  syntax:
    content: public ScoringResult()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  id: FindPenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: FindPenalty(PenaltyType)
  nameWithType: ScoringResult.FindPenalty(PenaltyType)
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRetrieves the applied penalty for a specified penalty type.\n"
  syntax:
    content: public AppliedPenalty FindPenalty(PenaltyType pt)
    parameters:
    - id: pt
      type: Sdl.LanguagePlatform.TranslationMemory.PenaltyType
      description: The penalty type.
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
      description: The applied penalty for the specified type or null if no penalty of that type can be found.
    content.vb: Public Function FindPenalty(pt As PenaltyType) As AppliedPenalty
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter(System.String)
  id: FindAppliedFilter(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: FindAppliedFilter(String)
  nameWithType: ScoringResult.FindAppliedFilter(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRetrieves the applied penalty for a specified filter.\n"
  syntax:
    content: public AppliedPenalty FindAppliedFilter(string filterName)
    parameters:
    - id: filterName
      type: System.String
      description: The filter name.
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
      description: The applied penalty for the specified filter or null if no filter with that name can be found.
    content.vb: Public Function FindAppliedFilter(filterName As String) As AppliedPenalty
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty(Sdl.LanguagePlatform.TranslationMemory.Penalty)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty(Sdl.LanguagePlatform.TranslationMemory.Penalty)
  id: ApplyPenalty(Sdl.LanguagePlatform.TranslationMemory.Penalty)
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: ApplyPenalty(Penalty)
  nameWithType: ScoringResult.ApplyPenalty(Penalty)
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty(Sdl.LanguagePlatform.TranslationMemory.Penalty)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nApplies a penalty to the current score unless a penalty with the same type has already \nbeen applied.\n"
  syntax:
    content: public void ApplyPenalty(Penalty pt)
    parameters:
    - id: pt
      type: Sdl.LanguagePlatform.TranslationMemory.Penalty
      description: The penalty.
    content.vb: Public Sub ApplyPenalty(pt As Penalty)
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  id: RemovePenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: RemovePenalty(PenaltyType)
  nameWithType: ScoringResult.RemovePenalty(PenaltyType)
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty(Sdl.LanguagePlatform.TranslationMemory.PenaltyType)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves the penalty of the specified type, if set.\n"
  syntax:
    content: public void RemovePenalty(PenaltyType pt)
    parameters:
    - id: pt
      type: Sdl.LanguagePlatform.TranslationMemory.PenaltyType
    content.vb: Public Sub RemovePenalty(pt As PenaltyType)
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter(System.String,System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter(System.String,System.Int32)
  id: ApplyFilter(System.String,System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: ApplyFilter(String, Int32)
  nameWithType: ScoringResult.ApplyFilter(String, Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter(System.String, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nApplies a penalty to the current score, with a specified filter and cost.\n"
  syntax:
    content: public void ApplyFilter(string filterName, int malus)
    parameters:
    - id: filterName
      type: System.String
      description: The filter name.
    - id: malus
      type: System.Int32
      description: The penalty cost.
    content.vb: Public Sub ApplyFilter(filterName As String, malus As Integer)
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch
  id: TextContextMatch
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: TextContextMatch
  nameWithType: ScoringResult.TextContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the type of context match for this result, if applicable.\n"
  syntax:
    content: public TextContextMatch TextContextMatch { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.TextContextMatch
    content.vb: Public Property TextContextMatch As TextContextMatch
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch
  id: IsStructureContextMatch
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: IsStructureContextMatch
  nameWithType: ScoringResult.IsStructureContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets whether or not this match also matches the structural document context. If no\nstructure context was specified during the search, the value will be false.\n"
  syntax:
    content: public bool IsStructureContextMatch { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsStructureContextMatch As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch
  id: IdContextMatch
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: IdContextMatch
  nameWithType: ScoringResult.IdContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets SIDContext\n"
  syntax:
    content: public bool IdContextMatch { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IdContextMatch As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match
  id: Match
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: Match
  nameWithType: ScoringResult.Match
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets the final match score for this result, which is the base score minus the maluses of any applied penalties.\n"
  syntax:
    content: public int Match { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Match As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore
  id: BaseScore
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: BaseScore
  nameWithType: ScoringResult.BaseScore
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the base score for this result.\n"
  syntax:
    content: public int BaseScore { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property BaseScore As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables
  id: ResolvedPlaceables
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: ResolvedPlaceables
  nameWithType: ScoringResult.ResolvedPlaceables
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the number of placeables that can be resolved for this result.\n"
  syntax:
    content: public int ResolvedPlaceables { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ResolvedPlaceables As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements
  id: TextReplacements
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: TextReplacements
  nameWithType: ScoringResult.TextReplacements
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the number of TextReplacements applied to this result.\n"
  syntax:
    content: public int TextReplacements { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property TextReplacements As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges
  id: PlaceableFormatChanges
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: PlaceableFormatChanges
  nameWithType: ScoringResult.PlaceableFormatChanges
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\n\n"
  syntax:
    content: public int PlaceableFormatChanges { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PlaceableFormatChanges As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance
  id: EditDistance
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: EditDistance
  nameWithType: ScoringResult.EditDistance
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the edit distance for this result. The edit distance is null for concordance searches \nand is only set for standard searches.\n"
  syntax:
    content: public EditDistance EditDistance { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.EditDistance.EditDistance
    content.vb: Public Property EditDistance As EditDistance
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges
  id: MatchingConcordanceRanges
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: MatchingConcordanceRanges
  nameWithType: ScoringResult.MatchingConcordanceRanges
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\n<p>Gets or sets the matching concordance ranges for this result. This field is null for standard\nsearches and only set for concordance searches. The value identifies the ranges in the memory\nsource segment which match the concordance search.</p>\n<p>\nNote that the ranges are not necessarily consecutive. They are, however, sorted.\n</p>\n"
  syntax:
    content: public List<SegmentRange> MatchingConcordanceRanges { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentRange}
    content.vb: Public Property MatchingConcordanceRanges As List(Of SegmentRange)
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted
  id: MemoryTagsDeleted
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: MemoryTagsDeleted
  nameWithType: ScoringResult.MemoryTagsDeleted
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets whether the tags are deleted or not for this result.\n"
  syntax:
    content: public bool MemoryTagsDeleted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property MemoryTagsDeleted As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch
  id: TagMismatch
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: TagMismatch
  nameWithType: ScoringResult.TagMismatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets whether there are any tag mismatches. This flag\nis set even if no tag mismatch penalty is configured.\n"
  syntax:
    content: public bool TagMismatch { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property TagMismatch As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties
  id: AppliedPenalties
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: AppliedPenalties
  nameWithType: ScoringResult.AppliedPenalties
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the list of applied penalties for this result.\n"
  syntax:
    content: public List<AppliedPenalty> AppliedPenalties { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty}
    content.vb: Public Property AppliedPenalties As List(Of AppliedPenalty)
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers
  id: TargetSegmentDiffers
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: TargetSegmentDiffers
  nameWithType: ScoringResult.TargetSegmentDiffers
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nValid only when a whole TU is searched, and is only set if it&apos;s a 100% match. Not set for fuzzy or concordance matches.\n"
  syntax:
    content: public bool TargetSegmentDiffers { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property TargetSegmentDiffers As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch
  id: IsExactMatch
  parent: Sdl.LanguagePlatform.TranslationMemory.ScoringResult
  langs:
  - csharp
  - vb
  name: IsExactMatch
  nameWithType: ScoringResult.IsExactMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets a value indicating whether this result is an exact match. This is the case\nif the base score is 100.\n"
  syntax:
    content: public bool IsExactMatch { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsExactMatch As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.#ctor
  isExternal: true
  name: ScoringResult
  nameWithType: ScoringResult.ScoringResult
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ScoringResult
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty
  isExternal: true
  name: FindPenalty
  nameWithType: ScoringResult.FindPenalty
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindPenalty
- uid: Sdl.LanguagePlatform.TranslationMemory.PenaltyType
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.PenaltyType
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: PenaltyType
  nameWithType: PenaltyType
  fullName: Sdl.LanguagePlatform.TranslationMemory.PenaltyType
- uid: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: AppliedPenalty
  nameWithType: AppliedPenalty
  fullName: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter
  isExternal: true
  name: FindAppliedFilter
  nameWithType: ScoringResult.FindAppliedFilter
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.FindAppliedFilter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty
  isExternal: true
  name: ApplyPenalty
  nameWithType: ScoringResult.ApplyPenalty
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyPenalty
- uid: Sdl.LanguagePlatform.TranslationMemory.Penalty
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.Penalty
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Penalty
  nameWithType: Penalty
  fullName: Sdl.LanguagePlatform.TranslationMemory.Penalty
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty
  isExternal: true
  name: RemovePenalty
  nameWithType: ScoringResult.RemovePenalty
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.RemovePenalty
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter
  isExternal: true
  name: ApplyFilter
  nameWithType: ScoringResult.ApplyFilter
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ApplyFilter
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch
  isExternal: true
  name: TextContextMatch
  nameWithType: ScoringResult.TextContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextContextMatch
- uid: Sdl.LanguagePlatform.TranslationMemory.TextContextMatch
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.TextContextMatch
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: TextContextMatch
  nameWithType: TextContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.TextContextMatch
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch
  isExternal: true
  name: IsStructureContextMatch
  nameWithType: ScoringResult.IsStructureContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsStructureContextMatch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch
  isExternal: true
  name: IdContextMatch
  nameWithType: ScoringResult.IdContextMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IdContextMatch
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match
  isExternal: true
  name: Match
  nameWithType: ScoringResult.Match
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.Match
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore
  isExternal: true
  name: BaseScore
  nameWithType: ScoringResult.BaseScore
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.BaseScore
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables
  isExternal: true
  name: ResolvedPlaceables
  nameWithType: ScoringResult.ResolvedPlaceables
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.ResolvedPlaceables
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements
  isExternal: true
  name: TextReplacements
  nameWithType: ScoringResult.TextReplacements
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TextReplacements
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges
  isExternal: true
  name: PlaceableFormatChanges
  nameWithType: ScoringResult.PlaceableFormatChanges
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.PlaceableFormatChanges
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance
  isExternal: true
  name: EditDistance
  nameWithType: ScoringResult.EditDistance
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.EditDistance
- uid: Sdl.LanguagePlatform.Core.EditDistance.EditDistance
  commentId: T:Sdl.LanguagePlatform.Core.EditDistance.EditDistance
  parent: Sdl.LanguagePlatform.Core.EditDistance
  isExternal: true
  name: EditDistance
  nameWithType: EditDistance
  fullName: Sdl.LanguagePlatform.Core.EditDistance.EditDistance
- uid: Sdl.LanguagePlatform.Core.EditDistance
  commentId: N:Sdl.LanguagePlatform.Core.EditDistance
  isExternal: true
  name: Sdl.LanguagePlatform.Core.EditDistance
  nameWithType: Sdl.LanguagePlatform.Core.EditDistance
  fullName: Sdl.LanguagePlatform.Core.EditDistance
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges
  isExternal: true
  name: MatchingConcordanceRanges
  nameWithType: ScoringResult.MatchingConcordanceRanges
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MatchingConcordanceRanges
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentRange}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentRange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SegmentRange>
  nameWithType: List<SegmentRange>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentRange>
  nameWithType.vb: List(Of SegmentRange)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentRange)
  name.vb: List(Of SegmentRange)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.SegmentRange
    name: SegmentRange
    nameWithType: SegmentRange
    fullName: Sdl.LanguagePlatform.Core.SegmentRange
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.SegmentRange
    name: SegmentRange
    nameWithType: SegmentRange
    fullName: Sdl.LanguagePlatform.Core.SegmentRange
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted
  isExternal: true
  name: MemoryTagsDeleted
  nameWithType: ScoringResult.MemoryTagsDeleted
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.MemoryTagsDeleted
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch
  isExternal: true
  name: TagMismatch
  nameWithType: ScoringResult.TagMismatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TagMismatch
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties
  isExternal: true
  name: AppliedPenalties
  nameWithType: ScoringResult.AppliedPenalties
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.AppliedPenalties
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AppliedPenalty>
  nameWithType: List<AppliedPenalty>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty>
  nameWithType.vb: List(Of AppliedPenalty)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty)
  name.vb: List(Of AppliedPenalty)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
    name: AppliedPenalty
    nameWithType: AppliedPenalty
    fullName: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
    name: AppliedPenalty
    nameWithType: AppliedPenalty
    fullName: Sdl.LanguagePlatform.TranslationMemory.AppliedPenalty
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers
  isExternal: true
  name: TargetSegmentDiffers
  nameWithType: ScoringResult.TargetSegmentDiffers
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.TargetSegmentDiffers
- uid: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch
  isExternal: true
  name: IsExactMatch
  nameWithType: ScoringResult.IsExactMatch
  fullName: Sdl.LanguagePlatform.TranslationMemory.ScoringResult.IsExactMatch
