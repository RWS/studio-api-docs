### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  id: LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(Sdl.LanguagePlatform.Core.Segmentation.LocalizedString)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add(System.Object)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text
  - Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString
  langs:
  - csharp
  - vb
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nRepresents a collection of culture-annotated strings.\n"
  syntax:
    content: 'public class LocalizedString : IEnumerable<CultureString>, IEnumerable, ICloneable'
    content.vb: >-
      Public Class LocalizedString
          Implements IEnumerable(Of CultureString), IEnumerable, ICloneable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}
  - System.Collections.IEnumerable
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: LocalizedString()
  nameWithType: LocalizedString.LocalizedString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.LocalizedString()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with default values.\n"
  syntax:
    content: public LocalizedString()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(Sdl.LanguagePlatform.Core.Segmentation.LocalizedString)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(Sdl.LanguagePlatform.Core.Segmentation.LocalizedString)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.LocalizedString)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: LocalizedString(LocalizedString)
  nameWithType: LocalizedString.LocalizedString(LocalizedString)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.LocalizedString(Sdl.LanguagePlatform.Core.Segmentation.LocalizedString)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the values of another instance, creating a deep copy.\n"
  syntax:
    content: public LocalizedString(LocalizedString other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
      description: The other instance
    content.vb: Public Sub New(other As LocalizedString)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: LocalizedString(String)
  nameWithType: LocalizedString.LocalizedString(String)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.LocalizedString(System.String)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nCreates a new instance with the InvariantText set to the provided text.\n"
  syntax:
    content: public LocalizedString(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to use for the invariant culture
    content.vb: Public Sub New(text As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo)
  id: GetText(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: GetText(CultureInfo)
  nameWithType: LocalizedString.GetText(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nReturns the text compatible with the provided culture.\n"
  syntax:
    content: public string GetText(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.String
    content.vb: Public Function GetText(culture As CultureInfo) As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo,System.Boolean)
  id: GetText(System.Globalization.CultureInfo,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: GetText(CultureInfo, Boolean)
  nameWithType: LocalizedString.GetText(CultureInfo, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText(System.Globalization.CultureInfo, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nReturns the text for the provided culture.\n"
  syntax:
    content: public string GetText(CultureInfo culture, bool mayFallback)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (non-null)
    - id: mayFallback
      type: System.Boolean
      description: "If false, the culture of the text and the provided\nculture must match exactly. Otherwise, it is sufficient if the cultures are \ncompatible. If an exact match for the culture is available, it will still \nbe preferred."
    return:
      type: System.String
    content.vb: Public Function GetText(culture As CultureInfo, mayFallback As Boolean) As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add(System.Object)
  id: Add(System.Object)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: LocalizedString.Add(Object)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nOnly used for XML deserialization.\n"
  syntax:
    content: public void Add(object o)
    parameters:
    - id: o
      type: System.Object
    content.vb: Public Sub Add(o As Object)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String)
  id: SetText(System.Globalization.CultureInfo,System.String)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: SetText(CultureInfo, String)
  nameWithType: LocalizedString.SetText(CultureInfo, String)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo, System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSets (adds or overwrites) the text compatible with the provided culture.\n"
  syntax:
    content: public void SetText(CultureInfo culture, string text)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (non-null)
    - id: text
      type: System.String
      description: The text
    content.vb: Public Sub SetText(culture As CultureInfo, text As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo,System.String,System.Boolean)
  id: SetText(System.Globalization.CultureInfo,System.String,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: SetText(CultureInfo, String, Boolean)
  nameWithType: LocalizedString.SetText(CultureInfo, String, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText(System.Globalization.CultureInfo, System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSets the text for the provided culture.\n"
  syntax:
    content: public void SetText(CultureInfo culture, string text, bool mayFallback)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (non-null)
    - id: text
      type: System.String
      description: The text
    - id: mayFallback
      type: System.Boolean
      description: "If false, the culture of the text and the provided\nculture must match exactly. Otherwise, it is sufficient if the cultures are \ncompatible. If an exact match for the culture is available, it will still \nbe preferred."
    content.vb: Public Sub SetText(culture As CultureInfo, text As String, mayFallback As Boolean)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo)
  id: DeleteText(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: DeleteText(CultureInfo)
  nameWithType: LocalizedString.DeleteText(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nDeletes the text compatible with the provided culture.\n"
  syntax:
    content: public void DeleteText(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture
    content.vb: Public Sub DeleteText(culture As CultureInfo)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo,System.Boolean)
  id: DeleteText(System.Globalization.CultureInfo,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: DeleteText(CultureInfo, Boolean)
  nameWithType: LocalizedString.DeleteText(CultureInfo, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText(System.Globalization.CultureInfo, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nDeletes the text for the provided culture.\n"
  syntax:
    content: public void DeleteText(CultureInfo culture, bool mayFallback)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture
    - id: mayFallback
      type: System.Boolean
      description: "If false, the culture of the text and the provided\nculture must match exactly. Otherwise, it is sufficient if the cultures are \ncompatible. If an exact match for the culture is available, it will still \nbe preferred."
    content.vb: Public Sub DeleteText(culture As CultureInfo, mayFallback As Boolean)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator
  id: GetEnumerator
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: LocalizedString.GetEnumerator()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nReturns an enumerator which is used to enumerate the encapsulated culture-annotated strings. \n"
  syntax:
    content: public IEnumerator<CultureString> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.Core.CultureString}
      description: An enumerator
    content.vb: Public Function GetEnumerator As IEnumerator(Of CultureString)
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: LocalizedString.IEnumerable.GetEnumerator()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: LocalizedString.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: LocalizedString.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalizedString.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text
  id: Text
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: LocalizedString.Text
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nAccesses the localized text which is compatible with the current UI culture.\n"
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText
  id: InvariantText
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: InvariantText
  nameWithType: LocalizedString.InvariantText
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nAccesses the localized text which is compatible with the invariant culture.\n"
  syntax:
    content: public string InvariantText { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property InvariantText As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count
  id: Count
  parent: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LocalizedString.Count
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nReturns the number of localized versions of the string.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CultureString>
  nameWithType: IEnumerable<CultureString>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.CultureString>
  nameWithType.vb: IEnumerable(Of CultureString)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.CultureString)
  name.vb: IEnumerable(Of CultureString)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.CultureString
    name: CultureString
    nameWithType: CultureString
    fullName: Sdl.LanguagePlatform.Core.CultureString
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.CultureString
    name: CultureString
    nameWithType: CultureString
    fullName: Sdl.LanguagePlatform.Core.CultureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.#ctor
  isExternal: true
  name: LocalizedString
  nameWithType: LocalizedString.LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.LocalizedString
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText
  isExternal: true
  name: GetText
  nameWithType: LocalizedString.GetText
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetText
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add
  isExternal: true
  name: Add
  nameWithType: LocalizedString.Add
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Add
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText
  isExternal: true
  name: SetText
  nameWithType: LocalizedString.SetText
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.SetText
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText
  isExternal: true
  name: DeleteText
  nameWithType: LocalizedString.DeleteText
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.DeleteText
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: LocalizedString.GetEnumerator
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.CultureString}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<CultureString>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.CultureString>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of CultureString).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.CultureString).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<CultureString>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.CultureString>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of CultureString).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.CultureString).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.Core.CultureString}
  commentId: T:System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.Core.CultureString}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<CultureString>
  nameWithType: IEnumerator<CultureString>
  fullName: System.Collections.Generic.IEnumerator<Sdl.LanguagePlatform.Core.CultureString>
  nameWithType.vb: IEnumerator(Of CultureString)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Sdl.LanguagePlatform.Core.CultureString)
  name.vb: IEnumerator(Of CultureString)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.CultureString
    name: CultureString
    nameWithType: CultureString
    fullName: Sdl.LanguagePlatform.Core.CultureString
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.CultureString
    name: CultureString
    nameWithType: CultureString
    fullName: Sdl.LanguagePlatform.Core.CultureString
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: LocalizedString.IEnumerable.GetEnumerator
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: LocalizedString.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone
  isExternal: true
  name: Clone
  nameWithType: LocalizedString.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString
  isExternal: true
  name: ToString
  nameWithType: LocalizedString.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text
  isExternal: true
  name: Text
  nameWithType: LocalizedString.Text
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Text
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText
  isExternal: true
  name: InvariantText
  nameWithType: LocalizedString.InvariantText
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.InvariantText
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count
  isExternal: true
  name: Count
  nameWithType: LocalizedString.Count
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
