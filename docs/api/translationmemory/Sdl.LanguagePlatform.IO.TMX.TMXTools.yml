### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools
  commentId: T:Sdl.LanguagePlatform.IO.TMX.TMXTools
  id: TMXTools
  parent: Sdl.LanguagePlatform.IO.TMX
  children:
  - Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String,System.Globalization.CultureInfo@)
  - Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages(System.String,System.Int32,System.Int32@)
  langs:
  - csharp
  - vb
  name: TMXTools
  nameWithType: TMXTools
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools
  type: Class
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  syntax:
    content: public static class TMXTools
    content.vb: Public Module TMXTools
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String,System.Globalization.CultureInfo@)
  commentId: M:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String,System.Globalization.CultureInfo@)
  id: GetLanguageDirection(System.String,System.Globalization.CultureInfo@)
  parent: Sdl.LanguagePlatform.IO.TMX.TMXTools
  langs:
  - csharp
  - vb
  name: GetLanguageDirection(String, out CultureInfo)
  nameWithType: TMXTools.GetLanguageDirection(String, out CultureInfo)
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String, out System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  summary: "\nAttempts to obtain the language direction from a TMX file which must be bilingual. The method reads\nthe first couple of TUs from the input file and determines the language direction. If not null, the \nresult&apos;s languages will be set to the source and target language. If a language in the result is null, \nit was not present in any TUs in the sample. If a language is the InvariantCulture, it was inconsistent \nwithin the sample (as is the case with multi-target-language TUs).\n"
  syntax:
    content: public static LanguagePair GetLanguageDirection(string fileName, out CultureInfo headerSourceLanguage)
    parameters:
    - id: fileName
      type: System.String
      description: The input file name
    - id: headerSourceLanguage
      type: System.Globalization.CultureInfo
      description: The source language as it is specified in the TMX header, or null if not set
    return:
      type: Sdl.LanguagePlatform.Core.LanguagePair
      description: The language direction or null on errors or if the language direction cannot be determined or invalid input is encountered. No exceptions are returned.
    content.vb: Public Shared Function GetLanguageDirection(fileName As String, ByRef headerSourceLanguage As CultureInfo) As LanguagePair
  overload: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection*
  nameWithType.vb: TMXTools.GetLanguageDirection(String, ByRef CultureInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String, ByRef System.Globalization.CultureInfo)
  name.vb: GetLanguageDirection(String, ByRef CultureInfo)
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages(System.String,System.Int32,System.Int32@)
  commentId: M:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages(System.String,System.Int32,System.Int32@)
  id: GetLanguages(System.String,System.Int32,System.Int32@)
  parent: Sdl.LanguagePlatform.IO.TMX.TMXTools
  langs:
  - csharp
  - vb
  name: GetLanguages(String, Int32, out Int32)
  nameWithType: TMXTools.GetLanguages(String, Int32, out Int32)
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages(System.String, System.Int32, out System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  summary: "\nGets the languages from the given TMX filename.\n"
  syntax:
    content: public static IList<CultureInfo> GetLanguages(string fileName, int limit, out int scannedTUs)
    parameters:
    - id: fileName
      type: System.String
      description: file name
    - id: limit
      type: System.Int32
      description: limit on scanned TUs; if 0 then no limit
    - id: scannedTUs
      type: System.Int32
      description: scanned TUs; if limit 0 then this corresponds to TU count
    return:
      type: System.Collections.Generic.IList{System.Globalization.CultureInfo}
      description: languages
    content.vb: Public Shared Function GetLanguages(fileName As String, limit As Integer, ByRef scannedTUs As Integer) As IList(Of CultureInfo)
  overload: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages*
  nameWithType.vb: TMXTools.GetLanguages(String, Int32, ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages(System.String, System.Int32, ByRef System.Int32)
  name.vb: GetLanguages(String, Int32, ByRef Int32)
references:
- uid: Sdl.LanguagePlatform.IO.TMX
  commentId: N:Sdl.LanguagePlatform.IO.TMX
  isExternal: true
  name: Sdl.LanguagePlatform.IO.TMX
  nameWithType: Sdl.LanguagePlatform.IO.TMX
  fullName: Sdl.LanguagePlatform.IO.TMX
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection*
  commentId: Overload:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection
  isExternal: true
  name: GetLanguageDirection
  nameWithType: TMXTools.GetLanguageDirection
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: Sdl.LanguagePlatform.Core.LanguagePair
  commentId: T:Sdl.LanguagePlatform.Core.LanguagePair
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: LanguagePair
  nameWithType: LanguagePair
  fullName: Sdl.LanguagePlatform.Core.LanguagePair
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages*
  commentId: Overload:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages
  isExternal: true
  name: GetLanguages
  nameWithType: TMXTools.GetLanguages
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguages
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{System.Globalization.CultureInfo}
  commentId: T:System.Collections.Generic.IList{System.Globalization.CultureInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CultureInfo>
  nameWithType: IList<CultureInfo>
  fullName: System.Collections.Generic.IList<System.Globalization.CultureInfo>
  nameWithType.vb: IList(Of CultureInfo)
  fullName.vb: System.Collections.Generic.IList(Of System.Globalization.CultureInfo)
  name.vb: IList(Of CultureInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
