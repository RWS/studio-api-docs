### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.IField
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.IField
  id: IField
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.IField.Name
  - Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames
  - Sdl.LanguagePlatform.TranslationMemory.IField.ValueType
  langs:
  - csharp
  - vb
  name: IField
  nameWithType: IField
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField
  type: Interface
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRepresents a field declaration.\n"
  syntax:
    content: public interface IField
    content.vb: Public Interface IField
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.LanguagePlatform.TranslationMemory.IField.Name
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.IField.Name
  id: Name
  parent: Sdl.LanguagePlatform.TranslationMemory.IField
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IField.Name
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField.Name
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the field name.\n"
  syntax:
    content: string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Name As String
  overload: Sdl.LanguagePlatform.TranslationMemory.IField.Name*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.LanguagePlatform.TranslationMemory.IField.ValueType
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.IField.ValueType
  id: ValueType
  parent: Sdl.LanguagePlatform.TranslationMemory.IField
  langs:
  - csharp
  - vb
  name: ValueType
  nameWithType: IField.ValueType
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField.ValueType
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the field value type.\n"
  syntax:
    content: FieldValueType ValueType { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.FieldValueType
    content.vb: Property ValueType As FieldValueType
  overload: Sdl.LanguagePlatform.TranslationMemory.IField.ValueType*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames
  id: PicklistItemNames
  parent: Sdl.LanguagePlatform.TranslationMemory.IField
  langs:
  - csharp
  - vb
  name: PicklistItemNames
  nameWithType: IField.PicklistItemNames
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nThe names of all picklist items for this Field. This collection will be empty if this field is not a \n<xref href=\"Sdl.LanguagePlatform.TranslationMemory.FieldValueType.SinglePicklist\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Sdl.LanguagePlatform.TranslationMemory.FieldValueType.MultiplePicklist\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: IList<string> PicklistItemNames { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: ReadOnly Property PicklistItemNames As IList(Of String)
  overload: Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: Sdl.LanguagePlatform.TranslationMemory.IField.Name*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.IField.Name
  isExternal: true
  name: Name
  nameWithType: IField.Name
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.TranslationMemory.IField.ValueType*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.IField.ValueType
  isExternal: true
  name: ValueType
  nameWithType: IField.ValueType
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField.ValueType
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldValueType
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.FieldValueType
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: FieldValueType
  nameWithType: FieldValueType
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldValueType
- uid: Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames
  isExternal: true
  name: PicklistItemNames
  nameWithType: IField.PicklistItemNames
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField.PicklistItemNames
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
