### YamlMime:ManagedReference
items:
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  commentId: T:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  id: SeparatorCombination
  parent: Sdl.Core.LanguageProcessing.Tokenization
  children:
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor(System.Globalization.CultureInfo,System.Boolean)
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor(System.String,System.String,System.Boolean)
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals(System.Object)
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators
  - Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable
  langs:
  - csharp
  - vb
  name: SeparatorCombination
  nameWithType: SeparatorCombination
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\nClass used to define separator combinations to numberic tokens\n"
  syntax:
    content: 'public class SeparatorCombination : ICloneable'
    content.vb: >-
      Public Class SeparatorCombination
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor
  id: '#ctor'
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: SeparatorCombination()
  nameWithType: SeparatorCombination.SeparatorCombination()
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.SeparatorCombination()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n\n"
  syntax:
    content: public SeparatorCombination()
    content.vb: Public Sub New
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor(System.Globalization.CultureInfo,System.Boolean)
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor(System.Globalization.CultureInfo,System.Boolean)
  id: '#ctor(System.Globalization.CultureInfo,System.Boolean)'
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: SeparatorCombination(CultureInfo, Boolean)
  nameWithType: SeparatorCombination.SeparatorCombination(CultureInfo, Boolean)
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.SeparatorCombination(System.Globalization.CultureInfo, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n<param name=\"culture\" />\n<param name=\"augmentGroupSeparators\">If true, blanks/nbsp&apos;s will be interchangeable</param>\n"
  syntax:
    content: public SeparatorCombination(CultureInfo culture, bool augmentGroupSeparators)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    - id: augmentGroupSeparators
      type: System.Boolean
    content.vb: Public Sub New(culture As CultureInfo, augmentGroupSeparators As Boolean)
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor(System.String,System.String,System.Boolean)
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: SeparatorCombination(String, String, Boolean)
  nameWithType: SeparatorCombination.SeparatorCombination(String, String, Boolean)
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.SeparatorCombination(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n<param name=\"groupSeparators\" />\n<param name=\"decimalSeparators\" />\n<param name=\"augmentGroupSeparators\">If true, blanks/nbsp&apos;s will be interchangeable</param>\n"
  syntax:
    content: public SeparatorCombination(string groupSeparators, string decimalSeparators, bool augmentGroupSeparators)
    parameters:
    - id: groupSeparators
      type: System.String
    - id: decimalSeparators
      type: System.String
    - id: augmentGroupSeparators
      type: System.Boolean
    content.vb: Public Sub New(groupSeparators As String, decimalSeparators As String, augmentGroupSeparators As Boolean)
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable
  id: IsSwappable
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: IsSwappable()
  nameWithType: SeparatorCombination.IsSwappable()
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\ntrue iff one separator is the full stop and the other is the comma\n"
  syntax:
    content: public bool IsSwappable()
    return:
      type: System.Boolean
    content.vb: Public Function IsSwappable As Boolean
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals(System.Object)
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SeparatorCombination.Equals(Object)
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode
  id: GetHashCode
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SeparatorCombination.GetHashCode()
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone
  commentId: M:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone
  id: Clone
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SeparatorCombination.Clone()
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators
  commentId: P:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators
  id: GroupSeparators
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: GroupSeparators
  nameWithType: SeparatorCombination.GroupSeparators
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n\n"
  syntax:
    content: public string GroupSeparators { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property GroupSeparators As String
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators
  commentId: P:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators
  id: DecimalSeparators
  parent: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination
  langs:
  - csharp
  - vb
  name: DecimalSeparators
  nameWithType: SeparatorCombination.DecimalSeparators
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.Core.LanguageProcessing.Tokenization
  summary: "\n\n"
  syntax:
    content: public string DecimalSeparators { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DecimalSeparators As String
  overload: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.LanguageProcessing.Tokenization
  commentId: N:Sdl.Core.LanguageProcessing.Tokenization
  isExternal: true
  name: Sdl.Core.LanguageProcessing.Tokenization
  nameWithType: Sdl.Core.LanguageProcessing.Tokenization
  fullName: Sdl.Core.LanguageProcessing.Tokenization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.#ctor
  isExternal: true
  name: SeparatorCombination
  nameWithType: SeparatorCombination.SeparatorCombination
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.SeparatorCombination
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable
  isExternal: true
  name: IsSwappable
  nameWithType: SeparatorCombination.IsSwappable
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.IsSwappable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals
  isExternal: true
  name: Equals
  nameWithType: SeparatorCombination.Equals
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: SeparatorCombination.GetHashCode
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone
  isExternal: true
  name: Clone
  nameWithType: SeparatorCombination.Clone
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators
  isExternal: true
  name: GroupSeparators
  nameWithType: SeparatorCombination.GroupSeparators
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.GroupSeparators
- uid: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators*
  commentId: Overload:Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators
  isExternal: true
  name: DecimalSeparators
  nameWithType: SeparatorCombination.DecimalSeparators
  fullName: Sdl.Core.LanguageProcessing.Tokenization.SeparatorCombination.DecimalSeparators
