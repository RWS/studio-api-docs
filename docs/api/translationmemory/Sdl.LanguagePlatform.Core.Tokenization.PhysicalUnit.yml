### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  id: PhysicalUnit
  parent: Sdl.LanguagePlatform.Core.Tokenization
  children:
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass(System.Globalization.CultureInfo,System.String,System.String)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory(System.String,System.String)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo,System.String,System.String)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem(Sdl.LanguagePlatform.Core.Tokenization.UnitType,System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation(Sdl.LanguagePlatform.Core.Tokenization.Unit,System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits(System.Globalization.CultureInfo,System.Boolean)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX(System.Globalization.CultureInfo,System.Boolean)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  - Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  langs:
  - csharp
  - vb
  name: PhysicalUnit
  nameWithType: PhysicalUnit
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nEncapsulates information about the available physical units and their interrelationships.\n"
  syntax:
    content: public static class PhysicalUnit
    content.vb: Public Module PhysicalUnit
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: GetSystem(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetSystem(Unit)
  nameWithType: PhysicalUnit.GetSystem(Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nObtains the <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.UnitSystem\" data-throw-if-not-resolved=\"false\"></xref> of the specified unit.\n"
  syntax:
    content: public static UnitSystem GetSystem(Unit unit)
    parameters:
    - id: unit
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit to look up
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.UnitSystem
      description: "The unit system of the unit, or <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.NoSystem\" data-throw-if-not-resolved=\"false\"></xref> if the \nunit is unknown."
    content.vb: Public Shared Function GetSystem(unit As Unit) As UnitSystem
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: IsMetric(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: IsMetric(Unit)
  nameWithType: PhysicalUnit.IsMetric(Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nDetermines whether the specified unit belongs to the metric system.\n"
  syntax:
    content: public static bool IsMetric(Unit unit)
    parameters:
    - id: unit
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit
    return:
      type: System.Boolean
      description: <code>true</code> if the unit belongs to the metric system, or <code>false</code> otherwise.
    content.vb: Public Shared Function IsMetric(unit As Unit) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: GetUnitType(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetUnitType(Unit)
  nameWithType: PhysicalUnit.GetUnitType(Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nObtains the <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.UnitType\" data-throw-if-not-resolved=\"false\"></xref> of the specified unit.\n"
  syntax:
    content: public static UnitType GetUnitType(Unit unit)
    parameters:
    - id: unit
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit to look up
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.UnitType
      description: "The unit type of the unit, or <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.UnitType.NoType\" data-throw-if-not-resolved=\"false\"></xref> if the \nunit is unknown."
    content.vb: Public Shared Function GetUnitType(unit As Unit) As UnitType
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: AreUnitTypesCompatible(Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: AreUnitTypesCompatible(Unit, Unit)
  nameWithType: PhysicalUnit.AreUnitTypesCompatible(Unit, Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible(Sdl.LanguagePlatform.Core.Tokenization.Unit, Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nDetermines whether the unit types of the specified units are compatible. \nTwo unit types are compatible if both their types are well-defined \n(not &quot;other&quot; or &quot;no type&quot;) and are identical.\n"
  syntax:
    content: >-
      [Obsolete]

      public static bool AreUnitTypesCompatible(Unit a, Unit b)
    parameters:
    - id: a
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The first unit
    - id: b
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The second unit
    return:
      type: System.Boolean
      description: A flag indicating whether the units&apos; types are compatible or not.
    content.vb: >-
      <Obsolete>

      Public Shared Function AreUnitTypesCompatible(a As Unit, b As Unit) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: GetAbbreviations(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetAbbreviations(Unit)
  nameWithType: PhysicalUnit.GetAbbreviations(Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nGets the known abbreviations for the specified unit. The return value may indicate\nvertical bars to indicate multiple alternative abbreviations.\n"
  syntax:
    content: public static string GetAbbreviations(Unit unit)
    parameters:
    - id: unit
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit to look up
    return:
      type: System.String
      description: "The known abbreviations for the unit, or <code>null</code> if the unit \nwasn&apos;t found or has no known abbreviations."
    content.vb: Public Shared Function GetAbbreviations(unit As Unit) As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation(Sdl.LanguagePlatform.Core.Tokenization.Unit,System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation(Sdl.LanguagePlatform.Core.Tokenization.Unit,System.Globalization.CultureInfo)
  id: GetPreferredAbbreviation(Sdl.LanguagePlatform.Core.Tokenization.Unit,System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetPreferredAbbreviation(Unit, CultureInfo)
  nameWithType: PhysicalUnit.GetPreferredAbbreviation(Unit, CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation(Sdl.LanguagePlatform.Core.Tokenization.Unit, System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nGets the preferred abbreviation for the specified unit. The preferred abbreviation\nis used for auto-localization. \n"
  syntax:
    content: public static string GetPreferredAbbreviation(Unit unit, CultureInfo culture)
    parameters:
    - id: unit
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit to look up
    - id: culture
      type: System.Globalization.CultureInfo
      description: "An optional culture, in which case the method will \nreturn the preferred abbreviation for the target culture (currently ignored)"
    return:
      type: System.String
      description: "The preferred abbreviation for the unit, or <code>null</code> if the unit \nwasn&apos;t found or has no known abbreviation."
    content.vb: Public Shared Function GetPreferredAbbreviation(unit As Unit, culture As CultureInfo) As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: GetName(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetName(Unit)
  nameWithType: PhysicalUnit.GetName(Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName(Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nGets the name for the specified unit.\n"
  syntax:
    content: public static string GetName(Unit unit)
    parameters:
    - id: unit
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit
    return:
      type: System.String
      description: The name of the unit, or <code>null</code> if the unit is unknown or has no name.
    content.vb: Public Shared Function GetName(unit As Unit) As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem(Sdl.LanguagePlatform.Core.Tokenization.UnitType,System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem(Sdl.LanguagePlatform.Core.Tokenization.UnitType,System.Globalization.CultureInfo)
  id: GetDefaultSystem(Sdl.LanguagePlatform.Core.Tokenization.UnitType,System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetDefaultSystem(UnitType, CultureInfo)
  nameWithType: PhysicalUnit.GetDefaultSystem(UnitType, CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem(Sdl.LanguagePlatform.Core.Tokenization.UnitType, System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nDetermines the default <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.UnitSystem\" data-throw-if-not-resolved=\"false\"></xref> for the specified unit type in the\nspecified culture.\n"
  syntax:
    content: public static UnitSystem GetDefaultSystem(UnitType type, CultureInfo culture)
    parameters:
    - id: type
      type: Sdl.LanguagePlatform.Core.Tokenization.UnitType
      description: The type of the unit
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture to determine the default system for
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.UnitSystem
      description: >-
        The default unit system for the specified combination of unit type and

        culture, or <xref href="Sdl.LanguagePlatform.Core.Tokenization.UnitSystem.Metric" data-throw-if-not-resolved="false"></xref> if no information about the default

        system is available.
    content.vb: Public Shared Function GetDefaultSystem(type As UnitType, culture As CultureInfo) As UnitSystem
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,System.Globalization.CultureInfo)
  id: Find(System.String,System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: Find(String, CultureInfo)
  nameWithType: PhysicalUnit.Find(String, CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String, System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nLooks up and returns the unit associated with the specified unit abbreviation. The \ndefault unit system for the abbreviation is determined by looking up the default \nsystem for capacity in the specified culture.\n"
  syntax:
    content: public static Unit Find(string abbreviation, CultureInfo culture)
    parameters:
    - id: abbreviation
      type: System.String
      description: The unit abbreviation
    - id: culture
      type: System.Globalization.CultureInfo
      description: >-
        The optional culture to use during lookup, in case the abbreviation

        is culture-specific or the preferred system needs to be determined from the culture
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit which most closely matches the search criteria
    content.vb: Public Shared Function Find(abbreviation As String, culture As CultureInfo) As Unit
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Globalization.CultureInfo)
  id: Find(System.String,Sdl.LanguagePlatform.Core.Tokenization.UnitSystem,System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: Find(String, UnitSystem, CultureInfo)
  nameWithType: PhysicalUnit.Find(String, UnitSystem, CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find(System.String, Sdl.LanguagePlatform.Core.Tokenization.UnitSystem, System.Globalization.CultureInfo)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nLooks up and returns the unit associated with the specified unit abbreviation.\n"
  syntax:
    content: public static Unit Find(string abbreviation, UnitSystem preferredSystem, CultureInfo culture)
    parameters:
    - id: abbreviation
      type: System.String
      description: The unit abbreviation
    - id: preferredSystem
      type: Sdl.LanguagePlatform.Core.Tokenization.UnitSystem
      description: "The preferred system, in case the abbreviation is known in \nmultiple systems."
    - id: culture
      type: System.Globalization.CultureInfo
      description: >-
        The optional culture to use during lookup, in case the abbreviation

        is culture-specific or the preferred system needs to be determined from the culture
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
      description: The unit which most closely matches the search criteria
    content.vb: Public Shared Function Find(abbreviation As String, preferredSystem As UnitSystem, culture As CultureInfo) As Unit
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  id: AreUnitsSameClass(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.Unit,Sdl.LanguagePlatform.Core.Tokenization.Unit)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: AreUnitsSameClass(CultureInfo, Unit, Unit)
  nameWithType: PhysicalUnit.AreUnitsSameClass(CultureInfo, Unit, Unit)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Tokenization.Unit, Sdl.LanguagePlatform.Core.Tokenization.Unit)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  syntax:
    content: public static bool AreUnitsSameClass(CultureInfo ci, Unit u1, Unit u2)
    parameters:
    - id: ci
      type: System.Globalization.CultureInfo
    - id: u1
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
    - id: u2
      type: Sdl.LanguagePlatform.Core.Tokenization.Unit
    return:
      type: System.Boolean
    content.vb: Public Shared Function AreUnitsSameClass(ci As CultureInfo, u1 As Unit, u2 As Unit) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo,System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo,System.String,System.String)
  id: AreUnitsSameClass(System.Globalization.CultureInfo,System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: AreUnitsSameClass(CultureInfo, String, String)
  nameWithType: PhysicalUnit.AreUnitsSameClass(CultureInfo, String, String)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass(System.Globalization.CultureInfo, System.String, System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nDetermine whether one unit can autosubstitute for another, based on whether\nthey measure the same time of thing (length, area, volume ...)\n"
  syntax:
    content: public static bool AreUnitsSameClass(CultureInfo ci, string unitA, string unitB)
    parameters:
    - id: ci
      type: System.Globalization.CultureInfo
    - id: unitA
      type: System.String
    - id: unitB
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function AreUnitsSameClass(ci As CultureInfo, unitA As String, unitB As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass(System.Globalization.CultureInfo,System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass(System.Globalization.CultureInfo,System.String,System.String)
  id: AreUnitKeysSameClass(System.Globalization.CultureInfo,System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: AreUnitKeysSameClass(CultureInfo, String, String)
  nameWithType: PhysicalUnit.AreUnitKeysSameClass(CultureInfo, String, String)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass(System.Globalization.CultureInfo, System.String, System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  syntax:
    content: public static bool AreUnitKeysSameClass(CultureInfo ci, string key1, string key2)
    parameters:
    - id: ci
      type: System.Globalization.CultureInfo
    - id: key1
      type: System.String
    - id: key2
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function AreUnitKeysSameClass(ci As CultureInfo, key1 As String, key2 As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory(System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory(System.String,System.String)
  id: AreUnitsSameCategory(System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: AreUnitsSameCategory(String, String)
  nameWithType: PhysicalUnit.AreUnitsSameCategory(String, String)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory(System.String, System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n\n"
  syntax:
    content: >-
      [Obsolete]

      public static bool AreUnitsSameCategory(string unitA, string unitB)
    parameters:
    - id: unitA
      type: System.String
    - id: unitB
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <Obsolete>

      Public Shared Function AreUnitsSameCategory(unitA As String, unitB As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX(System.Globalization.CultureInfo,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX(System.Globalization.CultureInfo,System.Boolean)
  id: GetUnitsRX(System.Globalization.CultureInfo,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetUnitsRX(CultureInfo, Boolean)
  nameWithType: PhysicalUnit.GetUnitsRX(CultureInfo, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX(System.Globalization.CultureInfo, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nReturns a regular expression which matches all units known for the provided culture.\n"
  syntax:
    content: public static string GetUnitsRX(CultureInfo culture, bool includeDefaultAbbreviationsWithCultureAbbreviations)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (may be null)
    - id: includeDefaultAbbreviationsWithCultureAbbreviations
      type: System.Boolean
      description: "If true, the \ndefault units are included with the culture-specifc units."
    return:
      type: System.String
      description: A string representing a regular expression.
    content.vb: Public Shared Function GetUnitsRX(culture As CultureInfo, includeDefaultAbbreviationsWithCultureAbbreviations As Boolean) As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits(System.Globalization.CultureInfo,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits(System.Globalization.CultureInfo,System.Boolean)
  id: GetUnits(System.Globalization.CultureInfo,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit
  langs:
  - csharp
  - vb
  name: GetUnits(CultureInfo, Boolean)
  nameWithType: PhysicalUnit.GetUnits(CultureInfo, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits(System.Globalization.CultureInfo, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nReturns a word list which contains all units known for the provided culture.\n"
  syntax:
    content: public static Wordlist GetUnits(CultureInfo culture, bool includeDefaultAbbreviationsWithCultureAbbreviations)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (may be null)
    - id: includeDefaultAbbreviationsWithCultureAbbreviations
      type: System.Boolean
      description: "If true, the \ndefault units are included with the culture-specifc units."
    return:
      type: Sdl.LanguagePlatform.Core.Wordlist
      description: A word list which includes the relevant units.
    content.vb: Public Shared Function GetUnits(culture As CultureInfo, includeDefaultAbbreviationsWithCultureAbbreviations As Boolean) As Wordlist
  overload: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sdl.LanguagePlatform.Core.Tokenization
  commentId: N:Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Tokenization
  nameWithType: Sdl.LanguagePlatform.Core.Tokenization
  fullName: Sdl.LanguagePlatform.Core.Tokenization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem
  isExternal: true
  name: GetSystem
  nameWithType: PhysicalUnit.GetSystem
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetSystem
- uid: Sdl.LanguagePlatform.Core.Tokenization.Unit
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.Unit
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Unit
  nameWithType: Unit
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Unit
- uid: Sdl.LanguagePlatform.Core.Tokenization.UnitSystem
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.UnitSystem
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: UnitSystem
  nameWithType: UnitSystem
  fullName: Sdl.LanguagePlatform.Core.Tokenization.UnitSystem
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric
  isExternal: true
  name: IsMetric
  nameWithType: PhysicalUnit.IsMetric
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.IsMetric
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType
  isExternal: true
  name: GetUnitType
  nameWithType: PhysicalUnit.GetUnitType
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitType
- uid: Sdl.LanguagePlatform.Core.Tokenization.UnitType
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.UnitType
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: UnitType
  nameWithType: UnitType
  fullName: Sdl.LanguagePlatform.Core.Tokenization.UnitType
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible
  isExternal: true
  name: AreUnitTypesCompatible
  nameWithType: PhysicalUnit.AreUnitTypesCompatible
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitTypesCompatible
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations
  isExternal: true
  name: GetAbbreviations
  nameWithType: PhysicalUnit.GetAbbreviations
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetAbbreviations
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation
  isExternal: true
  name: GetPreferredAbbreviation
  nameWithType: PhysicalUnit.GetPreferredAbbreviation
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetPreferredAbbreviation
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName
  isExternal: true
  name: GetName
  nameWithType: PhysicalUnit.GetName
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetName
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem
  isExternal: true
  name: GetDefaultSystem
  nameWithType: PhysicalUnit.GetDefaultSystem
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetDefaultSystem
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find
  isExternal: true
  name: Find
  nameWithType: PhysicalUnit.Find
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.Find
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass
  isExternal: true
  name: AreUnitsSameClass
  nameWithType: PhysicalUnit.AreUnitsSameClass
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameClass
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass
  isExternal: true
  name: AreUnitKeysSameClass
  nameWithType: PhysicalUnit.AreUnitKeysSameClass
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitKeysSameClass
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory
  isExternal: true
  name: AreUnitsSameCategory
  nameWithType: PhysicalUnit.AreUnitsSameCategory
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.AreUnitsSameCategory
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX
  isExternal: true
  name: GetUnitsRX
  nameWithType: PhysicalUnit.GetUnitsRX
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnitsRX
- uid: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits
  isExternal: true
  name: GetUnits
  nameWithType: PhysicalUnit.GetUnits
  fullName: Sdl.LanguagePlatform.Core.Tokenization.PhysicalUnit.GetUnits
- uid: Sdl.LanguagePlatform.Core.Wordlist
  commentId: T:Sdl.LanguagePlatform.Core.Wordlist
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Wordlist
  nameWithType: Wordlist
  fullName: Sdl.LanguagePlatform.Core.Wordlist
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
