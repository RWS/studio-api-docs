### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  id: FieldDefinitions
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor(Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor(System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field})
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(Sdl.LanguagePlatform.TranslationMemory.Field)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(System.String,Sdl.LanguagePlatform.TranslationMemory.FieldValueType)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(Sdl.LanguagePlatform.TranslationMemory.Field)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.Guid)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.Guid)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.Guid)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(Sdl.LanguagePlatform.TranslationMemory.Field)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System#Collections#IEnumerable#GetEnumerator
  - Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList
  langs:
  - csharp
  - vb
  name: FieldDefinitions
  nameWithType: FieldDefinitions
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nEncapsulates a set of field declarations. Fields are identified through their name\nor through their GUID. Note that field names are case-insensitive.\n"
  syntax:
    content: 'public class FieldDefinitions : IEnumerable<Field>, IEnumerable, IFieldDefinitions'
    content.vb: >-
      Public Class FieldDefinitions
          Implements IEnumerable(Of Field), IEnumerable, IFieldDefinitions
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}
  - System.Collections.IEnumerable
  - Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: FieldDefinitions()
  nameWithType: FieldDefinitions.FieldDefinitions()
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.FieldDefinitions()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance with an empty field declaration list.\n"
  syntax:
    content: public FieldDefinitions()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor(Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor(Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions)
  id: '#ctor(Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions)'
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: FieldDefinitions(FieldDefinitions)
  nameWithType: FieldDefinitions.FieldDefinitions(FieldDefinitions)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.FieldDefinitions(Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance, copying the field declarations from the provided collection (deep copy).\n"
  syntax:
    content: public FieldDefinitions(FieldDefinitions other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
    content.vb: Public Sub New(other As FieldDefinitions)
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor(System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field})
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor(System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field})
  id: '#ctor(System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field})'
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: FieldDefinitions(ICollection<Field>)
  nameWithType: FieldDefinitions.FieldDefinitions(ICollection<Field>)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.FieldDefinitions(System.Collections.Generic.ICollection<Sdl.LanguagePlatform.TranslationMemory.Field>)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance, copying the field declarations from the provided collection (deep copy).\n"
  syntax:
    content: public FieldDefinitions(ICollection<Field> fields)
    parameters:
    - id: fields
      type: System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field}
    content.vb: Public Sub New(fields As ICollection(Of Field))
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor*
  nameWithType.vb: FieldDefinitions.FieldDefinitions(ICollection(Of Field))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.FieldDefinitions(System.Collections.Generic.ICollection(Of Sdl.LanguagePlatform.TranslationMemory.Field))
  name.vb: FieldDefinitions(ICollection(Of Field))
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.String)
  id: Lookup(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Lookup(String)
  nameWithType: FieldDefinitions.Lookup(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRetrieves the field declaration with the specified name. Field names are case-insensitive.\n"
  syntax:
    content: public Field Lookup(string name)
    parameters:
    - id: name
      type: System.String
      description: The field name.
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The field declaration or null if it does not exist.
    content.vb: Public Function Lookup(name As String) As Field
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.Guid)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.Guid)
  id: Lookup(System.Guid)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Lookup(Guid)
  nameWithType: FieldDefinitions.Lookup(Guid)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup(System.Guid)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRetrieves a field by its GUID.\n"
  syntax:
    content: public Field Lookup(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
      description: The GUID to look up
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The field with the specified GUID, or <code>null</code> if no such field exists.
    content.vb: Public Function Lookup(guid As Guid) As Field
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.Guid)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.Guid)
  id: LookupIField(System.Guid)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: LookupIField(Guid)
  nameWithType: FieldDefinitions.LookupIField(Guid)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.Guid)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns the field with the specified GUID, or <code>null</code> if there is no field with that \nGUID.\n"
  syntax:
    content: public IField LookupIField(Guid guid)
    parameters:
    - id: guid
      type: System.Guid
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.IField
    content.vb: Public Function LookupIField(guid As Guid) As IField
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField*
  implements:
  - Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.Guid)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.String)
  id: LookupIField(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: LookupIField(String)
  nameWithType: FieldDefinitions.LookupIField(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns the field with the specified name, or <code>null</code> if there is no field with that \nname.\n"
  syntax:
    content: public IField LookupIField(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.IField
    content.vb: Public Function LookupIField(name As String) As IField
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField*
  implements:
  - Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(System.String,Sdl.LanguagePlatform.TranslationMemory.FieldValueType)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(System.String,Sdl.LanguagePlatform.TranslationMemory.FieldValueType)
  id: Add(System.String,Sdl.LanguagePlatform.TranslationMemory.FieldValueType)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Add(String, FieldValueType)
  nameWithType: FieldDefinitions.Add(String, FieldValueType)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(System.String, Sdl.LanguagePlatform.TranslationMemory.FieldValueType)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nCreates a new field declaration with the specified name and type and adds it to the list.\n"
  syntax:
    content: public Field Add(string fieldName, FieldValueType fieldType)
    parameters:
    - id: fieldName
      type: System.String
      description: The field name.
    - id: fieldType
      type: Sdl.LanguagePlatform.TranslationMemory.FieldValueType
      description: The field type.
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The newly created field declaration or an error if the field already exists.
    content.vb: Public Function Add(fieldName As String, fieldType As FieldValueType) As Field
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(System.String)
  id: Exists(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Exists(String)
  nameWithType: FieldDefinitions.Exists(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRetrieves a value indicating whether a field with the specified name exists.\n"
  syntax:
    content: public bool Exists(string name)
    parameters:
    - id: name
      type: System.String
      description: The field name.
    return:
      type: System.Boolean
      description: true if the such a field exists, otherwise false.
    content.vb: Public Function Exists(name As String) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(Sdl.LanguagePlatform.TranslationMemory.Field)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(Sdl.LanguagePlatform.TranslationMemory.Field)
  id: Exists(Sdl.LanguagePlatform.TranslationMemory.Field)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Exists(Field)
  nameWithType: FieldDefinitions.Exists(Field)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists(Sdl.LanguagePlatform.TranslationMemory.Field)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRetrieves a value indicating whether the specified field exists in the collection. Only the name, not\nthe data type, is checked.\n"
  syntax:
    content: public bool Exists(Field f)
    parameters:
    - id: f
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The field.
    return:
      type: System.Boolean
      description: true if a field with such a name exists, otherwise false.
    content.vb: Public Function Exists(f As Field) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList
  id: ToList
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: ToList()
  nameWithType: FieldDefinitions.ToList()
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGenerates and returns a deep copy of the field declarations.\n"
  syntax:
    content: public List<Field> ToList()
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.Field}
    content.vb: Public Function ToList As List(Of Field)
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(Sdl.LanguagePlatform.TranslationMemory.Field)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(Sdl.LanguagePlatform.TranslationMemory.Field)
  id: Add(Sdl.LanguagePlatform.TranslationMemory.Field)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Add(Field)
  nameWithType: FieldDefinitions.Add(Field)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add(Sdl.LanguagePlatform.TranslationMemory.Field)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nAdds a new field to the list. Throws an error if the field already exists or if no additions are allowed.\n"
  syntax:
    content: public void Add(Field f)
    parameters:
    - id: f
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The field.
    content.vb: Public Sub Add(f As Field)
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(Sdl.LanguagePlatform.TranslationMemory.Field)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(Sdl.LanguagePlatform.TranslationMemory.Field)
  id: Remove(Sdl.LanguagePlatform.TranslationMemory.Field)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Remove(Field)
  nameWithType: FieldDefinitions.Remove(Field)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(Sdl.LanguagePlatform.TranslationMemory.Field)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves the field with the same name as the provided field, if one exists.\n"
  syntax:
    content: public bool Remove(Field f)
    parameters:
    - id: f
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The field to remove. Only the name is checked.
    return:
      type: System.Boolean
      description: True if the field has been removed, false otherwise.
    content.vb: Public Function Remove(f As Field) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(System.String)
  id: Remove(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: FieldDefinitions.Remove(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves the field with the provided name, if one exists.\n"
  syntax:
    content: public bool Remove(string fieldName)
    parameters:
    - id: fieldName
      type: System.String
      description: The name of the field to remove.
    return:
      type: System.Boolean
      description: True if the field has been removed, false otherwise.
    content.vb: Public Function Remove(fieldName As String) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator
  id: GetEnumerator
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: FieldDefinitions.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns an enumerator which can be used to iterate through the field list.\n"
  syntax:
    content: public IEnumerator<Field> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.TranslationMemory.Field}
      description: An enumerator
    content.vb: Public Function GetEnumerator As IEnumerator(Of Field)
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: FieldDefinitions.IEnumerable.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns an enumerator which can be used to iterate through the field list.\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: An enumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FieldDefinitions.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: FieldDefinitions.Clear()
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemove all the fields currently associated with this definition.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains(System.String)
  id: Contains(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: FieldDefinitions.Contains(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nDetermines whether a named field exists in the collection. Field names are\ncase-insensitive.\n"
  syntax:
    content: public bool Contains(string fieldName)
    parameters:
    - id: fieldName
      type: System.String
      description: The name of the field to look up.
    return:
      type: System.Boolean
      description: >
        <code>true</code> if the specified field name exists; otherwise, <code>false</code>.
    content.vb: Public Function Contains(fieldName As String) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields
  id: Fields
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: FieldDefinitions.Fields
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets the underlying list of field declarations.\n"
  syntax:
    content: public ICollection<Field> Fields { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field}
    content.vb: Public Property Fields As ICollection(Of Field)
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.String)
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.String)
  id: Item(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: FieldDefinitions.Item[String]
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item[System.String]
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets the field with the specified name, or <code>null</code> if there is no field with that \nname. Field names are case-insensitive.\n"
  syntax:
    content: public Field this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: The field name to look up
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.Field
      description: The field, or <code>null</code> if no field with the provided name exists.
    content.vb: Public ReadOnly Property Item(name As String) As Field
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item*
  nameWithType.vb: FieldDefinitions.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.String)
  name.vb: Item(String)
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.Guid)
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.Guid)
  id: Item(System.Guid)
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Item[Guid]
  nameWithType: FieldDefinitions.Item[Guid]
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item[System.Guid]
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets the field with the specified GUID, or <code>null</code> if there is no field with that \nGUID.\n"
  syntax:
    content: public Field this[Guid guid] { get; }
    parameters:
    - id: guid
      type: System.Guid
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.Field
    content.vb: Public ReadOnly Property Item(guid As Guid) As Field
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item*
  nameWithType.vb: FieldDefinitions.Item(Guid)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item(System.Guid)
  name.vb: Item(Guid)
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count
  id: Count
  parent: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: FieldDefinitions.Count
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets the number of fields in this collection.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Field>
  nameWithType: IEnumerable<Field>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.Field>
  nameWithType.vb: IEnumerable(Of Field)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.Field)
  name.vb: IEnumerable(Of Field)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: IFieldDefinitions
  nameWithType: IFieldDefinitions
  fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.#ctor
  isExternal: true
  name: FieldDefinitions
  nameWithType: FieldDefinitions.FieldDefinitions
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.FieldDefinitions
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: FieldDefinitions
  nameWithType: FieldDefinitions
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions
- uid: System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field}
  commentId: T:System.Collections.Generic.ICollection{Sdl.LanguagePlatform.TranslationMemory.Field}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Field>
  nameWithType: ICollection<Field>
  fullName: System.Collections.Generic.ICollection<Sdl.LanguagePlatform.TranslationMemory.Field>
  nameWithType.vb: ICollection(Of Field)
  fullName.vb: System.Collections.Generic.ICollection(Of Sdl.LanguagePlatform.TranslationMemory.Field)
  name.vb: ICollection(Of Field)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup
  isExternal: true
  name: Lookup
  nameWithType: FieldDefinitions.Lookup
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Lookup
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.TranslationMemory.Field
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.Field
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Field
  nameWithType: Field
  fullName: Sdl.LanguagePlatform.TranslationMemory.Field
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField
  isExternal: true
  name: LookupIField
  nameWithType: FieldDefinitions.LookupIField
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.LookupIField
- uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.Guid)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.Guid)
  parent: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions
  isExternal: true
  name: LookupIField(Guid)
  nameWithType: IFieldDefinitions.LookupIField(Guid)
  fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.Guid)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.Guid)
    name: LookupIField
    nameWithType: IFieldDefinitions.LookupIField
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.Guid)
    name: LookupIField
    nameWithType: IFieldDefinitions.LookupIField
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.IField
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.IField
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: IField
  nameWithType: IField
  fullName: Sdl.LanguagePlatform.TranslationMemory.IField
- uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions
  isExternal: true
  name: LookupIField(String)
  nameWithType: IFieldDefinitions.LookupIField(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.String)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.String)
    name: LookupIField
    nameWithType: IFieldDefinitions.LookupIField
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField(System.String)
    name: LookupIField
    nameWithType: IFieldDefinitions.LookupIField
    fullName: Sdl.LanguagePlatform.TranslationMemory.IFieldDefinitions.LookupIField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add
  isExternal: true
  name: Add
  nameWithType: FieldDefinitions.Add
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Add
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldValueType
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.FieldValueType
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: FieldValueType
  nameWithType: FieldValueType
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldValueType
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists
  isExternal: true
  name: Exists
  nameWithType: FieldDefinitions.Exists
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList
  isExternal: true
  name: ToList
  nameWithType: FieldDefinitions.ToList
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.ToList
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.Field}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.Field}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Field>
  nameWithType: List<Field>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.TranslationMemory.Field>
  nameWithType.vb: List(Of Field)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.TranslationMemory.Field)
  name.vb: List(Of Field)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove
  isExternal: true
  name: Remove
  nameWithType: FieldDefinitions.Remove
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Remove
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: FieldDefinitions.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.Field}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Field>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.Field>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Field).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.Field).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Field>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.Field>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Field).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.Field).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.TranslationMemory.Field}
  commentId: T:System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.TranslationMemory.Field}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Field>
  nameWithType: IEnumerator<Field>
  fullName: System.Collections.Generic.IEnumerator<Sdl.LanguagePlatform.TranslationMemory.Field>
  nameWithType.vb: IEnumerator(Of Field)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Sdl.LanguagePlatform.TranslationMemory.Field)
  name.vb: IEnumerator(Of Field)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.Field
    name: Field
    nameWithType: Field
    fullName: Sdl.LanguagePlatform.TranslationMemory.Field
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: FieldDefinitions.IEnumerable.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FieldDefinitions.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear
  isExternal: true
  name: Clear
  nameWithType: FieldDefinitions.Clear
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Clear
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains
  isExternal: true
  name: Contains
  nameWithType: FieldDefinitions.Contains
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Contains
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields
  isExternal: true
  name: Fields
  nameWithType: FieldDefinitions.Fields
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Fields
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item
  isExternal: true
  name: Item
  nameWithType: FieldDefinitions.Item
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Item
- uid: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count
  isExternal: true
  name: Count
  nameWithType: FieldDefinitions.Count
  fullName: Sdl.LanguagePlatform.TranslationMemory.FieldDefinitions.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
