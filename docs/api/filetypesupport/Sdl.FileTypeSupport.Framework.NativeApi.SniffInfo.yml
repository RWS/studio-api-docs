### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  id: SniffInfo
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  children:
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals(System.Object)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData(System.String)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item(System.String)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey(System.String)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData(System.String)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData(System.String,System.String)
  - Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding
  langs:
  - csharp
  - vb
  name: SniffInfo
  nameWithType: SniffInfo
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nInformation returned from <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.INativeFileSniffer.Sniff(System.String%2cSdl.Core.Globalization.Language%2cSdl.Core.Globalization.Codepage%2cSdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter%2cSdl.Core.Settings.ISettingsGroup)\" data-throw-if-not-resolved=\"false\"></xref>.\nThis class also allows you to store key/value pairs that the parser may need to read during parsing.\n"
  remarks: "\n<p>\nCommunicates whether the file is considered valid by the file sniffer; may contain\nadditional information such as the detected source and target languages, encoding of the file, etc.\n</p>\n<p>\nCustom metadata can also be stored and accessed via the <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer\" data-throw-if-not-resolved=\"false\"></xref> implementation.\n</p>\n<p>\nIf the file type is supported and further processed, this information is \npassed to all file processing components that implement <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware\" data-throw-if-not-resolved=\"false\"></xref> as the\n<xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties.FileSnifferInfo\" data-throw-if-not-resolved=\"false\"></xref> when the framework calls\n<xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.INativeContentCycleAware.SetFileProperties(Sdl.FileTypeSupport.Framework.BilingualApi.IFileProperties)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: 'public class SniffInfo : IMetaDataContainer, ICloneable, ISupportsPersistenceId'
    content.vb: >-
      Public Class SniffInfo
          Implements IMetaDataContainer, ICloneable, ISupportsPersistenceId
  inheritance:
  - System.Object
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  - System.ICloneable
  - Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor
  id: '#ctor'
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: SniffInfo()
  nameWithType: SniffInfo.SniffInfo()
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SniffInfo()
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nDefault constructor, creates an uninitialized object\nwhere <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported\" data-throw-if-not-resolved=\"false\"></xref> is false and <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding\" data-throw-if-not-resolved=\"false\"></xref> is null.\n"
  syntax:
    content: public SniffInfo()
    content.vb: Public Sub New
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor(Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)
  id: '#ctor(Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)'
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: SniffInfo(SniffInfo)
  nameWithType: SniffInfo.SniffInfo(SniffInfo)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SniffInfo(Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nCopy constructor used by the Clone() method.\n\nPerforms a deep clone of the other object.\n"
  syntax:
    content: protected SniffInfo(SniffInfo other)
    parameters:
    - id: other
      type: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
      description: Object to clone from
    content.vb: Protected Sub New(other As SniffInfo)
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals(System.Object)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SniffInfo.Equals(Object)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals(System.Object)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nTrue if all properties and values are equal.\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode
  id: GetHashCode
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SniffInfo.GetHashCode()
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nComputed by combining all properties and values\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone
  id: Clone
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SniffInfo.Clone()
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nDeep clone this object\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
    content.vb: Public Function Clone As Object
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey(System.String)
  id: MetaDataContainsKey(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: MetaDataContainsKey(String)
  nameWithType: SniffInfo.MetaDataContainsKey(String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey(System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nDetermines if a metadata value exists for the specified key\n"
  syntax:
    content: public bool MetaDataContainsKey(string key)
    parameters:
    - id: key
      type: System.String
      description: Must not be <code>null</code> or empty
    return:
      type: System.Boolean
      description: True if a value exists for the key
    content.vb: Public Function MetaDataContainsKey(key As String) As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData(System.String)
  id: GetMetaData(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: GetMetaData(String)
  nameWithType: SniffInfo.GetMetaData(String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData(System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nRetrieves the metadata value for the specified key\n"
  syntax:
    content: public string GetMetaData(string key)
    parameters:
    - id: key
      type: System.String
      description: Must not be <code>null</code> or empty
    return:
      type: System.String
      description: <code>Null</code> if no value exists for the key.
    content.vb: Public Function GetMetaData(key As String) As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData(System.String,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData(System.String,System.String)
  id: SetMetaData(System.String,System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: SetMetaData(String, String)
  nameWithType: SniffInfo.SetMetaData(String, String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData(System.String, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nSets the metadata value for the specified key\n"
  remarks: "\n<p>\nIf no value exists for the key, one will be created.\nIf a value already exists for the key, it will be overwritten.\n</p>\n"
  syntax:
    content: public void SetMetaData(string key, string value)
    parameters:
    - id: key
      type: System.String
      description: Must not be <code>null</code> or empty
    - id: value
      type: System.String
      description: Must not be <code>null</code>
    content.vb: Public Sub SetMetaData(key As String, value As String)
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData(System.String)
  id: RemoveMetaData(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: RemoveMetaData(String)
  nameWithType: SniffInfo.RemoveMetaData(String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData(System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nRemoves the metadata value for the specified key from the \ncollection. If no value exists for this key, nothing will happen.\n"
  syntax:
    content: public bool RemoveMetaData(string key)
    parameters:
    - id: key
      type: System.String
      description: Must not be <code>null</code>
    return:
      type: System.Boolean
      description: <code>True</code> if a key/value pair was removed
    content.vb: Public Function RemoveMetaData(key As String) As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData
  id: ClearMetaData
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: ClearMetaData()
  nameWithType: SniffInfo.ClearMetaData()
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nRemoves all metadata key/value pairs.\n"
  syntax:
    content: public void ClearMetaData()
    content.vb: Public Sub ClearMetaData
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported
  id: IsSupported
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: IsSupported
  nameWithType: SniffInfo.IsSupported
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThe file sniffer sets this property to true in order to indicate\nthat the corresponding file type definition can be used for processing this file.\n"
  syntax:
    content: public bool IsSupported { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsSupported As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding
  id: DetectedEncoding
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: DetectedEncoding
  nameWithType: SniffInfo.DetectedEncoding
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIf the file sniffer detects or guesses which encoding is used in the file,\nit may communicate this to the other parser components by setting this\nproperty.\n"
  syntax:
    content: public Pair<Codepage, DetectionLevel> DetectedEncoding { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
    content.vb: Public Property DetectedEncoding As Pair(Of Codepage, DetectionLevel)
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage
  id: DetectedSourceLanguage
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: DetectedSourceLanguage
  nameWithType: SniffInfo.DetectedSourceLanguage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIf the file sniffer detects or guesses the source language in the file, it\ncan be communicated to the framework by setting this property.\n"
  syntax:
    content: public Pair<Language, DetectionLevel> DetectedSourceLanguage { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Language,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
    content.vb: Public Property DetectedSourceLanguage As Pair(Of Language, DetectionLevel)
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage
  id: DetectedTargetLanguage
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: DetectedTargetLanguage
  nameWithType: SniffInfo.DetectedTargetLanguage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIf the file sniffer detects or guesses the target language of a bilingual file,\nit can be communicated to the framework by setting this property.\n"
  syntax:
    content: public Pair<Language, DetectionLevel> DetectedTargetLanguage { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Language,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
    content.vb: Public Property DetectedTargetLanguage As Pair(Of Language, DetectionLevel)
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding
  id: SuggestedTargetEncoding
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: SuggestedTargetEncoding
  nameWithType: SniffInfo.SuggestedTargetEncoding
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThe file sniffer&apos;s suggestion on what type of encoding would be\nsuitable when generating a translated version of this file.\n"
  syntax:
    content: public EncodingCategory SuggestedTargetEncoding { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory
    content.vb: Public Property SuggestedTargetEncoding As EncodingCategory
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData
  id: MetaData
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: MetaData
  nameWithType: SniffInfo.MetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nIterator for all metadata key/value pairs\n"
  syntax:
    content: public IEnumerable<KeyValuePair<string, string>> MetaData { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    content.vb: Public ReadOnly Property MetaData As IEnumerable(Of KeyValuePair(Of String, String))
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData
  id: HasMetaData
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: HasMetaData
  nameWithType: SniffInfo.HasMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nTrue if there are any key/value pairs of metadata in the sniff info\n"
  syntax:
    content: public bool HasMetaData { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasMetaData As Boolean
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.HasMetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount
  id: MetaDataCount
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: MetaDataCount
  nameWithType: SniffInfo.MetaDataCount
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nNumber of key/value pairs of metadata\n"
  syntax:
    content: public int MetaDataCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MetaDataCount As Integer
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item(System.String)
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item(System.String)
  id: Item(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SniffInfo.Item[String]
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item[System.String]
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\n<p>\nConvenience getter and setter for metadata using indexer syntax. \n</p>\n<p>\nThe getter functionality is equivalent to calling <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>,\nthe setter functionality is equivalent to <xref href=\"Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: public string this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: Must not be <code>null</code> or empty
    return:
      type: System.String
      description: The corresponding value, or <code>null</code> if none
    content.vb: Public Property Item(key As String) As String
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item*
  nameWithType.vb: SniffInfo.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item(System.String)
  name.vb: Item(String)
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId
  id: PersistenceId
  parent: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  langs:
  - csharp
  - vb
  name: PersistenceId
  nameWithType: SniffInfo.PersistenceId
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.NativeApi
  summary: "\nThe persistence ID associated with an object may be used\nby implementations during operations such as serialization \nand de-serialization of the object model. \n"
  syntax:
    content: public int PersistenceId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PersistenceId As Integer
  overload: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId*
  implements:
  - Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId.PersistenceId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.FileTypeSupport.Framework.NativeApi
  commentId: N:Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.NativeApi
  nameWithType: Sdl.FileTypeSupport.Framework.NativeApi
  fullName: Sdl.FileTypeSupport.Framework.NativeApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: IMetaDataContainer
  nameWithType: IMetaDataContainer
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: ISupportsPersistenceId
  nameWithType: ISupportsPersistenceId
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.#ctor
  isExternal: true
  name: SniffInfo
  nameWithType: SniffInfo.SniffInfo
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SniffInfo
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: SniffInfo
  nameWithType: SniffInfo
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals
  isExternal: true
  name: Equals
  nameWithType: SniffInfo.Equals
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: SniffInfo.GetHashCode
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone
  isExternal: true
  name: Clone
  nameWithType: SniffInfo.Clone
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey
  isExternal: true
  name: MetaDataContainsKey
  nameWithType: SniffInfo.MetaDataContainsKey
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataContainsKey
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: MetaDataContainsKey(String)
  nameWithType: IMetaDataContainer.MetaDataContainsKey(String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)
    name: MetaDataContainsKey
    nameWithType: IMetaDataContainer.MetaDataContainsKey
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey(System.String)
    name: MetaDataContainsKey
    nameWithType: IMetaDataContainer.MetaDataContainsKey
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData
  isExternal: true
  name: GetMetaData
  nameWithType: SniffInfo.GetMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.GetMetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: GetMetaData(String)
  nameWithType: IMetaDataContainer.GetMetaData(String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)
    name: GetMetaData
    nameWithType: IMetaDataContainer.GetMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData(System.String)
    name: GetMetaData
    nameWithType: IMetaDataContainer.GetMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.GetMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData
  isExternal: true
  name: SetMetaData
  nameWithType: SniffInfo.SetMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SetMetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: SetMetaData(String, String)
  nameWithType: IMetaDataContainer.SetMetaData(String, String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String, System.String)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)
    name: SetMetaData
    nameWithType: IMetaDataContainer.SetMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData(System.String,System.String)
    name: SetMetaData
    nameWithType: IMetaDataContainer.SetMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.SetMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData
  isExternal: true
  name: RemoveMetaData
  nameWithType: SniffInfo.RemoveMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.RemoveMetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: RemoveMetaData(String)
  nameWithType: IMetaDataContainer.RemoveMetaData(String)
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)
    name: RemoveMetaData
    nameWithType: IMetaDataContainer.RemoveMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData(System.String)
    name: RemoveMetaData
    nameWithType: IMetaDataContainer.RemoveMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.RemoveMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData
  isExternal: true
  name: ClearMetaData
  nameWithType: SniffInfo.ClearMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.ClearMetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
  commentId: M:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: ClearMetaData()
  nameWithType: IMetaDataContainer.ClearMetaData()
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData()
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
    name: ClearMetaData
    nameWithType: IMetaDataContainer.ClearMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
    name: ClearMetaData
    nameWithType: IMetaDataContainer.ClearMetaData
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.ClearMetaData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported
  isExternal: true
  name: IsSupported
  nameWithType: SniffInfo.IsSupported
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.IsSupported
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding
  isExternal: true
  name: DetectedEncoding
  nameWithType: SniffInfo.DetectedEncoding
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedEncoding
- uid: Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
  commentId: T:Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
  parent: Sdl.FileTypeSupport.Framework
  definition: Sdl.FileTypeSupport.Framework.Pair`2
  name: Pair<Codepage, DetectionLevel>
  nameWithType: Pair<Codepage, DetectionLevel>
  fullName: Sdl.FileTypeSupport.Framework.Pair<Sdl.Core.Globalization.Codepage, Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel>
  nameWithType.vb: Pair(Of Codepage, DetectionLevel)
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of Sdl.Core.Globalization.Codepage, Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel)
  name.vb: Pair(Of Codepage, DetectionLevel)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.Codepage
    name: Codepage
    nameWithType: Codepage
    fullName: Sdl.Core.Globalization.Codepage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    name: DetectionLevel
    nameWithType: DetectionLevel
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.Codepage
    name: Codepage
    nameWithType: Codepage
    fullName: Sdl.Core.Globalization.Codepage
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    name: DetectionLevel
    nameWithType: DetectionLevel
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Pair`2
  commentId: T:Sdl.FileTypeSupport.Framework.Pair`2
  isExternal: true
  name: Pair<FirstType, SecondType>
  nameWithType: Pair<FirstType, SecondType>
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>
  nameWithType.vb: Pair(Of FirstType, SecondType)
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType)
  name.vb: Pair(Of FirstType, SecondType)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: FirstType
    nameWithType: FirstType
    fullName: FirstType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: SecondType
    nameWithType: SecondType
    fullName: SecondType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: FirstType
    nameWithType: FirstType
    fullName: FirstType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: SecondType
    nameWithType: SecondType
    fullName: SecondType
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework
  commentId: N:Sdl.FileTypeSupport.Framework
  isExternal: true
  name: Sdl.FileTypeSupport.Framework
  nameWithType: Sdl.FileTypeSupport.Framework
  fullName: Sdl.FileTypeSupport.Framework
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage
  isExternal: true
  name: DetectedSourceLanguage
  nameWithType: SniffInfo.DetectedSourceLanguage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedSourceLanguage
- uid: Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Language,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
  commentId: T:Sdl.FileTypeSupport.Framework.Pair{Sdl.Core.Globalization.Language,Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel}
  parent: Sdl.FileTypeSupport.Framework
  definition: Sdl.FileTypeSupport.Framework.Pair`2
  name: Pair<Language, DetectionLevel>
  nameWithType: Pair<Language, DetectionLevel>
  fullName: Sdl.FileTypeSupport.Framework.Pair<Sdl.Core.Globalization.Language, Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel>
  nameWithType.vb: Pair(Of Language, DetectionLevel)
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of Sdl.Core.Globalization.Language, Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel)
  name.vb: Pair(Of Language, DetectionLevel)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    name: DetectionLevel
    nameWithType: DetectionLevel
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    name: DetectionLevel
    nameWithType: DetectionLevel
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.DetectionLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage
  isExternal: true
  name: DetectedTargetLanguage
  nameWithType: SniffInfo.DetectedTargetLanguage
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.DetectedTargetLanguage
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding
  isExternal: true
  name: SuggestedTargetEncoding
  nameWithType: SniffInfo.SuggestedTargetEncoding
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.SuggestedTargetEncoding
- uid: Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: EncodingCategory
  nameWithType: EncodingCategory
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.EncodingCategory
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData
  isExternal: true
  name: MetaData
  nameWithType: SniffInfo.MetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaData
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaData
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: MetaData
  nameWithType: IMetaDataContainer.MetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaData
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData
  isExternal: true
  name: HasMetaData
  nameWithType: SniffInfo.HasMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.HasMetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.HasMetaData
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.HasMetaData
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: HasMetaData
  nameWithType: IMetaDataContainer.HasMetaData
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.HasMetaData
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount
  isExternal: true
  name: MetaDataCount
  nameWithType: SniffInfo.MetaDataCount
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.MetaDataCount
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataCount
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataCount
  parent: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer
  isExternal: true
  name: MetaDataCount
  nameWithType: IMetaDataContainer.MetaDataCount
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IMetaDataContainer.MetaDataCount
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item
  isExternal: true
  name: Item
  nameWithType: SniffInfo.Item
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.Item
- uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId*
  commentId: Overload:Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId
  isExternal: true
  name: PersistenceId
  nameWithType: SniffInfo.PersistenceId
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo.PersistenceId
- uid: Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId.PersistenceId
  commentId: P:Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId.PersistenceId
  parent: Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId
  isExternal: true
  name: PersistenceId
  nameWithType: ISupportsPersistenceId.PersistenceId
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.ISupportsPersistenceId.PersistenceId
