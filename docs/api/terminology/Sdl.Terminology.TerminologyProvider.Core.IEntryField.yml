### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IEntryField
  id: IEntryField
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields
  - Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name
  - Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value
  langs:
  - csharp
  - vb
  name: IEntryField
  nameWithType: IEntryField
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField
  type: Interface
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nTerminology provider entry field\n"
  syntax:
    content: public interface IEntryField
    content.vb: Public Interface IEntryField
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name
  id: Name
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntryField
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IEntryField.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nfield name\n"
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value
  id: Value
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntryField
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: IEntryField.Value
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nfield content\n"
  syntax:
    content: string Value { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Value As String
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields
  id: Fields
  parent: Sdl.Terminology.TerminologyProvider.Core.IEntryField
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: IEntryField.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nsub fields\n"
  syntax:
    content: IList<IEntryField> Fields { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryField}
    content.vb: ReadOnly Property Fields As IList(Of IEntryField)
  overload: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name
  isExternal: true
  name: Name
  nameWithType: IEntryField.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value
  isExternal: true
  name: Value
  nameWithType: IEntryField.Value
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Value
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields
  isExternal: true
  name: Fields
  nameWithType: IEntryField.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField.Fields
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryField}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.IEntryField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IEntryField>
  nameWithType: IList<IEntryField>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.IEntryField>
  nameWithType.vb: IList(Of IEntryField)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.IEntryField)
  name.vb: IList(Of IEntryField)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    name: IEntryField
    nameWithType: IEntryField
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    name: IEntryField
    nameWithType: IEntryField
    fullName: Sdl.Terminology.TerminologyProvider.Core.IEntryField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
