### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  id: IDescriptiveField
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label
  - Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level
  - Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory
  - Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple
  - Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues
  - Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type
  langs:
  - csharp
  - vb
  name: IDescriptiveField
  nameWithType: IDescriptiveField
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  type: Interface
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe descriptive field for the termbase provider definition\n"
  syntax:
    content: public interface IDescriptiveField
    content.vb: Public Interface IDescriptiveField
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues
  id: PickListValues
  parent: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  langs:
  - csharp
  - vb
  name: PickListValues
  nameWithType: IDescriptiveField.PickListValues
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe list of values for pick list fields\n"
  syntax:
    content: IList<string> PickListValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: ReadOnly Property PickListValues As IList(Of String)
  overload: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory
  id: Mandatory
  parent: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  langs:
  - csharp
  - vb
  name: Mandatory
  nameWithType: IDescriptiveField.Mandatory
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines if the field is mandatory\n"
  syntax:
    content: bool Mandatory { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Mandatory As Boolean
  overload: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label
  id: Label
  parent: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  langs:
  - csharp
  - vb
  name: Label
  nameWithType: IDescriptiveField.Label
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe name of the field\n"
  syntax:
    content: string Label { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Label As String
  overload: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple
  id: Multiple
  parent: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  langs:
  - csharp
  - vb
  name: Multiple
  nameWithType: IDescriptiveField.Multiple
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines whether the field can have multiple values\n"
  syntax:
    content: bool Multiple { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Multiple As Boolean
  overload: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type
  id: Type
  parent: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: IDescriptiveField.Type
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe type of the field\n"
  syntax:
    content: FieldType Type { get; }
    parameters: []
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.FieldType
    content.vb: ReadOnly Property Type As FieldType
  overload: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level
  id: Level
  parent: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField
  langs:
  - csharp
  - vb
  name: Level
  nameWithType: IDescriptiveField.Level
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe level of the field\n"
  syntax:
    content: FieldLevel Level { get; }
    parameters: []
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.FieldLevel
    content.vb: ReadOnly Property Level As FieldLevel
  overload: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues
  isExternal: true
  name: PickListValues
  nameWithType: IDescriptiveField.PickListValues
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.PickListValues
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory
  isExternal: true
  name: Mandatory
  nameWithType: IDescriptiveField.Mandatory
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Mandatory
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label
  isExternal: true
  name: Label
  nameWithType: IDescriptiveField.Label
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Label
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple
  isExternal: true
  name: Multiple
  nameWithType: IDescriptiveField.Multiple
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Multiple
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type
  isExternal: true
  name: Type
  nameWithType: IDescriptiveField.Type
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Type
- uid: Sdl.Terminology.TerminologyProvider.Core.FieldType
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.FieldType
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: FieldType
  nameWithType: FieldType
  fullName: Sdl.Terminology.TerminologyProvider.Core.FieldType
- uid: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level
  isExternal: true
  name: Level
  nameWithType: IDescriptiveField.Level
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDescriptiveField.Level
- uid: Sdl.Terminology.TerminologyProvider.Core.FieldLevel
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.FieldLevel
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: FieldLevel
  nameWithType: FieldLevel
  fullName: Sdl.Terminology.TerminologyProvider.Core.FieldLevel
