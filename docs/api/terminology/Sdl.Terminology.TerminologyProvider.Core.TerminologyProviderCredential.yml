### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  id: TerminologyProviderCredential
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials,System.Boolean)
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(System.String,System.Boolean)
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(System.String,System.String,System.Boolean)
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  langs:
  - csharp
  - vb
  name: TerminologyProviderCredential
  nameWithType: TerminologyProviderCredential
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  type: Class
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nRepresents a credential for a terminology provider that can be stored in a <xref href=\"Sdl.Terminology.TerminologyProvider.Core.ITerminologyProviderCredentialStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: 'public sealed class TerminologyProviderCredential : IEquatable<TerminologyProviderCredential>'
    content.vb: >-
      Public NotInheritable Class TerminologyProviderCredential
          Implements IEquatable(Of TerminologyProviderCredential)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(System.String,System.String,System.Boolean)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: TerminologyProviderCredential(String, String, Boolean)
  nameWithType: TerminologyProviderCredential.TerminologyProviderCredential(String, String, Boolean)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.TerminologyProviderCredential(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nConstructor that takes the given credential and whether to persist.\n"
  syntax:
    content: public TerminologyProviderCredential(string userName, string password, bool persist = false)
    parameters:
    - id: userName
      type: System.String
      description: username
    - id: password
      type: System.String
      description: password
    - id: persist
      type: System.Boolean
      description: persist
    content.vb: Public Sub New(userName As String, password As String, persist As Boolean = False)
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(System.String,System.Boolean)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: TerminologyProviderCredential(String, Boolean)
  nameWithType: TerminologyProviderCredential.TerminologyProviderCredential(String, Boolean)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.TerminologyProviderCredential(System.String, System.Boolean)
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nConstructor that takes the given credential and whether to persist.\nCan be used when authentication is done using an api key\n"
  syntax:
    content: public TerminologyProviderCredential(string credential, bool persist = false)
    parameters:
    - id: credential
      type: System.String
      description: userCredentials
    - id: persist
      type: System.Boolean
      description: persist
    content.vb: Public Sub New(credential As String, persist As Boolean = False)
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials,System.Boolean)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor(Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials,System.Boolean)
  id: '#ctor(Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials,System.Boolean)'
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: TerminologyProviderCredential(TerminologyUserCredentials, Boolean)
  nameWithType: TerminologyProviderCredential.TerminologyProviderCredential(TerminologyUserCredentials, Boolean)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.TerminologyProviderCredential(Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials, System.Boolean)
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nConstructor that takes the given credential and whether to persist.\n"
  syntax:
    content: public TerminologyProviderCredential(TerminologyUserCredentials credential, bool persist = false)
    parameters:
    - id: credential
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials
      description: userCredentials
    - id: persist
      type: System.Boolean
      description: persist
    content.vb: Public Sub New(credential As TerminologyUserCredentials, persist As Boolean = False)
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  id: GetHashCode(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: GetHashCode(TerminologyProviderCredential)
  nameWithType: TerminologyProviderCredential.GetHashCode(TerminologyProviderCredential)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGenerates an hash code for the specified terminology provider credential object\n"
  syntax:
    content: public int GetHashCode(TerminologyProviderCredential obj)
    parameters:
    - id: obj
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
      description: The terminology provider userCredentials object.
    return:
      type: System.Int32
      description: The generated hash code.
    content.vb: Public Function GetHashCode(obj As TerminologyProviderCredential) As Integer
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  id: Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: Equals(TerminologyProviderCredential)
  nameWithType: TerminologyProviderCredential.Equals(TerminologyProviderCredential)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines whether two terminology provider credentials objects are equal\n"
  syntax:
    content: public bool Equals(TerminologyProviderCredential other)
    parameters:
    - id: other
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
      description: The terminology provider credentials object to compare the current object with.
    return:
      type: System.Boolean
      description: True if the two objects are equal.
    content.vb: Public Function Equals(other As TerminologyProviderCredential) As Boolean
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals*
  implements:
  - System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString
  id: CredentialString
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: CredentialString
  nameWithType: TerminologyProviderCredential.CredentialString
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nCredential property represents the credential.\n"
  syntax:
    content: public string CredentialString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CredentialString As String
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential
  id: Credential
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  langs:
  - csharp
  - vb
  name: Credential
  nameWithType: TerminologyProviderCredential.Credential
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nCredential property represents the credential.\n"
  syntax:
    content: public TerminologyUserCredentials Credential { get; set; }
    parameters: []
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials
    content.vb: Public Property Credential As TerminologyUserCredentials
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}
  commentId: T:System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TerminologyProviderCredential>
  nameWithType: IEquatable<TerminologyProviderCredential>
  fullName: System.IEquatable<Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential>
  nameWithType.vb: IEquatable(Of TerminologyProviderCredential)
  fullName.vb: System.IEquatable(Of Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  name.vb: IEquatable(Of TerminologyProviderCredential)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    name: TerminologyProviderCredential
    nameWithType: TerminologyProviderCredential
    fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    name: TerminologyProviderCredential
    nameWithType: TerminologyProviderCredential
    fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.#ctor
  isExternal: true
  name: TerminologyProviderCredential
  nameWithType: TerminologyProviderCredential.TerminologyProviderCredential
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.TerminologyProviderCredential
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: TerminologyUserCredentials
  nameWithType: TerminologyUserCredentials
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyUserCredentials
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: TerminologyProviderCredential.GetHashCode
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.GetHashCode
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: TerminologyProviderCredential
  nameWithType: TerminologyProviderCredential
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals
  isExternal: true
  name: Equals
  nameWithType: TerminologyProviderCredential.Equals
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Equals
- uid: System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  commentId: M:System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  parent: System.IEquatable{Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TerminologyProviderCredential)
  nameWithType: IEquatable<TerminologyProviderCredential>.Equals(TerminologyProviderCredential)
  fullName: System.IEquatable<Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential>.Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  nameWithType.vb: IEquatable(Of TerminologyProviderCredential).Equals(TerminologyProviderCredential)
  fullName.vb: System.IEquatable(Of Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential).Equals(Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<TerminologyProviderCredential>.Equals
    fullName: System.IEquatable<Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    name: TerminologyProviderCredential
    nameWithType: TerminologyProviderCredential
    fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of TerminologyProviderCredential).Equals
    fullName: System.IEquatable(Of Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    name: TerminologyProviderCredential
    nameWithType: TerminologyProviderCredential
    fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString
  isExternal: true
  name: CredentialString
  nameWithType: TerminologyProviderCredential.CredentialString
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.CredentialString
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential
  isExternal: true
  name: Credential
  nameWithType: TerminologyProviderCredential.Credential
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCredential.Credential
