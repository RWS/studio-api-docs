### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Settings.ISettingsGroup
  commentId: T:Sdl.Core.Settings.ISettingsGroup
  id: ISettingsGroup
  parent: Sdl.Core.Settings
  children:
  - Sdl.Core.Settings.ISettingsGroup.ContainsSetting(System.String)
  - Sdl.Core.Settings.ISettingsGroup.EventsSuspended
  - Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String)
  - Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,``0)
  - Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,``0@)
  - Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,Sdl.Core.Settings.Setting{``0}@)
  - Sdl.Core.Settings.ISettingsGroup.GetSettingIds
  - Sdl.Core.Settings.ISettingsGroup.Id
  - Sdl.Core.Settings.ISettingsGroup.ImportSettings(Sdl.Core.Settings.ISettingsGroup)
  - Sdl.Core.Settings.ISettingsGroup.Parent
  - Sdl.Core.Settings.ISettingsGroup.RemoveSetting(System.String)
  - Sdl.Core.Settings.ISettingsGroup.Reset
  - Sdl.Core.Settings.ISettingsGroup.ResumeEvents
  - Sdl.Core.Settings.ISettingsGroup.SettingsBundle
  - Sdl.Core.Settings.ISettingsGroup.SettingsChanged
  - Sdl.Core.Settings.ISettingsGroup.SuspendEvents
  langs:
  - csharp
  - vb
  name: ISettingsGroup
  nameWithType: ISettingsGroup
  fullName: Sdl.Core.Settings.ISettingsGroup
  type: Interface
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nA group of individual setting values\n"
  syntax:
    content: 'public interface ISettingsGroup : INotifyPropertyChanged, IEditableObject'
    content.vb: >-
      Public Interface ISettingsGroup
          Inherits INotifyPropertyChanged, IEditableObject
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.Settings.ISettingsGroup.ContainsSetting(System.String)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.ContainsSetting(System.String)
  id: ContainsSetting(System.String)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: ContainsSetting(String)
  nameWithType: ISettingsGroup.ContainsSetting(String)
  fullName: Sdl.Core.Settings.ISettingsGroup.ContainsSetting(System.String)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nReturns true when this settings group or an ancestor settings group contains a value for the specified setting.\n"
  syntax:
    content: bool ContainsSetting(string settingId)
    parameters:
    - id: settingId
      type: System.String
      description: The id of the setting.
    return:
      type: System.Boolean
      description: True if this settings group or an ancestor contains a value for the specified setting.
    content.vb: Function ContainsSetting(settingId As String) As Boolean
  overload: Sdl.Core.Settings.ISettingsGroup.ContainsSetting*
- uid: Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String)
  id: GetSetting``1(System.String)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: GetSetting<T>(String)
  nameWithType: ISettingsGroup.GetSetting<T>(String)
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSetting<T>(System.String)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the setting with the specified id.\n"
  remarks: >
    When no value is defined in the settings group itself, the parent chain is searched

    for an inherited value. If no inherited value can be found, the default value provided by the settings group implementation is returned.
  syntax:
    content: Setting<T> GetSetting<T>(string id)
    parameters:
    - id: id
      type: System.String
      description: The id of the setting.
    typeParameters:
    - id: T
      description: The type of the setting value.
    return:
      type: Sdl.Core.Settings.Setting{{T}}
      description: The setting.
    content.vb: Function GetSetting(Of T)(id As String) As Setting(Of T)
  overload: Sdl.Core.Settings.ISettingsGroup.GetSetting*
  nameWithType.vb: ISettingsGroup.GetSetting(Of T)(String)
  fullName.vb: Sdl.Core.Settings.ISettingsGroup.GetSetting(Of T)(System.String)
  name.vb: GetSetting(Of T)(String)
- uid: Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,Sdl.Core.Settings.Setting{``0}@)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,Sdl.Core.Settings.Setting{``0}@)
  id: GetSetting``1(System.String,Sdl.Core.Settings.Setting{``0}@)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: GetSetting<T>(String, out Setting<T>)
  nameWithType: ISettingsGroup.GetSetting<T>(String, out Setting<T>)
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSetting<T>(System.String, out Sdl.Core.Settings.Setting<T>)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the setting with the specified id.\n"
  remarks: >
    When no value is defined in the settings group itself, the parent chain is searched

    for an inherited value. If no inherited value can be found, null is returned.
  syntax:
    content: bool GetSetting<T>(string settingId, out Setting<T> setting)
    parameters:
    - id: settingId
      type: System.String
      description: The id of the setting.
    - id: setting
      type: Sdl.Core.Settings.Setting{{T}}
      description: The setting, or null if no value was defined.
    typeParameters:
    - id: T
      description: The type of the setting value.
    return:
      type: System.Boolean
      description: True if a setting value has been returned.
    content.vb: Function GetSetting(Of T)(settingId As String, ByRef setting As Setting(Of T)) As Boolean
  overload: Sdl.Core.Settings.ISettingsGroup.GetSetting*
  nameWithType.vb: ISettingsGroup.GetSetting(Of T)(String, ByRef Setting(Of T))
  fullName.vb: Sdl.Core.Settings.ISettingsGroup.GetSetting(Of T)(System.String, ByRef Sdl.Core.Settings.Setting(Of T))
  name.vb: GetSetting(Of T)(String, ByRef Setting(Of T))
- uid: Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,``0@)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,``0@)
  id: GetSetting``1(System.String,``0@)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: GetSetting<T>(String, out T)
  nameWithType: ISettingsGroup.GetSetting<T>(String, out T)
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSetting<T>(System.String, out T)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the setting with the specified id.\n"
  remarks: >
    When no value is defined in the settings group itself, the parent chain is searched

    for an inherited value. If no inherited value can be found, null is returned.
  syntax:
    content: bool GetSetting<T>(string settingId, out T value)
    parameters:
    - id: settingId
      type: System.String
      description: The id of the setting.
    - id: value
      type: '{T}'
      description: The value of the setting.
    typeParameters:
    - id: T
      description: The type of the setting value.
    return:
      type: System.Boolean
      description: True if a setting value has been returned.
    content.vb: Function GetSetting(Of T)(settingId As String, ByRef value As T) As Boolean
  overload: Sdl.Core.Settings.ISettingsGroup.GetSetting*
  nameWithType.vb: ISettingsGroup.GetSetting(Of T)(String, ByRef T)
  fullName.vb: Sdl.Core.Settings.ISettingsGroup.GetSetting(Of T)(System.String, ByRef T)
  name.vb: GetSetting(Of T)(String, ByRef T)
- uid: Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,``0)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.GetSetting``1(System.String,``0)
  id: GetSetting``1(System.String,``0)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: GetSetting<T>(String, T)
  nameWithType: ISettingsGroup.GetSetting<T>(String, T)
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSetting<T>(System.String, T)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the setting with the specified id.\n"
  remarks: >
    When no value is defined in the settings group itself, the parent chain is searched

    for an inherited value. If no inherited value can be found, the default value provided by the settings group implementation is returned.
  syntax:
    content: Setting<T> GetSetting<T>(string settingId, T defaultValue)
    parameters:
    - id: settingId
      type: System.String
      description: The id of the setting.
    - id: defaultValue
      type: '{T}'
      description: The default value for the setting if no value can be found.
    typeParameters:
    - id: T
      description: The type of the setting value.
    return:
      type: Sdl.Core.Settings.Setting{{T}}
      description: The setting.
    content.vb: Function GetSetting(Of T)(settingId As String, defaultValue As T) As Setting(Of T)
  overload: Sdl.Core.Settings.ISettingsGroup.GetSetting*
  nameWithType.vb: ISettingsGroup.GetSetting(Of T)(String, T)
  fullName.vb: Sdl.Core.Settings.ISettingsGroup.GetSetting(Of T)(System.String, T)
  name.vb: GetSetting(Of T)(String, T)
- uid: Sdl.Core.Settings.ISettingsGroup.ImportSettings(Sdl.Core.Settings.ISettingsGroup)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.ImportSettings(Sdl.Core.Settings.ISettingsGroup)
  id: ImportSettings(Sdl.Core.Settings.ISettingsGroup)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: ImportSettings(ISettingsGroup)
  nameWithType: ISettingsGroup.ImportSettings(ISettingsGroup)
  fullName: Sdl.Core.Settings.ISettingsGroup.ImportSettings(Sdl.Core.Settings.ISettingsGroup)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nImports the settings from another group into this one. Resets the current settings in this group before\nimporting the settings from the other group.\n"
  syntax:
    content: void ImportSettings(ISettingsGroup otherGroup)
    parameters:
    - id: otherGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The group which the settings are imported from
    content.vb: Sub ImportSettings(otherGroup As ISettingsGroup)
  overload: Sdl.Core.Settings.ISettingsGroup.ImportSettings*
- uid: Sdl.Core.Settings.ISettingsGroup.RemoveSetting(System.String)
  commentId: M:Sdl.Core.Settings.ISettingsGroup.RemoveSetting(System.String)
  id: RemoveSetting(System.String)
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: RemoveSetting(String)
  nameWithType: ISettingsGroup.RemoveSetting(String)
  fullName: Sdl.Core.Settings.ISettingsGroup.RemoveSetting(System.String)
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nRemoves a local setting from the this group. Returns true if the setting was successfully removed, false otherwise.\ni.e. if the setting doesn&apos;t exist, false is returned.\n"
  syntax:
    content: bool RemoveSetting(string settingId)
    parameters:
    - id: settingId
      type: System.String
      description: The id of the setting to remove
    return:
      type: System.Boolean
      description: boolean indicating whether the setting was successfully removed
    content.vb: Function RemoveSetting(settingId As String) As Boolean
  overload: Sdl.Core.Settings.ISettingsGroup.RemoveSetting*
- uid: Sdl.Core.Settings.ISettingsGroup.Reset
  commentId: M:Sdl.Core.Settings.ISettingsGroup.Reset
  id: Reset
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ISettingsGroup.Reset()
  fullName: Sdl.Core.Settings.ISettingsGroup.Reset()
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nResets all settings locally defined in this settings group.\n"
  syntax:
    content: void Reset()
    content.vb: Sub Reset
  overload: Sdl.Core.Settings.ISettingsGroup.Reset*
- uid: Sdl.Core.Settings.ISettingsGroup.SuspendEvents
  commentId: M:Sdl.Core.Settings.ISettingsGroup.SuspendEvents
  id: SuspendEvents
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: SuspendEvents()
  nameWithType: ISettingsGroup.SuspendEvents()
  fullName: Sdl.Core.Settings.ISettingsGroup.SuspendEvents()
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nSuspends event notification.\n"
  remarks: "This method can be aclled multiple times. Until the <xref href=\"Sdl.Core.Settings.ISettingsGroup.ResumeEvents\" data-throw-if-not-resolved=\"false\"></xref> has been called the same number of times, \nno event will be raised."
  syntax:
    content: void SuspendEvents()
    content.vb: Sub SuspendEvents
  overload: Sdl.Core.Settings.ISettingsGroup.SuspendEvents*
- uid: Sdl.Core.Settings.ISettingsGroup.ResumeEvents
  commentId: M:Sdl.Core.Settings.ISettingsGroup.ResumeEvents
  id: ResumeEvents
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: ResumeEvents()
  nameWithType: ISettingsGroup.ResumeEvents()
  fullName: Sdl.Core.Settings.ISettingsGroup.ResumeEvents()
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nResumes event notification. This raises the <xref href=\"Sdl.Core.Settings.ISettingsGroup.SettingsChanged\" data-throw-if-not-resolved=\"false\"></xref> event once this method\nhas been called an equal amount of times as <xref href=\"Sdl.Core.Settings.ISettingsGroup.SuspendEvents\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: void ResumeEvents()
    content.vb: Sub ResumeEvents
  overload: Sdl.Core.Settings.ISettingsGroup.ResumeEvents*
- uid: Sdl.Core.Settings.ISettingsGroup.GetSettingIds
  commentId: M:Sdl.Core.Settings.ISettingsGroup.GetSettingIds
  id: GetSettingIds
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: GetSettingIds()
  nameWithType: ISettingsGroup.GetSettingIds()
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSettingIds()
  type: Method
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the setting ids from the current settings group.\n"
  syntax:
    content: IEnumerable<string> GetSettingIds()
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The setting ids.
    content.vb: Function GetSettingIds As IEnumerable(Of String)
  overload: Sdl.Core.Settings.ISettingsGroup.GetSettingIds*
- uid: Sdl.Core.Settings.ISettingsGroup.Id
  commentId: P:Sdl.Core.Settings.ISettingsGroup.Id
  id: Id
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ISettingsGroup.Id
  fullName: Sdl.Core.Settings.ISettingsGroup.Id
  type: Property
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the id of the settings group.\n"
  syntax:
    content: string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Id As String
  overload: Sdl.Core.Settings.ISettingsGroup.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.Settings.ISettingsGroup.SettingsBundle
  commentId: P:Sdl.Core.Settings.ISettingsGroup.SettingsBundle
  id: SettingsBundle
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: SettingsBundle
  nameWithType: ISettingsGroup.SettingsBundle
  fullName: Sdl.Core.Settings.ISettingsGroup.SettingsBundle
  type: Property
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the bundle this settings group belongs to\n"
  syntax:
    content: ISettingsBundle SettingsBundle { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.ISettingsBundle
    content.vb: ReadOnly Property SettingsBundle As ISettingsBundle
  overload: Sdl.Core.Settings.ISettingsGroup.SettingsBundle*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.Settings.ISettingsGroup.Parent
  commentId: P:Sdl.Core.Settings.ISettingsGroup.Parent
  id: Parent
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ISettingsGroup.Parent
  fullName: Sdl.Core.Settings.ISettingsGroup.Parent
  type: Property
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nGets the parent settings group in the parent bundle, or null if this settings group belongs to the root settings bundle.\n"
  syntax:
    content: ISettingsGroup Parent { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.ISettingsGroup
    content.vb: ReadOnly Property Parent As ISettingsGroup
  overload: Sdl.Core.Settings.ISettingsGroup.Parent*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.Settings.ISettingsGroup.EventsSuspended
  commentId: P:Sdl.Core.Settings.ISettingsGroup.EventsSuspended
  id: EventsSuspended
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: EventsSuspended
  nameWithType: ISettingsGroup.EventsSuspended
  fullName: Sdl.Core.Settings.ISettingsGroup.EventsSuspended
  type: Property
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nTrue if event notifications have been suspended.\n"
  syntax:
    content: bool EventsSuspended { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property EventsSuspended As Boolean
  overload: Sdl.Core.Settings.ISettingsGroup.EventsSuspended*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.Settings.ISettingsGroup.SettingsChanged
  commentId: E:Sdl.Core.Settings.ISettingsGroup.SettingsChanged
  id: SettingsChanged
  parent: Sdl.Core.Settings.ISettingsGroup
  langs:
  - csharp
  - vb
  name: SettingsChanged
  nameWithType: ISettingsGroup.SettingsChanged
  fullName: Sdl.Core.Settings.ISettingsGroup.SettingsChanged
  type: Event
  source:
    path: Sdl.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.Core.Settings
  namespace: Sdl.Core.Settings
  summary: "\nRaised when a setting value changes.\n"
  remarks: This event is also raised if an inherited settings value changes.
  syntax:
    content: event EventHandler<SettingsChangedEventArgs> SettingsChanged
    return:
      type: System.EventHandler{Sdl.Core.Settings.SettingsChangedEventArgs}
    content.vb: Event SettingsChanged As EventHandler(Of SettingsChangedEventArgs)
references:
- uid: Sdl.Core.Settings
  commentId: N:Sdl.Core.Settings
  isExternal: true
  name: Sdl.Core.Settings
  nameWithType: Sdl.Core.Settings
  fullName: Sdl.Core.Settings
- uid: Sdl.Core.Settings.ISettingsGroup.ContainsSetting*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.ContainsSetting
  isExternal: true
  name: ContainsSetting
  nameWithType: ISettingsGroup.ContainsSetting
  fullName: Sdl.Core.Settings.ISettingsGroup.ContainsSetting
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Settings.ISettingsGroup.GetSetting*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.GetSetting
  isExternal: true
  name: GetSetting
  nameWithType: ISettingsGroup.GetSetting
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSetting
- uid: Sdl.Core.Settings.Setting{{T}}
  commentId: T:Sdl.Core.Settings.Setting{``0}
  parent: Sdl.Core.Settings
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<T>
  nameWithType: Setting<T>
  fullName: Sdl.Core.Settings.Setting<T>
  nameWithType.vb: Setting(Of T)
  fullName.vb: Sdl.Core.Settings.Setting(Of T)
  name.vb: Setting(Of T)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Settings.Setting`1
  commentId: T:Sdl.Core.Settings.Setting`1
  parent: Sdl.Core.Settings
  isExternal: true
  name: Setting<T>
  nameWithType: Setting<T>
  fullName: Sdl.Core.Settings.Setting<T>
  nameWithType.vb: Setting(Of T)
  fullName.vb: Sdl.Core.Settings.Setting(Of T)
  name.vb: Setting(Of T)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.Core.Settings.ISettingsGroup.ImportSettings*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.ImportSettings
  isExternal: true
  name: ImportSettings
  nameWithType: ISettingsGroup.ImportSettings
  fullName: Sdl.Core.Settings.ISettingsGroup.ImportSettings
- uid: Sdl.Core.Settings.ISettingsGroup
  commentId: T:Sdl.Core.Settings.ISettingsGroup
  parent: Sdl.Core.Settings
  isExternal: true
  name: ISettingsGroup
  nameWithType: ISettingsGroup
  fullName: Sdl.Core.Settings.ISettingsGroup
- uid: Sdl.Core.Settings.ISettingsGroup.RemoveSetting*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.RemoveSetting
  isExternal: true
  name: RemoveSetting
  nameWithType: ISettingsGroup.RemoveSetting
  fullName: Sdl.Core.Settings.ISettingsGroup.RemoveSetting
- uid: Sdl.Core.Settings.ISettingsGroup.Reset*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.Reset
  isExternal: true
  name: Reset
  nameWithType: ISettingsGroup.Reset
  fullName: Sdl.Core.Settings.ISettingsGroup.Reset
- uid: Sdl.Core.Settings.ISettingsGroup.SuspendEvents*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.SuspendEvents
  isExternal: true
  name: SuspendEvents
  nameWithType: ISettingsGroup.SuspendEvents
  fullName: Sdl.Core.Settings.ISettingsGroup.SuspendEvents
- uid: Sdl.Core.Settings.ISettingsGroup.ResumeEvents*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.ResumeEvents
  isExternal: true
  name: ResumeEvents
  nameWithType: ISettingsGroup.ResumeEvents
  fullName: Sdl.Core.Settings.ISettingsGroup.ResumeEvents
- uid: Sdl.Core.Settings.ISettingsGroup.GetSettingIds*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.GetSettingIds
  isExternal: true
  name: GetSettingIds
  nameWithType: ISettingsGroup.GetSettingIds
  fullName: Sdl.Core.Settings.ISettingsGroup.GetSettingIds
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Settings.ISettingsGroup.Id*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.Id
  isExternal: true
  name: Id
  nameWithType: ISettingsGroup.Id
  fullName: Sdl.Core.Settings.ISettingsGroup.Id
- uid: Sdl.Core.Settings.ISettingsGroup.SettingsBundle*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.SettingsBundle
  isExternal: true
  name: SettingsBundle
  nameWithType: ISettingsGroup.SettingsBundle
  fullName: Sdl.Core.Settings.ISettingsGroup.SettingsBundle
- uid: Sdl.Core.Settings.ISettingsBundle
  commentId: T:Sdl.Core.Settings.ISettingsBundle
  parent: Sdl.Core.Settings
  isExternal: true
  name: ISettingsBundle
  nameWithType: ISettingsBundle
  fullName: Sdl.Core.Settings.ISettingsBundle
- uid: Sdl.Core.Settings.ISettingsGroup.Parent*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.Parent
  isExternal: true
  name: Parent
  nameWithType: ISettingsGroup.Parent
  fullName: Sdl.Core.Settings.ISettingsGroup.Parent
- uid: Sdl.Core.Settings.ISettingsGroup.EventsSuspended*
  commentId: Overload:Sdl.Core.Settings.ISettingsGroup.EventsSuspended
  isExternal: true
  name: EventsSuspended
  nameWithType: ISettingsGroup.EventsSuspended
  fullName: Sdl.Core.Settings.ISettingsGroup.EventsSuspended
- uid: System.EventHandler{Sdl.Core.Settings.SettingsChangedEventArgs}
  commentId: T:System.EventHandler{Sdl.Core.Settings.SettingsChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<SettingsChangedEventArgs>
  nameWithType: EventHandler<SettingsChangedEventArgs>
  fullName: System.EventHandler<Sdl.Core.Settings.SettingsChangedEventArgs>
  nameWithType.vb: EventHandler(Of SettingsChangedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.Core.Settings.SettingsChangedEventArgs)
  name.vb: EventHandler(Of SettingsChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Settings.SettingsChangedEventArgs
    name: SettingsChangedEventArgs
    nameWithType: SettingsChangedEventArgs
    fullName: Sdl.Core.Settings.SettingsChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Settings.SettingsChangedEventArgs
    name: SettingsChangedEventArgs
    nameWithType: SettingsChangedEventArgs
    fullName: Sdl.Core.Settings.SettingsChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<>
  nameWithType: EventHandler<>
  fullName: System.EventHandler<>
  nameWithType.vb: EventHandler(Of )
  fullName.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
