### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  id: LanguageRegistryApi
  parent: Sdl.Core.Globalization.LanguageRegistry
  children:
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject(System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject
  langs:
  - csharp
  - vb
  name: LanguageRegistryApi
  nameWithType: LanguageRegistryApi
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  type: Class
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nApi providing all the LanguageRegistry operations\n"
  syntax:
    content: public sealed class LanguageRegistryApi
    content.vb: Public NotInheritable Class LanguageRegistryApi
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize
  id: Initialize
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: LanguageRegistryApi.Initialize()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nInitializer of the Registry\n"
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  id: GetAllLanguages
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllLanguages()
  nameWithType: LanguageRegistryApi.GetAllLanguages()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all the languages registered\n"
  syntax:
    content: public IList<Language> GetAllLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
      description: List with all available languages
    content.vb: Public Function GetAllLanguages As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  id: GetAllNeutralLanguages
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllNeutralLanguages()
  nameWithType: LanguageRegistryApi.GetAllNeutralLanguages()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all the neutral languages registered\n"
  syntax:
    content: public IList<Language> GetAllNeutralLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
      description: List with all the neutral languages
    content.vb: Public Function GetAllNeutralLanguages As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  id: GetAllSpecificLanguages
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllSpecificLanguages()
  nameWithType: LanguageRegistryApi.GetAllSpecificLanguages()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all the specific languages registered, these are cultures not neutral\n"
  syntax:
    content: public IList<Language> GetAllSpecificLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
      description: List with all specific languages
    content.vb: Public Function GetAllSpecificLanguages As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  id: GetLanguage(System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetLanguage(String)
  nameWithType: LanguageRegistryApi.GetLanguage(String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets a language based on a code\n"
  syntax:
    content: public Language GetLanguage(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
      description: Searched code
    return:
      type: Sdl.Core.Globalization.Language
      description: Language having the languageCode Code/null if such language is not found
    content.vb: Public Function GetLanguage(languageCode As String) As Language
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String,System.String)
  id: GetLanguage(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetLanguage(String, String)
  nameWithType: LanguageRegistryApi.GetLanguage(String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets a language based on an alternative code and product ID\n"
  syntax:
    content: public Language GetLanguage(string alternativeLanguageCode, string productId)
    parameters:
    - id: alternativeLanguageCode
      type: System.String
      description: Searched alternative code
    - id: productId
      type: System.String
      description: Searched product ID
    return:
      type: Sdl.Core.Globalization.Language
      description: Language that has the given alternative code for the given product
    content.vb: Public Function GetLanguage(alternativeLanguageCode As String, productId As String) As Language
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  id: GetSupportedLanguages(System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetSupportedLanguages(String)
  nameWithType: LanguageRegistryApi.GetSupportedLanguages(String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all supported languages for a given product\n"
  syntax:
    content: public IList<Language> GetSupportedLanguages(string productId)
    parameters:
    - id: productId
      type: System.String
      description: Id of the searched product
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
      description: Array of all supported languages for a product
    content.vb: Public Function GetSupportedLanguages(productId As String) As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  id: GetAllRegisteredProducts
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProducts()
  nameWithType: LanguageRegistryApi.GetAllRegisteredProducts()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nPresents a list of all the products supported by the model\n"
  syntax:
    content: public IList<Product> GetAllRegisteredProducts()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}
      description: list of Product objects
    content.vb: Public Function GetAllRegisteredProducts As IList(Of Product)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String,System.String)
  id: GetAlternativeLanguageCodes(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAlternativeLanguageCodes(String, String)
  nameWithType: LanguageRegistryApi.GetAlternativeLanguageCodes(String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets an alternative language code for the language represented by languageCode and for product represented by productId\n"
  syntax:
    content: public IList<AlternativeLanguageCode> GetAlternativeLanguageCodes(string productId, string languageCode)
    parameters:
    - id: productId
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
      description: string that represents the alternative language code for the language and the product given
    content.vb: Public Function GetAlternativeLanguageCodes(productId As String, languageCode As String) As IList(Of AlternativeLanguageCode)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  id: GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetProductSpecificCodeWithFallback(String, String, String, out MappingType)
  nameWithType: LanguageRegistryApi.GetProductSpecificCodeWithFallback(String, String, String, out MappingType)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String, System.String, System.String, out Sdl.Core.Globalization.LanguageRegistry.MappingType)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nReturns the best available mapping from sourceProduct to targetProduct for sourceLanguageCode.\nIf sourceLanguage doesn&apos;t have a mapping, it falls back to its parent and the parent&apos;s defaultSpecificLanguage\n"
  syntax:
    content: public IList<AlternativeLanguageCode> GetProductSpecificCodeWithFallback(string sourceProductId, string sourceLanguageCode, string targetProductId, out MappingType mappingType)
    parameters:
    - id: sourceProductId
      type: System.String
    - id: sourceLanguageCode
      type: System.String
    - id: targetProductId
      type: System.String
    - id: mappingType
      type: Sdl.Core.Globalization.LanguageRegistry.MappingType
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
    content.vb: Public Function GetProductSpecificCodeWithFallback(sourceProductId As String, sourceLanguageCode As String, targetProductId As String, ByRef mappingType As MappingType) As IList(Of AlternativeLanguageCode)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback*
  nameWithType.vb: LanguageRegistryApi.GetProductSpecificCodeWithFallback(String, String, String, ByRef MappingType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String, System.String, System.String, ByRef Sdl.Core.Globalization.LanguageRegistry.MappingType)
  name.vb: GetProductSpecificCodeWithFallback(String, String, String, ByRef MappingType)
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject
  id: SerializeObject
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: SerializeObject()
  nameWithType: LanguageRegistryApi.SerializeObject()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nSerialization of the object to JSON\n"
  syntax:
    content: public string SerializeObject()
    return:
      type: System.String
    content.vb: Public Function SerializeObject As String
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject(System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject(System.String)
  id: DeserializeObject(System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: DeserializeObject(String)
  nameWithType: LanguageRegistryApi.DeserializeObject(String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nDeserialize object from JSON\n"
  syntax:
    content: public void DeserializeObject(string value)
    parameters:
    - id: value
      type: System.String
    content.vb: Public Sub DeserializeObject(value As String)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  commentId: P:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  id: Instance
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: LanguageRegistryApi.Instance
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nReturns an instance of the LanguageRegistryApi singleton\n"
  syntax:
    content: public static LanguageRegistryApi Instance { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
    content.vb: Public Shared ReadOnly Property Instance As LanguageRegistryApi
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Sdl.Core.Globalization.LanguageRegistry
  commentId: N:Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: Sdl.Core.Globalization.LanguageRegistry
  nameWithType: Sdl.Core.Globalization.LanguageRegistry
  fullName: Sdl.Core.Globalization.LanguageRegistry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize
  isExternal: true
  name: Initialize
  nameWithType: LanguageRegistryApi.Initialize
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Initialize
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  isExternal: true
  name: GetAllLanguages
  nameWithType: LanguageRegistryApi.GetAllLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Language>
  nameWithType: IList<Language>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.Language>
  nameWithType.vb: IList(Of Language)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.Language)
  name.vb: IList(Of Language)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  isExternal: true
  name: GetAllNeutralLanguages
  nameWithType: LanguageRegistryApi.GetAllNeutralLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  isExternal: true
  name: GetAllSpecificLanguages
  nameWithType: LanguageRegistryApi.GetAllSpecificLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage
  isExternal: true
  name: GetLanguage
  nameWithType: LanguageRegistryApi.GetLanguage
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.Globalization.Language
  commentId: T:Sdl.Core.Globalization.Language
  parent: Sdl.Core.Globalization
  isExternal: true
  name: Language
  nameWithType: Language
  fullName: Sdl.Core.Globalization.Language
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages
  isExternal: true
  name: GetSupportedLanguages
  nameWithType: LanguageRegistryApi.GetSupportedLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  isExternal: true
  name: GetAllRegisteredProducts
  nameWithType: LanguageRegistryApi.GetAllRegisteredProducts
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Product>
  nameWithType: IList<Product>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.Product>
  nameWithType.vb: IList(Of Product)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.Product)
  name.vb: IList(Of Product)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes
  isExternal: true
  name: GetAlternativeLanguageCodes
  nameWithType: LanguageRegistryApi.GetAlternativeLanguageCodes
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<AlternativeLanguageCode>
  nameWithType: IList<AlternativeLanguageCode>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>
  nameWithType.vb: IList(Of AlternativeLanguageCode)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode)
  name.vb: IList(Of AlternativeLanguageCode)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback
  isExternal: true
  name: GetProductSpecificCodeWithFallback
  nameWithType: LanguageRegistryApi.GetProductSpecificCodeWithFallback
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback
- uid: Sdl.Core.Globalization.LanguageRegistry.MappingType
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.MappingType
  parent: Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: MappingType
  nameWithType: MappingType
  fullName: Sdl.Core.Globalization.LanguageRegistry.MappingType
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject
  isExternal: true
  name: SerializeObject
  nameWithType: LanguageRegistryApi.SerializeObject
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.SerializeObject
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject
  isExternal: true
  name: DeserializeObject
  nameWithType: LanguageRegistryApi.DeserializeObject
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.DeserializeObject
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  isExternal: true
  name: Instance
  nameWithType: LanguageRegistryApi.Instance
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  parent: Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: LanguageRegistryApi
  nameWithType: LanguageRegistryApi
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
