### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.ExtensionAttribute
  commentId: T:Sdl.Core.PluginFramework.ExtensionAttribute
  id: ExtensionAttribute
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.ExtensionAttribute.#ctor
  - Sdl.Core.PluginFramework.ExtensionAttribute.#ctor(System.String,System.String,System.String)
  - Sdl.Core.PluginFramework.ExtensionAttribute.Description
  - Sdl.Core.PluginFramework.ExtensionAttribute.Icon
  - Sdl.Core.PluginFramework.ExtensionAttribute.Id
  - Sdl.Core.PluginFramework.ExtensionAttribute.Name
  - Sdl.Core.PluginFramework.ExtensionAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  - Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  - Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  langs:
  - csharp
  - vb
  name: ExtensionAttribute
  nameWithType: ExtensionAttribute
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nBase class extension attributes, defining extension points.\n"
  remarks: "\n<p>To define a new extension point, create a new attribute class, extending <xref href=\"Sdl.Core.PluginFramework.ExtensionAttribute\" data-throw-if-not-resolved=\"false\"></xref>. The class must be annotated with the \n<xref href=\"Sdl.Core.PluginFramework.ExtensionPointInfoAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute, which indicates that the class defines an extension point.</p>\n<p>Users can now create new extension classes annotated with the new extension attribute, and implementing a specified interface.</p>\n<p>To get access to all the extensions registered with your extension point, use <xref href=\"Sdl.Core.PluginFramework.IPluginRegistry.GetExtensionPoint%60%601\" data-throw-if-not-resolved=\"false\"></xref>, specifying \nthe type of your extension attribute. For more information, see <xref href=\"Sdl.Core.PluginFramework.IExtensionPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When the plug-in manifest is generated, instances of the extension attribute are saved in the plug-in manifest using\nXML serialization. For that reason, make sure your extension attribute supports this (e.g. add a default constructor).</p>\n<p>The framework also provides support for getting property values from the PluginResources.resx resource file, which is deployed together with the plug-in manifest.\nTo specify that the value of a certain string property needs to be retrieved from the resource file, annotate the property definition with the <xref href=\"Sdl.Core.PluginFramework.PluginResourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute. \nUsers should now specify the name of the resource key, instead of the actual value, as the property value. When no resource string with the specified key can be found,\nthe framework keeps the specified string as the property value. To define non-string properties whose value is stored in the PluginResources.resx resource file, create a string property, which value\nshould be set to a resource key. When consuming the extension, use <xref href=\"Sdl.Core.PluginFramework.IPlugin.GetPluginResource%60%601(System.String)\" data-throw-if-not-resolved=\"false\"></xref> tio retriece the resource from \nthe plug-in resource file.\n</p>\n"
  syntax:
    content: 'public class ExtensionAttribute : Attribute'
    content.vb: >-
      Public Class ExtensionAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.Core.PluginFramework.Integration.ExtensionBuilderAttribute
  - Sdl.Core.PluginFramework.Util.SortableExtensionAttribute
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.#ctor
  commentId: M:Sdl.Core.PluginFramework.ExtensionAttribute.#ctor
  id: '#ctor'
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: ExtensionAttribute()
  nameWithType: ExtensionAttribute.ExtensionAttribute()
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ExtensionAttribute()
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nDefault constructor for XML serialization.\n"
  syntax:
    content: public ExtensionAttribute()
    content.vb: Public Sub New
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.#ctor(System.String,System.String,System.String)
  commentId: M:Sdl.Core.PluginFramework.ExtensionAttribute.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: ExtensionAttribute(String, String, String)
  nameWithType: ExtensionAttribute.ExtensionAttribute(String, String, String)
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ExtensionAttribute(System.String, System.String, System.String)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nConstructor with required attributes.\n"
  syntax:
    content: public ExtensionAttribute(string id, string name, string description)
    parameters:
    - id: id
      type: System.String
      description: The unique id for the extension.
    - id: name
      type: System.String
      description: The name for the extension. Should typically be a key of a resource string in PluginResources.resx.
    - id: description
      type: System.String
      description: The description for the extension. Should typically be a key of a resource string in PluginResources.resx.
    content.vb: Public Sub New(id As String, name As String, description As String)
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  commentId: M:Sdl.Core.PluginFramework.ExtensionAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  id: Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: Validate(IExtensionAttributeInfo, IExtensionValidationContext)
  nameWithType: ExtensionAttribute.Validate(IExtensionAttributeInfo, IExtensionValidationContext)
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Validate(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo, Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nValidates an extension targeting this extension point. This method is called by the framework while generating the plug-in manifest.\n"
  syntax:
    content: public virtual void Validate(IExtensionAttributeInfo info, IExtensionValidationContext context)
    parameters:
    - id: info
      type: Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo
      description: Information about the extension.
    - id: context
      type: Sdl.Core.PluginFramework.Validation.IExtensionValidationContext
      description: >-
        Provides functionality to validate extensions targeting the extension point

        and report warning or error messages
    content.vb: Public Overridable Sub Validate(info As IExtensionAttributeInfo, context As IExtensionValidationContext)
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.Validate*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  commentId: M:Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  id: ValidateId(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: ValidateId(IExtensionAttributeInfo, IExtensionValidationContext)
  nameWithType: ExtensionAttribute.ValidateId(IExtensionAttributeInfo, IExtensionValidationContext)
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo, Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nValidates the extension Id. Checks whether this is not null or empty. \n"
  syntax:
    content: protected virtual void ValidateId(IExtensionAttributeInfo info, IExtensionValidationContext context)
    parameters:
    - id: info
      type: Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo
      description: Information about the extension.
    - id: context
      type: Sdl.Core.PluginFramework.Validation.IExtensionValidationContext
      description: >-
        Provides functionality to validate extensions targeting the extension point

        and report warning or error messages
    content.vb: Protected Overridable Sub ValidateId(info As IExtensionAttributeInfo, context As IExtensionValidationContext)
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  commentId: M:Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  id: ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo,Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: ValidateName(IExtensionAttributeInfo, IExtensionValidationContext)
  nameWithType: ExtensionAttribute.ValidateName(IExtensionAttributeInfo, IExtensionValidationContext)
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName(Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo, Sdl.Core.PluginFramework.Validation.IExtensionValidationContext)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nValidates the extension Name. Checks whether this is not null or empty. \n"
  syntax:
    content: protected virtual void ValidateName(IExtensionAttributeInfo info, IExtensionValidationContext context)
    parameters:
    - id: info
      type: Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo
      description: Information about the extension.
    - id: context
      type: Sdl.Core.PluginFramework.Validation.IExtensionValidationContext
      description: >-
        Provides functionality to validate extensions targeting the extension point

        and report warning or error messages
    content.vb: Protected Overridable Sub ValidateName(info As IExtensionAttributeInfo, context As IExtensionValidationContext)
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Id
  commentId: P:Sdl.Core.PluginFramework.ExtensionAttribute.Id
  id: Id
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ExtensionAttribute.Id
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Id
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets or sets the unique id of the extension.\n"
  syntax:
    content: public string Id { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.Id*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Name
  commentId: P:Sdl.Core.PluginFramework.ExtensionAttribute.Name
  id: Name
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ExtensionAttribute.Name
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Name
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets or sets the name of the extension.\n"
  remarks: Should typically be a key of a resource string in PluginResources.resx.
  syntax:
    content: >-
      [PluginResource]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <PluginResource>

      Public Property Name As String
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.Name*
  attributes:
  - type: Sdl.Core.PluginFramework.PluginResourceAttribute
    ctor: Sdl.Core.PluginFramework.PluginResourceAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Description
  commentId: P:Sdl.Core.PluginFramework.ExtensionAttribute.Description
  id: Description
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ExtensionAttribute.Description
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Description
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets or sets the description of the extension.\n"
  remarks: Should typically be a key of a resource string in PluginResources.resx.
  syntax:
    content: >-
      [PluginResource]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <PluginResource>

      Public Property Description As String
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.Description*
  attributes:
  - type: Sdl.Core.PluginFramework.PluginResourceAttribute
    ctor: Sdl.Core.PluginFramework.PluginResourceAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Icon
  commentId: P:Sdl.Core.PluginFramework.ExtensionAttribute.Icon
  id: Icon
  parent: Sdl.Core.PluginFramework.ExtensionAttribute
  langs:
  - csharp
  - vb
  name: Icon
  nameWithType: ExtensionAttribute.Icon
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Icon
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets or sets the resource key for an the icon representing this extension. Can be null.\n"
  syntax:
    content: public string Icon { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Icon As String
  overload: Sdl.Core.PluginFramework.ExtensionAttribute.Icon*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.#ctor
  isExternal: true
  name: ExtensionAttribute
  nameWithType: ExtensionAttribute.ExtensionAttribute
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ExtensionAttribute
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Validate*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.Validate
  isExternal: true
  name: Validate
  nameWithType: ExtensionAttribute.Validate
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Validate
- uid: Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo
  commentId: T:Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo
  parent: Sdl.Core.PluginFramework.Validation
  isExternal: true
  name: IExtensionAttributeInfo
  nameWithType: IExtensionAttributeInfo
  fullName: Sdl.Core.PluginFramework.Validation.IExtensionAttributeInfo
- uid: Sdl.Core.PluginFramework.Validation.IExtensionValidationContext
  commentId: T:Sdl.Core.PluginFramework.Validation.IExtensionValidationContext
  parent: Sdl.Core.PluginFramework.Validation
  isExternal: true
  name: IExtensionValidationContext
  nameWithType: IExtensionValidationContext
  fullName: Sdl.Core.PluginFramework.Validation.IExtensionValidationContext
- uid: Sdl.Core.PluginFramework.Validation
  commentId: N:Sdl.Core.PluginFramework.Validation
  isExternal: true
  name: Sdl.Core.PluginFramework.Validation
  nameWithType: Sdl.Core.PluginFramework.Validation
  fullName: Sdl.Core.PluginFramework.Validation
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId
  isExternal: true
  name: ValidateId
  nameWithType: ExtensionAttribute.ValidateId
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateId
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName
  isExternal: true
  name: ValidateName
  nameWithType: ExtensionAttribute.ValidateName
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.ValidateName
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Id*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.Id
  isExternal: true
  name: Id
  nameWithType: ExtensionAttribute.Id
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Id
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Name*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.Name
  isExternal: true
  name: Name
  nameWithType: ExtensionAttribute.Name
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Name
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Description*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.Description
  isExternal: true
  name: Description
  nameWithType: ExtensionAttribute.Description
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Description
- uid: Sdl.Core.PluginFramework.ExtensionAttribute.Icon*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionAttribute.Icon
  isExternal: true
  name: Icon
  nameWithType: ExtensionAttribute.Icon
  fullName: Sdl.Core.PluginFramework.ExtensionAttribute.Icon
