### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.LanguagePair
  commentId: T:Sdl.LanguagePlatform.Core.LanguagePair
  id: LanguagePair
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.LanguagePair.#ctor
  - Sdl.LanguagePlatform.Core.LanguagePair.#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.LanguagePair.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  - Sdl.LanguagePlatform.Core.LanguagePair.Equals(System.Object)
  - Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode
  - Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible(Sdl.LanguagePlatform.Core.LanguagePair)
  - Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.LanguagePair.Reverse
  - Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture
  - Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName
  - Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture
  - Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName
  - Sdl.LanguagePlatform.Core.LanguagePair.ToString
  - Sdl.LanguagePlatform.Core.LanguagePair.TryParse(System.String,Sdl.LanguagePlatform.Core.LanguagePair@)
  langs:
  - csharp
  - vb
  name: LanguagePair
  nameWithType: LanguagePair
  fullName: Sdl.LanguagePlatform.Core.LanguagePair
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nA LanguagePair represents a combination of a source language and a target language.\nLanguages are specified using their culture or the culture which usually maps to \nCultureInfo.Name. However, since the XmlSerializer cannot serialize \n<xref href=\"System.Globalization.CultureInfo?text=CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects, \nthe culture can also be specified using the name. \n"
  syntax:
    content: 'public class LanguagePair : IComparable<LanguagePair>'
    content.vb: >-
      Public Class LanguagePair
          Implements IComparable(Of LanguagePair)
  inheritance:
  - System.Object
  implements:
  - System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.LanguagePair.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: LanguagePair()
  nameWithType: LanguagePair.LanguagePair()
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.LanguagePair()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInstantiates a new object and initializes both languages to the invariant culture.\n"
  syntax:
    content: public LanguagePair()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.LanguagePair.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)
  id: '#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)'
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: LanguagePair(CultureCode, CultureCode)
  nameWithType: LanguagePair.LanguagePair(CultureCode, CultureCode)
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.LanguagePair(Sdl.Core.Globalization.CultureCode, Sdl.Core.Globalization.CultureCode)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInstantiates a new object and initializes it with the provided language direction.\n"
  syntax:
    content: public LanguagePair(CultureCode srcCulture, CultureCode trgCulture)
    parameters:
    - id: srcCulture
      type: Sdl.Core.Globalization.CultureCode
      description: The source culture name
    - id: trgCulture
      type: Sdl.Core.Globalization.CultureCode
      description: The target culture name
    content.vb: Public Sub New(srcCulture As CultureCode, trgCulture As CultureCode)
  overload: Sdl.LanguagePlatform.Core.LanguagePair.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.Equals(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LanguagePair.Equals(Object)
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.Equals(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.Equals(object)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: >
        true if the specified object is equal to the current object;

        otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.LanguagePlatform.Core.LanguagePair.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.LanguagePair.Reverse
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.Reverse
  id: Reverse
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: LanguagePair.Reverse()
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.Reverse()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCreates a new language pair object with the reversed language direction.\n"
  syntax:
    content: public LanguagePair Reverse()
    return:
      type: Sdl.LanguagePlatform.Core.LanguagePair
    content.vb: Public Function Reverse As LanguagePair
  overload: Sdl.LanguagePlatform.Core.LanguagePair.Reverse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible(Sdl.LanguagePlatform.Core.LanguagePair)
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible(Sdl.LanguagePlatform.Core.LanguagePair)
  id: IsCompatible(Sdl.LanguagePlatform.Core.LanguagePair)
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: IsCompatible(LanguagePair)
  nameWithType: LanguagePair.IsCompatible(LanguagePair)
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible(Sdl.LanguagePlatform.Core.LanguagePair)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nChecks whether a language pair is compatible to another language pair, which is the case\nif the source and target cultures of both language pairs are non-null and are pairwise\ncompatible with each other (<xref href=\"Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo%2cSystem.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref>). \n"
  syntax:
    content: public bool IsCompatible(LanguagePair other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.LanguagePair
    return:
      type: System.Boolean
    content.vb: Public Function IsCompatible(other As LanguagePair) As Boolean
  overload: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: IsCompatiblePairAsync(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: IsCompatiblePairAsync(LanguagePair, ICultureMetadataManager)
  nameWithType: LanguagePair.IsCompatiblePairAsync(LanguagePair, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync(Sdl.LanguagePlatform.Core.LanguagePair, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nChecks whether a language pair is compatible to another language pair, which is the case\nif the source and target cultures of both language pairs are non-null and are pairwise\ncompatible with each other (<xref href=\"Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode%2cSdl.Core.Globalization.CultureCode%2cSdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)\" data-throw-if-not-resolved=\"false\"></xref>). \n"
  syntax:
    content: public Task<bool> IsCompatiblePairAsync(LanguagePair other, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.LanguagePair
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function IsCompatiblePairAsync(other As LanguagePair, cultureMetadataManager As ICultureMetadataManager) As Task(Of Boolean)
  overload: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LanguagePair.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this object
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.LanguagePair.ToString
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LanguagePair.ToString()
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.LanguagePair.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.LanguagePair.TryParse(System.String,Sdl.LanguagePlatform.Core.LanguagePair@)
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.TryParse(System.String,Sdl.LanguagePlatform.Core.LanguagePair@)
  id: TryParse(System.String,Sdl.LanguagePlatform.Core.LanguagePair@)
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: TryParse(String, out LanguagePair)
  nameWithType: LanguagePair.TryParse(String, out LanguagePair)
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.TryParse(System.String, out Sdl.LanguagePlatform.Core.LanguagePair)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAttempts to parse a language pair represented by a string, as produced by <xref href=\"Sdl.LanguagePlatform.Core.LanguagePair.ToString\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public static bool TryParse(string s, out LanguagePair lp)
    parameters:
    - id: s
      type: System.String
      description: The input string
    - id: lp
      type: Sdl.LanguagePlatform.Core.LanguagePair
      description: Will hold the deserialized (parsed) return value upon success, and is set to <code>null</code> otherwise.
    return:
      type: System.Boolean
      description: <code>true</code> if the parsing was successful, <code>false</code> otherwise.
    content.vb: Public Shared Function TryParse(s As String, ByRef lp As LanguagePair) As Boolean
  overload: Sdl.LanguagePlatform.Core.LanguagePair.TryParse*
  nameWithType.vb: LanguagePair.TryParse(String, ByRef LanguagePair)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.LanguagePair.TryParse(System.String, ByRef Sdl.LanguagePlatform.Core.LanguagePair)
  name.vb: TryParse(String, ByRef LanguagePair)
- uid: Sdl.LanguagePlatform.Core.LanguagePair.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  commentId: M:Sdl.LanguagePlatform.Core.LanguagePair.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  id: CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: CompareTo(LanguagePair)
  nameWithType: LanguagePair.CompareTo(LanguagePair)
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCompares the language directions, which is achieved by lexically comparing the \nsource and target culture names.\n"
  syntax:
    content: public int CompareTo(LanguagePair other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.LanguagePair
    return:
      type: System.Int32
      description: A comparision result
    content.vb: Public Function CompareTo(other As LanguagePair) As Integer
  overload: Sdl.LanguagePlatform.Core.LanguagePair.CompareTo*
  implements:
  - System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture
  commentId: P:Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture
  id: SourceCulture
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: SourceCulture
  nameWithType: LanguagePair.SourceCulture
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the source culture\n"
  syntax:
    content: public CultureCode SourceCulture { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.CultureCode
    content.vb: Public Property SourceCulture As CultureCode
  overload: Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture
  commentId: P:Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture
  id: TargetCulture
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: TargetCulture
  nameWithType: LanguagePair.TargetCulture
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the target culture\n"
  syntax:
    content: public CultureCode TargetCulture { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.CultureCode
    content.vb: Public Property TargetCulture As CultureCode
  overload: Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName
  commentId: P:Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName
  id: SourceCultureName
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: SourceCultureName
  nameWithType: LanguagePair.SourceCultureName
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the source language in form of a culture code.\n"
  syntax:
    content: public string SourceCultureName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property SourceCultureName As String
  overload: Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName
  commentId: P:Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName
  id: TargetCultureName
  parent: Sdl.LanguagePlatform.Core.LanguagePair
  langs:
  - csharp
  - vb
  name: TargetCultureName
  nameWithType: LanguagePair.TargetCultureName
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the target language in form of a culture code.\n"
  syntax:
    content: public string TargetCultureName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TargetCultureName As String
  overload: Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}
  commentId: T:System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}
  parent: System
  definition: System.IComparable`1
  name: IComparable<LanguagePair>
  nameWithType: IComparable<LanguagePair>
  fullName: System.IComparable<Sdl.LanguagePlatform.Core.LanguagePair>
  nameWithType.vb: IComparable(Of LanguagePair)
  fullName.vb: System.IComparable(Of Sdl.LanguagePlatform.Core.LanguagePair)
  name.vb: IComparable(Of LanguagePair)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.LanguagePair
    name: LanguagePair
    nameWithType: LanguagePair
    fullName: Sdl.LanguagePlatform.Core.LanguagePair
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.LanguagePair
    name: LanguagePair
    nameWithType: LanguagePair
    fullName: Sdl.LanguagePlatform.Core.LanguagePair
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.LanguagePair.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.#ctor
  isExternal: true
  name: LanguagePair
  nameWithType: LanguagePair.LanguagePair
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.LanguagePair
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.LanguagePair.Equals*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.Equals
  isExternal: true
  name: Equals
  nameWithType: LanguagePair.Equals
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.LanguagePair.Reverse*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.Reverse
  isExternal: true
  name: Reverse
  nameWithType: LanguagePair.Reverse
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.Reverse
- uid: Sdl.LanguagePlatform.Core.LanguagePair
  commentId: T:Sdl.LanguagePlatform.Core.LanguagePair
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: LanguagePair
  nameWithType: LanguagePair
  fullName: Sdl.LanguagePlatform.Core.LanguagePair
- uid: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible
  isExternal: true
  name: IsCompatible
  nameWithType: LanguagePair.IsCompatible
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatible
- uid: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync
  isExternal: true
  name: IsCompatiblePairAsync
  nameWithType: LanguagePair.IsCompatiblePairAsync
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.IsCompatiblePairAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: LanguagePair.GetHashCode
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.LanguagePair.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.ToString
  isExternal: true
  name: ToString
  nameWithType: LanguagePair.ToString
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.LanguagePair.TryParse*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.TryParse
  isExternal: true
  name: TryParse
  nameWithType: LanguagePair.TryParse
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.TryParse
- uid: Sdl.LanguagePlatform.Core.LanguagePair.CompareTo*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.CompareTo
  isExternal: true
  name: CompareTo
  nameWithType: LanguagePair.CompareTo
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.CompareTo
- uid: System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  commentId: M:System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  parent: System.IComparable{Sdl.LanguagePlatform.Core.LanguagePair}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(LanguagePair)
  nameWithType: IComparable<LanguagePair>.CompareTo(LanguagePair)
  fullName: System.IComparable<Sdl.LanguagePlatform.Core.LanguagePair>.CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  nameWithType.vb: IComparable(Of LanguagePair).CompareTo(LanguagePair)
  fullName.vb: System.IComparable(Of Sdl.LanguagePlatform.Core.LanguagePair).CompareTo(Sdl.LanguagePlatform.Core.LanguagePair)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<LanguagePair>.CompareTo
    fullName: System.IComparable<Sdl.LanguagePlatform.Core.LanguagePair>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.LanguagePair
    name: LanguagePair
    nameWithType: LanguagePair
    fullName: Sdl.LanguagePlatform.Core.LanguagePair
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of LanguagePair).CompareTo
    fullName: System.IComparable(Of Sdl.LanguagePlatform.Core.LanguagePair).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.LanguagePair
    name: LanguagePair
    nameWithType: LanguagePair
    fullName: Sdl.LanguagePlatform.Core.LanguagePair
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture
  isExternal: true
  name: SourceCulture
  nameWithType: LanguagePair.SourceCulture
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.SourceCulture
- uid: Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture
  isExternal: true
  name: TargetCulture
  nameWithType: LanguagePair.TargetCulture
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.TargetCulture
- uid: Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName
  isExternal: true
  name: SourceCultureName
  nameWithType: LanguagePair.SourceCultureName
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.SourceCultureName
- uid: Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName*
  commentId: Overload:Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName
  isExternal: true
  name: TargetCultureName
  nameWithType: LanguagePair.TargetCultureName
  fullName: Sdl.LanguagePlatform.Core.LanguagePair.TargetCultureName
