### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.Context
  id: Context
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  - Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  - Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  - Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context
  type: Class
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    Describes the context of a pre-break or post-break segmentation rule. The context

    encapsulates a regular expression pattern as well as match flags.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Context : ICloneable
    content.vb: >-
      <DataContract>

      Public Class Context Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context()
  nameWithType: Context.Context()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context()
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Initializes a new instance with default values.
  example: []
  syntax:
    content: public Context()
    content.vb: Public Sub New()
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  nameWithType.vb: Context.New()
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.New()
  name.vb: New()
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context(string)
  nameWithType: Context.Context(string)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context(string)
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Initializes a new instance with the specified values.
  example: []
  syntax:
    content: public Context(string pattern)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern to initialize the context with.
    content.vb: Public Sub New(pattern As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  nameWithType.vb: Context.New(String)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.New(String)
  name.vb: New(String)
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context(Context)
  nameWithType: Context.Context(Context)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context(Sdl.LanguagePlatform.Core.Segmentation.Context)
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Initializes a new instance with the values of another instance, creating a deep copy.
  example: []
  syntax:
    content: public Context(Context other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
      description: The other instance
    content.vb: Public Sub New(other As Context)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  nameWithType.vb: Context.New(Context)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.New(Sdl.LanguagePlatform.Core.Segmentation.Context)
  name.vb: New(Context)
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)
  id: '#ctor(System.String,System.Boolean,System.Boolean)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context(string, bool, bool)
  nameWithType: Context.Context(string, bool, bool)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context(string, bool, bool)
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Initializes a new instance with the specified values.
  example: []
  syntax:
    content: public Context(string pattern, bool caseInsensitive, bool matchesInputBoundary)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern
    - id: caseInsensitive
      type: System.Boolean
      description: Whether or not to apply case-insensitive matching
    - id: matchesInputBoundary
      type: System.Boolean
      description: >-
        Whether or not the context will match at the input
                    boundary (beginning or end of string/file)
    content.vb: Public Sub New(pattern As String, caseInsensitive As Boolean, matchesInputBoundary As Boolean)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  nameWithType.vb: Context.New(String, Boolean, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.New(String, Boolean, Boolean)
  name.vb: New(String, Boolean, Boolean)
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  id: MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: MatchesAt(string, int, bool, bool)
  nameWithType: Context.MatchesAt(string, int, bool, bool)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(string, int, bool, bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    Tests whether the context matches at the specified position. A pre-break context

    must match up to the position (not including), and a post-break context must match from that 

    position onwards. If true, a match is postulated directly before position.
  example: []
  syntax:
    content: public bool MatchesAt(string s, int position, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: s
      type: System.String
      description: The input string to test
    - id: position
      type: System.Int32
      description: The position in the input to test for a match
    - id: assumeEof
      type: System.Boolean
      description: >-
        If true, it is assumed that the end of input has been reached, and 
                    end-of-input constraints will match. If false, any end-of-input constraints will not match.
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match. If false,
                    no end-of-word constraints will match.
    return:
      type: System.Boolean
      description: true iff the context at the specified position.
    content.vb: Public Function MatchesAt(s As String, position As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt*
  nameWithType.vb: Context.MatchesAt(String, Integer, Boolean, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(String, Integer, Boolean, Boolean)
  name.vb: MatchesAt(String, Integer, Boolean, Boolean)
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)
  id: MatchesUpto(System.String,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: MatchesUpto(string, int)
  nameWithType: Context.MatchesUpto(string, int)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(string, int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    MatchesUpto tests whether the context matches the input up to, but not including, 

    the specified position (which may be &gt;= the string's length).
  example: []
  syntax:
    content: public bool MatchesUpto(string s, int position)
    parameters:
    - id: s
      type: System.String
      description: The string to test for a match
    - id: position
      type: System.Int32
      description: The position upto which to test for a match (non-inclusive).
    return:
      type: System.Boolean
      description: >-
        true iff the context matches the input string up to (not including) 
                    the specified position.
    content.vb: Public Function MatchesUpto(s As String, position As Integer) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto*
  nameWithType.vb: Context.MatchesUpto(String, Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(String, Integer)
  name.vb: MatchesUpto(String, Integer)
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)
  id: FindAllMatches(System.String,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: FindAllMatches(string, int)
  nameWithType: Context.FindAllMatches(string, int)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(string, int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Computes and returns all matches of the context in the specified input string.
  example: []
  syntax:
    content: public List<Match> FindAllMatches(string s, int startOffset)
    parameters:
    - id: s
      type: System.String
      description: The input string
    - id: startOffset
      type: System.Int32
      description: The zero-based start index where to start the match process.
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Match}
      description: >-
        A list of matches where the context matches the input string, or <code>null</code>
                    if no matches can be found.
    content.vb: Public Function FindAllMatches(s As String, startOffset As Integer) As List(Of Match)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches*
  nameWithType.vb: Context.FindAllMatches(String, Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(String, Integer)
  name.vb: FindAllMatches(String, Integer)
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Context.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: <xref href="System.Object.ToString" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString*
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Context.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: <xref href="System.ICloneable.Clone" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone() As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone*
  implements:
  - System.ICloneable.Clone
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  id: CaseInsensitiveMatching
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: CaseInsensitiveMatching
  nameWithType: Context.CaseInsensitiveMatching
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    If CaseInsensitiveMatching is true, all matching will be performed in a case-insensitive

    manner, provided that the used contexts support this. The default should be false.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool CaseInsensitiveMatching { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property CaseInsensitiveMatching As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  id: MatchesAtInputBoundary
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: MatchesAtInputBoundary
  nameWithType: Context.MatchesAtInputBoundary
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    If MatchesInputBoundary is true, MatchesFrom() will return true if the specified position

    is beyond the input's length.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool MatchesAtInputBoundary { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property MatchesAtInputBoundary As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  id: Pattern
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Pattern
  nameWithType: Context.Pattern
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Gets or sets the regular expression pattern.
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Pattern { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Property Pattern As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.html
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segmentation
    name: Segmentation
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segmentation.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segmentation
    name: Segmentation
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segmentation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icloneable
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context__ctor
  name: Context
  nameWithType: Context.Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context
  nameWithType.vb: Context.New
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.Context.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.Context
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html
  name: Context
  nameWithType: Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_MatchesAt_System_String_System_Int32_System_Boolean_System_Boolean_
  name: MatchesAt
  nameWithType: Context.MatchesAt
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_MatchesUpto_System_String_System_Int32_
  name: MatchesUpto
  nameWithType: Context.MatchesUpto
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_FindAllMatches_System_String_System_Int32_
  name: FindAllMatches
  nameWithType: Context.FindAllMatches
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Match}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Match}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Match>
  nameWithType: List<Match>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Tokenization.Match>
  nameWithType.vb: List(Of Match)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Tokenization.Match)
  name.vb: List(Of Match)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Match
    name: Match
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Tokenization.Match.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Match
    name: Match
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Tokenization.Match.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_ToString
  name: ToString
  nameWithType: Context.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icloneable.clone
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icloneable.clone
  - name: (
  - name: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icloneable.clone
  - name: (
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_Clone
  name: Clone
  nameWithType: Context.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_CaseInsensitiveMatching
  name: CaseInsensitiveMatching
  nameWithType: Context.CaseInsensitiveMatching
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_MatchesAtInputBoundary
  name: MatchesAtInputBoundary
  nameWithType: Context.MatchesAtInputBoundary
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html#Sdl_LanguagePlatform_Core_Segmentation_Context_Pattern
  name: Pattern
  nameWithType: Context.Pattern
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
