### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.Context
  id: Context
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  - Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  - Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)
  - Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  - Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nDescribes the context of a pre-break or post-break segmentation rule. The context\nencapsulates a regular expression pattern as well as match flags.\n"
  syntax:
    content: 'public class Context : ICloneable'
    content.vb: >-
      Public Class Context
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context()
  nameWithType: Context.Context()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with default values.\n"
  syntax:
    content: public Context()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context(String)
  nameWithType: Context.Context(String)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context(System.String)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public Context(string pattern)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern to initialize the context with.
    content.vb: Public Sub New(pattern As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.Context)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context(Context)
  nameWithType: Context.Context(Context)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context(Sdl.LanguagePlatform.Core.Segmentation.Context)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the values of another instance, creating a deep copy.\n"
  syntax:
    content: public Context(Context other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
      description: The other instance
    content.vb: Public Sub New(other As Context)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor(System.String,System.Boolean,System.Boolean)
  id: '#ctor(System.String,System.Boolean,System.Boolean)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Context(String, Boolean, Boolean)
  nameWithType: Context.Context(String, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context(System.String, System.Boolean, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public Context(string pattern, bool caseInsensitive, bool matchesInputBoundary)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern
    - id: caseInsensitive
      type: System.Boolean
      description: Whether or not to apply case-insensitive matching
    - id: matchesInputBoundary
      type: System.Boolean
      description: >-
        Whether or not the context will match at the input

        boundary (beginning or end of string/file)
    content.vb: Public Sub New(pattern As String, caseInsensitive As Boolean, matchesInputBoundary As Boolean)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  id: MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: MatchesAt(String, Int32, Boolean, Boolean)
  nameWithType: Context.MatchesAt(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nTests whether the context matches at the specified position. A pre-break context\nmust match up to the position (not including), and a post-break context must match from that \nposition onwards. If true, a match is postulated directly before position.\n"
  syntax:
    content: public bool MatchesAt(string s, int position, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: s
      type: System.String
      description: The input string to test
    - id: position
      type: System.Int32
      description: The position in the input to test for a match
    - id: assumeEof
      type: System.Boolean
      description: "If true, it is assumed that the end of input has been reached, and \nend-of-input constraints will match. If false, any end-of-input constraints will not match.\n"
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match. If false,

        no end-of-word constraints will match.
    return:
      type: System.Boolean
      description: true iff the context at the specified position.
    content.vb: Public Function MatchesAt(s As String, position As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String,System.Int32)
  id: MatchesUpto(System.String,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: MatchesUpto(String, Int32)
  nameWithType: Context.MatchesUpto(String, Int32)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto(System.String, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nMatchesUpto tests whether the context matches the input up to, but not including, \nthe specified position (which may be >= the string&apos;s length).\n"
  syntax:
    content: public bool MatchesUpto(string s, int position)
    parameters:
    - id: s
      type: System.String
      description: The string to test for a match
    - id: position
      type: System.Int32
      description: >
        The position upto which to test for a match (non-inclusive).
    return:
      type: System.Boolean
      description: "true iff the context matches the input string up to (not including) \nthe specified position.\n"
    content.vb: Public Function MatchesUpto(s As String, position As Integer) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String,System.Int32)
  id: FindAllMatches(System.String,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: FindAllMatches(String, Int32)
  nameWithType: Context.FindAllMatches(String, Int32)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches(System.String, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nComputes and returns all matches of the context in the specified input string.\n"
  syntax:
    content: public List<Match> FindAllMatches(string s, int startOffset)
    parameters:
    - id: s
      type: System.String
      description: The input string
    - id: startOffset
      type: System.Int32
      description: The zero-based start index where to start the match process.
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Match}
      description: >-
        A list of matches where the context matches the input string, or <code>null</code>

        if no matches can be found.
    content.vb: Public Function FindAllMatches(s As String, startOffset As Integer) As List(Of Match)
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Context.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Context.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  id: CaseInsensitiveMatching
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: CaseInsensitiveMatching
  nameWithType: Context.CaseInsensitiveMatching
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nIf CaseInsensitiveMatching is true, all matching will be performed in a case-insensitive\nmanner, provided that the used contexts support this. The default should be false.\n"
  syntax:
    content: public bool CaseInsensitiveMatching { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CaseInsensitiveMatching As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  id: MatchesAtInputBoundary
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: MatchesAtInputBoundary
  nameWithType: Context.MatchesAtInputBoundary
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nIf MatchesInputBoundary is true, MatchesFrom() will return true if the specified position\nis beyond the input&apos;s length. \n"
  syntax:
    content: public bool MatchesAtInputBoundary { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property MatchesAtInputBoundary As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  id: Pattern
  parent: Sdl.LanguagePlatform.Core.Segmentation.Context
  langs:
  - csharp
  - vb
  name: Pattern
  nameWithType: Context.Pattern
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the regular expression pattern.\n"
  syntax:
    content: public string Pattern { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Pattern As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.#ctor
  isExternal: true
  name: Context
  nameWithType: Context.Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Context
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.Context
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt
  isExternal: true
  name: MatchesAt
  nameWithType: Context.MatchesAt
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto
  isExternal: true
  name: MatchesUpto
  nameWithType: Context.MatchesUpto
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesUpto
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches
  isExternal: true
  name: FindAllMatches
  nameWithType: Context.FindAllMatches
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.FindAllMatches
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Match}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Match}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Match>
  nameWithType: List<Match>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Tokenization.Match>
  nameWithType.vb: List(Of Match)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Tokenization.Match)
  name.vb: List(Of Match)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Match
    name: Match
    nameWithType: Match
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Match
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Match
    name: Match
    nameWithType: Match
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Match
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
  isExternal: true
  name: ToString
  nameWithType: Context.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
  isExternal: true
  name: Clone
  nameWithType: Context.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
  isExternal: true
  name: CaseInsensitiveMatching
  nameWithType: Context.CaseInsensitiveMatching
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.CaseInsensitiveMatching
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
  isExternal: true
  name: MatchesAtInputBoundary
  nameWithType: Context.MatchesAtInputBoundary
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.MatchesAtInputBoundary
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
  isExternal: true
  name: Pattern
  nameWithType: Context.Pattern
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context.Pattern
