### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  id: SegmentationRule
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  langs:
  - csharp
  - vb
  name: SegmentationRule
  nameWithType: SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<p>\nA segmentation rule consist of at least one &quot;positive&quot; SegmentationContext (the matching\ncontext) and a possibly empty set of exceptions. \n</p>\n<p>\nA segmentation rule &quot;fires&quot; if the matching context matches a specified position, and either\nthe exception list is empty or none of the exceptions matches the same position in the input.\n</p>\n"
  syntax:
    content: 'public class SegmentationRule : ICloneable'
    content.vb: >-
      Public Class SegmentationRule
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule()
  nameWithType: SegmentationRule.SegmentationRule()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with default values. This constructor is required for\nXML deserialization and should not be used directly.\n"
  syntax:
    content: public SegmentationRule()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule(SegmentationRule)
  nameWithType: SegmentationRule.SegmentationRule(SegmentationRule)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the values of another instance, creating a deep copy.\n"
  syntax:
    content: public SegmentationRule(SegmentationRule other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
      description: The other instance
    content.vb: Public Sub New(other As SegmentationRule)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  id: '#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule(String, SegmentationContext)
  nameWithType: SegmentationRule.SegmentationRule(String, SegmentationContext)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(System.String, Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public SegmentationRule(string description, SegmentationContext matchingContext)
    parameters:
    - id: description
      type: System.String
      description: A description of the rule, for display purposes.
    - id: matchingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
      description: The matching context for this segmentation rule.
    content.vb: Public Sub New(description As String, matchingContext As SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})
  id: '#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule(String, SegmentationContext, List<SegmentationContext>)
  nameWithType: SegmentationRule.SegmentationRule(String, SegmentationContext, List<SegmentationContext>)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(System.String, Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext, System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext>)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public SegmentationRule(string description, SegmentationContext matchingContext, List<SegmentationContext> exceptions)
    parameters:
    - id: description
      type: System.String
      description: A description of the rule, for display purposes.
    - id: matchingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
      description: The matching context for this segmentation rule.
    - id: exceptions
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
      description: A list of exceptions to attach to the matching context (optional)
    content.vb: Public Sub New(description As String, matchingContext As SegmentationContext, exceptions As List(Of SegmentationContext))
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  nameWithType.vb: SegmentationRule.SegmentationRule(String, SegmentationContext, List(Of SegmentationContext))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(System.String, Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext, System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext))
  name.vb: SegmentationRule(String, SegmentationContext, List(Of SegmentationContext))
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentationRule.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  id: AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: AddException(SegmentationContext)
  nameWithType: SegmentationRule.AddException(SegmentationContext)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nAdds the provided exception to the list of exceptions.\n"
  syntax:
    content: public void AddException(SegmentationContext context)
    parameters:
    - id: context
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
      description: The exception to add to the rule (non-null)
    content.vb: Public Sub AddException(context As SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  id: MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MatchesAt(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationRule.MatchesAt(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nTests whether the context matches at the specified position. The preceding context, if specified,\nmust match up to the position (not including), and the following context must match from that \nposition onwards. If true, a match is postulated directly before position.\n"
  syntax:
    content: public bool MatchesAt(string input, int position, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
      description: The input string to test
    - id: position
      type: System.Int32
      description: The position in the input to test for a match
    - id: assumeEof
      type: System.Boolean
      description: "If true, it is assumed that the end of input has been reached, and \nend-of-input constraints will match. If false, any end-of-input constraints will not match.\n"
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match. If false,

        no end-of-word constraints will match.
    return:
      type: System.Boolean
      description: "true iff the preceding context matches up to the specified position (non-inclusive), \nand the following context matches from that position onwards."
    content.vb: Public Function MatchesAt(input As String, position As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  id: FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: FindFirstMatch(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationRule.FindFirstMatch(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nFinds the first matche of the rule in the input string, starting at the specified position.\n"
  syntax:
    content: public int FindFirstMatch(string input, int startOffset, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
      description: The input string to test
    - id: startOffset
      type: System.Int32
      description: The zero-based position in the input to start the match process from
    - id: assumeEof
      type: System.Boolean
      description: "If true, it is assumed that the end of input has been reached, and \nend-of-input constraints will match at the end of the input string. If false, any end-of-input constraints will not match.\n"
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match at the end of the input string. If false,

        no end-of-word constraints will match.
    return:
      type: System.Int32
      description: The first position in the input where the rule matches, or <code>-1</code> if no match was found.
    content.vb: Public Function FindFirstMatch(input As String, startOffset As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  id: FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: FindAllMatches(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationRule.FindAllMatches(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public List<int> FindAllMatches(string input, int startOffset, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
    - id: startOffset
      type: System.Int32
    - id: assumeEof
      type: System.Boolean
    - id: followedByWordBreak
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{System.Int32}
    content.vb: Public Function FindAllMatches(input As String, startOffset As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As List(Of Integer)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SegmentationRule.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  id: IsEnabled
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: SegmentationRule.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets a flag to control whether this rule is currently enabled. Note that not\nall clients evaluate this flag yet, and all rules (whether enabled or not) may be used\nduring segmentation.\n"
  syntax:
    content: public bool IsEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsEnabled As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  id: MinimumChars
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MinimumChars
  nameWithType: SegmentationRule.MinimumChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nThe minimum number of chars a segment must have. \n<p>Currently not yet supported</p>\n"
  syntax:
    content: public int MinimumChars { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MinimumChars As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  id: MinimumWords
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MinimumWords
  nameWithType: SegmentationRule.MinimumWords
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nThe minimum number of words a segment must have. \n<p>Currently not yet supported</p>\n"
  syntax:
    content: public int MinimumWords { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MinimumWords As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  id: Type
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: SegmentationRule.Type
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the rule type, which is used for display purposes. This value must match\nthe rule&apos;s break character and should not be modified after a rule has been created or\nobtained.\n"
  syntax:
    content: public RuleType Type { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.RuleType
    content.vb: Public Property Type As RuleType
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  id: Origin
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: SegmentationRule.Origin
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the origin of this rule. This is used for display and system purposes. The\nvalue should not be modified after a rule has been created or obtained.\n"
  syntax:
    content: public RuleOrigin Origin { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
    content.vb: Public Property Origin As RuleOrigin
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  id: Description
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SegmentationRule.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the description of this rule.\n"
  syntax:
    content: public LocalizedString Description { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
    content.vb: Public Property Description As LocalizedString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  id: MatchingContext
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MatchingContext
  nameWithType: SegmentationRule.MatchingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the matching context for this rule (non-null).\n"
  syntax:
    content: public SegmentationContext MatchingContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    content.vb: Public Property MatchingContext As SegmentationContext
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  id: Exceptions
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Exceptions
  nameWithType: SegmentationRule.Exceptions
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the exceptions for this rule.\n"
  syntax:
    content: public List<SegmentationContext> Exceptions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
    content.vb: Public Property Exceptions As List(Of SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  isExternal: true
  name: SegmentationRule
  nameWithType: SegmentationRule.SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationRule
  nameWithType: SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationContext
  nameWithType: SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SegmentationContext>
  nameWithType: List<SegmentationContext>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext>
  nameWithType.vb: List(Of SegmentationContext)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  name.vb: List(Of SegmentationContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    name: SegmentationContext
    nameWithType: SegmentationContext
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    name: SegmentationContext
    nameWithType: SegmentationContext
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  isExternal: true
  name: ToString
  nameWithType: SegmentationRule.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException
  isExternal: true
  name: AddException
  nameWithType: SegmentationRule.AddException
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt
  isExternal: true
  name: MatchesAt
  nameWithType: SegmentationRule.MatchesAt
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch
  isExternal: true
  name: FindFirstMatch
  nameWithType: SegmentationRule.FindFirstMatch
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches
  isExternal: true
  name: FindAllMatches
  nameWithType: SegmentationRule.FindAllMatches
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindAllMatches
- uid: System.Collections.Generic.List{System.Int32}
  commentId: '!:System.Collections.Generic.List{System.Int32}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  isExternal: true
  name: Clone
  nameWithType: SegmentationRule.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  isExternal: true
  name: IsEnabled
  nameWithType: SegmentationRule.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  isExternal: true
  name: MinimumChars
  nameWithType: SegmentationRule.MinimumChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  isExternal: true
  name: MinimumWords
  nameWithType: SegmentationRule.MinimumWords
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  isExternal: true
  name: Type
  nameWithType: SegmentationRule.Type
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
- uid: Sdl.LanguagePlatform.Core.Segmentation.RuleType
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.RuleType
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: RuleType
  nameWithType: RuleType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.RuleType
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  isExternal: true
  name: Origin
  nameWithType: SegmentationRule.Origin
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
- uid: Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: RuleOrigin
  nameWithType: RuleOrigin
  fullName: Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  isExternal: true
  name: Description
  nameWithType: SegmentationRule.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  isExternal: true
  name: MatchingContext
  nameWithType: SegmentationRule.MatchingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  isExternal: true
  name: Exceptions
  nameWithType: SegmentationRule.Exceptions
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
