### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.SegmentRange
  commentId: T:Sdl.LanguagePlatform.Core.SegmentRange
  id: SegmentRange
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.SegmentRange.#ctor
  - Sdl.LanguagePlatform.Core.SegmentRange.#ctor(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  - Sdl.LanguagePlatform.Core.SegmentRange.#ctor(System.Int32,System.Int32,System.Int32)
  - Sdl.LanguagePlatform.Core.SegmentRange.Compare(Sdl.LanguagePlatform.Core.SegmentRange,Sdl.LanguagePlatform.Core.SegmentRange)
  - Sdl.LanguagePlatform.Core.SegmentRange.Contains(Sdl.LanguagePlatform.Core.SegmentRange)
  - Sdl.LanguagePlatform.Core.SegmentRange.Duplicate
  - Sdl.LanguagePlatform.Core.SegmentRange.Equals(Sdl.LanguagePlatform.Core.SegmentRange)
  - Sdl.LanguagePlatform.Core.SegmentRange.Equals(System.Object)
  - Sdl.LanguagePlatform.Core.SegmentRange.From
  - Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode
  - Sdl.LanguagePlatform.Core.SegmentRange.Into
  - Sdl.LanguagePlatform.Core.SegmentRange.IsInside(Sdl.LanguagePlatform.Core.SegmentPosition)
  - Sdl.LanguagePlatform.Core.SegmentRange.Length
  - Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith(Sdl.LanguagePlatform.Core.SegmentRange)
  - Sdl.LanguagePlatform.Core.SegmentRange.ToString
  langs:
  - csharp
  - vb
  name: SegmentRange
  nameWithType: SegmentRange
  fullName: Sdl.LanguagePlatform.Core.SegmentRange
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRepresents the range of a segment, indicated by two specified positions. The \nsegment positions are inclusive (&quot;into&quot; semantics).\n"
  syntax:
    content: public class SegmentRange
    content.vb: Public Class SegmentRange
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.SegmentRange.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: SegmentRange()
  nameWithType: SegmentRange.SegmentRange()
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.SegmentRange()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance with default values.\n"
  syntax:
    content: public SegmentRange()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.SegmentRange.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.#ctor(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.#ctor(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  id: '#ctor(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)'
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: SegmentRange(SegmentPosition, SegmentPosition)
  nameWithType: SegmentRange.SegmentRange(SegmentPosition, SegmentPosition)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.SegmentRange(Sdl.LanguagePlatform.Core.SegmentPosition, Sdl.LanguagePlatform.Core.SegmentPosition)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance with the provided positions. No checks are performed\nto verify that the start position precedes the end position.\n"
  syntax:
    content: public SegmentRange(SegmentPosition from, SegmentPosition into)
    parameters:
    - id: from
      type: Sdl.LanguagePlatform.Core.SegmentPosition
      description: The start position.
    - id: into
      type: Sdl.LanguagePlatform.Core.SegmentPosition
      description: The end position.
    content.vb: Public Sub New(from As SegmentPosition, into As SegmentPosition)
  overload: Sdl.LanguagePlatform.Core.SegmentRange.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: SegmentRange(Int32, Int32, Int32)
  nameWithType: SegmentRange.SegmentRange(Int32, Int32, Int32)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.SegmentRange(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance of with the given parameters.\n"
  syntax:
    content: public SegmentRange(int run, int from, int into)
    parameters:
    - id: run
      type: System.Int32
      description: The segment element index (run) of the range.
    - id: from
      type: System.Int32
      description: The start position in the run.
    - id: into
      type: System.Int32
      description: The end position (inclusive) in the run.
    content.vb: Public Sub New(run As Integer, from As Integer, into As Integer)
  overload: Sdl.LanguagePlatform.Core.SegmentRange.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Duplicate
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.Duplicate
  id: Duplicate
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Duplicate()
  nameWithType: SegmentRange.Duplicate()
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Duplicate()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCreates a new instance that is a deep copy of this instance.\n"
  syntax:
    content: public SegmentRange Duplicate()
    return:
      type: Sdl.LanguagePlatform.Core.SegmentRange
      description: A new instance that is a deep copy of this instance.
    content.vb: Public Function Duplicate As SegmentRange
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Duplicate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith(Sdl.LanguagePlatform.Core.SegmentRange)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith(Sdl.LanguagePlatform.Core.SegmentRange)
  id: OverlapsWith(Sdl.LanguagePlatform.Core.SegmentRange)
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: OverlapsWith(SegmentRange)
  nameWithType: SegmentRange.OverlapsWith(SegmentRange)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith(Sdl.LanguagePlatform.Core.SegmentRange)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nTests whether this segment range overlaps with another range.\n"
  syntax:
    content: public bool OverlapsWith(SegmentRange other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.SegmentRange
    return:
      type: System.Boolean
      description: true if the two ranges overlap, and false otherwise.
    content.vb: Public Function OverlapsWith(other As SegmentRange) As Boolean
  overload: Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Contains(Sdl.LanguagePlatform.Core.SegmentRange)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.Contains(Sdl.LanguagePlatform.Core.SegmentRange)
  id: Contains(Sdl.LanguagePlatform.Core.SegmentRange)
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Contains(SegmentRange)
  nameWithType: SegmentRange.Contains(SegmentRange)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Contains(Sdl.LanguagePlatform.Core.SegmentRange)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nTests whether the other range is entirely included in this range (peripheral positions may be identical).\n"
  syntax:
    content: public bool Contains(SegmentRange other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.SegmentRange
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">other</code> is entirely &quot;within&quot; this segment range, and false otherwise.
    content.vb: Public Function Contains(other As SegmentRange) As Boolean
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.IsInside(Sdl.LanguagePlatform.Core.SegmentPosition)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.IsInside(Sdl.LanguagePlatform.Core.SegmentPosition)
  id: IsInside(Sdl.LanguagePlatform.Core.SegmentPosition)
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: IsInside(SegmentPosition)
  nameWithType: SegmentRange.IsInside(SegmentPosition)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.IsInside(Sdl.LanguagePlatform.Core.SegmentPosition)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nTests whether the segment position <code data-dev-comment-type=\"paramref\" class=\"paramref\">p</code> is inside this range.\n"
  syntax:
    content: public bool IsInside(SegmentPosition p)
    parameters:
    - id: p
      type: Sdl.LanguagePlatform.Core.SegmentPosition
      description: The segment position to test
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">p</code> is &quot;inside&quot; this range, and false
                    otherwise.
    content.vb: Public Function IsInside(p As SegmentPosition) As Boolean
  overload: Sdl.LanguagePlatform.Core.SegmentRange.IsInside*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Compare(Sdl.LanguagePlatform.Core.SegmentRange,Sdl.LanguagePlatform.Core.SegmentRange)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.Compare(Sdl.LanguagePlatform.Core.SegmentRange,Sdl.LanguagePlatform.Core.SegmentRange)
  id: Compare(Sdl.LanguagePlatform.Core.SegmentRange,Sdl.LanguagePlatform.Core.SegmentRange)
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Compare(SegmentRange, SegmentRange)
  nameWithType: SegmentRange.Compare(SegmentRange, SegmentRange)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Compare(Sdl.LanguagePlatform.Core.SegmentRange, Sdl.LanguagePlatform.Core.SegmentRange)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCompares two segment ranges and returns a value indicating their order.\n"
  syntax:
    content: public static int Compare(SegmentRange a, SegmentRange b)
    parameters:
    - id: a
      type: Sdl.LanguagePlatform.Core.SegmentRange
      description: The first of the two items to compare.
    - id: b
      type: Sdl.LanguagePlatform.Core.SegmentRange
      description: The second of the two items to compare.
    return:
      type: System.Int32
      description: "An integer value less than zero if a precedes b, zero if a and b are in the same range, \nand a value greater than zero if a follows b. Only the start positions are compared."
    content.vb: Public Shared Function Compare(a As SegmentRange, b As SegmentRange) As Integer
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Compare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.SegmentRange.ToString
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentRange.ToString()
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.SegmentRange.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Equals(Sdl.LanguagePlatform.Core.SegmentRange)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.Equals(Sdl.LanguagePlatform.Core.SegmentRange)
  id: Equals(Sdl.LanguagePlatform.Core.SegmentRange)
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Equals(SegmentRange)
  nameWithType: SegmentRange.Equals(SegmentRange)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Equals(Sdl.LanguagePlatform.Core.SegmentRange)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCompares the current range to another segment range.\n"
  syntax:
    content: public bool Equals(SegmentRange other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.SegmentRange
      description: The range to compare with.
    return:
      type: System.Boolean
      description: true if both ranges are identical.
    content.vb: Public Function Equals(other As SegmentRange) As Boolean
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Equals(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SegmentRange.Equals(Object)
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Equals(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.Equals(object)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: >
        true if the specified object is equal to the current object;

        otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SegmentRange.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.SegmentRange.From
  commentId: P:Sdl.LanguagePlatform.Core.SegmentRange.From
  id: From
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: From
  nameWithType: SegmentRange.From
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.From
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the start position.\n"
  syntax:
    content: public SegmentPosition From { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.SegmentPosition
    content.vb: Public Property From As SegmentPosition
  overload: Sdl.LanguagePlatform.Core.SegmentRange.From*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Into
  commentId: P:Sdl.LanguagePlatform.Core.SegmentRange.Into
  id: Into
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Into
  nameWithType: SegmentRange.Into
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Into
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the end position.\n"
  syntax:
    content: public SegmentPosition Into { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.SegmentPosition
    content.vb: Public Property Into As SegmentPosition
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Into*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Length
  commentId: P:Sdl.LanguagePlatform.Core.SegmentRange.Length
  id: Length
  parent: Sdl.LanguagePlatform.Core.SegmentRange
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: SegmentRange.Length
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Length
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets the length of this range if start and end positions are in the same text run, \nand <code>-1</code> otherwise.\n"
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: Sdl.LanguagePlatform.Core.SegmentRange.Length*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.SegmentRange.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.#ctor
  isExternal: true
  name: SegmentRange
  nameWithType: SegmentRange.SegmentRange
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.SegmentRange
- uid: Sdl.LanguagePlatform.Core.SegmentPosition
  commentId: T:Sdl.LanguagePlatform.Core.SegmentPosition
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentPosition
  nameWithType: SegmentPosition
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Duplicate*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.Duplicate
  isExternal: true
  name: Duplicate
  nameWithType: SegmentRange.Duplicate
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Duplicate
- uid: Sdl.LanguagePlatform.Core.SegmentRange
  commentId: T:Sdl.LanguagePlatform.Core.SegmentRange
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentRange
  nameWithType: SegmentRange
  fullName: Sdl.LanguagePlatform.Core.SegmentRange
- uid: Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith
  isExternal: true
  name: OverlapsWith
  nameWithType: SegmentRange.OverlapsWith
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.OverlapsWith
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Contains*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.Contains
  isExternal: true
  name: Contains
  nameWithType: SegmentRange.Contains
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Contains
- uid: Sdl.LanguagePlatform.Core.SegmentRange.IsInside*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.IsInside
  isExternal: true
  name: IsInside
  nameWithType: SegmentRange.IsInside
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.IsInside
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Compare*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.Compare
  isExternal: true
  name: Compare
  nameWithType: SegmentRange.Compare
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Compare
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.SegmentRange.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.ToString
  isExternal: true
  name: ToString
  nameWithType: SegmentRange.ToString
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Equals*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.Equals
  isExternal: true
  name: Equals
  nameWithType: SegmentRange.Equals
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Equals
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: SegmentRange.GetHashCode
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.GetHashCode
- uid: Sdl.LanguagePlatform.Core.SegmentRange.From*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.From
  isExternal: true
  name: From
  nameWithType: SegmentRange.From
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.From
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Into*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.Into
  isExternal: true
  name: Into
  nameWithType: SegmentRange.Into
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Into
- uid: Sdl.LanguagePlatform.Core.SegmentRange.Length*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentRange.Length
  isExternal: true
  name: Length
  nameWithType: SegmentRange.Length
  fullName: Sdl.LanguagePlatform.Core.SegmentRange.Length
