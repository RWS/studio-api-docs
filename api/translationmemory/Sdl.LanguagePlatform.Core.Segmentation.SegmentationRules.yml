### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  id: SegmentationRules
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.Globalization.CultureInfo,System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.String,System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add(System.Object)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item(System.Int32)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw(System.IO.Stream,Sdl.Core.Globalization.CultureCode,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules,System.IO.Stream)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.IO.Stream)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.String)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer(System.IO.Stream)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString
  langs:
  - csharp
  - vb
  name: SegmentationRules
  nameWithType: SegmentationRules
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nA collection of segmentation rules.\n"
  syntax:
    content: 'public class SegmentationRules : ICloneable'
    content.vb: >-
      Public Class SegmentationRules
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  id: LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(String, CultureCode, IResourceDataAccessorAsync)
  nameWithType: SegmentationRules.LoadAsync(String, CultureCode, IResourceDataAccessorAsync)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String, Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a file. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(string fileName, CultureCode cultureOverride, IResourceDataAccessorAsync accessor)
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to load the rules from
    - id: cultureOverride
      type: Sdl.Core.Globalization.CultureCode
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(fileName As String, cultureOverride As CultureCode, accessor As IResourceDataAccessorAsync) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  id: Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(String, CultureInfo, IResourceDataAccessor)
  nameWithType: SegmentationRules.Load(String, CultureInfo, IResourceDataAccessor)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String, System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String%2cSdl.Core.Globalization.CultureCode%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(string fileName, CultureInfo cultureOverride, IResourceDataAccessor accessor)
    parameters:
    - id: fileName
      type: System.String
    - id: cultureOverride
      type: System.Globalization.CultureInfo
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(fileName As String, cultureOverride As CultureInfo, accessor As IResourceDataAccessor) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  id: LoadAsync(System.String,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(String, CultureCode, IResourceDataAccessorAsync, Boolean)
  nameWithType: SegmentationRules.LoadAsync(String, CultureCode, IResourceDataAccessorAsync, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String, Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a file. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(string fileName, CultureCode cultureOverride, IResourceDataAccessorAsync accessor, bool keepListReferences)
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to load the rules from
    - id: cultureOverride
      type: Sdl.Core.Globalization.CultureCode
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    - id: keepListReferences
      type: System.Boolean
      description: "If true, list references will not be resolved. The resulting\nrule set will not be functional and should not be used for segmentation, only for editing, \ndisplay, or copying between resource containers."
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(fileName As String, cultureOverride As CultureCode, accessor As IResourceDataAccessorAsync, keepListReferences As Boolean) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  id: Load(System.String,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(String, CultureInfo, IResourceDataAccessor, Boolean)
  nameWithType: SegmentationRules.Load(String, CultureInfo, IResourceDataAccessor, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String, System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String%2cSdl.Core.Globalization.CultureCode%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(string fileName, CultureInfo cultureOverride, IResourceDataAccessor accessor, bool keepListReferences)
    parameters:
    - id: fileName
      type: System.String
    - id: cultureOverride
      type: System.Globalization.CultureInfo
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    - id: keepListReferences
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(fileName As String, cultureOverride As CultureInfo, accessor As IResourceDataAccessor, keepListReferences As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  id: LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(Stream, CultureCode, IResourceDataAccessorAsync)
  nameWithType: SegmentationRules.LoadAsync(Stream, CultureCode, IResourceDataAccessorAsync)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream, Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a stream. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(Stream reader, CultureCode cultureOverride, IResourceDataAccessorAsync accessor)
    parameters:
    - id: reader
      type: System.IO.Stream
      description: The stream to load the rules from
    - id: cultureOverride
      type: Sdl.Core.Globalization.CultureCode
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(reader As Stream, cultureOverride As CultureCode, accessor As IResourceDataAccessorAsync) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  id: Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(Stream, CultureInfo, IResourceDataAccessor)
  nameWithType: SegmentationRules.Load(Stream, CultureInfo, IResourceDataAccessor)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream, System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream%2cSdl.Core.Globalization.CultureCode%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(Stream reader, CultureInfo cultureOverride, IResourceDataAccessor accessor)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: System.Globalization.CultureInfo
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(reader As Stream, cultureOverride As CultureInfo, accessor As IResourceDataAccessor) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  id: LoadAsync(System.IO.Stream,Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(Stream, CultureCode, IResourceDataAccessorAsync, Boolean)
  nameWithType: SegmentationRules.LoadAsync(Stream, CultureCode, IResourceDataAccessorAsync, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream, Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a stream. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(Stream reader, CultureCode cultureOverride, IResourceDataAccessorAsync accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
      description: The stream to load the rules from
    - id: cultureOverride
      type: Sdl.Core.Globalization.CultureCode
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    - id: keepListReferences
      type: System.Boolean
      description: "If true, list references will not be resolved. The resulting\nrule set will not be functional and should not be used for segmentation, only for editing, \ndisplay, or copying between resource containers."
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(reader As Stream, cultureOverride As CultureCode, accessor As IResourceDataAccessorAsync, keepListReferences As Boolean) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  id: LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(String, String, IResourceDataAccessorAsync)
  nameWithType: SegmentationRules.LoadAsync(String, String, IResourceDataAccessorAsync)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a file. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(string fileName, string cultureOverride, IResourceDataAccessorAsync accessor)
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to load the rules from
    - id: cultureOverride
      type: System.String
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(fileName As String, cultureOverride As String, accessor As IResourceDataAccessorAsync) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  id: LoadAsync(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(String, String, IResourceDataAccessorAsync, Boolean)
  nameWithType: SegmentationRules.LoadAsync(String, String, IResourceDataAccessorAsync, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a file. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(string fileName, string cultureOverride, IResourceDataAccessorAsync accessor, bool keepListReferences)
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to load the rules from
    - id: cultureOverride
      type: System.String
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    - id: keepListReferences
      type: System.Boolean
      description: "If true, list references will not be resolved. The resulting\nrule set will not be functional and should not be used for segmentation, only for editing, \ndisplay, or copying between resource containers."
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(fileName As String, cultureOverride As String, accessor As IResourceDataAccessorAsync, keepListReferences As Boolean) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  id: LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(Stream, String, IResourceDataAccessorAsync)
  nameWithType: SegmentationRules.LoadAsync(Stream, String, IResourceDataAccessorAsync)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a stream. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(Stream reader, string cultureOverride, IResourceDataAccessorAsync accessor)
    parameters:
    - id: reader
      type: System.IO.Stream
      description: The stream to load the rules from
    - id: cultureOverride
      type: System.String
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(reader As Stream, cultureOverride As String, accessor As IResourceDataAccessorAsync) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  id: LoadAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadAsync(Stream, String, IResourceDataAccessorAsync, Boolean)
  nameWithType: SegmentationRules.LoadAsync(Stream, String, IResourceDataAccessorAsync, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a stream. The resource data accessor is used to resolve\nany variable references which may be present in the rules.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadAsync(Stream reader, string cultureOverride, IResourceDataAccessorAsync accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
      description: The stream to load the rules from
    - id: cultureOverride
      type: System.String
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    - id: keepListReferences
      type: System.Boolean
      description: "If true, list references will not be resolved. The resulting\nrule set will not be functional and should not be used for segmentation, only for editing, \ndisplay, or copying between resource containers."
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadAsync(reader As Stream, cultureOverride As String, accessor As IResourceDataAccessorAsync, keepListReferences As Boolean) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  id: Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(Stream, String, IResourceDataAccessor, Boolean)
  nameWithType: SegmentationRules.Load(Stream, String, IResourceDataAccessor, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream%2cSystem.String%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(Stream reader, string cultureOverride, IResourceDataAccessor accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: System.String
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    - id: keepListReferences
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(reader As Stream, cultureOverride As String, accessor As IResourceDataAccessor, keepListReferences As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  id: Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(String, String, IResourceDataAccessor)
  nameWithType: SegmentationRules.Load(String, String, IResourceDataAccessor)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.String%2cSystem.String%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(string fileName, string cultureOverride, IResourceDataAccessor accessor)
    parameters:
    - id: fileName
      type: System.String
    - id: cultureOverride
      type: System.String
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(fileName As String, cultureOverride As String, accessor As IResourceDataAccessor) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  id: Load(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(Stream, String, IResourceDataAccessor)
  nameWithType: SegmentationRules.Load(Stream, String, IResourceDataAccessor)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream%2cSystem.String%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(Stream reader, string cultureOverride, IResourceDataAccessor accessor)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: System.String
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(reader As Stream, cultureOverride As String, accessor As IResourceDataAccessor) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  id: Load(System.String,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(String, String, IResourceDataAccessor, Boolean)
  nameWithType: SegmentationRules.Load(String, String, IResourceDataAccessor, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.String, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream%2cSystem.String%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(string fileName, string cultureOverride, IResourceDataAccessor accessor, bool keepListReferences)
    parameters:
    - id: fileName
      type: System.String
    - id: cultureOverride
      type: System.String
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    - id: keepListReferences
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(fileName As String, cultureOverride As String, accessor As IResourceDataAccessor, keepListReferences As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  id: Load(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Load(Stream, CultureInfo, IResourceDataAccessor, Boolean)
  nameWithType: SegmentationRules.Load(Stream, CultureInfo, IResourceDataAccessor, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load(System.IO.Stream, System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream%2cSdl.Core.Globalization.CultureCode%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadAsync")]

      public static SegmentationRules Load(Stream reader, CultureInfo cultureOverride, IResourceDataAccessor accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: System.Globalization.CultureInfo
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    - id: keepListReferences
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadAsync")>

      Public Shared Function Load(reader As Stream, cultureOverride As CultureInfo, accessor As IResourceDataAccessor, keepListReferences As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  id: LoadUsingDataContractSerializerAsync(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadUsingDataContractSerializerAsync(Stream, CultureInfo, IResourceDataAccessorAsync, Boolean)
  nameWithType: SegmentationRules.LoadUsingDataContractSerializerAsync(Stream, CultureInfo, IResourceDataAccessorAsync, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream, System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a stream. The resource data accessor is used to resolve\nany variable references which may be present in the rules. The data is assumed to be\nserialized by a <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadUsingDataContractSerializerAsync(Stream reader, CultureInfo cultureOverride, IResourceDataAccessorAsync accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
      description: The stream to load the rules from
    - id: cultureOverride
      type: System.Globalization.CultureInfo
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    - id: keepListReferences
      type: System.Boolean
      description: "If true, list references will not be resolved. The resulting\nrule set will not be functional and should not be used for segmentation, only for editing, \ndisplay, or copying between resource containers."
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadUsingDataContractSerializerAsync(reader As Stream, cultureOverride As CultureInfo, accessor As IResourceDataAccessorAsync, keepListReferences As Boolean) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  id: LoadUsingDataContractSerializerAsync(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadUsingDataContractSerializerAsync(Stream, String, IResourceDataAccessorAsync, Boolean)
  nameWithType: SegmentationRules.LoadUsingDataContractSerializerAsync(Stream, String, IResourceDataAccessorAsync, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nLoad segmentation rules from a stream. The resource data accessor is used to resolve\nany variable references which may be present in the rules. The data is assumed to be\nserialized by a <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public static Task<SegmentationRules> LoadUsingDataContractSerializerAsync(Stream reader, string cultureOverride, IResourceDataAccessorAsync accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
      description: The stream to load the rules from
    - id: cultureOverride
      type: System.String
      description: "If provided, the specified culture will be \nused to retrieve any missing language resources and will be put into the \nresult object."
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
      description: The resource data accessor to use to resolve variable references
    - id: keepListReferences
      type: System.Boolean
      description: "If true, list references will not be resolved. The resulting\nrule set will not be functional and should not be used for segmentation, only for editing, \ndisplay, or copying between resource containers."
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
      description: A fully initialized SegmentationRules object
    content.vb: Public Shared Function LoadUsingDataContractSerializerAsync(reader As Stream, cultureOverride As String, accessor As IResourceDataAccessorAsync, keepListReferences As Boolean) As Task(Of SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  id: LoadUsingDataContractSerializer(System.IO.Stream,System.String,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadUsingDataContractSerializer(Stream, String, IResourceDataAccessor, Boolean)
  nameWithType: SegmentationRules.LoadUsingDataContractSerializer(Stream, String, IResourceDataAccessor, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream, System.String, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream%2cSystem.String%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadUsingDataContractSerializerAsync")]

      public static SegmentationRules LoadUsingDataContractSerializer(Stream reader, string cultureOverride, IResourceDataAccessor accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: System.String
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    - id: keepListReferences
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadUsingDataContractSerializerAsync")>

      Public Shared Function LoadUsingDataContractSerializer(reader As Stream, cultureOverride As String, accessor As IResourceDataAccessor, keepListReferences As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadUsingDataContractSerializerAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  id: LoadUsingDataContractSerializer(System.IO.Stream,System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadUsingDataContractSerializer(Stream, CultureInfo, IResourceDataAccessor, Boolean)
  nameWithType: SegmentationRules.LoadUsingDataContractSerializer(Stream, CultureInfo, IResourceDataAccessor, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer(System.IO.Stream, System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync(System.IO.Stream%2cSystem.Globalization.CultureInfo%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: >-
      [Obsolete("Use LoadUsingDataContractSerializerAsync")]

      public static SegmentationRules LoadUsingDataContractSerializer(Stream reader, CultureInfo cultureOverride, IResourceDataAccessor accessor, bool keepListReferences)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: System.Globalization.CultureInfo
    - id: accessor
      type: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
    - id: keepListReferences
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: >-
      <Obsolete("Use LoadUsingDataContractSerializerAsync")>

      Public Shared Function LoadUsingDataContractSerializer(reader As Stream, cultureOverride As CultureInfo, accessor As IResourceDataAccessor, keepListReferences As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use LoadUsingDataContractSerializerAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw(System.IO.Stream,Sdl.Core.Globalization.CultureCode,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw(System.IO.Stream,Sdl.Core.Globalization.CultureCode,System.Boolean)
  id: LoadRaw(System.IO.Stream,Sdl.Core.Globalization.CultureCode,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: LoadRaw(Stream, CultureCode, Boolean)
  nameWithType: SegmentationRules.LoadRaw(Stream, CultureCode, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw(System.IO.Stream, Sdl.Core.Globalization.CultureCode, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nEquivalent to <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync(System.IO.Stream%2cSdl.Core.Globalization.CultureCode%2cSdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\nwhere keepListReferences is true and no accessor is provided, i.e. loads\nthe rules from XML without resolving any references and/or removing any\nunresolved rules. \n"
  syntax:
    content: public static SegmentationRules LoadRaw(Stream reader, CultureCode cultureOverride, bool useDataContractSerializer)
    parameters:
    - id: reader
      type: System.IO.Stream
    - id: cultureOverride
      type: Sdl.Core.Globalization.CultureCode
    - id: useDataContractSerializer
      type: System.Boolean
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    content.vb: Public Shared Function LoadRaw(reader As Stream, cultureOverride As CultureCode, useDataContractSerializer As Boolean) As SegmentationRules
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: SegmentationRules()
  nameWithType: SegmentationRules.SegmentationRules()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SegmentationRules()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with default values. This constructor is required for\nXML deserialization and should not be used directly.\n"
  syntax:
    content: public SegmentationRules()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: SegmentationRules(SegmentationRules)
  nameWithType: SegmentationRules.SegmentationRules(SegmentationRules)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SegmentationRules(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the values of another instance, creating a deep copy.\n"
  syntax:
    content: public SegmentationRules(SegmentationRules other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
      description: The other instance
    content.vb: Public Sub New(other As SegmentationRules)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.Globalization.CultureInfo,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.Globalization.CultureInfo,System.String)
  id: '#ctor(System.Globalization.CultureInfo,System.String)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: SegmentationRules(CultureInfo, String)
  nameWithType: SegmentationRules.SegmentationRules(CultureInfo, String)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SegmentationRules(System.Globalization.CultureInfo, System.String)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public SegmentationRules(CultureInfo culture, string description)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: >-
        The culture for which to apply this segmentation rule set. This

        culture is also used to retrieve additional language resources, if required.
    - id: description
      type: System.String
      description: A description for this segmentation rules set.
    content.vb: Public Sub New(culture As CultureInfo, description As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: SegmentationRules(String, String)
  nameWithType: SegmentationRules.SegmentationRules(String, String)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SegmentationRules(System.String, System.String)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public SegmentationRules(string cultureName, string description)
    parameters:
    - id: cultureName
      type: System.String
      description: >-
        The culture for which to apply this segmentation rule set. This

        culture is also used to retrieve additional language resources, if required.
    - id: description
      type: System.String
      description: A description for this segmentation rules set.
    content.vb: Public Sub New(cultureName As String, description As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentationRules.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules,System.IO.Stream)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules,System.IO.Stream)
  id: Save(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules,System.IO.Stream)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Save(SegmentationRules, Stream)
  nameWithType: SegmentationRules.Save(SegmentationRules, Stream)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules, System.IO.Stream)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSaves the rules to a stream.\n"
  syntax:
    content: public static void Save(SegmentationRules rules, Stream writer)
    parameters:
    - id: rules
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    - id: writer
      type: System.IO.Stream
    content.vb: Public Shared Sub Save(rules As SegmentationRules, writer As Stream)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.String)
  id: Save(System.String)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Save(String)
  nameWithType: SegmentationRules.Save(String)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSaves a segmentation rules object to a file.\n"
  syntax:
    content: public void Save(string fileName)
    parameters:
    - id: fileName
      type: System.String
    content.vb: Public Sub Save(fileName As String)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.IO.Stream)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Save(Stream)
  nameWithType: SegmentationRules.Save(Stream)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save(System.IO.Stream)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSaves a segmentation rules object to a stream.\n"
  syntax:
    content: public void Save(Stream writer)
    parameters:
    - id: writer
      type: System.IO.Stream
    content.vb: Public Sub Save(writer As Stream)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer(System.IO.Stream)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer(System.IO.Stream)
  id: SaveUsingDataContractSerializer(System.IO.Stream)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: SaveUsingDataContractSerializer(Stream)
  nameWithType: SegmentationRules.SaveUsingDataContractSerializer(Stream)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer(System.IO.Stream)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nSaves a segmentation rules object to a stream, using a \n<xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public void SaveUsingDataContractSerializer(Stream writer)
    parameters:
    - id: writer
      type: System.IO.Stream
    content.vb: Public Sub SaveUsingDataContractSerializer(writer As Stream)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  id: AddRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: AddRule(SegmentationRule)
  nameWithType: SegmentationRules.AddRule(SegmentationRule)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nAdds the specified rule to the rule set (non-null).\n"
  syntax:
    content: public void AddRule(SegmentationRule r)
    parameters:
    - id: r
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    content.vb: Public Sub AddRule(r As SegmentationRule)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add(System.Object)
  id: Add(System.Object)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: SegmentationRules.Add(Object)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nAdds the specified object, which must be a non-null <xref href=\"Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule\" data-throw-if-not-resolved=\"false\"></xref>, to the list of \nrules. This method is for XML deserialization only and should not be used. \n"
  syntax:
    content: public void Add(object o)
    parameters:
    - id: o
      type: System.Object
    content.vb: Public Sub Add(o As Object)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator
  id: GetEnumerator
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SegmentationRules.GetEnumerator()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nReturns an enumerator which can be used to iterate through the segmentation rules.\n"
  syntax:
    content: public IEnumerator<SegmentationRule> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule}
      description: An enumerator
    content.vb: Public Function GetEnumerator As IEnumerator(Of SegmentationRule)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SegmentationRules.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture
  id: Culture
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: SegmentationRules.Culture
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets the culture for which to apply this segmentation rule set.\n"
  syntax:
    content: >-
      [Obsolete("Use CultureName")]

      public CultureInfo Culture { get; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: >-
      <Obsolete("Use CultureName")>

      Public ReadOnly Property Culture As CultureInfo
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use CultureName
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description
  id: Description
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SegmentationRules.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the description of this rule set.\n"
  syntax:
    content: public LocalizedString Description { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
    content.vb: Public Property Description As LocalizedString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count
  id: Count
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SegmentationRules.Count
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets the number of rules in this rule set.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved
  id: ListReferencesResolved
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: ListReferencesResolved
  nameWithType: SegmentationRules.ListReferencesResolved
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nReturns a flag which indicates whether references to externally stored word lists\n(abbreviations, ordinal followers, ...) have been resolved during Load or not. If not, the rule\nset should not be used for segmentation, only for display, editing, serialization, or\ncopying across resource containers.\n<p>Note that if the rule set does not refer to external lists, this flag will still be\nset to true if the resolution has been attempted. \n</p>\n"
  syntax:
    content: public bool ListReferencesResolved { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property ListReferencesResolved As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules
  id: Rules
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Rules
  nameWithType: SegmentationRules.Rules
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the rules for this rule set.\n"
  syntax:
    content: public List<SegmentationRule> Rules { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule}
    content.vb: Public Property Rules As List(Of SegmentationRule)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item(System.Int32)
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item(System.Int32)
  id: Item(System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SegmentationRules.Item[Int32]
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item[System.Int32]
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets the segmentation rule at the specified zero-based position.\n"
  syntax:
    content: public SegmentationRule this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    content.vb: Public ReadOnly Property Item(index As Integer) As SegmentationRule
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item*
  nameWithType.vb: SegmentationRules.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName
  id: CultureName
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  langs:
  - csharp
  - vb
  name: CultureName
  nameWithType: SegmentationRules.CultureName
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the name of the culture to which to apply this segmentation rules. This \nproperty is primarily intended for XML deserialization and should not be used directly.\n"
  syntax:
    content: public string CultureName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CultureName As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync
  isExternal: true
  name: LoadAsync
  nameWithType: SegmentationRules.LoadAsync
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  commentId: T:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  parent: Sdl.LanguagePlatform.Core.Resources
  isExternal: true
  name: IResourceDataAccessorAsync
  nameWithType: IResourceDataAccessorAsync
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
- uid: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
  commentId: T:System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SegmentationRules>
  nameWithType: Task<SegmentationRules>
  fullName: System.Threading.Tasks.Task<Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules>
  nameWithType.vb: Task(Of SegmentationRules)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules)
  name.vb: Task(Of SegmentationRules)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    name: SegmentationRules
    nameWithType: SegmentationRules
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    name: SegmentationRules
    nameWithType: SegmentationRules
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Resources
  commentId: N:Sdl.LanguagePlatform.Core.Resources
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Resources
  nameWithType: Sdl.LanguagePlatform.Core.Resources
  fullName: Sdl.LanguagePlatform.Core.Resources
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load
  isExternal: true
  name: Load
  nameWithType: SegmentationRules.Load
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Load
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
  commentId: T:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
  parent: Sdl.LanguagePlatform.Core.Resources
  isExternal: true
  name: IResourceDataAccessor
  nameWithType: IResourceDataAccessor
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessor
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationRules
  nameWithType: SegmentationRules
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync
  isExternal: true
  name: LoadUsingDataContractSerializerAsync
  nameWithType: SegmentationRules.LoadUsingDataContractSerializerAsync
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializerAsync
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer
  isExternal: true
  name: LoadUsingDataContractSerializer
  nameWithType: SegmentationRules.LoadUsingDataContractSerializer
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadUsingDataContractSerializer
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw
  isExternal: true
  name: LoadRaw
  nameWithType: SegmentationRules.LoadRaw
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.LoadRaw
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.#ctor
  isExternal: true
  name: SegmentationRules
  nameWithType: SegmentationRules.SegmentationRules
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SegmentationRules
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString
  isExternal: true
  name: ToString
  nameWithType: SegmentationRules.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save
  isExternal: true
  name: Save
  nameWithType: SegmentationRules.Save
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Save
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer
  isExternal: true
  name: SaveUsingDataContractSerializer
  nameWithType: SegmentationRules.SaveUsingDataContractSerializer
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.SaveUsingDataContractSerializer
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule
  isExternal: true
  name: AddRule
  nameWithType: SegmentationRules.AddRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.AddRule
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationRule
  nameWithType: SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add
  isExternal: true
  name: Add
  nameWithType: SegmentationRules.Add
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Add
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: SegmentationRules.GetEnumerator
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule}
  commentId: T:System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<SegmentationRule>
  nameWithType: IEnumerator<SegmentationRule>
  fullName: System.Collections.Generic.IEnumerator<Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule>
  nameWithType.vb: IEnumerator(Of SegmentationRule)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  name.vb: IEnumerator(Of SegmentationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    name: SegmentationRule
    nameWithType: SegmentationRule
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    name: SegmentationRule
    nameWithType: SegmentationRule
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone
  isExternal: true
  name: Clone
  nameWithType: SegmentationRules.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture
  isExternal: true
  name: Culture
  nameWithType: SegmentationRules.Culture
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Culture
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description
  isExternal: true
  name: Description
  nameWithType: SegmentationRules.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Description
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count
  isExternal: true
  name: Count
  nameWithType: SegmentationRules.Count
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved
  isExternal: true
  name: ListReferencesResolved
  nameWithType: SegmentationRules.ListReferencesResolved
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.ListReferencesResolved
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules
  isExternal: true
  name: Rules
  nameWithType: SegmentationRules.Rules
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Rules
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SegmentationRule>
  nameWithType: List<SegmentationRule>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule>
  nameWithType.vb: List(Of SegmentationRule)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  name.vb: List(Of SegmentationRule)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    name: SegmentationRule
    nameWithType: SegmentationRule
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    name: SegmentationRule
    nameWithType: SegmentationRule
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item
  isExternal: true
  name: Item
  nameWithType: SegmentationRules.Item
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.Item
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName
  isExternal: true
  name: CultureName
  nameWithType: SegmentationRules.CultureName
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRules.CultureName
