### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  id: SegmentationContext
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  langs:
  - csharp
  - vb
  name: SegmentationContext
  nameWithType: SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  type: Class
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    <p>A segmentation context consists of a context which should precede the match, and 

    a context which should follow a match. For performance reasons, it may also contain

    a list of trigger characters which, if specified, are used to determine whether a 

    specific context is probed for matching or not. 

    </p>

    <p>

    A null context matches every position. Therefore, if the preceding context is null, 

    the segmentation context matches at each position which is not excluded by the 

    following context. If the following context is also null, the segmentation context

    will match everywhere in the input string.

    </p>

    <p>

    If the trigger characters are specified, they should consist of all characters which

    may appear at the end of the preceding context. If the trigger characters are specified, 

    but the preceding context is null, the rule will only be tested for those positions in 

    the string where one of the trigger characters is found. In that case, as the preceding 

    context is null, the rule will "fire" at each of the positions of any trigger character.

    </p>
  example: []
  syntax:
    content: >-
      [DataContract]

      public class SegmentationContext : ICloneable
    content.vb: >-
      <DataContract>

      Public Class SegmentationContext Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: SegmentationContext()
  nameWithType: SegmentationContext.SegmentationContext()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext()
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    Initializes a new instance with default values. This constructor is required for

    XML deserialization and should not be used directly.
  example: []
  syntax:
    content: public SegmentationContext()
    content.vb: Public Sub New()
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  nameWithType.vb: SegmentationContext.New()
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.New()
  name.vb: New()
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: SegmentationContext(SegmentationContext)
  nameWithType: SegmentationContext.SegmentationContext(SegmentationContext)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Initializes a new instance with the values of another instance, creating a deep copy.
  example: []
  syntax:
    content: public SegmentationContext(SegmentationContext other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
      description: The other instance
    content.vb: Public Sub New(other As SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  nameWithType.vb: SegmentationContext.New(SegmentationContext)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.New(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  name.vb: New(SegmentationContext)
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)
  id: '#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: SegmentationContext(string, string, Context, Context)
  nameWithType: SegmentationContext.SegmentationContext(string, string, Context, Context)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext(string, string, Sdl.LanguagePlatform.Core.Segmentation.Context, Sdl.LanguagePlatform.Core.Segmentation.Context)
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Initializes a new instance with the specified values.
  example: []
  syntax:
    content: public SegmentationContext(string description, string triggerChars, Context precedingContext, Context followingContext)
    parameters:
    - id: description
      type: System.String
      description: A description of the context, for UI purposes.
    - id: triggerChars
      type: System.String
      description: >-
        If specified, a string which contains the characters which
                    can occur at the start of a matching text. If the current start character is not in this
                    list, no match will be computed, which may improve performance. If <code>null</code>, the 
                    match computation will take place as usual.
    - id: precedingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
      description: The pre-break context
    - id: followingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
      description: The post-break context
    content.vb: Public Sub New(description As String, triggerChars As String, precedingContext As Context, followingContext As Context)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  nameWithType.vb: SegmentationContext.New(String, String, Context, Context)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.New(String, String, Sdl.LanguagePlatform.Core.Segmentation.Context, Sdl.LanguagePlatform.Core.Segmentation.Context)
  name.vb: New(String, String, Context, Context)
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  id: MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: MatchesAt(string, int, bool, bool)
  nameWithType: SegmentationContext.MatchesAt(string, int, bool, bool)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(string, int, bool, bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    Tests whether the context matches at the specified position. The preceding context, if specified,

    must match up to the position (not including), and the following context must match from that 

    position onwards. If true, a match is postulated directly before position.
  example: []
  syntax:
    content: public bool MatchesAt(string input, int position, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
      description: The input string to test
    - id: position
      type: System.Int32
      description: The position in the input to test for a match
    - id: assumeEof
      type: System.Boolean
      description: >-
        If true, it is assumed that the end of input has been reached, and 
                    end-of-input constraints will match. If false, any end-of-input constraints will not match.
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match. If false,
                    no end-of-word constraints will match.
    return:
      type: System.Boolean
      description: >-
        true iff the preceding context matches up to the specified position (non-inclusive), 
                    and the following context matches from that position onwards.
    content.vb: Public Function MatchesAt(input As String, position As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt*
  nameWithType.vb: SegmentationContext.MatchesAt(String, Integer, Boolean, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(String, Integer, Boolean, Boolean)
  name.vb: MatchesAt(String, Integer, Boolean, Boolean)
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  id: FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: FindAllMatches(string, int, bool, bool)
  nameWithType: SegmentationContext.FindAllMatches(string, int, bool, bool)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(string, int, bool, bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Finds all matches of the context in the input string, starting at the specified position.
  example: []
  syntax:
    content: public List<int> FindAllMatches(string input, int startOffset, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
      description: The input string to test
    - id: startOffset
      type: System.Int32
      description: The zero-based position in the input to start the match process from
    - id: assumeEof
      type: System.Boolean
      description: >-
        If true, it is assumed that the end of input has been reached, and 
                    end-of-input constraints will match at the end of the input string. If false, any end-of-input constraints will not match.
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match at the end of the input string. If false,
                    no end-of-word constraints will match.
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: A list of positions where the context matches in the input string
    content.vb: Public Function FindAllMatches(input As String, startOffset As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As List(Of Integer)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches*
  nameWithType.vb: SegmentationContext.FindAllMatches(String, Integer, Boolean, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(String, Integer, Boolean, Boolean)
  name.vb: FindAllMatches(String, Integer, Boolean, Boolean)
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SegmentationContext.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: <xref href="System.ICloneable.Clone" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone() As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone*
  implements:
  - System.ICloneable.Clone
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentationContext.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: <xref href="System.Object.ToString" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString*
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  id: Description
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SegmentationContext.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Gets or sets the description of this context.
  example: []
  syntax:
    content: >-
      [DataMember]

      public LocalizedString Description { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
    content.vb: >-
      <DataMember>

      Public Property Description As LocalizedString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  id: Requires
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: Requires
  nameWithType: SegmentationContext.Requires
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    Gets or sets the name of a language resource required for this match context to be

    valid. If, at runtime, the required resource cannot be obtained, the match context

    is invalid and will never be evaluated.
  example: []
  syntax:
    content: >-
      [DataMember]

      public string Requires { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Property Requires As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  id: ContextType
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: ContextType
  nameWithType: SegmentationContext.ContextType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: Gets or sets the context type.
  example: []
  syntax:
    content: >-
      [DataMember]

      public ContextType ContextType { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.ContextType
    content.vb: >-
      <DataMember>

      Public Property ContextType As ContextType
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  id: TriggerChars
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: TriggerChars
  nameWithType: SegmentationContext.TriggerChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    <p>The characters which trigger this rule. The trigger chars are used to optimize

    rule evaluation and to avoid more expensive tests (such as regex matches) against

    the input. If null, the contexts will be checked nevertheless.

    </p>

    <p>

    If you specify trigger characters, you must take care. For example, if a context 

    has optional trailing parts (as in "\.\p{Pe}*" for a full stop followed by an optionally

    empty sequence of closing punctuation), specifying a trigger character "."

    will prevent the context from matching any trailing closing punctuation. In this

    case, you should specify all possible trailing characters.

    </p>
  example: []
  syntax:
    content: >-
      [DataMember]

      public string TriggerChars { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Property TriggerChars As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  id: PrecedingContext
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: PrecedingContext
  nameWithType: SegmentationContext.PrecedingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    The break context which directly precedes the break. The preceding context 

    typically ends with one or more of the trigger chars. If null, the context

    matches any position.
  example: []
  syntax:
    content: >-
      [DataMember]

      public Context PrecedingContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
    content.vb: >-
      <DataMember>

      Public Property PrecedingContext As Context
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  id: FollowingContext
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: FollowingContext
  nameWithType: SegmentationContext.FollowingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    The break context which directly follows the break. The following context

    usually contains any post-break whitespace in the pattern. If null, the

    context "matches" any position.
  example: []
  syntax:
    content: >-
      [DataMember]

      public Context FollowingContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
    content.vb: >-
      <DataMember>

      Public Property FollowingContext As Context
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  id: IsEnabled
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: SegmentationContext.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: >-
    Gets or sets a flag to control whether this context is currently enabled. Note that not

    all clients evaluate this flag yet, and all contexts (whether enabled or not) may be used

    during segmentation.
  example: []
  syntax:
    content: >-
      [DataMember]

      public bool IsEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <DataMember>

      Public Property IsEnabled As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.html
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segmentation
    name: Segmentation
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segmentation.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segmentation
    name: Segmentation
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segmentation.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icloneable
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext__ctor
  name: SegmentationContext
  nameWithType: SegmentationContext.SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext
  nameWithType.vb: SegmentationContext.New
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.New
  name.vb: New
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html
  name: SegmentationContext
  nameWithType: SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.Context
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.Context.html
  name: Context
  nameWithType: Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_MatchesAt_System_String_System_Int32_System_Boolean_System_Boolean_
  name: MatchesAt
  nameWithType: SegmentationContext.MatchesAt
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_FindAllMatches_System_String_System_Int32_System_Boolean_System_Boolean_
  name: FindAllMatches
  nameWithType: SegmentationContext.FindAllMatches
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<int>
  nameWithType: List<int>
  fullName: System.Collections.Generic.List<int>
  nameWithType.vb: List(Of Integer)
  fullName.vb: System.Collections.Generic.List(Of Integer)
  name.vb: List(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.icloneable.clone
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icloneable.clone
  - name: (
  - name: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.icloneable.clone
  - name: (
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_Clone
  name: Clone
  nameWithType: SegmentationContext.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_ToString
  name: ToString
  nameWithType: SegmentationContext.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_Description
  name: Description
  nameWithType: SegmentationContext.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString.html
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_Requires
  name: Requires
  nameWithType: SegmentationContext.Requires
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_ContextType
  name: ContextType
  nameWithType: SegmentationContext.ContextType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
- uid: Sdl.LanguagePlatform.Core.Segmentation.ContextType
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.ContextType
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.ContextType.html
  name: ContextType
  nameWithType: ContextType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.ContextType
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_TriggerChars
  name: TriggerChars
  nameWithType: SegmentationContext.TriggerChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_PrecedingContext
  name: PrecedingContext
  nameWithType: SegmentationContext.PrecedingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_FollowingContext
  name: FollowingContext
  nameWithType: SegmentationContext.FollowingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.html#Sdl_LanguagePlatform_Core_Segmentation_SegmentationContext_IsEnabled
  name: IsEnabled
  nameWithType: SegmentationContext.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
