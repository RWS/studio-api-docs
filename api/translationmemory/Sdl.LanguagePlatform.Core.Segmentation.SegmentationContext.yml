### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  id: SegmentationContext
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  langs:
  - csharp
  - vb
  name: SegmentationContext
  nameWithType: SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<p>A segmentation context consists of a context which should precede the match, and \na context which should follow a match. For performance reasons, it may also contain\na list of trigger characters which, if specified, are used to determine whether a \nspecific context is probed for matching or not. \n</p>\n<p>\nA null context matches every position. Therefore, if the preceding context is null, \nthe segmentation context matches at each position which is not excluded by the \nfollowing context. If the following context is also null, the segmentation context\nwill match everywhere in the input string.\n</p>\n<p>\nIf the trigger characters are specified, they should consist of all characters which\nmay appear at the end of the preceding context. If the trigger characters are specified, \nbut the preceding context is null, the rule will only be tested for those positions in \nthe string where one of the trigger characters is found. In that case, as the preceding \ncontext is null, the rule will &quot;fire&quot; at each of the positions of any trigger character.\n</p>\n"
  syntax:
    content: 'public class SegmentationContext : ICloneable'
    content.vb: >-
      Public Class SegmentationContext
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: SegmentationContext()
  nameWithType: SegmentationContext.SegmentationContext()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with default values. This constructor is required for\nXML deserialization and should not be used directly.\n"
  syntax:
    content: public SegmentationContext()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: SegmentationContext(SegmentationContext)
  nameWithType: SegmentationContext.SegmentationContext(SegmentationContext)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the values of another instance, creating a deep copy.\n"
  syntax:
    content: public SegmentationContext(SegmentationContext other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
      description: The other instance
    content.vb: Public Sub New(other As SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)
  id: '#ctor(System.String,System.String,Sdl.LanguagePlatform.Core.Segmentation.Context,Sdl.LanguagePlatform.Core.Segmentation.Context)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: SegmentationContext(String, String, Context, Context)
  nameWithType: SegmentationContext.SegmentationContext(String, String, Context, Context)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext(System.String, System.String, Sdl.LanguagePlatform.Core.Segmentation.Context, Sdl.LanguagePlatform.Core.Segmentation.Context)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public SegmentationContext(string description, string triggerChars, Context precedingContext, Context followingContext)
    parameters:
    - id: description
      type: System.String
      description: A description of the context, for UI purposes.
    - id: triggerChars
      type: System.String
      description: "If specified, a string which contains the characters which\ncan occur at the start of a matching text. If the current start character is not in this\nlist, no match will be computed, which may improve performance. If <code>null</code>, the \nmatch computation will take place as usual."
    - id: precedingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
      description: The pre-break context
    - id: followingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
      description: The post-break context
    content.vb: Public Sub New(description As String, triggerChars As String, precedingContext As Context, followingContext As Context)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  id: MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: MatchesAt(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationContext.MatchesAt(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nTests whether the context matches at the specified position. The preceding context, if specified,\nmust match up to the position (not including), and the following context must match from that \nposition onwards. If true, a match is postulated directly before position.\n"
  syntax:
    content: public bool MatchesAt(string input, int position, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
      description: The input string to test
    - id: position
      type: System.Int32
      description: The position in the input to test for a match
    - id: assumeEof
      type: System.Boolean
      description: "If true, it is assumed that the end of input has been reached, and \nend-of-input constraints will match. If false, any end-of-input constraints will not match.\n"
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match. If false,

        no end-of-word constraints will match.
    return:
      type: System.Boolean
      description: "true iff the preceding context matches up to the specified position (non-inclusive), \nand the following context matches from that position onwards."
    content.vb: Public Function MatchesAt(input As String, position As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  id: FindAllMatches(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: FindAllMatches(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationContext.FindAllMatches(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nFinds all matches of the context in the input string, starting at the specified position.\n"
  syntax:
    content: public List<int> FindAllMatches(string input, int startOffset, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
      description: The input string to test
    - id: startOffset
      type: System.Int32
      description: The zero-based position in the input to start the match process from
    - id: assumeEof
      type: System.Boolean
      description: "If true, it is assumed that the end of input has been reached, and \nend-of-input constraints will match at the end of the input string. If false, any end-of-input constraints will not match.\n"
    - id: followedByWordBreak
      type: System.Boolean
      description: >-
        If true, any end-of-word constraints will match at the end of the input string. If false,

        no end-of-word constraints will match.
    return:
      type: System.Collections.Generic.List{System.Int32}
      description: A list of positions where the context matches in the input string
    content.vb: Public Function FindAllMatches(input As String, startOffset As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As List(Of Integer)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SegmentationContext.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentationContext.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  id: Description
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SegmentationContext.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the description of this context.\n"
  syntax:
    content: public LocalizedString Description { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
    content.vb: Public Property Description As LocalizedString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  id: Requires
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: Requires
  nameWithType: SegmentationContext.Requires
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the name of a language resource required for this match context to be\nvalid. If, at runtime, the required resource cannot be obtained, the match context\nis invalid and will never be evaluated.\n"
  syntax:
    content: public string Requires { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Requires As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  id: ContextType
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: ContextType
  nameWithType: SegmentationContext.ContextType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets the context type.\n"
  syntax:
    content: public ContextType ContextType { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.ContextType
    content.vb: Public Property ContextType As ContextType
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  id: TriggerChars
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: TriggerChars
  nameWithType: SegmentationContext.TriggerChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\n<p>The characters which trigger this rule. The trigger chars are used to optimize\nrule evaluation and to avoid more expensive tests (such as regex matches) against\nthe input. If null, the contexts will be checked nevertheless.\n</p>\n<p>\nIf you specify trigger characters, you must take care. For example, if a context \nhas optional trailing parts (as in &quot;\\.\\p{Pe}*&quot; for a full stop followed by an optionally\nempty sequence of closing punctuation), specifying a trigger character &quot;.&quot;\nwill prevent the context from matching any trailing closing punctuation. In this\ncase, you should specify all possible trailing characters.\n</p>\n"
  syntax:
    content: public string TriggerChars { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TriggerChars As String
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  id: PrecedingContext
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: PrecedingContext
  nameWithType: SegmentationContext.PrecedingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nThe break context which directly precedes the break. The preceding context \ntypically ends with one or more of the trigger chars. If null, the context\nmatches any position.\n"
  syntax:
    content: public Context PrecedingContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
    content.vb: Public Property PrecedingContext As Context
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  id: FollowingContext
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: FollowingContext
  nameWithType: SegmentationContext.FollowingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nThe break context which directly follows the break. The following context\nusually contains any post-break whitespace in the pattern. If null, the\ncontext &quot;matches&quot; any position.\n"
  syntax:
    content: public Context FollowingContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.Context
    content.vb: Public Property FollowingContext As Context
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  id: IsEnabled
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: SegmentationContext.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  summary: "\nGets or sets a flag to control whether this context is currently enabled. Note that not\nall clients evaluate this flag yet, and all contexts (whether enabled or not) may be used\nduring segmentation.\n"
  syntax:
    content: public bool IsEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsEnabled As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.#ctor
  isExternal: true
  name: SegmentationContext
  nameWithType: SegmentationContext.SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.SegmentationContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationContext
  nameWithType: SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Segmentation.Context
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.Context
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Context
  nameWithType: Context
  fullName: Sdl.LanguagePlatform.Core.Segmentation.Context
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt
  isExternal: true
  name: MatchesAt
  nameWithType: SegmentationContext.MatchesAt
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.MatchesAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches
  isExternal: true
  name: FindAllMatches
  nameWithType: SegmentationContext.FindAllMatches
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FindAllMatches
- uid: System.Collections.Generic.List{System.Int32}
  commentId: '!:System.Collections.Generic.List{System.Int32}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
  isExternal: true
  name: Clone
  nameWithType: SegmentationContext.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
  isExternal: true
  name: ToString
  nameWithType: SegmentationContext.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
  isExternal: true
  name: Description
  nameWithType: SegmentationContext.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Description
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
  isExternal: true
  name: Requires
  nameWithType: SegmentationContext.Requires
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.Requires
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
  isExternal: true
  name: ContextType
  nameWithType: SegmentationContext.ContextType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.ContextType
- uid: Sdl.LanguagePlatform.Core.Segmentation.ContextType
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.ContextType
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: ContextType
  nameWithType: ContextType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.ContextType
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
  isExternal: true
  name: TriggerChars
  nameWithType: SegmentationContext.TriggerChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.TriggerChars
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
  isExternal: true
  name: PrecedingContext
  nameWithType: SegmentationContext.PrecedingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.PrecedingContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
  isExternal: true
  name: FollowingContext
  nameWithType: SegmentationContext.FollowingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.FollowingContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
  isExternal: true
  name: IsEnabled
  nameWithType: SegmentationContext.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext.IsEnabled
