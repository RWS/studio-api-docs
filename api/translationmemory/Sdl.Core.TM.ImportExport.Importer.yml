### YamlMime:ManagedReference
items:
- uid: Sdl.Core.TM.ImportExport.Importer
  commentId: T:Sdl.Core.TM.ImportExport.Importer
  id: Importer
  parent: Sdl.Core.TM.ImportExport
  children:
  - Sdl.Core.TM.ImportExport.Importer.#ctor
  - Sdl.Core.TM.ImportExport.Importer.#ctor(Sdl.Core.TM.ImportExport.IImportDestination)
  - Sdl.Core.TM.ImportExport.Importer.BadTuCount
  - Sdl.Core.TM.ImportExport.Importer.BatchImported
  - Sdl.Core.TM.ImportExport.Importer.Buffer
  - Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile
  - Sdl.Core.TM.ImportExport.Importer.ChunkSize
  - Sdl.Core.TM.ImportExport.Importer.DefaultTranslationUnitChunkSize
  - Sdl.Core.TM.ImportExport.Importer.ErrorOutput
  - Sdl.Core.TM.ImportExport.Importer.Exclusive
  - Sdl.Core.TM.ImportExport.Importer.FileTypeManager
  - Sdl.Core.TM.ImportExport.Importer.Flush(Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  - Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager
  - Sdl.Core.TM.ImportExport.Importer.Import(System.String)
  - Sdl.Core.TM.ImportExport.Importer.Import(System.String,Sdl.Core.TM.ImportExport.IImportDestination)
  - Sdl.Core.TM.ImportExport.Importer.ImportSettings
  - Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath
  - Sdl.Core.TM.ImportExport.Importer.MaxTranslationUnitChunkSize
  - Sdl.Core.TM.ImportExport.Importer.MinTranslationUnitChunkSize
  - Sdl.Core.TM.ImportExport.Importer.OnBatchImported(Sdl.LanguagePlatform.TranslationMemory.ImportResults,Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  - Sdl.Core.TM.ImportExport.Importer.OutputErrorTu(Sdl.LanguagePlatform.TranslationMemory.TranslationUnit,Sdl.LanguagePlatform.TranslationMemory.ImportResult)
  - Sdl.Core.TM.ImportExport.Importer.Statistics
  - Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting
  langs:
  - csharp
  - vb
  name: Importer
  nameWithType: Importer
  fullName: Sdl.Core.TM.ImportExport.Importer
  type: Class
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public class Importer
    content.vb: Public Class Importer
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryImporter
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.TM.ImportExport.Importer.DefaultTranslationUnitChunkSize
  commentId: F:Sdl.Core.TM.ImportExport.Importer.DefaultTranslationUnitChunkSize
  id: DefaultTranslationUnitChunkSize
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: DefaultTranslationUnitChunkSize
  nameWithType: Importer.DefaultTranslationUnitChunkSize
  fullName: Sdl.Core.TM.ImportExport.Importer.DefaultTranslationUnitChunkSize
  type: Field
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nDefines the default size for a chunk of translation units to be processed in one round-trip through the import/export process.\n<returns>The default chunk size is 25.</returns>\n"
  syntax:
    content: public const int DefaultTranslationUnitChunkSize = 200
    return:
      type: System.Int32
    content.vb: Public Const DefaultTranslationUnitChunkSize As Integer = 200
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.Core.TM.ImportExport.Importer.MaxTranslationUnitChunkSize
  commentId: F:Sdl.Core.TM.ImportExport.Importer.MaxTranslationUnitChunkSize
  id: MaxTranslationUnitChunkSize
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: MaxTranslationUnitChunkSize
  nameWithType: Importer.MaxTranslationUnitChunkSize
  fullName: Sdl.Core.TM.ImportExport.Importer.MaxTranslationUnitChunkSize
  type: Field
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nDefines the maximum allowed chunk size.\n<returns>The maximum allowed chunk size is 200.</returns>\n"
  syntax:
    content: public const int MaxTranslationUnitChunkSize = 200
    return:
      type: System.Int32
    content.vb: Public Const MaxTranslationUnitChunkSize As Integer = 200
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.Core.TM.ImportExport.Importer.MinTranslationUnitChunkSize
  commentId: F:Sdl.Core.TM.ImportExport.Importer.MinTranslationUnitChunkSize
  id: MinTranslationUnitChunkSize
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: MinTranslationUnitChunkSize
  nameWithType: Importer.MinTranslationUnitChunkSize
  fullName: Sdl.Core.TM.ImportExport.Importer.MinTranslationUnitChunkSize
  type: Field
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nDefines the minimum allowed chunk size.\n<returns>The minimum allowed chunk size is 2.</returns>\n"
  syntax:
    content: public const int MinTranslationUnitChunkSize = 2
    return:
      type: System.Int32
    content.vb: Public Const MinTranslationUnitChunkSize As Integer = 2
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.Core.TM.ImportExport.Importer.Buffer
  commentId: F:Sdl.Core.TM.ImportExport.Importer.Buffer
  id: Buffer
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Buffer
  nameWithType: Importer.Buffer
  fullName: Sdl.Core.TM.ImportExport.Importer.Buffer
  type: Field
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected readonly List<TranslationUnit> Buffer
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.TranslationUnit}
    content.vb: Protected ReadOnly Buffer As List(Of TranslationUnit)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Sdl.Core.TM.ImportExport.Importer.ErrorOutput
  commentId: F:Sdl.Core.TM.ImportExport.Importer.ErrorOutput
  id: ErrorOutput
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: ErrorOutput
  nameWithType: Importer.ErrorOutput
  fullName: Sdl.Core.TM.ImportExport.Importer.ErrorOutput
  type: Field
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected TMXWriter ErrorOutput
    return:
      type: Sdl.LanguagePlatform.IO.TMX.TMXWriter
    content.vb: Protected ErrorOutput As TMXWriter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.TM.ImportExport.Importer.BadTuCount
  commentId: F:Sdl.Core.TM.ImportExport.Importer.BadTuCount
  id: BadTuCount
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: BadTuCount
  nameWithType: Importer.BadTuCount
  fullName: Sdl.Core.TM.ImportExport.Importer.BadTuCount
  type: Field
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected int BadTuCount
    return:
      type: System.Int32
    content.vb: Protected BadTuCount As Integer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.TM.ImportExport.Importer.#ctor
  commentId: M:Sdl.Core.TM.ImportExport.Importer.#ctor
  id: '#ctor'
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Importer()
  nameWithType: Importer.Importer()
  fullName: Sdl.Core.TM.ImportExport.Importer.Importer()
  type: Constructor
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nInitializes a new instance of the <xref href=\"Sdl.Core.TM.ImportExport.Importer\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public Importer()
    content.vb: Public Sub New
  overload: Sdl.Core.TM.ImportExport.Importer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.#ctor(Sdl.Core.TM.ImportExport.IImportDestination)
  commentId: M:Sdl.Core.TM.ImportExport.Importer.#ctor(Sdl.Core.TM.ImportExport.IImportDestination)
  id: '#ctor(Sdl.Core.TM.ImportExport.IImportDestination)'
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Importer(IImportDestination)
  nameWithType: Importer.Importer(IImportDestination)
  fullName: Sdl.Core.TM.ImportExport.Importer.Importer(Sdl.Core.TM.ImportExport.IImportDestination)
  type: Constructor
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public Importer(IImportDestination importDestination)
    parameters:
    - id: importDestination
      type: Sdl.Core.TM.ImportExport.IImportDestination
    content.vb: Public Sub New(importDestination As IImportDestination)
  overload: Sdl.Core.TM.ImportExport.Importer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.Import(System.String)
  commentId: M:Sdl.Core.TM.ImportExport.Importer.Import(System.String)
  id: Import(System.String)
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Import(String)
  nameWithType: Importer.Import(String)
  fullName: Sdl.Core.TM.ImportExport.Importer.Import(System.String)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public bool Import(string fileName)
    parameters:
    - id: fileName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Import(fileName As String) As Boolean
  overload: Sdl.Core.TM.ImportExport.Importer.Import*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.Import(System.String,Sdl.Core.TM.ImportExport.IImportDestination)
  commentId: M:Sdl.Core.TM.ImportExport.Importer.Import(System.String,Sdl.Core.TM.ImportExport.IImportDestination)
  id: Import(System.String,Sdl.Core.TM.ImportExport.IImportDestination)
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Import(String, IImportDestination)
  nameWithType: Importer.Import(String, IImportDestination)
  fullName: Sdl.Core.TM.ImportExport.Importer.Import(System.String, Sdl.Core.TM.ImportExport.IImportDestination)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nStarts the import from the specified file.\n"
  syntax:
    content: public bool Import(string fileName, IImportDestination importDestination)
    parameters:
    - id: fileName
      type: System.String
      description: The file name.
    - id: importDestination
      type: Sdl.Core.TM.ImportExport.IImportDestination
    return:
      type: System.Boolean
      description: The import results.
    content.vb: Public Function Import(fileName As String, importDestination As IImportDestination) As Boolean
  overload: Sdl.Core.TM.ImportExport.Importer.Import*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager
  commentId: M:Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager
  id: GetDefaultFileTypeManager
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: GetDefaultFileTypeManager()
  nameWithType: Importer.GetDefaultFileTypeManager()
  fullName: Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager()
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nReturns the default file type manager.\n"
  syntax:
    content: public IFileTypeManager GetDefaultFileTypeManager()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
    content.vb: Public Function GetDefaultFileTypeManager As IFileTypeManager
  overload: Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.Flush(Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  commentId: M:Sdl.Core.TM.ImportExport.Importer.Flush(Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  id: Flush(Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Flush(ImportStatistics)
  nameWithType: Importer.Flush(ImportStatistics)
  fullName: Sdl.Core.TM.ImportExport.Importer.Flush(Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nFlushes the content of the internal translation unit buffer into the translation memory immediately.\n"
  remarks: Stats is an input/output parameter and it will be updated after the execution of this method accordingly.
  syntax:
    content: protected ImportExportResponse Flush(ImportStatistics stats)
    parameters:
    - id: stats
      type: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
      description: The import results.
    return:
      type: Sdl.Core.TM.ImportExport.ImportExportResponse
      description: "Response.Cancel if there is an event listener that has signaled it wants to stop the import, \notherwise Response.Continue."
    content.vb: Protected Function Flush(stats As ImportStatistics) As ImportExportResponse
  overload: Sdl.Core.TM.ImportExport.Importer.Flush*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.TM.ImportExport.Importer.OutputErrorTu(Sdl.LanguagePlatform.TranslationMemory.TranslationUnit,Sdl.LanguagePlatform.TranslationMemory.ImportResult)
  commentId: M:Sdl.Core.TM.ImportExport.Importer.OutputErrorTu(Sdl.LanguagePlatform.TranslationMemory.TranslationUnit,Sdl.LanguagePlatform.TranslationMemory.ImportResult)
  id: OutputErrorTu(Sdl.LanguagePlatform.TranslationMemory.TranslationUnit,Sdl.LanguagePlatform.TranslationMemory.ImportResult)
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: OutputErrorTu(TranslationUnit, ImportResult)
  nameWithType: Importer.OutputErrorTu(TranslationUnit, ImportResult)
  fullName: Sdl.Core.TM.ImportExport.Importer.OutputErrorTu(Sdl.LanguagePlatform.TranslationMemory.TranslationUnit, Sdl.LanguagePlatform.TranslationMemory.ImportResult)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected void OutputErrorTu(TranslationUnit tu, ImportResult result)
    parameters:
    - id: tu
      type: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
    - id: result
      type: Sdl.LanguagePlatform.TranslationMemory.ImportResult
    content.vb: Protected Sub OutputErrorTu(tu As TranslationUnit, result As ImportResult)
  overload: Sdl.Core.TM.ImportExport.Importer.OutputErrorTu*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.TM.ImportExport.Importer.OnBatchImported(Sdl.LanguagePlatform.TranslationMemory.ImportResults,Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  commentId: M:Sdl.Core.TM.ImportExport.Importer.OnBatchImported(Sdl.LanguagePlatform.TranslationMemory.ImportResults,Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  id: OnBatchImported(Sdl.LanguagePlatform.TranslationMemory.ImportResults,Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: OnBatchImported(ImportResults, ImportStatistics)
  nameWithType: Importer.OnBatchImported(ImportResults, ImportStatistics)
  fullName: Sdl.Core.TM.ImportExport.Importer.OnBatchImported(Sdl.LanguagePlatform.TranslationMemory.ImportResults, Sdl.LanguagePlatform.TranslationMemory.ImportStatistics)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected ImportExportResponse OnBatchImported(ImportResults batchResults, ImportStatistics overallResults)
    parameters:
    - id: batchResults
      type: Sdl.LanguagePlatform.TranslationMemory.ImportResults
    - id: overallResults
      type: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
    return:
      type: Sdl.Core.TM.ImportExport.ImportExportResponse
    content.vb: Protected Function OnBatchImported(batchResults As ImportResults, overallResults As ImportStatistics) As ImportExportResponse
  overload: Sdl.Core.TM.ImportExport.Importer.OnBatchImported*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.TM.ImportExport.Importer.Statistics
  commentId: P:Sdl.Core.TM.ImportExport.Importer.Statistics
  id: Statistics
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Statistics
  nameWithType: Importer.Statistics
  fullName: Sdl.Core.TM.ImportExport.Importer.Statistics
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets the statistics.\n"
  syntax:
    content: public ImportStatistics Statistics { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
      description: The statistics.
    content.vb: Public Property Statistics As ImportStatistics
  overload: Sdl.Core.TM.ImportExport.Importer.Statistics*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.FileTypeManager
  commentId: P:Sdl.Core.TM.ImportExport.Importer.FileTypeManager
  id: FileTypeManager
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: FileTypeManager
  nameWithType: Importer.FileTypeManager
  fullName: Sdl.Core.TM.ImportExport.Importer.FileTypeManager
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the file type manager. This is only needed when imported bilingual documents; it is not required when\nimported TMX files.\n"
  syntax:
    content: public IFileTypeManager FileTypeManager { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
      description: The file type manager.
    content.vb: Public Property FileTypeManager As IFileTypeManager
  overload: Sdl.Core.TM.ImportExport.Importer.FileTypeManager*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile
  commentId: P:Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile
  id: CanChangeImportFile
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: CanChangeImportFile
  nameWithType: Importer.CanChangeImportFile
  fullName: Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nFlag set to true if the imported file can/should be changed\n"
  syntax:
    content: public bool CanChangeImportFile { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanChangeImportFile As Boolean
  overload: Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting
  commentId: P:Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting
  id: TranslationMemoryUserIdSetting
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: TranslationMemoryUserIdSetting
  nameWithType: Importer.TranslationMemoryUserIdSetting
  fullName: Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the user id used to import TUs.\n"
  syntax:
    content: public string TranslationMemoryUserIdSetting { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TranslationMemoryUserIdSetting As String
  overload: Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.ChunkSize
  commentId: P:Sdl.Core.TM.ImportExport.Importer.ChunkSize
  id: ChunkSize
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: ChunkSize
  nameWithType: Importer.ChunkSize
  fullName: Sdl.Core.TM.ImportExport.Importer.ChunkSize
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the size of the translation unit chunk size\n"
  syntax:
    content: public int ChunkSize { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The size of the chunk.
    content.vb: Public Property ChunkSize As Integer
  overload: Sdl.Core.TM.ImportExport.Importer.ChunkSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.Exclusive
  commentId: P:Sdl.Core.TM.ImportExport.Importer.Exclusive
  id: Exclusive
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: Exclusive
  nameWithType: Importer.Exclusive
  fullName: Sdl.Core.TM.ImportExport.Importer.Exclusive
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nIf true, indicates this <xref href=\"Sdl.Core.TM.ImportExport.Importer\" data-throw-if-not-resolved=\"false\"></xref> is the only flow making \nchanges to the destination TM, in which case optimisations are used. Do not\nset true if other flows/users may be updating the TM during the import.\n"
  syntax:
    content: public bool Exclusive { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Exclusive As Boolean
  overload: Sdl.Core.TM.ImportExport.Importer.Exclusive*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.ImportSettings
  commentId: P:Sdl.Core.TM.ImportExport.Importer.ImportSettings
  id: ImportSettings
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: ImportSettings
  nameWithType: Importer.ImportSettings
  fullName: Sdl.Core.TM.ImportExport.Importer.ImportSettings
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the import settings.\n"
  syntax:
    content: public ImportSettings ImportSettings { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.ImportSettings
    content.vb: Public Property ImportSettings As ImportSettings
  overload: Sdl.Core.TM.ImportExport.Importer.ImportSettings*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath
  commentId: P:Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath
  id: InvalidTranslationUnitsExportPath
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: InvalidTranslationUnitsExportPath
  nameWithType: Importer.InvalidTranslationUnitsExportPath
  fullName: Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the invalid translation units export path.\n"
  syntax:
    content: public string InvalidTranslationUnitsExportPath { get; set; }
    parameters: []
    return:
      type: System.String
      description: The invalid translation units export path.
    content.vb: Public Property InvalidTranslationUnitsExportPath As String
  overload: Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Importer.BatchImported
  commentId: E:Sdl.Core.TM.ImportExport.Importer.BatchImported
  id: BatchImported
  parent: Sdl.Core.TM.ImportExport.Importer
  langs:
  - csharp
  - vb
  name: BatchImported
  nameWithType: Importer.BatchImported
  fullName: Sdl.Core.TM.ImportExport.Importer.BatchImported
  type: Event
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nOccurs after a TU batch is imported\n"
  syntax:
    content: public event EventHandler<BatchImportedEventArgs> BatchImported
    return:
      type: System.EventHandler{Sdl.Core.TM.ImportExport.BatchImportedEventArgs}
    content.vb: Public Event BatchImported As EventHandler(Of BatchImportedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.TM.ImportExport
  commentId: N:Sdl.Core.TM.ImportExport
  isExternal: true
  name: Sdl.Core.TM.ImportExport
  nameWithType: Sdl.Core.TM.ImportExport
  fullName: Sdl.Core.TM.ImportExport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.TranslationUnit}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.TranslationUnit}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TranslationUnit>
  nameWithType: List<TranslationUnit>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.TranslationMemory.TranslationUnit>
  nameWithType.vb: List(Of TranslationUnit)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.TranslationMemory.TranslationUnit)
  name.vb: List(Of TranslationUnit)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
    name: TranslationUnit
    nameWithType: TranslationUnit
    fullName: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
    name: TranslationUnit
    nameWithType: TranslationUnit
    fullName: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.IO.TMX.TMXWriter
  commentId: T:Sdl.LanguagePlatform.IO.TMX.TMXWriter
  parent: Sdl.LanguagePlatform.IO.TMX
  isExternal: true
  name: TMXWriter
  nameWithType: TMXWriter
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXWriter
- uid: Sdl.LanguagePlatform.IO.TMX
  commentId: N:Sdl.LanguagePlatform.IO.TMX
  isExternal: true
  name: Sdl.LanguagePlatform.IO.TMX
  nameWithType: Sdl.LanguagePlatform.IO.TMX
  fullName: Sdl.LanguagePlatform.IO.TMX
- uid: Sdl.Core.TM.ImportExport.Importer.#ctor*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.#ctor
  isExternal: true
  name: Importer
  nameWithType: Importer.Importer
  fullName: Sdl.Core.TM.ImportExport.Importer.Importer
- uid: Sdl.Core.TM.ImportExport.IImportDestination
  commentId: T:Sdl.Core.TM.ImportExport.IImportDestination
  parent: Sdl.Core.TM.ImportExport
  isExternal: true
  name: IImportDestination
  nameWithType: IImportDestination
  fullName: Sdl.Core.TM.ImportExport.IImportDestination
- uid: Sdl.Core.TM.ImportExport.Importer.Import*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.Import
  isExternal: true
  name: Import
  nameWithType: Importer.Import
  fullName: Sdl.Core.TM.ImportExport.Importer.Import
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager
  isExternal: true
  name: GetDefaultFileTypeManager
  nameWithType: Importer.GetDefaultFileTypeManager
  fullName: Sdl.Core.TM.ImportExport.Importer.GetDefaultFileTypeManager
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  isExternal: true
  name: IFileTypeManager
  nameWithType: IFileTypeManager
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
- uid: Sdl.Core.TM.ImportExport.Importer.Flush*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.Flush
  isExternal: true
  name: Flush
  nameWithType: Importer.Flush
  fullName: Sdl.Core.TM.ImportExport.Importer.Flush
- uid: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: ImportStatistics
  nameWithType: ImportStatistics
  fullName: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
- uid: Sdl.Core.TM.ImportExport.ImportExportResponse
  commentId: T:Sdl.Core.TM.ImportExport.ImportExportResponse
  parent: Sdl.Core.TM.ImportExport
  isExternal: true
  name: ImportExportResponse
  nameWithType: ImportExportResponse
  fullName: Sdl.Core.TM.ImportExport.ImportExportResponse
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: Sdl.Core.TM.ImportExport.Importer.OutputErrorTu*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.OutputErrorTu
  isExternal: true
  name: OutputErrorTu
  nameWithType: Importer.OutputErrorTu
  fullName: Sdl.Core.TM.ImportExport.Importer.OutputErrorTu
- uid: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: TranslationUnit
  nameWithType: TranslationUnit
  fullName: Sdl.LanguagePlatform.TranslationMemory.TranslationUnit
- uid: Sdl.LanguagePlatform.TranslationMemory.ImportResult
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ImportResult
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: ImportResult
  nameWithType: ImportResult
  fullName: Sdl.LanguagePlatform.TranslationMemory.ImportResult
- uid: Sdl.Core.TM.ImportExport.Importer.OnBatchImported*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.OnBatchImported
  isExternal: true
  name: OnBatchImported
  nameWithType: Importer.OnBatchImported
  fullName: Sdl.Core.TM.ImportExport.Importer.OnBatchImported
- uid: Sdl.LanguagePlatform.TranslationMemory.ImportResults
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ImportResults
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: ImportResults
  nameWithType: ImportResults
  fullName: Sdl.LanguagePlatform.TranslationMemory.ImportResults
- uid: Sdl.Core.TM.ImportExport.Importer.Statistics*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.Statistics
  isExternal: true
  name: Statistics
  nameWithType: Importer.Statistics
  fullName: Sdl.Core.TM.ImportExport.Importer.Statistics
- uid: Sdl.Core.TM.ImportExport.Importer.FileTypeManager*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.FileTypeManager
  isExternal: true
  name: FileTypeManager
  nameWithType: Importer.FileTypeManager
  fullName: Sdl.Core.TM.ImportExport.Importer.FileTypeManager
- uid: Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile
  isExternal: true
  name: CanChangeImportFile
  nameWithType: Importer.CanChangeImportFile
  fullName: Sdl.Core.TM.ImportExport.Importer.CanChangeImportFile
- uid: Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting
  isExternal: true
  name: TranslationMemoryUserIdSetting
  nameWithType: Importer.TranslationMemoryUserIdSetting
  fullName: Sdl.Core.TM.ImportExport.Importer.TranslationMemoryUserIdSetting
- uid: Sdl.Core.TM.ImportExport.Importer.ChunkSize*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.ChunkSize
  isExternal: true
  name: ChunkSize
  nameWithType: Importer.ChunkSize
  fullName: Sdl.Core.TM.ImportExport.Importer.ChunkSize
- uid: Sdl.Core.TM.ImportExport.Importer.Exclusive*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.Exclusive
  isExternal: true
  name: Exclusive
  nameWithType: Importer.Exclusive
  fullName: Sdl.Core.TM.ImportExport.Importer.Exclusive
- uid: Sdl.Core.TM.ImportExport.Importer.ImportSettings*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.ImportSettings
  isExternal: true
  name: ImportSettings
  nameWithType: Importer.ImportSettings
  fullName: Sdl.Core.TM.ImportExport.Importer.ImportSettings
- uid: Sdl.LanguagePlatform.TranslationMemory.ImportSettings
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ImportSettings
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: ImportSettings
  nameWithType: ImportSettings
  fullName: Sdl.LanguagePlatform.TranslationMemory.ImportSettings
- uid: Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath*
  commentId: Overload:Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath
  isExternal: true
  name: InvalidTranslationUnitsExportPath
  nameWithType: Importer.InvalidTranslationUnitsExportPath
  fullName: Sdl.Core.TM.ImportExport.Importer.InvalidTranslationUnitsExportPath
- uid: System.EventHandler{Sdl.Core.TM.ImportExport.BatchImportedEventArgs}
  commentId: T:System.EventHandler{Sdl.Core.TM.ImportExport.BatchImportedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<BatchImportedEventArgs>
  nameWithType: EventHandler<BatchImportedEventArgs>
  fullName: System.EventHandler<Sdl.Core.TM.ImportExport.BatchImportedEventArgs>
  nameWithType.vb: EventHandler(Of BatchImportedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.Core.TM.ImportExport.BatchImportedEventArgs)
  name.vb: EventHandler(Of BatchImportedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    name: BatchImportedEventArgs
    nameWithType: BatchImportedEventArgs
    fullName: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    name: BatchImportedEventArgs
    nameWithType: BatchImportedEventArgs
    fullName: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<>
  nameWithType: EventHandler<>
  fullName: System.EventHandler<>
  nameWithType.vb: EventHandler(Of )
  fullName.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
