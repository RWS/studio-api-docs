### YamlMime:ManagedReference
items:
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  commentId: T:Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  id: AlignmentEvidence
  parent: Sdl.Core.FineGrainedAlignment
  children:
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.#ctor
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean[],System.Boolean[],System.Boolean)
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers(System.Int16,System.Int16)
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  - Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  langs:
  - csharp
  - vb
  name: AlignmentEvidence
  nameWithType: AlignmentEvidence
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  type: Class
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: 'public abstract class AlignmentEvidence : Object'
    content.vb: >-
      Public MustInherit Class AlignmentEvidence
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.Core.FineGrainedAlignment.SimpleAlignmentEvidence
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers(System.Int16,System.Int16)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers(System.Int16,System.Int16)
  id: Covers(System.Int16,System.Int16)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: Covers(Int16, Int16)
  nameWithType: AlignmentEvidence.Covers(Int16, Int16)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers(System.Int16, System.Int16)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract bool Covers(short sourceTokenIndex, short targetTokenIndex)
    parameters:
    - id: sourceTokenIndex
      type: System.Int16
    - id: targetTokenIndex
      type: System.Int16
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Covers(sourceTokenIndex As Short, targetTokenIndex As Short) As Boolean
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  id: Concerns(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: Concerns(LiftAlignedSpanPair, Boolean)
  nameWithType: AlignmentEvidence.Concerns(LiftAlignedSpanPair, Boolean)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract bool Concerns(LiftAlignedSpanPair pair, bool outside)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    - id: outside
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Concerns(pair As LiftAlignedSpanPair, outside As Boolean) As Boolean
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  id: ConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: ConfidenceFor(LiftAlignedSpanPair, Boolean)
  nameWithType: AlignmentEvidence.ConfidenceFor(LiftAlignedSpanPair, Boolean)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract float ConfidenceFor(LiftAlignedSpanPair pair, bool outside)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    - id: outside
      type: System.Boolean
    return:
      type: System.Single
    content.vb: Public MustOverride Function ConfidenceFor(pair As LiftAlignedSpanPair, outside As Boolean) As Single
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  id: SourceConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: SourceConfidenceFor(LiftAlignedSpanPair, Boolean)
  nameWithType: AlignmentEvidence.SourceConfidenceFor(LiftAlignedSpanPair, Boolean)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract float SourceConfidenceFor(LiftAlignedSpanPair pair, bool outside)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    - id: outside
      type: System.Boolean
    return:
      type: System.Single
    content.vb: Public MustOverride Function SourceConfidenceFor(pair As LiftAlignedSpanPair, outside As Boolean) As Single
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  id: TargetConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: TargetConfidenceFor(LiftAlignedSpanPair, Boolean)
  nameWithType: AlignmentEvidence.TargetConfidenceFor(LiftAlignedSpanPair, Boolean)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract float TargetConfidenceFor(LiftAlignedSpanPair pair, bool outside)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    - id: outside
      type: System.Boolean
    return:
      type: System.Single
    content.vb: Public MustOverride Function TargetConfidenceFor(pair As LiftAlignedSpanPair, outside As Boolean) As Single
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean[],System.Boolean[],System.Boolean)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean[],System.Boolean[],System.Boolean)
  id: AttemptToUse(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair,System.Boolean[],System.Boolean[],System.Boolean)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: AttemptToUse(LiftAlignedSpanPair, Boolean[], Boolean[], Boolean)
  nameWithType: AlignmentEvidence.AttemptToUse(LiftAlignedSpanPair, Boolean[], Boolean[], Boolean)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair, System.Boolean[], System.Boolean[], System.Boolean)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract bool AttemptToUse(LiftAlignedSpanPair pair, bool[] sourceTokenUseFlags, bool[] targetTokenUseFlags, bool outside)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    - id: sourceTokenUseFlags
      type: System.Boolean[]
    - id: targetTokenUseFlags
      type: System.Boolean[]
    - id: outside
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function AttemptToUse(pair As LiftAlignedSpanPair, sourceTokenUseFlags As Boolean(), targetTokenUseFlags As Boolean(), outside As Boolean) As Boolean
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse*
  nameWithType.vb: AlignmentEvidence.AttemptToUse(LiftAlignedSpanPair, Boolean(), Boolean(), Boolean)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair, System.Boolean(), System.Boolean(), System.Boolean)
  name.vb: AttemptToUse(LiftAlignedSpanPair, Boolean(), Boolean(), Boolean)
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  id: GetIsNoLongerValid(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: GetIsNoLongerValid(LiftAlignedSpanPair)
  nameWithType: AlignmentEvidence.GetIsNoLongerValid(LiftAlignedSpanPair)
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract bool GetIsNoLongerValid(LiftAlignedSpanPair newAlignment)
    parameters:
    - id: newAlignment
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function GetIsNoLongerValid(newAlignment As LiftAlignedSpanPair) As Boolean
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.#ctor
  commentId: M:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.#ctor
  id: '#ctor'
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: AlignmentEvidence()
  nameWithType: AlignmentEvidence.AlignmentEvidence()
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AlignmentEvidence()
  type: Constructor
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: protected AlignmentEvidence()
    content.vb: Protected Sub New
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex
  commentId: P:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex
  id: FirstSourceTokenIndex
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: FirstSourceTokenIndex
  nameWithType: AlignmentEvidence.FirstSourceTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex
  type: Property
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract short FirstSourceTokenIndex { get; }
    parameters: []
    return:
      type: System.Int16
    content.vb: Public MustOverride ReadOnly Property FirstSourceTokenIndex As Short
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex
  commentId: P:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex
  id: FirstTargetTokenIndex
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: FirstTargetTokenIndex
  nameWithType: AlignmentEvidence.FirstTargetTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex
  type: Property
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract short FirstTargetTokenIndex { get; }
    parameters: []
    return:
      type: System.Int16
    content.vb: Public MustOverride ReadOnly Property FirstTargetTokenIndex As Short
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex
  commentId: P:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex
  id: LastSourceTokenIndex
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: LastSourceTokenIndex
  nameWithType: AlignmentEvidence.LastSourceTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex
  type: Property
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract short LastSourceTokenIndex { get; }
    parameters: []
    return:
      type: System.Int16
    content.vb: Public MustOverride ReadOnly Property LastSourceTokenIndex As Short
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex
  commentId: P:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex
  id: LastTargetTokenIndex
  parent: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
  langs:
  - csharp
  - vb
  name: LastTargetTokenIndex
  nameWithType: AlignmentEvidence.LastTargetTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex
  type: Property
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public abstract short LastTargetTokenIndex { get; }
    parameters: []
    return:
      type: System.Int16
    content.vb: Public MustOverride ReadOnly Property LastTargetTokenIndex As Short
  overload: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: Sdl.Core.FineGrainedAlignment
  commentId: N:Sdl.Core.FineGrainedAlignment
  isExternal: true
  name: Sdl.Core.FineGrainedAlignment
  nameWithType: Sdl.Core.FineGrainedAlignment
  fullName: Sdl.Core.FineGrainedAlignment
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers
  isExternal: true
  name: Covers
  nameWithType: AlignmentEvidence.Covers
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Covers
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns
  isExternal: true
  name: Concerns
  nameWithType: AlignmentEvidence.Concerns
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.Concerns
- uid: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
  isExternal: true
  name: LiftAlignedSpanPair
  nameWithType: LiftAlignedSpanPair
  fullName: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor
  isExternal: true
  name: ConfidenceFor
  nameWithType: AlignmentEvidence.ConfidenceFor
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.ConfidenceFor
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor
  isExternal: true
  name: SourceConfidenceFor
  nameWithType: AlignmentEvidence.SourceConfidenceFor
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.SourceConfidenceFor
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor
  isExternal: true
  name: TargetConfidenceFor
  nameWithType: AlignmentEvidence.TargetConfidenceFor
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.TargetConfidenceFor
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse
  isExternal: true
  name: AttemptToUse
  nameWithType: AlignmentEvidence.AttemptToUse
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AttemptToUse
- uid: System.Boolean[]
  isExternal: true
  name: Boolean[]
  nameWithType: Boolean[]
  fullName: System.Boolean[]
  nameWithType.vb: Boolean()
  fullName.vb: System.Boolean()
  name.vb: Boolean()
  spec.csharp:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid
  isExternal: true
  name: GetIsNoLongerValid
  nameWithType: AlignmentEvidence.GetIsNoLongerValid
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.GetIsNoLongerValid
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.#ctor*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.#ctor
  isExternal: true
  name: AlignmentEvidence
  nameWithType: AlignmentEvidence.AlignmentEvidence
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.AlignmentEvidence
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex
  isExternal: true
  name: FirstSourceTokenIndex
  nameWithType: AlignmentEvidence.FirstSourceTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstSourceTokenIndex
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex
  isExternal: true
  name: FirstTargetTokenIndex
  nameWithType: AlignmentEvidence.FirstTargetTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.FirstTargetTokenIndex
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex
  isExternal: true
  name: LastSourceTokenIndex
  nameWithType: AlignmentEvidence.LastSourceTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastSourceTokenIndex
- uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex
  isExternal: true
  name: LastTargetTokenIndex
  nameWithType: AlignmentEvidence.LastTargetTokenIndex
  fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence.LastTargetTokenIndex
