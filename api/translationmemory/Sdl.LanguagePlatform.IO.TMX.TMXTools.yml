### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools
  commentId: T:Sdl.LanguagePlatform.IO.TMX.TMXTools
  id: TMXTools
  parent: Sdl.LanguagePlatform.IO.TMX
  children:
  - Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String)
  - Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync(System.String,System.Int32,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  langs:
  - csharp
  - vb
  name: TMXTools
  nameWithType: TMXTools
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools
  type: Class
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  syntax:
    content: public static class TMXTools
    content.vb: Public Module TMXTools
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String)
  commentId: M:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String)
  id: GetLanguageDirection(System.String)
  parent: Sdl.LanguagePlatform.IO.TMX.TMXTools
  langs:
  - csharp
  - vb
  name: GetLanguageDirection(String)
  nameWithType: TMXTools.GetLanguageDirection(String)
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  syntax:
    content: >-
      [Obsolete("Use GetLanguageDirectionAsync")]

      public static LanguagePair GetLanguageDirection(string filename)
    parameters:
    - id: filename
      type: System.String
    return:
      type: Sdl.LanguagePlatform.Core.LanguagePair
    content.vb: >-
      <Obsolete("Use GetLanguageDirectionAsync")>

      Public Shared Function GetLanguageDirection(filename As String) As LanguagePair
  overload: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetLanguageDirectionAsync
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: GetLanguageDirectionAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.IO.TMX.TMXTools
  langs:
  - csharp
  - vb
  name: GetLanguageDirectionAsync(String, ICultureMetadataManager)
  nameWithType: TMXTools.GetLanguageDirectionAsync(String, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync(System.String, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  summary: "\nAttempts to obtain the language direction from a TMX file which must be bilingual. The method reads\nthe first couple of TUs from the input file and determines the language direction. If not null, the \nresult&apos;s languages will be set to the source and target language. If a language in the result is null, \nit was not present in any TUs in the sample. If a language is the InvariantCulture, it was inconsistent \nwithin the sample (as is the case with multi-target-language TUs).\n"
  syntax:
    content: public static Task<(LanguagePair result, CultureCode headerSourceLanguage)> GetLanguageDirectionAsync(string fileName, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: fileName
      type: System.String
      description: The input file name
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureCode}}
      description: The language direction or null on errors or if the language direction cannot be determined or invalid input is encountered. No exceptions are returned.
    content.vb: Public Shared Function GetLanguageDirectionAsync(fileName As String, cultureMetadataManager As ICultureMetadataManager) As Task(Of(result As LanguagePair, headerSourceLanguage As CultureCode)(Of LanguagePair , CultureCode))
  overload: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync(System.String,System.Int32,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync(System.String,System.Int32,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: GetLanguagesAsync(System.String,System.Int32,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.IO.TMX.TMXTools
  langs:
  - csharp
  - vb
  name: GetLanguagesAsync(String, Int32, ICultureMetadataManager)
  nameWithType: TMXTools.GetLanguagesAsync(String, Int32, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync(System.String, System.Int32, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO.TMX
  summary: "\nGets the languages from the given TMX filename.\n"
  syntax:
    content: public static Task<(IList<CultureCode> result, int scannedTUs)> GetLanguagesAsync(string fileName, int limit, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: fileName
      type: System.String
      description: file name
    - id: limit
      type: System.Int32
      description: limit on scanned TUs; if 0 then no limit
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{Sdl.Core.Globalization.CultureCode},System.Int32}}
      description: languages
    content.vb: Public Shared Function GetLanguagesAsync(fileName As String, limit As Integer, cultureMetadataManager As ICultureMetadataManager) As Task(Of(result As IList(Of CultureCode), scannedTUs As Integer)(Of IList(Of CultureCode), Integer)
  overload: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sdl.LanguagePlatform.IO.TMX
  commentId: N:Sdl.LanguagePlatform.IO.TMX
  isExternal: true
  name: Sdl.LanguagePlatform.IO.TMX
  nameWithType: Sdl.LanguagePlatform.IO.TMX
  fullName: Sdl.LanguagePlatform.IO.TMX
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection*
  commentId: Overload:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection
  isExternal: true
  name: GetLanguageDirection
  nameWithType: TMXTools.GetLanguageDirection
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.LanguagePair
  commentId: T:Sdl.LanguagePlatform.Core.LanguagePair
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: LanguagePair
  nameWithType: LanguagePair
  fullName: Sdl.LanguagePlatform.Core.LanguagePair
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync*
  commentId: Overload:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync
  isExternal: true
  name: GetLanguageDirectionAsync
  nameWithType: TMXTools.GetLanguageDirectionAsync
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguageDirectionAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Threading.Tasks.Task{System.ValueTuple{Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureCode}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureCode}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2)<LanguagePair, CultureCode>>
  nameWithType: Task<(T1, T2)<LanguagePair, CultureCode>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<Sdl.LanguagePlatform.Core.LanguagePair, Sdl.Core.Globalization.CultureCode>>
  nameWithType.vb: Task(Of (T1, T2)(Of LanguagePair, CultureCode))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of Sdl.LanguagePlatform.Core.LanguagePair, Sdl.Core.Globalization.CultureCode))
  name.vb: Task(Of (T1, T2)(Of LanguagePair, CultureCode))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.LanguagePair
    name: LanguagePair
    nameWithType: LanguagePair
    fullName: Sdl.LanguagePlatform.Core.LanguagePair
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    nameWithType: CultureCode
    fullName: Sdl.Core.Globalization.CultureCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.LanguagePair
    name: LanguagePair
    nameWithType: LanguagePair
    fullName: Sdl.LanguagePlatform.Core.LanguagePair
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    nameWithType: CultureCode
    fullName: Sdl.Core.Globalization.CultureCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync*
  commentId: Overload:Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync
  isExternal: true
  name: GetLanguagesAsync
  nameWithType: TMXTools.GetLanguagesAsync
  fullName: Sdl.LanguagePlatform.IO.TMX.TMXTools.GetLanguagesAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{Sdl.Core.Globalization.CultureCode},System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{Sdl.Core.Globalization.CultureCode},System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2)<IList<CultureCode>, Int32>>
  nameWithType: Task<(T1, T2)<IList<CultureCode>, Int32>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.Collections.Generic.IList<Sdl.Core.Globalization.CultureCode>, System.Int32>>
  nameWithType.vb: Task(Of (T1, T2)(Of IList(Of CultureCode), Int32))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.CultureCode), System.Int32))
  name.vb: Task(Of (T1, T2)(Of IList(Of CultureCode), Int32))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    nameWithType: CultureCode
    fullName: Sdl.Core.Globalization.CultureCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    nameWithType: CultureCode
    fullName: Sdl.Core.Globalization.CultureCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
