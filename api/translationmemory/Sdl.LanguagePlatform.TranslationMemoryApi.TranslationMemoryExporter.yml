### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  id: TranslationMemoryExporter
  parent: Sdl.LanguagePlatform.TranslationMemoryApi
  children:
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor(Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection)
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.BatchExported
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.DefaultTranslationUnitChunkSize
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export(System.String,System.Boolean)
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.MaxTranslationUnitChunkSize
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection
  langs:
  - csharp
  - vb
  name: TranslationMemoryExporter
  nameWithType: TranslationMemoryExporter
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nThis class implements exporting translation units into TMX files.\n"
  syntax:
    content: 'public class TranslationMemoryExporter : Exporter'
    content.vb: >-
      Public Class TranslationMemoryExporter
          Inherits Exporter
  inheritance:
  - System.Object
  - Sdl.Core.TM.ImportExport.Exporter
  inheritedMembers:
  - Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  - Sdl.Core.TM.ImportExport.Exporter.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  - Sdl.Core.TM.ImportExport.Exporter.TmxExportFormat
  - Sdl.Core.TM.ImportExport.Exporter.FilterExpression
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.DefaultTranslationUnitChunkSize
  commentId: F:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.DefaultTranslationUnitChunkSize
  id: DefaultTranslationUnitChunkSize
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: DefaultTranslationUnitChunkSize
  nameWithType: TranslationMemoryExporter.DefaultTranslationUnitChunkSize
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.DefaultTranslationUnitChunkSize
  type: Field
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nDefines the default size for a chunk of translation units to be processed in one roundtrip through the import/export process.\n<returns>The default chunk size is 50.</returns>\n"
  syntax:
    content: public const int DefaultTranslationUnitChunkSize = 25
    return:
      type: System.Int32
    content.vb: Public Const DefaultTranslationUnitChunkSize As Integer = 25
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.MaxTranslationUnitChunkSize
  commentId: F:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.MaxTranslationUnitChunkSize
  id: MaxTranslationUnitChunkSize
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: MaxTranslationUnitChunkSize
  nameWithType: TranslationMemoryExporter.MaxTranslationUnitChunkSize
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.MaxTranslationUnitChunkSize
  type: Field
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nDefines the maximum allowed chunk size.\n<returns>The maximum allowed chunk size is 200.</returns>\n"
  syntax:
    content: public const int MaxTranslationUnitChunkSize = 200
    return:
      type: System.Int32
    content.vb: Public Const MaxTranslationUnitChunkSize As Integer = 200
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: TranslationMemoryExporter()
  nameWithType: TranslationMemoryExporter.TranslationMemoryExporter()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryExporter()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nInitializes a new instance of the <xref href=\"Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public TranslationMemoryExporter()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor(Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor(Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection)
  id: '#ctor(Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection)'
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: TranslationMemoryExporter(ITranslationMemoryLanguageDirection)
  nameWithType: TranslationMemoryExporter.TranslationMemoryExporter(ITranslationMemoryLanguageDirection)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryExporter(Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nInitializes a new instance of the <xref href=\"Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter\" data-throw-if-not-resolved=\"false\"></xref> class with the specified languageDirection.\n"
  syntax:
    content: public TranslationMemoryExporter(ITranslationMemoryLanguageDirection languageDirection)
    parameters:
    - id: languageDirection
      type: Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection
      description: The translation memory language direction to export from.
    content.vb: Public Sub New(languageDirection As ITranslationMemoryLanguageDirection)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export(System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export(System.String,System.Boolean)
  id: Export(System.String,System.Boolean)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: Export(String, Boolean)
  nameWithType: TranslationMemoryExporter.Export(String, Boolean)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export(System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nStarts the export process with the configured settings into a file with the specified name.\n<remarks>This method supports GZip compressed files, such as: export.tmx.gz</remarks>\n"
  syntax:
    content: public void Export(string fileName, bool overwriteExisting)
    parameters:
    - id: fileName
      type: System.String
      description: Name of the file.
    - id: overwriteExisting
      type: System.Boolean
      description: if set to <code>true</code> [overwrite existing].
    content.vb: Public Sub Export(fileName As String, overwriteExisting As Boolean)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize
  id: ChunkSize
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: ChunkSize
  nameWithType: TranslationMemoryExporter.ChunkSize
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nGets or sets the size of the translation unit chunk size\n"
  remarks: The exporter implementation has always ignored this value. It is left in this class following refactoring, purely to retain binary compatibility
  syntax:
    content: public int ChunkSize { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The size of the chunk.
    content.vb: Public Property ChunkSize As Integer
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection
  id: TranslationMemoryLanguageDirection
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: TranslationMemoryLanguageDirection
  nameWithType: TranslationMemoryExporter.TranslationMemoryLanguageDirection
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nGets or sets the translation memory language direction.\n"
  syntax:
    content: public ITranslationMemoryLanguageDirection TranslationMemoryLanguageDirection { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection
      description: The translation memory language direction.
    content.vb: Public Property TranslationMemoryLanguageDirection As ITranslationMemoryLanguageDirection
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.BatchExported
  commentId: E:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.BatchExported
  id: BatchExported
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  langs:
  - csharp
  - vb
  name: BatchExported
  nameWithType: TranslationMemoryExporter.BatchExported
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.BatchExported
  type: Event
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi
  summary: "\nOccurs when ever a batch is imported, set Cancel = True to stop the export.\n"
  remarks: Hides the base class event (which our handler re-fires through this one) so that existing client code will see no namespace change after refactoring
  syntax:
    content: public event EventHandler<BatchExportedEventArgs> BatchExported
    return:
      type: System.EventHandler{Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs}
    content.vb: Public Event BatchExported As EventHandler(Of BatchExportedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.TranslationMemoryApi
  commentId: N:Sdl.LanguagePlatform.TranslationMemoryApi
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemoryApi
  nameWithType: Sdl.LanguagePlatform.TranslationMemoryApi
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.TM.ImportExport.Exporter
  commentId: T:Sdl.Core.TM.ImportExport.Exporter
  parent: Sdl.Core.TM.ImportExport
  isExternal: true
  name: Exporter
  nameWithType: Exporter
  fullName: Sdl.Core.TM.ImportExport.Exporter
- uid: Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  commentId: M:Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  parent: Sdl.Core.TM.ImportExport.Exporter
  isExternal: true
  name: Export(IExportOrigin, String, Boolean)
  nameWithType: Exporter.Export(IExportOrigin, String, Boolean)
  fullName: Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin, System.String, System.Boolean)
  spec.csharp:
  - uid: Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
    name: Export
    nameWithType: Exporter.Export
    fullName: Sdl.Core.TM.ImportExport.Exporter.Export
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.TM.ImportExport.IExportOrigin
    name: IExportOrigin
    nameWithType: IExportOrigin
    fullName: Sdl.Core.TM.ImportExport.IExportOrigin
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
    name: Export
    nameWithType: Exporter.Export
    fullName: Sdl.Core.TM.ImportExport.Exporter.Export
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.TM.ImportExport.IExportOrigin
    name: IExportOrigin
    nameWithType: IExportOrigin
    fullName: Sdl.Core.TM.ImportExport.IExportOrigin
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.TM.ImportExport.Exporter.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  commentId: M:Sdl.Core.TM.ImportExport.Exporter.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  parent: Sdl.Core.TM.ImportExport.Exporter
  isExternal: true
  name: ExportAsync(IExportOriginAsync, String, Boolean)
  nameWithType: Exporter.ExportAsync(IExportOriginAsync, String, Boolean)
  fullName: Sdl.Core.TM.ImportExport.Exporter.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync, System.String, System.Boolean)
  spec.csharp:
  - uid: Sdl.Core.TM.ImportExport.Exporter.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
    name: ExportAsync
    nameWithType: Exporter.ExportAsync
    fullName: Sdl.Core.TM.ImportExport.Exporter.ExportAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.TM.ImportExport.IExportOriginAsync
    name: IExportOriginAsync
    nameWithType: IExportOriginAsync
    fullName: Sdl.Core.TM.ImportExport.IExportOriginAsync
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.TM.ImportExport.Exporter.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
    name: ExportAsync
    nameWithType: Exporter.ExportAsync
    fullName: Sdl.Core.TM.ImportExport.Exporter.ExportAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.TM.ImportExport.IExportOriginAsync
    name: IExportOriginAsync
    nameWithType: IExportOriginAsync
    fullName: Sdl.Core.TM.ImportExport.IExportOriginAsync
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.TM.ImportExport.Exporter.TmxExportFormat
  commentId: P:Sdl.Core.TM.ImportExport.Exporter.TmxExportFormat
  parent: Sdl.Core.TM.ImportExport.Exporter
  isExternal: true
  name: TmxExportFormat
  nameWithType: Exporter.TmxExportFormat
  fullName: Sdl.Core.TM.ImportExport.Exporter.TmxExportFormat
- uid: Sdl.Core.TM.ImportExport.Exporter.FilterExpression
  commentId: P:Sdl.Core.TM.ImportExport.Exporter.FilterExpression
  parent: Sdl.Core.TM.ImportExport.Exporter
  isExternal: true
  name: FilterExpression
  nameWithType: Exporter.FilterExpression
  fullName: Sdl.Core.TM.ImportExport.Exporter.FilterExpression
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.TM.ImportExport
  commentId: N:Sdl.Core.TM.ImportExport
  isExternal: true
  name: Sdl.Core.TM.ImportExport
  nameWithType: Sdl.Core.TM.ImportExport
  fullName: Sdl.Core.TM.ImportExport
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.#ctor
  isExternal: true
  name: TranslationMemoryExporter
  nameWithType: TranslationMemoryExporter.TranslationMemoryExporter
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryExporter
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection
  parent: Sdl.LanguagePlatform.TranslationMemoryApi
  isExternal: true
  name: ITranslationMemoryLanguageDirection
  nameWithType: ITranslationMemoryLanguageDirection
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.ITranslationMemoryLanguageDirection
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export
  isExternal: true
  name: Export
  nameWithType: TranslationMemoryExporter.Export
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.Export
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize
  isExternal: true
  name: ChunkSize
  nameWithType: TranslationMemoryExporter.ChunkSize
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.ChunkSize
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection
  isExternal: true
  name: TranslationMemoryLanguageDirection
  nameWithType: TranslationMemoryExporter.TranslationMemoryLanguageDirection
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter.TranslationMemoryLanguageDirection
- uid: System.EventHandler{Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs}
  commentId: T:System.EventHandler{Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<BatchExportedEventArgs>
  nameWithType: EventHandler<BatchExportedEventArgs>
  fullName: System.EventHandler<Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs>
  nameWithType.vb: EventHandler(Of BatchExportedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs)
  name.vb: EventHandler(Of BatchExportedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs
    name: BatchExportedEventArgs
    nameWithType: BatchExportedEventArgs
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs
    name: BatchExportedEventArgs
    nameWithType: BatchExportedEventArgs
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.BatchExportedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<>
  nameWithType: EventHandler<>
  fullName: System.EventHandler<>
  nameWithType.vb: EventHandler(Of )
  fullName.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
