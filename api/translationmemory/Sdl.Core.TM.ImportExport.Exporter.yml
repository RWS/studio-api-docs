### YamlMime:ManagedReference
items:
- uid: Sdl.Core.TM.ImportExport.Exporter
  commentId: T:Sdl.Core.TM.ImportExport.Exporter
  id: Exporter
  parent: Sdl.Core.TM.ImportExport
  children:
  - Sdl.Core.TM.ImportExport.Exporter.#ctor
  - Sdl.Core.TM.ImportExport.Exporter.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.Core.TM.ImportExport.Exporter.BatchExported
  - Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  - Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: Exporter
  nameWithType: Exporter
  fullName: Sdl.Core.TM.ImportExport.Exporter
  type: Class
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: >-
      [Obsolete("Use ExporterAsync")]

      public class Exporter : ExporterAsync
    content.vb: >-
      <Obsolete("Use ExporterAsync")>

      Public Class Exporter
          Inherits ExporterAsync
  inheritance:
  - System.Object
  - Sdl.Core.TM.ImportExport.ExporterAsync
  derivedClasses:
  - Sdl.LanguagePlatform.TranslationMemoryApi.TranslationMemoryExporter
  inheritedMembers:
  - Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  - Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  - Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use ExporterAsync
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.TM.ImportExport.Exporter.#ctor
  commentId: M:Sdl.Core.TM.ImportExport.Exporter.#ctor
  id: '#ctor'
  parent: Sdl.Core.TM.ImportExport.Exporter
  langs:
  - csharp
  - vb
  name: Exporter()
  nameWithType: Exporter.Exporter()
  fullName: Sdl.Core.TM.ImportExport.Exporter.Exporter()
  type: Constructor
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: >-
      [Obsolete("Use version providing ICultureMetadataManager")]

      public Exporter()
    content.vb: >-
      <Obsolete("Use version providing ICultureMetadataManager")>

      Public Sub New
  overload: Sdl.Core.TM.ImportExport.Exporter.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use version providing ICultureMetadataManager
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Exporter.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.Core.TM.ImportExport.Exporter.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: '#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)'
  parent: Sdl.Core.TM.ImportExport.Exporter
  langs:
  - csharp
  - vb
  name: Exporter(ICultureMetadataManager)
  nameWithType: Exporter.Exporter(ICultureMetadataManager)
  fullName: Sdl.Core.TM.ImportExport.Exporter.Exporter(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Constructor
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public Exporter(ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    content.vb: Public Sub New(cultureMetadataManager As ICultureMetadataManager)
  overload: Sdl.Core.TM.ImportExport.Exporter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync(System.Int32,System.Int32)
  commentId: M:Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync(System.Int32,System.Int32)
  id: OnBatchExportedAsync(System.Int32,System.Int32)
  parent: Sdl.Core.TM.ImportExport.Exporter
  langs:
  - csharp
  - vb
  name: OnBatchExportedAsync(Int32, Int32)
  nameWithType: Exporter.OnBatchExportedAsync(Int32, Int32)
  fullName: Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync(System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected override Task<bool> OnBatchExportedAsync(int totalProcessed, int totalExported)
    parameters:
    - id: totalProcessed
      type: System.Int32
    - id: totalExported
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Protected Overrides Function OnBatchExportedAsync(totalProcessed As Integer, totalExported As Integer) As Task(Of Boolean)
  overridden: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
  overload: Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  commentId: M:Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  id: Export(Sdl.Core.TM.ImportExport.IExportOrigin,System.String,System.Boolean)
  parent: Sdl.Core.TM.ImportExport.Exporter
  langs:
  - csharp
  - vb
  name: Export(IExportOrigin, String, Boolean)
  nameWithType: Exporter.Export(IExportOrigin, String, Boolean)
  fullName: Sdl.Core.TM.ImportExport.Exporter.Export(Sdl.Core.TM.ImportExport.IExportOrigin, System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nStarts the export process with the configured settings into a file with the specified name.\n<remarks>This method supports GZip compressed files, such as: export.tmx.gz</remarks>\n"
  syntax:
    content: public void Export(IExportOrigin exportOrigin, string fileName, bool overwriteExisting)
    parameters:
    - id: exportOrigin
      type: Sdl.Core.TM.ImportExport.IExportOrigin
    - id: fileName
      type: System.String
      description: Name of the file.
    - id: overwriteExisting
      type: System.Boolean
      description: if set to <code>true</code> [overwrite existing].
    content.vb: Public Sub Export(exportOrigin As IExportOrigin, fileName As String, overwriteExisting As Boolean)
  overload: Sdl.Core.TM.ImportExport.Exporter.Export*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.Exporter.BatchExported
  commentId: E:Sdl.Core.TM.ImportExport.Exporter.BatchExported
  id: BatchExported
  parent: Sdl.Core.TM.ImportExport.Exporter
  langs:
  - csharp
  - vb
  name: BatchExported
  nameWithType: Exporter.BatchExported
  fullName: Sdl.Core.TM.ImportExport.Exporter.BatchExported
  type: Event
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: >-
      [Obsolete]

      public event EventHandler<BatchExportedEventArgs> BatchExported
    return:
      type: System.EventHandler{Sdl.Core.TM.ImportExport.BatchExportedEventArgs}
    content.vb: >-
      <Obsolete>

      Public Event BatchExported As EventHandler(Of BatchExportedEventArgs)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.TM.ImportExport
  commentId: N:Sdl.Core.TM.ImportExport
  isExternal: true
  name: Sdl.Core.TM.ImportExport
  nameWithType: Sdl.Core.TM.ImportExport
  fullName: Sdl.Core.TM.ImportExport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.TM.ImportExport.ExporterAsync
  commentId: T:Sdl.Core.TM.ImportExport.ExporterAsync
  parent: Sdl.Core.TM.ImportExport
  isExternal: true
  name: ExporterAsync
  nameWithType: ExporterAsync
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  commentId: M:Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  isExternal: true
  name: ExportAsync(IExportOriginAsync, String, Boolean)
  nameWithType: ExporterAsync.ExportAsync(IExportOriginAsync, String, Boolean)
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync, System.String, System.Boolean)
  spec.csharp:
  - uid: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
    name: ExportAsync
    nameWithType: ExporterAsync.ExportAsync
    fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.TM.ImportExport.IExportOriginAsync
    name: IExportOriginAsync
    nameWithType: IExportOriginAsync
    fullName: Sdl.Core.TM.ImportExport.IExportOriginAsync
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
    name: ExportAsync
    nameWithType: ExporterAsync.ExportAsync
    fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.TM.ImportExport.IExportOriginAsync
    name: IExportOriginAsync
    nameWithType: IExportOriginAsync
    fullName: Sdl.Core.TM.ImportExport.IExportOriginAsync
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  commentId: P:Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  isExternal: true
  name: TmxExportFormat
  nameWithType: ExporterAsync.TmxExportFormat
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  commentId: P:Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  isExternal: true
  name: FilterExpression
  nameWithType: ExporterAsync.FilterExpression
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.TM.ImportExport.Exporter.#ctor*
  commentId: Overload:Sdl.Core.TM.ImportExport.Exporter.#ctor
  isExternal: true
  name: Exporter
  nameWithType: Exporter.Exporter
  fullName: Sdl.Core.TM.ImportExport.Exporter.Exporter
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
  commentId: M:Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  isExternal: true
  name: OnBatchExportedAsync(Int32, Int32)
  nameWithType: ExporterAsync.OnBatchExportedAsync(Int32, Int32)
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32, System.Int32)
  spec.csharp:
  - uid: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
    name: OnBatchExportedAsync
    nameWithType: ExporterAsync.OnBatchExportedAsync
    fullName: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
    name: OnBatchExportedAsync
    nameWithType: ExporterAsync.OnBatchExportedAsync
    fullName: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync*
  commentId: Overload:Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync
  isExternal: true
  name: OnBatchExportedAsync
  nameWithType: Exporter.OnBatchExportedAsync
  fullName: Sdl.Core.TM.ImportExport.Exporter.OnBatchExportedAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.TM.ImportExport.Exporter.Export*
  commentId: Overload:Sdl.Core.TM.ImportExport.Exporter.Export
  isExternal: true
  name: Export
  nameWithType: Exporter.Export
  fullName: Sdl.Core.TM.ImportExport.Exporter.Export
- uid: Sdl.Core.TM.ImportExport.IExportOrigin
  commentId: T:Sdl.Core.TM.ImportExport.IExportOrigin
  parent: Sdl.Core.TM.ImportExport
  isExternal: true
  name: IExportOrigin
  nameWithType: IExportOrigin
  fullName: Sdl.Core.TM.ImportExport.IExportOrigin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EventHandler{Sdl.Core.TM.ImportExport.BatchExportedEventArgs}
  commentId: T:System.EventHandler{Sdl.Core.TM.ImportExport.BatchExportedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<BatchExportedEventArgs>
  nameWithType: EventHandler<BatchExportedEventArgs>
  fullName: System.EventHandler<Sdl.Core.TM.ImportExport.BatchExportedEventArgs>
  nameWithType.vb: EventHandler(Of BatchExportedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.Core.TM.ImportExport.BatchExportedEventArgs)
  name.vb: EventHandler(Of BatchExportedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.TM.ImportExport.BatchExportedEventArgs
    name: BatchExportedEventArgs
    nameWithType: BatchExportedEventArgs
    fullName: Sdl.Core.TM.ImportExport.BatchExportedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.TM.ImportExport.BatchExportedEventArgs
    name: BatchExportedEventArgs
    nameWithType: BatchExportedEventArgs
    fullName: Sdl.Core.TM.ImportExport.BatchExportedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<>
  nameWithType: EventHandler<>
  fullName: System.EventHandler<>
  nameWithType.vb: EventHandler(Of )
  fullName.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
