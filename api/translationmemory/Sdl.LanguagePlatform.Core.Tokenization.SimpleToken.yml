### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  id: SimpleToken
  parent: Sdl.LanguagePlatform.Core.Tokenization
  children:
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals(System.Object)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem
  - Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString
  langs:
  - csharp
  - vb
  name: SimpleToken
  nameWithType: SimpleToken
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nA <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.Token\" data-throw-if-not-resolved=\"false\"></xref> which represents a simple token, such as a word, whitespace,\nor punctuation.\n"
  syntax:
    content: 'public class SimpleToken : Token'
    content.vb: >-
      Public Class SimpleToken
          Inherits Token
  inheritance:
  - System.Object
  - Sdl.LanguagePlatform.Core.SegmentElement
  - Sdl.LanguagePlatform.Core.Tokenization.Token
  derivedClasses:
  - Sdl.LanguagePlatform.Core.Tokenization.GenericPlaceableToken
  inheritedMembers:
  - Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
  - Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  - Sdl.LanguagePlatform.Core.Tokenization.Token.TokenizationContext
  - Sdl.LanguagePlatform.Core.Tokenization.Token.Text
  - Sdl.LanguagePlatform.Core.Tokenization.Token.Span
  - Sdl.LanguagePlatform.Core.Tokenization.Token.Type
  - Sdl.LanguagePlatform.Core.Tokenization.Token.IsWord
  - Sdl.LanguagePlatform.Core.Tokenization.Token.IsPunctuation
  - Sdl.LanguagePlatform.Core.Tokenization.Token.IsWhitespace
  - Sdl.LanguagePlatform.Core.Tokenization.Token.Culture
  - Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement,System.Boolean)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: SimpleToken()
  nameWithType: SimpleToken.SimpleToken()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SimpleToken()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nInitializes a new instance with default values\n"
  syntax:
    content: public SimpleToken()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: SimpleToken(String)
  nameWithType: SimpleToken.SimpleToken(String)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SimpleToken(System.String)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nInitializes a new instance with the specified token text, and a token type \nof <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.TokenType.Word\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public SimpleToken(string text)
    parameters:
    - id: text
      type: System.String
    content.vb: Public Sub New(text As String)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)
  id: '#ctor(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)'
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: SimpleToken(SimpleToken)
  nameWithType: SimpleToken.SimpleToken(SimpleToken)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SimpleToken(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nInitializes a new instance with the values from another instance, creating a deep copy.\n"
  syntax:
    content: public SimpleToken(SimpleToken other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
      description: The instance to create a copy for
    content.vb: Public Sub New(other As SimpleToken)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  id: '#ctor(System.String,Sdl.LanguagePlatform.Core.Tokenization.TokenType)'
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: SimpleToken(String, TokenType)
  nameWithType: SimpleToken.SimpleToken(String, TokenType)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SimpleToken(System.String, Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nInitializes a new instance with the specified values.\n"
  syntax:
    content: public SimpleToken(string text, TokenType t)
    parameters:
    - id: text
      type: System.String
      description: The token text
    - id: t
      type: Sdl.LanguagePlatform.Core.Tokenization.TokenType
      description: The token type
    content.vb: Public Sub New(text As String, t As TokenType)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate
  id: Duplicate
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: Duplicate()
  nameWithType: SimpleToken.Duplicate()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.SegmentElement.Duplicate\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override SegmentElement Duplicate()
    return:
      type: Sdl.LanguagePlatform.Core.SegmentElement
      description: A new instance that is a deep copy of this instance.
    content.vb: Public Overrides Function Duplicate As SegmentElement
  overridden: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  id: SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: SetTokenType(TokenType)
  nameWithType: SimpleToken.SetTokenType(TokenType)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nOverwrites the token type. This should only be done with caution, and to reclassify \nexchangeable token types (acronyms, words, abbreviations). In particular, do not set\nthe token type to one of the special (localizable) token types.\n"
  syntax:
    content: protected override void SetTokenType(TokenType tokenType)
    parameters:
    - id: tokenType
      type: Sdl.LanguagePlatform.Core.Tokenization.TokenType
    content.vb: Protected Overrides Sub SetTokenType(tokenType As TokenType)
  overridden: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType
  id: GetTokenType
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: GetTokenType()
  nameWithType: SimpleToken.GetTokenType()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"Sdl.LanguagePlatform.Core.Tokenization.Token.Type\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: protected override TokenType GetTokenType()
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.TokenType
    content.vb: Protected Overrides Function GetTokenType As TokenType
  overridden: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  id: GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: GetSimilarity(SegmentElement)
  nameWithType: SimpleToken.GetSimilarity(SegmentElement)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override SegmentElement.Similarity GetSimilarity(SegmentElement other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.SegmentElement
      description: The other instance.
    return:
      type: Sdl.LanguagePlatform.Core.SegmentElement.Similarity
      description: A value indicating the degree of similarity to the provided segment element.
    content.vb: Public Overrides Function GetSimilarity(other As SegmentElement) As SegmentElement.Similarity
  overridden: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SimpleToken.Equals(Object)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"System.Object.Equals(object)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: >
        true if the specified object is equal to the current object;

        otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SimpleToken.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"System.Object.GetHashCode(object)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SimpleToken.ToString()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  id: AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: AcceptSegmentElementVisitor(ISegmentElementVisitor)
  nameWithType: SimpleToken.AcceptSegmentElementVisitor(ISegmentElementVisitor)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nVisitor pattern implementation. Calls <xref href=\"Sdl.LanguagePlatform.Core.ISegmentElementVisitor.VisitSimpleToken(Sdl.LanguagePlatform.Core.Tokenization.SimpleToken)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public override void AcceptSegmentElementVisitor(ISegmentElementVisitor visitor)
    parameters:
    - id: visitor
      type: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
      description: The visitor instance
    content.vb: Public Overrides Sub AcceptSegmentElementVisitor(visitor As ISegmentElementVisitor)
  overridden: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable
  id: IsPlaceable
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: IsPlaceable
  nameWithType: SimpleToken.IsPlaceable
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable\" data-throw-if-not-resolved=\"false\"></xref>. Returns <code>true</code> if the token represents\nan acronym, a variable, a URI, or a generic text placeable.\n"
  syntax:
    content: public override bool IsPlaceable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsPlaceable As Boolean
  overridden: Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable
  id: IsSubstitutable
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: IsSubstitutable
  nameWithType: SimpleToken.IsSubstitutable
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\n<xref href=\"Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable\" data-throw-if-not-resolved=\"false\"></xref>. Returns <code>true</code> if this token represents\na variable.\n"
  syntax:
    content: public override bool IsSubstitutable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsSubstitutable As Boolean
  overridden: Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem
  id: Stem
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: Stem
  nameWithType: SimpleToken.Stem
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nAn optional stem to assign to this token. Stems are used for TM search and scoring.\n"
  syntax:
    content: public string Stem { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Stem As String
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword
  id: IsStopword
  parent: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  langs:
  - csharp
  - vb
  name: IsStopword
  nameWithType: SimpleToken.IsStopword
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nGets or sets whether this token is a stop word\n"
  syntax:
    content: public bool IsStopword { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsStopword As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Tokenization
  commentId: N:Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Tokenization
  nameWithType: Sdl.LanguagePlatform.Core.Tokenization
  fullName: Sdl.LanguagePlatform.Core.Tokenization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.LanguagePlatform.Core.SegmentElement
  commentId: T:Sdl.LanguagePlatform.Core.SegmentElement
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentElement
  nameWithType: SegmentElement
  fullName: Sdl.LanguagePlatform.Core.SegmentElement
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.Token
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Token
  nameWithType: Token
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: GetWeakHashCode()
  nameWithType: Token.GetWeakHashCode()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode()
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
    name: GetWeakHashCode
    nameWithType: Token.GetWeakHashCode
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
    name: GetWeakHashCode
    nameWithType: Token.GetWeakHashCode
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetWeakHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: GetBundleSimilarity(SegmentElement)
  nameWithType: Token.GetBundleSimilarity(SegmentElement)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
    name: GetBundleSimilarity
    nameWithType: Token.GetBundleSimilarity
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
    name: GetBundleSimilarity
    nameWithType: Token.GetBundleSimilarity
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetBundleSimilarity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.TokenizationContext
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.TokenizationContext
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: TokenizationContext
  nameWithType: Token.TokenizationContext
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.TokenizationContext
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Text
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.Text
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: Text
  nameWithType: Token.Text
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Text
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Span
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.Span
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: Span
  nameWithType: Token.Span
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Span
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Type
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.Type
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: Type
  nameWithType: Token.Type
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Type
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.IsWord
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsWord
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: IsWord
  nameWithType: Token.IsWord
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.IsWord
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.IsPunctuation
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPunctuation
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: IsPunctuation
  nameWithType: Token.IsPunctuation
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.IsPunctuation
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.IsWhitespace
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsWhitespace
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: IsWhitespace
  nameWithType: Token.IsWhitespace
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.IsWhitespace
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Culture
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.Culture
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: Culture
  nameWithType: Token.Culture
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Culture
- uid: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.SegmentElement
  isExternal: true
  name: GetSimilarity(SegmentElement, Boolean)
  nameWithType: SegmentElement.GetSimilarity(SegmentElement, Boolean)
  fullName: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement, System.Boolean)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement,System.Boolean)
    name: GetSimilarity
    nameWithType: SegmentElement.GetSimilarity
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement,System.Boolean)
    name: GetSimilarity
    nameWithType: SegmentElement.GetSimilarity
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.#ctor
  isExternal: true
  name: SimpleToken
  nameWithType: SimpleToken.SimpleToken
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SimpleToken
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: SimpleToken
  nameWithType: SimpleToken
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken
- uid: Sdl.LanguagePlatform.Core.Tokenization.TokenType
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.TokenType
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: TokenType
  nameWithType: TokenType
  fullName: Sdl.LanguagePlatform.Core.Tokenization.TokenType
- uid: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
  commentId: M:Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
  parent: Sdl.LanguagePlatform.Core.SegmentElement
  isExternal: true
  name: Duplicate()
  nameWithType: SegmentElement.Duplicate()
  fullName: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate()
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
    name: Duplicate
    nameWithType: SegmentElement.Duplicate
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
    name: Duplicate
    nameWithType: SegmentElement.Duplicate
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.Duplicate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate
  isExternal: true
  name: Duplicate
  nameWithType: SimpleToken.Duplicate
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Duplicate
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: SetTokenType(TokenType)
  nameWithType: Token.SetTokenType(TokenType)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
    name: SetTokenType
    nameWithType: Token.SetTokenType
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.Tokenization.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: Sdl.LanguagePlatform.Core.Tokenization.TokenType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType(Sdl.LanguagePlatform.Core.Tokenization.TokenType)
    name: SetTokenType
    nameWithType: Token.SetTokenType
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.SetTokenType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.Tokenization.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: Sdl.LanguagePlatform.Core.Tokenization.TokenType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType
  isExternal: true
  name: SetTokenType
  nameWithType: SimpleToken.SetTokenType
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.SetTokenType
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: GetTokenType()
  nameWithType: Token.GetTokenType()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType()
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
    name: GetTokenType
    nameWithType: Token.GetTokenType
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
    name: GetTokenType
    nameWithType: Token.GetTokenType
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetTokenType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType
  isExternal: true
  name: GetTokenType
  nameWithType: SimpleToken.GetTokenType
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetTokenType
- uid: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  parent: Sdl.LanguagePlatform.Core.SegmentElement
  isExternal: true
  name: GetSimilarity(SegmentElement)
  nameWithType: SegmentElement.GetSimilarity(SegmentElement)
  fullName: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
    name: GetSimilarity
    nameWithType: SegmentElement.GetSimilarity
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity(Sdl.LanguagePlatform.Core.SegmentElement)
    name: GetSimilarity
    nameWithType: SegmentElement.GetSimilarity
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.GetSimilarity
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity
  isExternal: true
  name: GetSimilarity
  nameWithType: SimpleToken.GetSimilarity
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetSimilarity
- uid: Sdl.LanguagePlatform.Core.SegmentElement.Similarity
  commentId: T:Sdl.LanguagePlatform.Core.SegmentElement.Similarity
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentElement.Similarity
  nameWithType: SegmentElement.Similarity
  fullName: Sdl.LanguagePlatform.Core.SegmentElement.Similarity
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: Equals(Object)
  nameWithType: Token.Equals(Object)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)
    name: Equals
    nameWithType: Token.Equals
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals(System.Object)
    name: Equals
    nameWithType: Token.Equals
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals
  isExternal: true
  name: Equals
  nameWithType: SimpleToken.Equals
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: GetHashCode()
  nameWithType: Token.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode()
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
    name: GetHashCode
    nameWithType: Token.GetHashCode
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
    name: GetHashCode
    nameWithType: Token.GetHashCode
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: SimpleToken.GetHashCode
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString
  isExternal: true
  name: ToString
  nameWithType: SimpleToken.ToString
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.ToString
- uid: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  parent: Sdl.LanguagePlatform.Core.SegmentElement
  isExternal: true
  name: AcceptSegmentElementVisitor(ISegmentElementVisitor)
  nameWithType: SegmentElement.AcceptSegmentElementVisitor(ISegmentElementVisitor)
  fullName: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
    name: AcceptSegmentElementVisitor
    nameWithType: SegmentElement.AcceptSegmentElementVisitor
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
    name: ISegmentElementVisitor
    nameWithType: ISegmentElementVisitor
    fullName: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor(Sdl.LanguagePlatform.Core.ISegmentElementVisitor)
    name: AcceptSegmentElementVisitor
    nameWithType: SegmentElement.AcceptSegmentElementVisitor
    fullName: Sdl.LanguagePlatform.Core.SegmentElement.AcceptSegmentElementVisitor
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
    name: ISegmentElementVisitor
    nameWithType: ISegmentElementVisitor
    fullName: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor
  isExternal: true
  name: AcceptSegmentElementVisitor
  nameWithType: SimpleToken.AcceptSegmentElementVisitor
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.AcceptSegmentElementVisitor
- uid: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
  commentId: T:Sdl.LanguagePlatform.Core.ISegmentElementVisitor
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: ISegmentElementVisitor
  nameWithType: ISegmentElementVisitor
  fullName: Sdl.LanguagePlatform.Core.ISegmentElementVisitor
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: IsPlaceable
  nameWithType: Token.IsPlaceable
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.IsPlaceable
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable
  isExternal: true
  name: IsPlaceable
  nameWithType: SimpleToken.IsPlaceable
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsPlaceable
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable
  parent: Sdl.LanguagePlatform.Core.Tokenization.Token
  isExternal: true
  name: IsSubstitutable
  nameWithType: Token.IsSubstitutable
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token.IsSubstitutable
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable
  isExternal: true
  name: IsSubstitutable
  nameWithType: SimpleToken.IsSubstitutable
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsSubstitutable
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem
  isExternal: true
  name: Stem
  nameWithType: SimpleToken.Stem
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.Stem
- uid: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword
  isExternal: true
  name: IsStopword
  nameWithType: SimpleToken.IsStopword
  fullName: Sdl.LanguagePlatform.Core.Tokenization.SimpleToken.IsStopword
