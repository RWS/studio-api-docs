### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SearchResults
  id: SearchResults
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add(Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual(Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings,System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom(Sdl.LanguagePlatform.TranslationMemory.SearchResults)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrder
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrderConcordance
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults,System.Boolean)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults},System.Collections.Generic.IEnumerable{System.Boolean},Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean})
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(System.String)
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator
  - Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: SearchResults
  nameWithType: SearchResults
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRepresents a set of results returned by the translation memory after a search operation for a given input (segment/translation unit/string).\n"
  syntax:
    content: 'public class SearchResults : IEnumerable<SearchResult>, IEnumerable'
    content.vb: >-
      Public Class SearchResults
          Implements IEnumerable(Of SearchResult), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.LanguagePlatform.TranslationMemory.SearchResultsMerged
  - Sdl.LanguagePlatform.TranslationMemory.SegmentAndSubsegmentSearchResults
  implements:
  - System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrder
  commentId: F:Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrder
  id: DefaultSortOrder
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: DefaultSortOrder
  nameWithType: SearchResults.DefaultSortOrder
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrder
  type: Field
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nThe default sort order, in string representation, for normal searches. The\nprimary sort key is the score (descending), the secondary sort key is the \nuse count (descending), and the tertiary sort key is the use date (descending).\n"
  syntax:
    content: public static readonly string DefaultSortOrder
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultSortOrder As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrderConcordance
  commentId: F:Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrderConcordance
  id: DefaultSortOrderConcordance
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: DefaultSortOrderConcordance
  nameWithType: SearchResults.DefaultSortOrderConcordance
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DefaultSortOrderConcordance
  type: Field
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nThe default sort order, in string representation, for concordance searches. The\nprimary sort key is the score (descending), the secondary sort key is the \nchange date (descending), and the tertiary sort key is the use count (descending).\n"
  syntax:
    content: public static readonly string DefaultSortOrderConcordance
    return:
      type: System.String
    content.vb: Public Shared ReadOnly DefaultSortOrderConcordance As String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom(Sdl.LanguagePlatform.TranslationMemory.SearchResults)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom(Sdl.LanguagePlatform.TranslationMemory.SearchResults)
  id: CopyFrom(Sdl.LanguagePlatform.TranslationMemory.SearchResults)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: CopyFrom(SearchResults)
  nameWithType: SearchResults.CopyFrom(SearchResults)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom(Sdl.LanguagePlatform.TranslationMemory.SearchResults)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\n\n"
  syntax:
    content: protected void CopyFrom(SearchResults r)
    parameters:
    - id: r
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResults
    content.vb: Protected Sub CopyFrom(r As SearchResults)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: SearchResults()
  nameWithType: SearchResults.SearchResults()
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResults()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance with default values.\n"
  syntax:
    content: public SearchResults()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  id: '#ctor(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)'
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: SearchResults(SortSpecification)
  nameWithType: SearchResults.SearchResults(SortSpecification)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResults(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nInitializes a new instance with the specified sort order.\n"
  syntax:
    content: public SearchResults(SortSpecification defaultSortOrder)
    parameters:
    - id: defaultSortOrder
      type: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
      description: The default sort order.
    content.vb: Public Sub New(defaultSortOrder As SortSpecification)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  id: Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Sort(SortSpecification)
  nameWithType: SearchResults.Sort(SortSpecification)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nSorts the results in this instance based on the specified sort order.\n"
  syntax:
    content: public void Sort(SortSpecification sortOrder)
    parameters:
    - id: sortOrder
      type: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
      description: The sort order. If null, the default sort order will be used.
    content.vb: Public Sub Sort(sortOrder As SortSpecification)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer)
  id: Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification,Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Sort(SortSpecification, SearchResults.SearchResultComparer)
  nameWithType: SearchResults.Sort(SortSpecification, SearchResults.SearchResultComparer)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(Sdl.LanguagePlatform.TranslationMemory.SortSpecification, Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nSorts the results in this instance based on the specified sort order.\n"
  syntax:
    content: public void Sort(SortSpecification sortOrder, SearchResults.SearchResultComparer disambiguator)
    parameters:
    - id: sortOrder
      type: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
      description: The sort order. If null, the default sort order will be used.
    - id: disambiguator
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer
      description: "An optional, caller-defined delegate which will be called \nto disambiguate the sort order of two search results in case their sort order is not fully\ndetermined by the normal sort criteria.\n"
    content.vb: Public Sub Sort(sortOrder As SortSpecification, disambiguator As SearchResults.SearchResultComparer)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(System.String)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(System.String)
  id: Sort(System.String)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Sort(String)
  nameWithType: SearchResults.Sort(String)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nSorts the results in this instance based on the specified sort order.\n"
  syntax:
    content: public void Sort(string sortOrder)
    parameters:
    - id: sortOrder
      type: System.String
      description: "The sort order, in its string representation. If null, \nthe default sort order will be used."
    content.vb: Public Sub Sort(sortOrder As String)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort
  id: Sort
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: SearchResults.Sort()
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nSorts the results in this instance using the currently set sort order (see <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder\" data-throw-if-not-resolved=\"false\"></xref>),\nor the default sort order if no sort order is set.\n"
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults,System.Boolean)
  id: Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults,System.Boolean)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Merge(SearchResults, Boolean)
  nameWithType: SearchResults.Merge(SearchResults, Boolean)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nAppends addtional search results to the current list of search results. Note that other fields, such as \nthe source tokens or the source word count, are not merged (although they may differ for cross-TM\nsearches).\n"
  syntax:
    content: public void Merge(SearchResults other, bool removeDuplicates)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResults
      description: The search results to merge with the current results.
    - id: removeDuplicates
      type: System.Boolean
      description: >-
        If true, a heuristics is applied to remove duplicates. The original

        sort order is preserved, but the multiple translations information is re-evaluated.
    content.vb: Public Sub Merge(other As SearchResults, removeDuplicates As Boolean)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults},System.Collections.Generic.IEnumerable{System.Boolean},Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults},System.Collections.Generic.IEnumerable{System.Boolean},Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  id: PostMergeFixup(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults},System.Collections.Generic.IEnumerable{System.Boolean},Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: PostMergeFixup(IEnumerable<SearchResults>, IEnumerable<Boolean>, SearchSettings)
  nameWithType: SearchResults.PostMergeFixup(IEnumerable<SearchResults>, IEnumerable<Boolean>, SearchSettings)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup(System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResults>, System.Collections.Generic.IEnumerable<System.Boolean>, Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nWhen a search is performed on a batch of document segments for a single TM, TM search logic\ndeals with any logic spanning multiple segments, e.g. context match rules. However, when\nresults from multiple TMs are merged together, <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\nis generally used, once per document segment, which does not allow for that logic to\nbe applied. This function should be used on a list of document segment <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults\" data-throw-if-not-resolved=\"false\"></xref>\nonce all <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge(Sdl.LanguagePlatform.TranslationMemory.SearchResults%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> calls have been performed.\n"
  remarks: See https://jira.sdl.com/browse/LCC-12742
  syntax:
    content: public static void PostMergeFixup(IEnumerable<SearchResults> searchResultsPerSegment, IEnumerable<bool> searchMask, SearchSettings settings)
    parameters:
    - id: searchResultsPerSegment
      type: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults}
      description: The ordered list of <xref href="Sdl.LanguagePlatform.TranslationMemory.SearchResults" data-throw-if-not-resolved="false"></xref>, one per document segment (including possible null values e.g. for masked segments)
    - id: searchMask
      type: System.Collections.Generic.IEnumerable{System.Boolean}
      description: Any mask used when performing the search over document segments
    - id: settings
      type: Sdl.LanguagePlatform.TranslationMemory.SearchSettings
      description: The settings used for performing the search
    content.vb: Public Shared Sub PostMergeFixup(searchResultsPerSegment As IEnumerable(Of SearchResults), searchMask As IEnumerable(Of Boolean), settings As SearchSettings)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup*
  nameWithType.vb: SearchResults.PostMergeFixup(IEnumerable(Of SearchResults), IEnumerable(Of Boolean), SearchSettings)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup(System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.SearchResults), System.Collections.Generic.IEnumerable(Of System.Boolean), Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  name.vb: PostMergeFixup(IEnumerable(Of SearchResults), IEnumerable(Of Boolean), SearchSettings)
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap(System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap(System.Int32)
  id: Cap(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Cap(Int32)
  nameWithType: SearchResults.Cap(Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap(System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nCaps the number of search results to at most <code data-dev-comment-type=\"paramref\" class=\"paramref\">maxCapacity</code> elements. If the object holds \nless than the maximum number, this method has no effect.\n"
  syntax:
    content: public void Cap(int maxCapacity)
    parameters:
    - id: maxCapacity
      type: System.Int32
    content.vb: Public Sub Cap(maxCapacity As Integer)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  id: CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: CheckForMultipleTranslations(SearchSettings)
  nameWithType: SearchResults.CheckForMultipleTranslations(SearchSettings)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nCount the number of exact matches in the result and set the <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations\" data-throw-if-not-resolved=\"false\"></xref> \nflag and penalty accordingly. \nThis is only valid for normal searches; nothing will be changed for concordance searches.\n"
  syntax:
    content: public void CheckForMultipleTranslations(SearchSettings settings)
    parameters:
    - id: settings
      type: Sdl.LanguagePlatform.TranslationMemory.SearchSettings
    content.vb: Public Sub CheckForMultipleTranslations(settings As SearchSettings)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings,System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings,System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  id: CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings,System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: CheckForMultipleTranslations(SearchSettings, List<SearchResult>)
  nameWithType: SearchResults.CheckForMultipleTranslations(SearchSettings, List<SearchResult>)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings, System.Collections.Generic.List<Sdl.LanguagePlatform.TranslationMemory.SearchResult>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nCount the number of exact matches in the result and set the <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations\" data-throw-if-not-resolved=\"false\"></xref> \nflag and penalty accordingly. \nThis is only valid for normal searches; nothing will be changed for concordance searches.\n"
  syntax:
    content: public void CheckForMultipleTranslations(SearchSettings settings, List<SearchResult> searchResults)
    parameters:
    - id: settings
      type: Sdl.LanguagePlatform.TranslationMemory.SearchSettings
    - id: searchResults
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
    content.vb: Public Sub CheckForMultipleTranslations(settings As SearchSettings, searchResults As List(Of SearchResult))
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations*
  nameWithType.vb: SearchResults.CheckForMultipleTranslations(SearchSettings, List(Of SearchResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations(Sdl.LanguagePlatform.TranslationMemory.SearchSettings, System.Collections.Generic.List(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult))
  name.vb: CheckForMultipleTranslations(SearchSettings, List(Of SearchResult))
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add(Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add(Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  id: Add(Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Add(SearchResult)
  nameWithType: SearchResults.Add(SearchResult)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add(Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nAdds a new search result to the collection.\n"
  syntax:
    content: public virtual void Add(SearchResult result)
    parameters:
    - id: result
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    content.vb: Public Overridable Sub Add(result As SearchResult)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId(System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId(System.Int32)
  id: HasTuId(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: HasTuId(Int32)
  nameWithType: SearchResults.HasTuId(Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId(System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns true if any <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResult\" data-throw-if-not-resolved=\"false\"></xref> in\n<xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results\" data-throw-if-not-resolved=\"false\"></xref> has a <xref href=\"Sdl.LanguagePlatform.TranslationMemory.SearchResult.MemoryTranslationUnit\" data-throw-if-not-resolved=\"false\"></xref>\nwhose ID matches the one provided\n"
  syntax:
    content: public bool HasTuId(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function HasTuId(id As Integer) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates
  id: RemoveDuplicates
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: RemoveDuplicates()
  nameWithType: SearchResults.RemoveDuplicates()
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves any duplicate search results. The duplicate with the lowest index\nis kept, and other duplicates are removed. \n"
  syntax:
    content: public void RemoveDuplicates()
    content.vb: Public Sub RemoveDuplicates
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean})
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean})
  id: RemoveAll(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean})
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: RemoveAll(Func<SearchResult, Boolean>)
  nameWithType: SearchResults.RemoveAll(Func<SearchResult, Boolean>)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll(System.Func<Sdl.LanguagePlatform.TranslationMemory.SearchResult, System.Boolean>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves all the elements that match the condition defined by the specified predicate\n"
  syntax:
    content: public int RemoveAll(Func<SearchResult, bool> predicate)
    parameters:
    - id: predicate
      type: System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean}
      description: the predicate to use
    return:
      type: System.Int32
    content.vb: Public Function RemoveAll(predicate As Func(Of SearchResult, Boolean)) As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll*
  nameWithType.vb: SearchResults.RemoveAll(Func(Of SearchResult, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll(System.Func(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult, System.Boolean))
  name.vb: RemoveAll(Func(Of SearchResult, Boolean))
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  id: RemoveDuplicates(System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult})
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: RemoveDuplicates(Func<SearchResult, SearchResult, SearchResult>)
  nameWithType: SearchResults.RemoveDuplicates(Func<SearchResult, SearchResult, SearchResult>)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates(System.Func<Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves any duplicate search results.\n"
  syntax:
    content: public void RemoveDuplicates(Func<SearchResult, SearchResult, SearchResult> GetSearchResultToRemove)
    parameters:
    - id: GetSearchResultToRemove
      type: System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult}
      description: >-
        determines which search result to remove;

        null should be passed if neither search result should be removed
    content.vb: Public Sub RemoveDuplicates(GetSearchResultToRemove As Func(Of SearchResult, SearchResult, SearchResult))
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates*
  nameWithType.vb: SearchResults.RemoveDuplicates(Func(Of SearchResult, SearchResult, SearchResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates(System.Func(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult))
  name.vb: RemoveDuplicates(Func(Of SearchResult, SearchResult, SearchResult))
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual(Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual(Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  id: AreEqual(Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: AreEqual(SearchResult, SearchResult)
  nameWithType: SearchResults.AreEqual(SearchResult, SearchResult)
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual(Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nDetermines whether two search results are equal, by comparing the segments of the\nmemory translation units.\n"
  syntax:
    content: public static bool AreEqual(SearchResult result1, SearchResult result2)
    parameters:
    - id: result1
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResult
      description: result1
    - id: result2
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResult
      description: results2
    return:
      type: System.Boolean
      description: whether search results are equal
    content.vb: Public Shared Function AreEqual(result1 As SearchResult, result2 As SearchResult) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SearchResults.Clear()
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nRemoves all results.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: SearchResults.IEnumerable.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns an enumerator to iterate through the list of search results.\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SearchResults.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator
  isEii: true
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: IEnumerable<SearchResult>.GetEnumerator()
  nameWithType: SearchResults.IEnumerable<SearchResult>.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nReturns an enumerator to iterate through the list of search results.\n"
  syntax:
    content: IEnumerator<SearchResult> IEnumerable<SearchResult>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
    content.vb: Function System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator As IEnumerator(Of SearchResult) Implements IEnumerable(Of SearchResult).GetEnumerator
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}.GetEnumerator
  nameWithType.vb: SearchResults.System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results
  id: Results
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Results
  nameWithType: SearchResults.Results
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the sesarch results.\n"
  syntax:
    content: public List<SearchResult> Results { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
    content.vb: Public Property Results As List(Of SearchResult)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder
  id: SortOrder
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: SortOrder
  nameWithType: SearchResults.SortOrder
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the sort order. The search results are not re-sorted if this\nfield is set. To re-sort, call Sort() after setting the value.\n"
  syntax:
    content: public SortSpecification SortOrder { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
    content.vb: Public Property SortOrder As SortSpecification
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations
  id: MultipleTranslations
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: MultipleTranslations
  nameWithType: SearchResults.MultipleTranslations
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the flag whether there exist multiple exact matches in the result set. Note that there also is a MultipleTranslationsPenalty\nin each match result. However, the penalty will only be set if the malus is > 0, but the MultipleTrnaslations flag will \nbe set independently.\n"
  syntax:
    content: public bool MultipleTranslations { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property MultipleTranslations As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts
  id: SourceWordCounts
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: SourceWordCounts
  nameWithType: SearchResults.SourceWordCounts
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the source word counts for this instance.\n"
  syntax:
    content: public WordCounts SourceWordCounts { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.WordCounts
    content.vb: Public Property SourceWordCounts As WordCounts
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables
  id: DocumentPlaceables
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: DocumentPlaceables
  nameWithType: SearchResults.DocumentPlaceables
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the source segment placeables. The value is usually set by \nthe search engine.\n"
  syntax:
    content: public List<Placeable> DocumentPlaceables { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.Placeable}
    content.vb: Public Property DocumentPlaceables As List(Of Placeable)
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment
  id: SourceSegment
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: SourceSegment
  nameWithType: SearchResults.SourceSegment
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the document source segment for this instance. The value\nis set by the search engine.\n"
  syntax:
    content: public Segment SourceSegment { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segment
    content.vb: Public Property SourceSegment As Segment
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count
  id: Count
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SearchResults.Count
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets the number of results in this instance.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash
  id: SourceHash
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: SourceHash
  nameWithType: SearchResults.SourceHash
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the source segment&apos;s hash value.\n"
  syntax:
    content: public long SourceHash { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property SourceHash As Long
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item(System.Int32)
  commentId: P:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item(System.Int32)
  id: Item(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SearchResults.Item[Int32]
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item[System.Int32]
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGets or sets the search results at the specified index in the collection.\n"
  syntax:
    content: public SearchResult this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.SearchResult
      description: The SearchResult at the specified index.
    content.vb: Public Property Item(index As Integer) As SearchResult
  overload: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item*
  nameWithType.vb: SearchResults.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SearchResult>
  nameWithType: IEnumerable<SearchResult>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>
  nameWithType.vb: IEnumerable(Of SearchResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  name.vb: IEnumerable(Of SearchResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom
  isExternal: true
  name: CopyFrom
  nameWithType: SearchResults.CopyFrom
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CopyFrom
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SearchResults
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SearchResults
  nameWithType: SearchResults
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.#ctor
  isExternal: true
  name: SearchResults
  nameWithType: SearchResults.SearchResults
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResults
- uid: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SortSpecification
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SortSpecification
  nameWithType: SortSpecification
  fullName: Sdl.LanguagePlatform.TranslationMemory.SortSpecification
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort
  isExternal: true
  name: Sort
  nameWithType: SearchResults.Sort
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Sort
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SearchResults.SearchResultComparer
  nameWithType: SearchResults.SearchResultComparer
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SearchResultComparer
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge
  isExternal: true
  name: Merge
  nameWithType: SearchResults.Merge
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Merge
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup
  isExternal: true
  name: PostMergeFixup
  nameWithType: SearchResults.PostMergeFixup
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.PostMergeFixup
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResults}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SearchResults>
  nameWithType: IEnumerable<SearchResults>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResults>
  nameWithType.vb: IEnumerable(Of SearchResults)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.SearchResults)
  name.vb: IEnumerable(Of SearchResults)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults
    name: SearchResults
    nameWithType: SearchResults
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults
    name: SearchResults
    nameWithType: SearchResults
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Boolean}
  commentId: T:System.Collections.Generic.IEnumerable{System.Boolean}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Boolean>
  nameWithType: IEnumerable<Boolean>
  fullName: System.Collections.Generic.IEnumerable<System.Boolean>
  nameWithType.vb: IEnumerable(Of Boolean)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Boolean)
  name.vb: IEnumerable(Of Boolean)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchSettings
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SearchSettings
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SearchSettings
  nameWithType: SearchSettings
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchSettings
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap
  isExternal: true
  name: Cap
  nameWithType: SearchResults.Cap
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Cap
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations
  isExternal: true
  name: CheckForMultipleTranslations
  nameWithType: SearchResults.CheckForMultipleTranslations
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.CheckForMultipleTranslations
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SearchResult>
  nameWithType: List<SearchResult>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.TranslationMemory.SearchResult>
  nameWithType.vb: List(Of SearchResult)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  name.vb: List(Of SearchResult)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add
  isExternal: true
  name: Add
  nameWithType: SearchResults.Add
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Add
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.SearchResult
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: SearchResult
  nameWithType: SearchResult
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId
  isExternal: true
  name: HasTuId
  nameWithType: SearchResults.HasTuId
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.HasTuId
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates
  isExternal: true
  name: RemoveDuplicates
  nameWithType: SearchResults.RemoveDuplicates
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveDuplicates
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll
  isExternal: true
  name: RemoveAll
  nameWithType: SearchResults.RemoveAll
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.RemoveAll
- uid: System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean}
  commentId: T:System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<SearchResult, Boolean>
  nameWithType: Func<SearchResult, Boolean>
  fullName: System.Func<Sdl.LanguagePlatform.TranslationMemory.SearchResult, System.Boolean>
  nameWithType.vb: Func(Of SearchResult, Boolean)
  fullName.vb: System.Func(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult, System.Boolean)
  name.vb: Func(Of SearchResult, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  commentId: T:System.Func{Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult,Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  parent: System
  definition: System.Func`3
  name: Func<SearchResult, SearchResult, SearchResult>
  nameWithType: Func<SearchResult, SearchResult, SearchResult>
  fullName: System.Func<Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult>
  nameWithType.vb: Func(Of SearchResult, SearchResult, SearchResult)
  fullName.vb: System.Func(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult, Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  name.vb: Func(Of SearchResult, SearchResult, SearchResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual
  isExternal: true
  name: AreEqual
  nameWithType: SearchResults.AreEqual
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.AreEqual
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear
  isExternal: true
  name: Clear
  nameWithType: SearchResults.Clear
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Clear
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: SearchResults.IEnumerable.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: SearchResults.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.System#Collections#Generic#IEnumerable{Sdl#LanguagePlatform#TranslationMemory#SearchResult}#GetEnumerator
  isExternal: true
  name: IEnumerable<SearchResult>.GetEnumerator
  nameWithType: SearchResults.IEnumerable<SearchResult>.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator
  nameWithType.vb: SearchResults.System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<SearchResult>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of SearchResult).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<SearchResult>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.TranslationMemory.SearchResult>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of SearchResult).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  commentId: T:System.Collections.Generic.IEnumerator{Sdl.LanguagePlatform.TranslationMemory.SearchResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<SearchResult>
  nameWithType: IEnumerator<SearchResult>
  fullName: System.Collections.Generic.IEnumerator<Sdl.LanguagePlatform.TranslationMemory.SearchResult>
  nameWithType.vb: IEnumerator(Of SearchResult)
  fullName.vb: System.Collections.Generic.IEnumerator(Of Sdl.LanguagePlatform.TranslationMemory.SearchResult)
  name.vb: IEnumerator(Of SearchResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results
  isExternal: true
  name: Results
  nameWithType: SearchResults.Results
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Results
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder
  isExternal: true
  name: SortOrder
  nameWithType: SearchResults.SortOrder
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SortOrder
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations
  isExternal: true
  name: MultipleTranslations
  nameWithType: SearchResults.MultipleTranslations
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.MultipleTranslations
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts
  isExternal: true
  name: SourceWordCounts
  nameWithType: SearchResults.SourceWordCounts
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceWordCounts
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCounts
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.WordCounts
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: WordCounts
  nameWithType: WordCounts
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounts
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables
  isExternal: true
  name: DocumentPlaceables
  nameWithType: SearchResults.DocumentPlaceables
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.DocumentPlaceables
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.Placeable}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.TranslationMemory.Placeable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Placeable>
  nameWithType: List<Placeable>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.TranslationMemory.Placeable>
  nameWithType.vb: List(Of Placeable)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.TranslationMemory.Placeable)
  name.vb: List(Of Placeable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.Placeable
    name: Placeable
    nameWithType: Placeable
    fullName: Sdl.LanguagePlatform.TranslationMemory.Placeable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.Placeable
    name: Placeable
    nameWithType: Placeable
    fullName: Sdl.LanguagePlatform.TranslationMemory.Placeable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment
  isExternal: true
  name: SourceSegment
  nameWithType: SearchResults.SourceSegment
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceSegment
- uid: Sdl.LanguagePlatform.Core.Segment
  commentId: T:Sdl.LanguagePlatform.Core.Segment
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Segment
  nameWithType: Segment
  fullName: Sdl.LanguagePlatform.Core.Segment
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count
  isExternal: true
  name: Count
  nameWithType: SearchResults.Count
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Count
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash
  isExternal: true
  name: SourceHash
  nameWithType: SearchResults.SourceHash
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.SourceHash
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item
  isExternal: true
  name: Item
  nameWithType: SearchResults.Item
  fullName: Sdl.LanguagePlatform.TranslationMemory.SearchResults.Item
