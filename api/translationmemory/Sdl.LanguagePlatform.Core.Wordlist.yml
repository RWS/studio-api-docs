### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Wordlist
  commentId: T:Sdl.LanguagePlatform.Core.Wordlist
  id: Wordlist
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.Wordlist.#ctor
  - Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.SearchOption)
  - Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.Wordlist)
  - Sdl.LanguagePlatform.Core.Wordlist.Add(System.String)
  - Sdl.LanguagePlatform.Core.Wordlist.CleanupList(System.String,System.String,System.Boolean)
  - Sdl.LanguagePlatform.Core.Wordlist.Clear
  - Sdl.LanguagePlatform.Core.Wordlist.Clone
  - Sdl.LanguagePlatform.Core.Wordlist.Contains(System.String)
  - Sdl.LanguagePlatform.Core.Wordlist.Count
  - Sdl.LanguagePlatform.Core.Wordlist.Flags
  - Sdl.LanguagePlatform.Core.Wordlist.GetBytes
  - Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression(Sdl.LanguagePlatform.Core.CharacterSet@)
  - Sdl.LanguagePlatform.Core.Wordlist.Items
  - Sdl.LanguagePlatform.Core.Wordlist.Load(System.Byte[],System.Boolean)
  - Sdl.LanguagePlatform.Core.Wordlist.Load(System.IO.Stream,System.Boolean)
  - Sdl.LanguagePlatform.Core.Wordlist.Load(System.String,System.Boolean)
  - Sdl.LanguagePlatform.Core.Wordlist.Merge(Sdl.LanguagePlatform.Core.Wordlist)
  - Sdl.LanguagePlatform.Core.Wordlist.Merge(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist})
  - Sdl.LanguagePlatform.Core.Wordlist.Remove(System.String)
  - Sdl.LanguagePlatform.Core.Wordlist.Save(System.IO.TextWriter)
  - Sdl.LanguagePlatform.Core.Wordlist.Version
  langs:
  - csharp
  - vb
  name: Wordlist
  nameWithType: Wordlist
  fullName: Sdl.LanguagePlatform.Core.Wordlist
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nA searchable word list with index.\n"
  syntax:
    content: 'public class Wordlist : ICloneable'
    content.vb: >-
      Public Class Wordlist
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Wordlist.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Wordlist()
  nameWithType: Wordlist.Wordlist()
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Wordlist()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance of the Wordlist class with an empty wordlist.\n"
  syntax:
    content: public Wordlist()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Wordlist.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.SearchOption)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.SearchOption)
  id: '#ctor(Sdl.LanguagePlatform.Core.SearchOption)'
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Wordlist(SearchOption)
  nameWithType: Wordlist.Wordlist(SearchOption)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Wordlist(Sdl.LanguagePlatform.Core.SearchOption)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance of the Wordlist class with an empty wordlist.\n"
  syntax:
    content: public Wordlist(SearchOption flags)
    parameters:
    - id: flags
      type: Sdl.LanguagePlatform.Core.SearchOption
    content.vb: Public Sub New(flags As SearchOption)
  overload: Sdl.LanguagePlatform.Core.Wordlist.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.Wordlist)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.#ctor(Sdl.LanguagePlatform.Core.Wordlist)
  id: '#ctor(Sdl.LanguagePlatform.Core.Wordlist)'
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Wordlist(Wordlist)
  nameWithType: Wordlist.Wordlist(Wordlist)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Wordlist(Sdl.LanguagePlatform.Core.Wordlist)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCreates a new instance and deep-copies the other instance.\n"
  syntax:
    content: public Wordlist(Wordlist other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Wordlist
    content.vb: Public Sub New(other As Wordlist)
  overload: Sdl.LanguagePlatform.Core.Wordlist.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Contains(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Contains(System.String)
  id: Contains(System.String)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Contains(String)
  nameWithType: Wordlist.Contains(String)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Contains(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether this wordlist contains the specified string.\n"
  syntax:
    content: public bool Contains(string s)
    parameters:
    - id: s
      type: System.String
      description: The string to search for.
    return:
      type: System.Boolean
      description: true if s is part of this wordlist, otherwise false.
    content.vb: Public Function Contains(s As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.Wordlist.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Clear
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Wordlist.Clear()
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Clear()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves all words from the list, but keeps the flags.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.LanguagePlatform.Core.Wordlist.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Merge(Sdl.LanguagePlatform.Core.Wordlist)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Merge(Sdl.LanguagePlatform.Core.Wordlist)
  id: Merge(Sdl.LanguagePlatform.Core.Wordlist)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Merge(Wordlist)
  nameWithType: Wordlist.Merge(Wordlist)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Merge(Sdl.LanguagePlatform.Core.Wordlist)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nMerges the contents of another instance into this word list. Note that conflicting\nflags and search options are ignored.\n"
  syntax:
    content: public void Merge(Wordlist other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Wordlist
      description: The instance to merge into this instance.
    content.vb: Public Sub Merge(other As Wordlist)
  overload: Sdl.LanguagePlatform.Core.Wordlist.Merge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Merge(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist})
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Merge(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist})
  id: Merge(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist})
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Merge(IEnumerable<Wordlist>)
  nameWithType: Wordlist.Merge(IEnumerable<Wordlist>)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Merge(System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.Wordlist>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCreates a new word list and merges all specified wordLists into the new one. \n"
  syntax:
    content: public static Wordlist Merge(IEnumerable<Wordlist> wordLists)
    parameters:
    - id: wordLists
      type: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist}
      description: The word lists to merge.
    return:
      type: Sdl.LanguagePlatform.Core.Wordlist
      description: The result of the merge, or null if all specified word lists are null.
    content.vb: Public Shared Function Merge(wordLists As IEnumerable(Of Wordlist)) As Wordlist
  overload: Sdl.LanguagePlatform.Core.Wordlist.Merge*
  nameWithType.vb: Wordlist.Merge(IEnumerable(Of Wordlist))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.Wordlist.Merge(System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.Wordlist))
  name.vb: Merge(IEnumerable(Of Wordlist))
- uid: Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression(Sdl.LanguagePlatform.Core.CharacterSet@)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression(Sdl.LanguagePlatform.Core.CharacterSet@)
  id: GetRegularExpression(Sdl.LanguagePlatform.Core.CharacterSet@)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: GetRegularExpression(out CharacterSet)
  nameWithType: Wordlist.GetRegularExpression(out CharacterSet)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression(out Sdl.LanguagePlatform.Core.CharacterSet)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nComputes a <xref href=\"System.Text.RegularExpressions.Regex?text=regular+expression\" data-throw-if-not-resolved=\"false\"></xref> \nwhich matches the words in the list. The expression is not anchored.\n<p>\nNOTE: if the word list is case insensitive, the regular expression will include the \ncorresponding option &quot;(?i-:)&quot;. \n</p>\n"
  syntax:
    content: public string GetRegularExpression(out CharacterSet first)
    parameters:
    - id: first
      type: Sdl.LanguagePlatform.Core.CharacterSet
    return:
      type: System.String
    content.vb: Public Function GetRegularExpression(ByRef first As CharacterSet) As String
  overload: Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression*
  nameWithType.vb: Wordlist.GetRegularExpression(ByRef CharacterSet)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression(ByRef Sdl.LanguagePlatform.Core.CharacterSet)
  name.vb: GetRegularExpression(ByRef CharacterSet)
- uid: Sdl.LanguagePlatform.Core.Wordlist.Add(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Add(System.String)
  id: Add(System.String)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Add(String)
  nameWithType: Wordlist.Add(String)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Add(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAdds a new string to this wordlist if it isn&apos;t already there.\n"
  syntax:
    content: public bool Add(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.Boolean
      description: true iff the word was added
    content.vb: Public Function Add(s As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.Wordlist.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Remove(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Remove(System.String)
  id: Remove(System.String)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: Wordlist.Remove(String)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Remove(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves <code data-dev-comment-type=\"paramref\" class=\"paramref\">s</code> from the list.\n"
  syntax:
    content: public bool Remove(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.Boolean
      description: true iff the word was removed
    content.vb: Public Function Remove(s As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.Wordlist.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Save(System.IO.TextWriter)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Save(TextWriter)
  nameWithType: Wordlist.Save(TextWriter)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Save(System.IO.TextWriter)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nSaves the word list in textual format to the specified stream.\n"
  syntax:
    content: public void Save(TextWriter writer)
    parameters:
    - id: writer
      type: System.IO.TextWriter
    content.vb: Public Sub Save(writer As TextWriter)
  overload: Sdl.LanguagePlatform.Core.Wordlist.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.CleanupList(System.String,System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.CleanupList(System.String,System.String,System.Boolean)
  id: CleanupList(System.String,System.String,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: CleanupList(String, String, Boolean)
  nameWithType: Wordlist.CleanupList(String, String, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.CleanupList(System.String, System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nLoads a word list from the specified input file, removes all duplicates, and writes the result\nto the output file. The two file names should not be the same. Only used internally.\n"
  syntax:
    content: public static void CleanupList(string inputFileName, string outputFileName, bool ignoreComments = true)
    parameters:
    - id: inputFileName
      type: System.String
      description: The input file name
    - id: outputFileName
      type: System.String
      description: The output file name
    - id: ignoreComments
      type: System.Boolean
      description: Ignore comments flag, if not set it is true
    content.vb: Public Shared Sub CleanupList(inputFileName As String, outputFileName As String, ignoreComments As Boolean = True)
  overload: Sdl.LanguagePlatform.Core.Wordlist.CleanupList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.Wordlist.Load(System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Load(System.String,System.Boolean)
  id: Load(System.String,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Load(String, Boolean)
  nameWithType: Wordlist.Load(String, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Load(System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAdds new words to this wordlist from a stream. A UTF8 data encoding is assumed, but byte order\nmarks will be honored.\n"
  syntax:
    content: public void Load(string filename, bool ignoreComments = true)
    parameters:
    - id: filename
      type: System.String
      description: The name of the file to load
    - id: ignoreComments
      type: System.Boolean
      description: Ignore comments flag, if not set it is true
    content.vb: Public Sub Load(filename As String, ignoreComments As Boolean = True)
  overload: Sdl.LanguagePlatform.Core.Wordlist.Load*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Load(System.IO.Stream,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Load(System.IO.Stream,System.Boolean)
  id: Load(System.IO.Stream,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Load(Stream, Boolean)
  nameWithType: Wordlist.Load(Stream, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Load(System.IO.Stream, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAdds new words to this wordlist from a stream. A UTF8 data encoding is assumed, but byte order\nmarks will be honored.\n"
  syntax:
    content: public void Load(Stream stream, bool ignoreComments = true)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream.
    - id: ignoreComments
      type: System.Boolean
      description: Ignore comments flag, if not set it is true
    content.vb: Public Sub Load(stream As Stream, ignoreComments As Boolean = True)
  overload: Sdl.LanguagePlatform.Core.Wordlist.Load*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Load(System.Byte[],System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Load(System.Byte[],System.Boolean)
  id: Load(System.Byte[],System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Load(Byte[], Boolean)
  nameWithType: Wordlist.Load(Byte[], Boolean)
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Load(System.Byte[], System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRead the word list from an array of bytes. A UTF8 encoding is assumed, but byte order\nmarks will be honored.\n"
  syntax:
    content: public void Load(byte[] data, bool ignoreComments = true)
    parameters:
    - id: data
      type: System.Byte[]
    - id: ignoreComments
      type: System.Boolean
      description: Ignore comments flag, if not set it is true
    content.vb: Public Sub Load(data As Byte(), ignoreComments As Boolean = True)
  overload: Sdl.LanguagePlatform.Core.Wordlist.Load*
  nameWithType.vb: Wordlist.Load(Byte(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Wordlist.Load(System.Byte(), System.Boolean)
  name.vb: Load(Byte(), Boolean)
- uid: Sdl.LanguagePlatform.Core.Wordlist.GetBytes
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.GetBytes
  id: GetBytes
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: GetBytes()
  nameWithType: Wordlist.GetBytes()
  fullName: Sdl.LanguagePlatform.Core.Wordlist.GetBytes()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the contents of the word list as an array of bytes. The data is UTF8-encoded. Note\nthat search flags (such as case invariance) are not preserved.\n"
  syntax:
    content: public byte[] GetBytes()
    return:
      type: System.Byte[]
      description: An array of bytes which represents the word list.
    content.vb: Public Function GetBytes As Byte()
  overload: Sdl.LanguagePlatform.Core.Wordlist.GetBytes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Wordlist.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Wordlist.Clone()
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.ICloneable.Clone\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: A new object that is a deep copy of this instance.
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Wordlist.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Wordlist.Version
  commentId: P:Sdl.LanguagePlatform.Core.Wordlist.Version
  id: Version
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: Wordlist.Version
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Version
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n\n"
  syntax:
    content: public int Version { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Version As Integer
  overload: Sdl.LanguagePlatform.Core.Wordlist.Version*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Wordlist.Flags
  commentId: P:Sdl.LanguagePlatform.Core.Wordlist.Flags
  id: Flags
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Flags
  nameWithType: Wordlist.Flags
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Flags
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets the search flags.\n"
  syntax:
    content: public SearchOption Flags { get; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.SearchOption
    content.vb: Public ReadOnly Property Flags As SearchOption
  overload: Sdl.LanguagePlatform.Core.Wordlist.Flags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Wordlist.Items
  commentId: P:Sdl.LanguagePlatform.Core.Wordlist.Items
  id: Items
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: Wordlist.Items
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Items
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets the list of words.\n"
  syntax:
    content: public IEnumerable<string> Items { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property Items As IEnumerable(Of String)
  overload: Sdl.LanguagePlatform.Core.Wordlist.Items*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Wordlist.Count
  commentId: P:Sdl.LanguagePlatform.Core.Wordlist.Count
  id: Count
  parent: Sdl.LanguagePlatform.Core.Wordlist
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Wordlist.Count
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the number of words in the word list.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.Core.Wordlist.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Wordlist.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.#ctor
  isExternal: true
  name: Wordlist
  nameWithType: Wordlist.Wordlist
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Wordlist
- uid: Sdl.LanguagePlatform.Core.SearchOption
  commentId: T:Sdl.LanguagePlatform.Core.SearchOption
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SearchOption
  nameWithType: SearchOption
  fullName: Sdl.LanguagePlatform.Core.SearchOption
- uid: Sdl.LanguagePlatform.Core.Wordlist
  commentId: T:Sdl.LanguagePlatform.Core.Wordlist
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Wordlist
  nameWithType: Wordlist
  fullName: Sdl.LanguagePlatform.Core.Wordlist
- uid: Sdl.LanguagePlatform.Core.Wordlist.Contains*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Contains
  isExternal: true
  name: Contains
  nameWithType: Wordlist.Contains
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Contains
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Wordlist.Clear*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Clear
  isExternal: true
  name: Clear
  nameWithType: Wordlist.Clear
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Clear
- uid: Sdl.LanguagePlatform.Core.Wordlist.Merge*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Merge
  isExternal: true
  name: Merge
  nameWithType: Wordlist.Merge
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Merge
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Wordlist}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Wordlist>
  nameWithType: IEnumerable<Wordlist>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.Wordlist>
  nameWithType.vb: IEnumerable(Of Wordlist)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.Wordlist)
  name.vb: IEnumerable(Of Wordlist)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Wordlist
    name: Wordlist
    nameWithType: Wordlist
    fullName: Sdl.LanguagePlatform.Core.Wordlist
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Wordlist
    name: Wordlist
    nameWithType: Wordlist
    fullName: Sdl.LanguagePlatform.Core.Wordlist
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression
  isExternal: true
  name: GetRegularExpression
  nameWithType: Wordlist.GetRegularExpression
  fullName: Sdl.LanguagePlatform.Core.Wordlist.GetRegularExpression
- uid: Sdl.LanguagePlatform.Core.CharacterSet
  commentId: T:Sdl.LanguagePlatform.Core.CharacterSet
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: CharacterSet
  nameWithType: CharacterSet
  fullName: Sdl.LanguagePlatform.Core.CharacterSet
- uid: Sdl.LanguagePlatform.Core.Wordlist.Add*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Add
  isExternal: true
  name: Add
  nameWithType: Wordlist.Add
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Add
- uid: Sdl.LanguagePlatform.Core.Wordlist.Remove*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Remove
  isExternal: true
  name: Remove
  nameWithType: Wordlist.Remove
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Remove
- uid: Sdl.LanguagePlatform.Core.Wordlist.Save*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Save
  isExternal: true
  name: Save
  nameWithType: Wordlist.Save
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Save
- uid: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Sdl.LanguagePlatform.Core.Wordlist.CleanupList*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.CleanupList
  isExternal: true
  name: CleanupList
  nameWithType: Wordlist.CleanupList
  fullName: Sdl.LanguagePlatform.Core.Wordlist.CleanupList
- uid: Sdl.LanguagePlatform.Core.Wordlist.Load*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Load
  isExternal: true
  name: Load
  nameWithType: Wordlist.Load
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Load
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.LanguagePlatform.Core.Wordlist.GetBytes*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.GetBytes
  isExternal: true
  name: GetBytes
  nameWithType: Wordlist.GetBytes
  fullName: Sdl.LanguagePlatform.Core.Wordlist.GetBytes
- uid: Sdl.LanguagePlatform.Core.Wordlist.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Clone
  isExternal: true
  name: Clone
  nameWithType: Wordlist.Clone
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Wordlist.Version*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Version
  isExternal: true
  name: Version
  nameWithType: Wordlist.Version
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Version
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.Wordlist.Flags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Flags
  isExternal: true
  name: Flags
  nameWithType: Wordlist.Flags
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Flags
- uid: Sdl.LanguagePlatform.Core.Wordlist.Items*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Items
  isExternal: true
  name: Items
  nameWithType: Wordlist.Items
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Items
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: '!:System.Collections.Generic.IEnumerable{System.String}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Wordlist.Count*
  commentId: Overload:Sdl.LanguagePlatform.Core.Wordlist.Count
  isExternal: true
  name: Count
  nameWithType: Wordlist.Count
  fullName: Sdl.LanguagePlatform.Core.Wordlist.Count
