### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader
  commentId: T:Sdl.LanguagePlatform.IO.MultiFileTextReader
  id: MultiFileTextReader
  parent: Sdl.LanguagePlatform.IO
  children:
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.IO.DirectoryInfo,System.String,System.Boolean)
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.IO.FileInfo[])
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.String[])
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.Close
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.Read
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.Read(System.Char[],System.Int32,System.Int32)
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd
  - Sdl.LanguagePlatform.IO.MultiFileTextReader.System#IDisposable#Dispose
  langs:
  - csharp
  - vb
  name: MultiFileTextReader
  nameWithType: MultiFileTextReader
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader
  type: Class
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nA text reader which virtually concatenates a number of text files and allows sequential reading from this file set.\n"
  syntax:
    content: 'public class MultiFileTextReader : TextReader, IDisposable'
    content.vb: >-
      Public Class MultiFileTextReader
          Inherits TextReader
          Implements IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.TextReader
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.IO.TextReader.Null
  - System.IO.TextReader.Dispose
  - System.IO.TextReader.Dispose(System.Boolean)
  - System.IO.TextReader.ReadLineAsync
  - System.IO.TextReader.ReadToEndAsync
  - System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.Synchronized(System.IO.TextReader)
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.IO.FileInfo[])
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.IO.FileInfo[])
  id: '#ctor(System.IO.FileInfo[])'
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: MultiFileTextReader(FileInfo[])
  nameWithType: MultiFileTextReader.MultiFileTextReader(FileInfo[])
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.MultiFileTextReader(System.IO.FileInfo[])
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nInstantiates a MultiFileTextReader which works on the specified set of files. The files are opened with BOM sniffing\ndefaulting to UTF8 encoding.\n"
  syntax:
    content: public MultiFileTextReader(params FileInfo[] files)
    parameters:
    - id: files
      type: System.IO.FileInfo[]
    content.vb: Public Sub New(ParamArray files As FileInfo())
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor*
  nameWithType.vb: MultiFileTextReader.MultiFileTextReader(FileInfo())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.IO.MultiFileTextReader.MultiFileTextReader(System.IO.FileInfo())
  name.vb: MultiFileTextReader(FileInfo())
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.IO.DirectoryInfo,System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.IO.DirectoryInfo,System.String,System.Boolean)
  id: '#ctor(System.IO.DirectoryInfo,System.String,System.Boolean)'
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: MultiFileTextReader(DirectoryInfo, String, Boolean)
  nameWithType: MultiFileTextReader.MultiFileTextReader(DirectoryInfo, String, Boolean)
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.MultiFileTextReader(System.IO.DirectoryInfo, System.String, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nInstantiates a MultiFileTextReader which works on the files contained in the specified directory and its subdirectories.\n"
  syntax:
    content: public MultiFileTextReader(DirectoryInfo rootDirectory, string fileFilter, bool recurse)
    parameters:
    - id: rootDirectory
      type: System.IO.DirectoryInfo
      description: The directory in which to search for applicable files.
    - id: fileFilter
      type: System.String
      description: 'If non-null, only files which match the filter are added to the file set (see System.IO.DirectoryInfo.GetFiles()). '
    - id: recurse
      type: System.Boolean
      description: If true, subdirectories are scanned for matching false. Otherwise, only files in the specified root directory are considered.
    content.vb: Public Sub New(rootDirectory As DirectoryInfo, fileFilter As String, recurse As Boolean)
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.String[])
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: MultiFileTextReader(String[])
  nameWithType: MultiFileTextReader.MultiFileTextReader(String[])
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.MultiFileTextReader(System.String[])
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nInstantiates a MultiFileTextReader which works on the files or directories passed as the parameter. Directories\nare recursed into, files are opened UTF8 with BOM sniffing.\n"
  syntax:
    content: public MultiFileTextReader(params string[] filesOrDirectories)
    parameters:
    - id: filesOrDirectories
      type: System.String[]
      description: The set of file names or directory names to work on
    content.vb: Public Sub New(ParamArray filesOrDirectories As String())
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor*
  nameWithType.vb: MultiFileTextReader.MultiFileTextReader(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.IO.MultiFileTextReader.MultiFileTextReader(System.String())
  name.vb: MultiFileTextReader(String())
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek
  id: Peek
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: Peek()
  nameWithType: MultiFileTextReader.Peek()
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek()
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nNot implemented.\n"
  syntax:
    content: public override int Peek()
    return:
      type: System.Int32
      description: Always throws exception.
    content.vb: Public Overrides Function Peek As Integer
  overridden: System.IO.TextReader.Peek
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.Read
  id: Read
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: MultiFileTextReader.Read()
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read()
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nReads the next character from the set of input files, advances the current file as necessary.\n"
  syntax:
    content: public override int Read()
    return:
      type: System.Int32
      description: The next input character or -1 if EOF (of the concatenation) is reached.
    content.vb: Public Overrides Function Read As Integer
  overridden: System.IO.TextReader.Read
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read(System.Char[],System.Int32,System.Int32)
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: Read(Char[], Int32, Int32)
  nameWithType: MultiFileTextReader.Read(Char[], Int32, Int32)
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nReads a block of characters from the virtual concatenation of text files.\n"
  syntax:
    content: public override int Read(char[] buffer, int index, int count)
    parameters:
    - id: buffer
      type: System.Char[]
      description: The buffer to store the data in (see TextReader.Read())
    - id: index
      type: System.Int32
      description: The index to start storing characters in the buffer.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read
    return:
      type: System.Int32
      description: 0 on EOF, or the number of characters read which may be 0 &lt; n &lt;= count
    content.vb: Public Overrides Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
  overridden: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read*
  nameWithType.vb: MultiFileTextReader.Read(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  id: ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: ReadBlock(Char[], Int32, Int32)
  nameWithType: MultiFileTextReader.ReadBlock(Char[], Int32, Int32)
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nReads a block of characters from the virtual concatenation of text files.\n"
  syntax:
    content: public override int ReadBlock(char[] buffer, int index, int count)
    parameters:
    - id: buffer
      type: System.Char[]
      description: The buffer to store the data in (see TextReader.Read())
    - id: index
      type: System.Int32
      description: The index to start storing characters in the buffer
    - id: count
      type: System.Int32
      description: The number of characters to read
    return:
      type: System.Int32
      description: "The number of characters read. Unlike Read(buffer, index, count), this method\nwill always attempt to read count characters and will automatically advance to the next file \nif the current file does not contain enough data.\n"
    content.vb: Public Overrides Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer
  overridden: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock*
  nameWithType.vb: MultiFileTextReader.ReadBlock(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine
  id: ReadLine
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: ReadLine()
  nameWithType: MultiFileTextReader.ReadLine()
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine()
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nReads the next line of input from the concatenation of text files.\n"
  syntax:
    content: public override string ReadLine()
    return:
      type: System.String
    content.vb: Public Overrides Function ReadLine As String
  overridden: System.IO.TextReader.ReadLine
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd
  id: ReadToEnd
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: ReadToEnd()
  nameWithType: MultiFileTextReader.ReadToEnd()
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd()
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nNot implemented.\n"
  syntax:
    content: public override string ReadToEnd()
    return:
      type: System.String
      description: Always throws exception.
    content.vb: Public Overrides Function ReadToEnd As String
  overridden: System.IO.TextReader.ReadToEnd
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Close
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.Close
  id: Close
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: MultiFileTextReader.Close()
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Close()
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nCloses the overall file set. An attempt to read more data will lead to an exception.\n"
  syntax:
    content: public override void Close()
    content.vb: Public Overrides Sub Close
  overridden: System.IO.TextReader.Close
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.Close*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.System#IDisposable#Dispose
  commentId: M:Sdl.LanguagePlatform.IO.MultiFileTextReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: IDisposable.Dispose()
  nameWithType: MultiFileTextReader.IDisposable.Dispose()
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.System.IDisposable.Dispose()
  type: Method
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  syntax:
    content: void IDisposable.Dispose()
    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.System#IDisposable#Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: MultiFileTextReader.System.IDisposable.Dispose()
  name.vb: System.IDisposable.Dispose()
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile
  commentId: P:Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile
  id: CurrentFile
  parent: Sdl.LanguagePlatform.IO.MultiFileTextReader
  langs:
  - csharp
  - vb
  name: CurrentFile
  nameWithType: MultiFileTextReader.CurrentFile
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile
  type: Property
  source:
    path: Sdl.LanguagePlatform.IO
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.IO
  namespace: Sdl.LanguagePlatform.IO
  summary: "\nAllows access to the FileInfo of the currently worked-on file. If null, EOF has been reached.\n"
  syntax:
    content: public FileInfo CurrentFile { get; }
    parameters: []
    return:
      type: System.IO.FileInfo
    content.vb: Public ReadOnly Property CurrentFile As FileInfo
  overload: Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.LanguagePlatform.IO
  commentId: N:Sdl.LanguagePlatform.IO
  isExternal: true
  name: Sdl.LanguagePlatform.IO
  nameWithType: Sdl.LanguagePlatform.IO
  fullName: Sdl.LanguagePlatform.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IO.TextReader.Null
  commentId: F:System.IO.TextReader.Null
  parent: System.IO.TextReader
  isExternal: true
  name: "Null"
  nameWithType: TextReader.Null
  fullName: System.IO.TextReader.Null
- uid: System.IO.TextReader.Dispose
  commentId: M:System.IO.TextReader.Dispose
  parent: System.IO.TextReader
  isExternal: true
  name: Dispose()
  nameWithType: TextReader.Dispose()
  fullName: System.IO.TextReader.Dispose()
  spec.csharp:
  - uid: System.IO.TextReader.Dispose
    name: Dispose
    nameWithType: TextReader.Dispose
    fullName: System.IO.TextReader.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Dispose
    name: Dispose
    nameWithType: TextReader.Dispose
    fullName: System.IO.TextReader.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader.Dispose(System.Boolean)
  commentId: M:System.IO.TextReader.Dispose(System.Boolean)
  parent: System.IO.TextReader
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: TextReader.Dispose(Boolean)
  fullName: System.IO.TextReader.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextReader.Dispose(System.Boolean)
    name: Dispose
    nameWithType: TextReader.Dispose
    fullName: System.IO.TextReader.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Dispose(System.Boolean)
    name: Dispose
    nameWithType: TextReader.Dispose
    fullName: System.IO.TextReader.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader.ReadLineAsync
  commentId: M:System.IO.TextReader.ReadLineAsync
  parent: System.IO.TextReader
  isExternal: true
  name: ReadLineAsync()
  nameWithType: TextReader.ReadLineAsync()
  fullName: System.IO.TextReader.ReadLineAsync()
  spec.csharp:
  - uid: System.IO.TextReader.ReadLineAsync
    name: ReadLineAsync
    nameWithType: TextReader.ReadLineAsync
    fullName: System.IO.TextReader.ReadLineAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadLineAsync
    name: ReadLineAsync
    nameWithType: TextReader.ReadLineAsync
    fullName: System.IO.TextReader.ReadLineAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader.ReadToEndAsync
  commentId: M:System.IO.TextReader.ReadToEndAsync
  parent: System.IO.TextReader
  isExternal: true
  name: ReadToEndAsync()
  nameWithType: TextReader.ReadToEndAsync()
  fullName: System.IO.TextReader.ReadToEndAsync()
  spec.csharp:
  - uid: System.IO.TextReader.ReadToEndAsync
    name: ReadToEndAsync
    nameWithType: TextReader.ReadToEndAsync
    fullName: System.IO.TextReader.ReadToEndAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadToEndAsync
    name: ReadToEndAsync
    nameWithType: TextReader.ReadToEndAsync
    fullName: System.IO.TextReader.ReadToEndAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadAsync(Char[], Int32, Int32)
  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  nameWithType.vb: TextReader.ReadAsync(Char(), Int32, Int32)
  fullName.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: TextReader.ReadAsync
    fullName: System.IO.TextReader.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: TextReader.ReadAsync
    fullName: System.IO.TextReader.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadBlockAsync(Char[], Int32, Int32)
  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  nameWithType.vb: TextReader.ReadBlockAsync(Char(), Int32, Int32)
  fullName.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    name: ReadBlockAsync
    nameWithType: TextReader.ReadBlockAsync
    fullName: System.IO.TextReader.ReadBlockAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    name: ReadBlockAsync
    nameWithType: TextReader.ReadBlockAsync
    fullName: System.IO.TextReader.ReadBlockAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader.Synchronized(System.IO.TextReader)
  commentId: M:System.IO.TextReader.Synchronized(System.IO.TextReader)
  parent: System.IO.TextReader
  isExternal: true
  name: Synchronized(TextReader)
  nameWithType: TextReader.Synchronized(TextReader)
  fullName: System.IO.TextReader.Synchronized(System.IO.TextReader)
  spec.csharp:
  - uid: System.IO.TextReader.Synchronized(System.IO.TextReader)
    name: Synchronized
    nameWithType: TextReader.Synchronized
    fullName: System.IO.TextReader.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.TextReader
    name: TextReader
    nameWithType: TextReader
    fullName: System.IO.TextReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Synchronized(System.IO.TextReader)
    name: Synchronized
    nameWithType: TextReader.Synchronized
    fullName: System.IO.TextReader.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.TextReader
    name: TextReader
    nameWithType: TextReader
    fullName: System.IO.TextReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.InitializeLifetimeService
  commentId: M:System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: true
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)
  spec.csharp:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.#ctor
  isExternal: true
  name: MultiFileTextReader
  nameWithType: MultiFileTextReader.MultiFileTextReader
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.MultiFileTextReader
- uid: System.IO.FileInfo[]
  isExternal: true
  name: FileInfo[]
  nameWithType: FileInfo[]
  fullName: System.IO.FileInfo[]
  nameWithType.vb: FileInfo()
  fullName.vb: System.IO.FileInfo()
  name.vb: FileInfo()
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: System.IO.FileInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: System.IO.FileInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: true
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.TextReader.Peek
  commentId: M:System.IO.TextReader.Peek
  parent: System.IO.TextReader
  isExternal: true
  name: Peek()
  nameWithType: TextReader.Peek()
  fullName: System.IO.TextReader.Peek()
  spec.csharp:
  - uid: System.IO.TextReader.Peek
    name: Peek
    nameWithType: TextReader.Peek
    fullName: System.IO.TextReader.Peek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Peek
    name: Peek
    nameWithType: TextReader.Peek
    fullName: System.IO.TextReader.Peek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek
  isExternal: true
  name: Peek
  nameWithType: MultiFileTextReader.Peek
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Peek
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.TextReader.Read
  commentId: M:System.IO.TextReader.Read
  parent: System.IO.TextReader
  isExternal: true
  name: Read()
  nameWithType: TextReader.Read()
  fullName: System.IO.TextReader.Read()
  spec.csharp:
  - uid: System.IO.TextReader.Read
    name: Read
    nameWithType: TextReader.Read
    fullName: System.IO.TextReader.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Read
    name: Read
    nameWithType: TextReader.Read
    fullName: System.IO.TextReader.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.Read
  isExternal: true
  name: Read
  nameWithType: MultiFileTextReader.Read
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Read
- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: Read(Char[], Int32, Int32)
  nameWithType: TextReader.Read(Char[], Int32, Int32)
  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)
  nameWithType.vb: TextReader.Read(Char(), Int32, Int32)
  fullName.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
    name: Read
    nameWithType: TextReader.Read
    fullName: System.IO.TextReader.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
    name: Read
    nameWithType: TextReader.Read
    fullName: System.IO.TextReader.Read
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadBlock(Char[], Int32, Int32)
  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  nameWithType.vb: TextReader.ReadBlock(Char(), Int32, Int32)
  fullName.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    name: ReadBlock
    nameWithType: TextReader.ReadBlock
    fullName: System.IO.TextReader.ReadBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    name: ReadBlock
    nameWithType: TextReader.ReadBlock
    fullName: System.IO.TextReader.ReadBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock
  isExternal: true
  name: ReadBlock
  nameWithType: MultiFileTextReader.ReadBlock
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadBlock
- uid: System.IO.TextReader.ReadLine
  commentId: M:System.IO.TextReader.ReadLine
  parent: System.IO.TextReader
  isExternal: true
  name: ReadLine()
  nameWithType: TextReader.ReadLine()
  fullName: System.IO.TextReader.ReadLine()
  spec.csharp:
  - uid: System.IO.TextReader.ReadLine
    name: ReadLine
    nameWithType: TextReader.ReadLine
    fullName: System.IO.TextReader.ReadLine
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadLine
    name: ReadLine
    nameWithType: TextReader.ReadLine
    fullName: System.IO.TextReader.ReadLine
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine
  isExternal: true
  name: ReadLine
  nameWithType: MultiFileTextReader.ReadLine
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadLine
- uid: System.IO.TextReader.ReadToEnd
  commentId: M:System.IO.TextReader.ReadToEnd
  parent: System.IO.TextReader
  isExternal: true
  name: ReadToEnd()
  nameWithType: TextReader.ReadToEnd()
  fullName: System.IO.TextReader.ReadToEnd()
  spec.csharp:
  - uid: System.IO.TextReader.ReadToEnd
    name: ReadToEnd
    nameWithType: TextReader.ReadToEnd
    fullName: System.IO.TextReader.ReadToEnd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadToEnd
    name: ReadToEnd
    nameWithType: TextReader.ReadToEnd
    fullName: System.IO.TextReader.ReadToEnd
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd
  isExternal: true
  name: ReadToEnd
  nameWithType: MultiFileTextReader.ReadToEnd
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.ReadToEnd
- uid: System.IO.TextReader.Close
  commentId: M:System.IO.TextReader.Close
  parent: System.IO.TextReader
  isExternal: true
  name: Close()
  nameWithType: TextReader.Close()
  fullName: System.IO.TextReader.Close()
  spec.csharp:
  - uid: System.IO.TextReader.Close
    name: Close
    nameWithType: TextReader.Close
    fullName: System.IO.TextReader.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Close
    name: Close
    nameWithType: TextReader.Close
    fullName: System.IO.TextReader.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.Close*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.Close
  isExternal: true
  name: Close
  nameWithType: MultiFileTextReader.Close
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.Close
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.System#IDisposable#Dispose*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.System#IDisposable#Dispose
  isExternal: true
  name: IDisposable.Dispose
  nameWithType: MultiFileTextReader.IDisposable.Dispose
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.System.IDisposable.Dispose
  nameWithType.vb: MultiFileTextReader.System.IDisposable.Dispose
  name.vb: System.IDisposable.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile*
  commentId: Overload:Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile
  isExternal: true
  name: CurrentFile
  nameWithType: MultiFileTextReader.CurrentFile
  fullName: Sdl.LanguagePlatform.IO.MultiFileTextReader.CurrentFile
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: true
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
