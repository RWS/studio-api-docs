### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  commentId: T:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  id: IResourceDataAccessorAsync
  parent: Sdl.LanguagePlatform.Core.Resources
  children:
  - Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  - Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  - Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures(Sdl.LanguagePlatform.Core.Resources.LanguageResourceType)
  - Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  langs:
  - csharp
  - vb
  name: IResourceDataAccessorAsync
  nameWithType: IResourceDataAccessorAsync
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  type: Interface
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Resources
  syntax:
    content: public interface IResourceDataAccessorAsync
    content.vb: Public Interface IResourceDataAccessorAsync
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  id: GetResourceStatusAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  langs:
  - csharp
  - vb
  name: GetResourceStatusAsync(CultureCode, LanguageResourceType, Boolean)
  nameWithType: IResourceDataAccessorAsync.GetResourceStatusAsync(CultureCode, LanguageResourceType, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync(Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.LanguageResourceType, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Resources
  summary: "\nReturns the resource status for the specified resource and the specified culture.\n"
  syntax:
    content: Task<ResourceStatus> GetResourceStatusAsync(CultureCode culture, LanguageResourceType t, bool fallback)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The culture for which the status is requested.
    - id: t
      type: Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
      description: The language resource type which is requested.
    - id: fallback
      type: System.Boolean
      description: >-
        If true, a resource accessor may fallback to a more general

        culture. If false, no fallback may be performed.
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Resources.ResourceStatus}
      description: The resource status for the resource type and culture.
    content.vb: Function GetResourceStatusAsync(culture As CultureCode, t As LanguageResourceType, fallback As Boolean) As Task(Of ResourceStatus)
  overload: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync*
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  id: ReadResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  langs:
  - csharp
  - vb
  name: ReadResourceDataAsync(CultureCode, LanguageResourceType, Boolean)
  nameWithType: IResourceDataAccessorAsync.ReadResourceDataAsync(CultureCode, LanguageResourceType, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync(Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.LanguageResourceType, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Resources
  summary: "\nReturns the data stream for the specified resource type and culture. If an appropriate\nresource is not found, an exception is thrown and/or null is returned. Callers should\ncheck for both conditions, and check the resource status before the stream is requested.\n"
  syntax:
    content: Task<Stream> ReadResourceDataAsync(CultureCode culture, LanguageResourceType t, bool fallback)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The culture for which a resource is requested.
    - id: t
      type: Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
      description: The language resource type which is requested.
    - id: fallback
      type: System.Boolean
      description: >-
        If true, a resource accessor may fallback to a more general

        culture. If false, no fallback may be performed.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "A stream containing the data for the requested resource, or null if \nthe resource is not available (in which case callers may also throw an \nexception).\n"
    content.vb: Function ReadResourceDataAsync(culture As CultureCode, t As LanguageResourceType, fallback As Boolean) As Task(Of Stream)
  overload: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync*
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  id: GetResourceDataAsync(Sdl.Core.Globalization.CultureCode,Sdl.LanguagePlatform.Core.Resources.LanguageResourceType,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  langs:
  - csharp
  - vb
  name: GetResourceDataAsync(CultureCode, LanguageResourceType, Boolean)
  nameWithType: IResourceDataAccessorAsync.GetResourceDataAsync(CultureCode, LanguageResourceType, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync(Sdl.Core.Globalization.CultureCode, Sdl.LanguagePlatform.Core.Resources.LanguageResourceType, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Resources
  summary: "\nSimilar to <xref href=\"Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync(Sdl.Core.Globalization.CultureCode%2cSdl.LanguagePlatform.Core.Resources.LanguageResourceType%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> but returns the result as a byte array.\n"
  syntax:
    content: Task<byte[]> GetResourceDataAsync(CultureCode culture, LanguageResourceType t, bool fallback)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
    - id: t
      type: Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
    - id: fallback
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
    content.vb: Function GetResourceDataAsync(culture As CultureCode, t As LanguageResourceType, fallback As Boolean) As Task(Of Byte())
  overload: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync*
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures(Sdl.LanguagePlatform.Core.Resources.LanguageResourceType)
  commentId: M:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures(Sdl.LanguagePlatform.Core.Resources.LanguageResourceType)
  id: GetSupportedCultures(Sdl.LanguagePlatform.Core.Resources.LanguageResourceType)
  parent: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync
  langs:
  - csharp
  - vb
  name: GetSupportedCultures(LanguageResourceType)
  nameWithType: IResourceDataAccessorAsync.GetSupportedCultures(LanguageResourceType)
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures(Sdl.LanguagePlatform.Core.Resources.LanguageResourceType)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Resources
  summary: "\nReturns all cultures for which resources are found for the provided resource type.\n"
  syntax:
    content: List<CultureCode> GetSupportedCultures(LanguageResourceType t)
    parameters:
    - id: t
      type: Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
      description: The resource type
    return:
      type: System.Collections.Generic.List{Sdl.Core.Globalization.CultureCode}
      description: The list of cultures for which a resource of the specified type is available
    content.vb: Function GetSupportedCultures(t As LanguageResourceType) As List(Of CultureCode)
  overload: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures*
references:
- uid: Sdl.LanguagePlatform.Core.Resources
  commentId: N:Sdl.LanguagePlatform.Core.Resources
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Resources
  nameWithType: Sdl.LanguagePlatform.Core.Resources
  fullName: Sdl.LanguagePlatform.Core.Resources
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync
  isExternal: true
  name: GetResourceStatusAsync
  nameWithType: IResourceDataAccessorAsync.GetResourceStatusAsync
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceStatusAsync
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
  commentId: T:Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
  parent: Sdl.LanguagePlatform.Core.Resources
  isExternal: true
  name: LanguageResourceType
  nameWithType: LanguageResourceType
  fullName: Sdl.LanguagePlatform.Core.Resources.LanguageResourceType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Resources.ResourceStatus}
  commentId: T:System.Threading.Tasks.Task{Sdl.LanguagePlatform.Core.Resources.ResourceStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResourceStatus>
  nameWithType: Task<ResourceStatus>
  fullName: System.Threading.Tasks.Task<Sdl.LanguagePlatform.Core.Resources.ResourceStatus>
  nameWithType.vb: Task(Of ResourceStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.LanguagePlatform.Core.Resources.ResourceStatus)
  name.vb: Task(Of ResourceStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Resources.ResourceStatus
    name: ResourceStatus
    nameWithType: ResourceStatus
    fullName: Sdl.LanguagePlatform.Core.Resources.ResourceStatus
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Resources.ResourceStatus
    name: ResourceStatus
    nameWithType: ResourceStatus
    fullName: Sdl.LanguagePlatform.Core.Resources.ResourceStatus
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync
  isExternal: true
  name: ReadResourceDataAsync
  nameWithType: IResourceDataAccessorAsync.ReadResourceDataAsync
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.ReadResourceDataAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync
  isExternal: true
  name: GetResourceDataAsync
  nameWithType: IResourceDataAccessorAsync.GetResourceDataAsync
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetResourceDataAsync
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullName.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures*
  commentId: Overload:Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures
  isExternal: true
  name: GetSupportedCultures
  nameWithType: IResourceDataAccessorAsync.GetSupportedCultures
  fullName: Sdl.LanguagePlatform.Core.Resources.IResourceDataAccessorAsync.GetSupportedCultures
- uid: System.Collections.Generic.List{Sdl.Core.Globalization.CultureCode}
  commentId: T:System.Collections.Generic.List{Sdl.Core.Globalization.CultureCode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CultureCode>
  nameWithType: List<CultureCode>
  fullName: System.Collections.Generic.List<Sdl.Core.Globalization.CultureCode>
  nameWithType.vb: List(Of CultureCode)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.Globalization.CultureCode)
  name.vb: List(Of CultureCode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    nameWithType: CultureCode
    fullName: Sdl.Core.Globalization.CultureCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    nameWithType: CultureCode
    fullName: Sdl.Core.Globalization.CultureCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
