### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  id: KeyBasedCollection`2
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  children:
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor(System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Add(`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Clear
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains(`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ContainsKey(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.CopyTo(`1[],System.Int32)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Count
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{`0,`1})
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals(System.Object)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ForEach(System.Action{`1})
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetEnumerator
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetHashCode
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetKeyFor(`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IndexOf(`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Insert(System.Int32,`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IsReadOnly
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.KeyMap
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.OnItemAdded(`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove(`1)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.RemoveAt(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.System#Collections#IEnumerable#GetEnumerator
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ThreadSafeListHandler
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.TryGetValue(`0)
  langs:
  - csharp
  - vb
  name: KeyBasedCollection<TKey, TValue>
  nameWithType: KeyBasedCollection<TKey, TValue>
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nA <xref href=\"Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection%602\" data-throw-if-not-resolved=\"false\"></xref> implementation.\n"
  syntax:
    content: 'public class KeyBasedCollection<TKey, TValue> : IList<TValue>, ICollection<TValue>, IEnumerable<TValue>, IEnumerable, IEquatable<KeyBasedCollection<TKey, TValue>>'
    typeParameters:
    - id: TKey
      description: The key.
    - id: TValue
      description: The value.
    content.vb: >-
      Public Class KeyBasedCollection(Of TKey, TValue)
          Implements IList(Of TValue), ICollection(Of TValue), IEnumerable(Of TValue), IEnumerable, IEquatable(Of KeyBasedCollection(Of TKey, TValue))
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ParagraphUnitCollection
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Skeleton.SkeletonCollection`1
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Skeleton.SubContentCollection
  implements:
  - System.Collections.Generic.IList{{TValue}}
  - System.Collections.Generic.ICollection{{TValue}}
  - System.Collections.Generic.IEnumerable{{TValue}}
  - System.Collections.IEnumerable
  - System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue)
  name.vb: KeyBasedCollection(Of TKey, TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ThreadSafeListHandler
  commentId: F:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ThreadSafeListHandler
  id: ThreadSafeListHandler
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: ThreadSafeListHandler
  nameWithType: KeyBasedCollection<TKey, TValue>.ThreadSafeListHandler
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.ThreadSafeListHandler
  type: Field
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nThe thread-safe list  handler that backs the items of the collection.\n"
  syntax:
    content: protected readonly ThreadSafeListHandler<TValue> ThreadSafeListHandler
    return:
      type: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler{{TValue}}
    content.vb: Protected ReadOnly ThreadSafeListHandler As ThreadSafeListHandler(Of TValue)
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).ThreadSafeListHandler
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).ThreadSafeListHandler
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.KeyMap
  commentId: F:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.KeyMap
  id: KeyMap
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: KeyMap
  nameWithType: KeyBasedCollection<TKey, TValue>.KeyMap
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.KeyMap
  type: Field
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nA map of keys to the values from the items held by the <xref href=\"Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection%602.ThreadSafeListHandler\" data-throw-if-not-resolved=\"false\"></xref>> respecting the key selector.\n"
  syntax:
    content: protected readonly ConcurrentDictionary<TKey, TValue> KeyMap
    return:
      type: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
    content.vb: Protected ReadOnly KeyMap As ConcurrentDictionary(Of TKey, TValue)
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).KeyMap
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).KeyMap
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  id: '#ctor(System.Collections.Generic.IEnumerable{`1},System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)'
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: KeyBasedCollection(IEnumerable<TValue>, Func<TValue, TKey>, Func<TValue, IEnumerable<TValue>, (Boolean IsValid, String ErrorReason)>, Boolean)
  nameWithType: KeyBasedCollection<TKey, TValue>.KeyBasedCollection(IEnumerable<TValue>, Func<TValue, TKey>, Func<TValue, IEnumerable<TValue>, (Boolean IsValid, String ErrorReason)>, Boolean)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.KeyBasedCollection(System.Collections.Generic.IEnumerable<TValue>, System.Func<TValue, TKey>, System.Func<TValue, System.Collections.Generic.IEnumerable<TValue>, System.ValueTuple<System.Boolean, System.String>>, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nInstantiates a new instance of the <xref href=\"Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public KeyBasedCollection(IEnumerable<TValue> items, Func<TValue, TKey> keySelector, Func<TValue, IEnumerable<TValue>, (bool IsValid, string ErrorReason)> itemValidator = null, bool allowDefault = false)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{TValue}}
      description: The items to be used for initial seeding of the collection
    - id: keySelector
      type: System.Func{{TValue},{TKey}}
      description: The key selector used to map the items.
    - id: itemValidator
      type: System.Func{{TValue},System.Collections.Generic.IEnumerable{{TValue}},System.ValueTuple{System.Boolean,System.String}}
      description: Optional validator to be applied when items are added/inserted/replaced in the collection
    - id: allowDefault
      type: System.Boolean
      description: Tells if default values are allowed for the items. Defaults to not allow default values. This check has precedence over the validator if both are present.
    content.vb: Public Sub New(items As IEnumerable(Of TValue), keySelector As Func(Of TValue, TKey), itemValidator As Func(Of TValue, IEnumerable(Of TValue), (IsValid As Boolean, ErrorReason As String)(Of Boolean , String)) = Nothing, allowDefault As Boolean = False)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).KeyBasedCollection(IEnumerable(Of TValue), Func(Of TValue, TKey), Func(Of TValue, IEnumerable(Of TValue), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).KeyBasedCollection(System.Collections.Generic.IEnumerable(Of TValue), System.Func(Of TValue, TKey), System.Func(Of TValue, System.Collections.Generic.IEnumerable(Of TValue), System.ValueTuple(Of System.Boolean, System.String)), System.Boolean)
  name.vb: KeyBasedCollection(IEnumerable(Of TValue), Func(Of TValue, TKey), Func(Of TValue, IEnumerable(Of TValue), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor(System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor(System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  id: '#ctor(System.Func{`1,`0},System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}},System.Boolean)'
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: KeyBasedCollection(Func<TValue, TKey>, Func<TValue, IEnumerable<TValue>, (Boolean IsValid, String ErrorReason)>, Boolean)
  nameWithType: KeyBasedCollection<TKey, TValue>.KeyBasedCollection(Func<TValue, TKey>, Func<TValue, IEnumerable<TValue>, (Boolean IsValid, String ErrorReason)>, Boolean)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.KeyBasedCollection(System.Func<TValue, TKey>, System.Func<TValue, System.Collections.Generic.IEnumerable<TValue>, System.ValueTuple<System.Boolean, System.String>>, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nInstantiates a new instance of the <xref href=\"Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public KeyBasedCollection(Func<TValue, TKey> keySelector, Func<TValue, IEnumerable<TValue>, (bool IsValid, string ErrorReason)> itemValidator = null, bool allowDefault = false)
    parameters:
    - id: keySelector
      type: System.Func{{TValue},{TKey}}
      description: The key selector used to map the items.
    - id: itemValidator
      type: System.Func{{TValue},System.Collections.Generic.IEnumerable{{TValue}},System.ValueTuple{System.Boolean,System.String}}
      description: Optional validator to be applied when items are added/inserted/replaced in the collection
    - id: allowDefault
      type: System.Boolean
      description: Tells if default values are allowed for the items. Defaults to not allow default values. This check has precedence over the validator if both are present.
    content.vb: Public Sub New(keySelector As Func(Of TValue, TKey), itemValidator As Func(Of TValue, IEnumerable(Of TValue), (IsValid As Boolean, ErrorReason As String)(Of Boolean , String)) = Nothing, allowDefault As Boolean = False)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).KeyBasedCollection(Func(Of TValue, TKey), Func(Of TValue, IEnumerable(Of TValue), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).KeyBasedCollection(System.Func(Of TValue, TKey), System.Func(Of TValue, System.Collections.Generic.IEnumerable(Of TValue), System.ValueTuple(Of System.Boolean, System.String)), System.Boolean)
  name.vb: KeyBasedCollection(Func(Of TValue, TKey), Func(Of TValue, IEnumerable(Of TValue), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.OnItemAdded(`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.OnItemAdded(`1)
  id: OnItemAdded(`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: OnItemAdded(TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.OnItemAdded(TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.OnItemAdded(TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nExtension point for derived classes to perform additional operations when an item is added to the collection.\nHas no default implementation.\n"
  syntax:
    content: protected virtual void OnItemAdded(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
      description: The item that was just added to the collection.
    content.vb: Protected Overridable Sub OnItemAdded(item As TValue)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.OnItemAdded*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).OnItemAdded(TValue)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).OnItemAdded(TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ForEach(System.Action{`1})
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ForEach(System.Action{`1})
  id: ForEach(System.Action{`1})
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: ForEach(Action<TValue>)
  nameWithType: KeyBasedCollection<TKey, TValue>.ForEach(Action<TValue>)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.ForEach(System.Action<TValue>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nExecutes an action over each element of the collection.\n"
  syntax:
    content: public void ForEach(Action<TValue> action)
    parameters:
    - id: action
      type: System.Action{{TValue}}
      description: The action.
    content.vb: Public Sub ForEach(action As Action(Of TValue))
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ForEach*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).ForEach(Action(Of TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).ForEach(System.Action(Of TValue))
  name.vb: ForEach(Action(Of TValue))
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{`0,`1})
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{`0,`1})
  id: Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{`0,`1})
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Equals(KeyBasedCollection<TKey, TValue>)
  nameWithType: KeyBasedCollection<TKey, TValue>.Equals(KeyBasedCollection<TKey, TValue>)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  syntax:
    content: public bool Equals(KeyBasedCollection<TKey, TValue> other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: "\n<xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> if the current object is equal to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> parameter; otherwise, <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.\n"
    content.vb: Public Function Equals(other As KeyBasedCollection(Of TKey, TValue)) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals*
  implements:
  - System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{{TKey},{TValue}})
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Equals(KeyBasedCollection(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue))
  name.vb: Equals(KeyBasedCollection(Of TKey, TValue))
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals(System.Object)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: KeyBasedCollection<TKey, TValue>.Equals(Object)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Equals(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nPerforms a deep-equals comparison.        \n<xref href=\"System.Object.Equals(object)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Equals(System.Object)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetHashCode
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: KeyBasedCollection<TKey, TValue>.GetHashCode()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nReturns a hash code for this instance.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: "\nA hash code for this instance.\n"
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetHashCode*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).GetHashCode()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.TryGetValue(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.TryGetValue(`0)
  id: TryGetValue(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey)
  nameWithType: KeyBasedCollection<TKey, TValue>.TryGetValue(TKey)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.TryGetValue(TKey)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTries to get the value for the given key.\nDoes not fail if the key is not found.\n"
  syntax:
    content: public TValue TryGetValue(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key used to lookup a value.
    return:
      type: '{TValue}'
      description: The value matching the key, if present. Returns the default of the value type otherwise.
    content.vb: Public Function TryGetValue(key As TKey) As TValue
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.TryGetValue*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).TryGetValue(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).TryGetValue(TKey)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Add(`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Add(`1)
  id: Add(`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Add(TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.Add(TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Add(TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nAdds items to the collection.\n"
  syntax:
    content: public void Add(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
      description: The item to be added.
    content.vb: Public Sub Add(item As TValue)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the collection already has an item with the same key, according to the key selector.
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.Add({TValue})
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Add(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Add(TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Clear
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: KeyBasedCollection<TKey, TValue>.Clear()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Clear()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves all items and key mappings from the collection.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Clear*
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.Clear
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Clear()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetKeyFor(`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetKeyFor(`1)
  id: GetKeyFor(`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: GetKeyFor(TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.GetKeyFor(TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.GetKeyFor(TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nEvaluates the key selector for a given item and gives back the key.\n"
  syntax:
    content: public TKey GetKeyFor(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
      description: The item for which to evaluate the key.
    return:
      type: '{TKey}'
      description: The key matching the item.
    content.vb: Public Function GetKeyFor(item As TValue) As TKey
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetKeyFor*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).GetKeyFor(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).GetKeyFor(TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains(`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains(`1)
  id: Contains(`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Contains(TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.Contains(TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Contains(TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTells if the collection contains an item.\n"
  syntax:
    content: public bool Contains(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
      description: The item to verify.
    return:
      type: System.Boolean
      description: True if the item exists in the collection. False otherwise.
    content.vb: Public Function Contains(item As TValue) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains*
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.Contains({TValue})
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Contains(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Contains(TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains(`0)
  id: Contains(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Contains(TKey)
  nameWithType: KeyBasedCollection<TKey, TValue>.Contains(TKey)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Contains(TKey)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTells if the collection contains an item for a given key.\n"
  syntax:
    content: public bool Contains(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to verify.
    return:
      type: System.Boolean
      description: True if the the collection contains an item for the given key. False otherwise.
    content.vb: Public Function Contains(key As TKey) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Contains(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Contains(TKey)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ContainsKey(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: KeyBasedCollection<TKey, TValue>.ContainsKey(TKey)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTells if the collection contains an item for a given key.\n"
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to verify.
    return:
      type: System.Boolean
      description: True if the the collection contains an item for the given key. False otherwise.
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ContainsKey*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).ContainsKey(TKey)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.CopyTo(`1[],System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: CopyTo(TValue[], Int32)
  nameWithType: KeyBasedCollection<TKey, TValue>.CopyTo(TValue[], Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.CopyTo(TValue[], System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nCopies all the items to a given array reference starting at a given index.\n"
  syntax:
    content: public void CopyTo(TValue[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{TValue}[]'
      description: The array to copy items to.
    - id: arrayIndex
      type: System.Int32
      description: The index from where to start the copying.
    content.vb: Public Sub CopyTo(array As TValue(), arrayIndex As Integer)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.CopyTo({TValue}[],System.Int32)
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).CopyTo(TValue(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).CopyTo(TValue(), System.Int32)
  name.vb: CopyTo(TValue(), Int32)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IndexOf(`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IndexOf(`1)
  id: IndexOf(`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: IndexOf(TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.IndexOf(TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.IndexOf(TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nDetermines the index of a given item in the collection.\n"
  syntax:
    content: public int IndexOf(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
      description: The item to be searched for.
    return:
      type: System.Int32
      description: The index of the item if found in the collection. -1 otherwise
    content.vb: Public Function IndexOf(item As TValue) As Integer
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IndexOf*
  implements:
  - System.Collections.Generic.IList{{TValue}}.IndexOf({TValue})
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).IndexOf(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).IndexOf(TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Insert(System.Int32,`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Insert(System.Int32,`1)
  id: Insert(System.Int32,`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Insert(Int32, TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.Insert(Int32, TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Insert(System.Int32, TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nInserts an item to the collection at a given index.\n"
  syntax:
    content: public void Insert(int index, TValue item)
    parameters:
    - id: index
      type: System.Int32
      description: Index to insert at in the collection.
    - id: item
      type: '{TValue}'
      description: Item to be inserted at the given index.
    content.vb: Public Sub Insert(index As Integer, item As TValue)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Insert*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if the given item has a key that&apos;s already found in the collection.
  implements:
  - System.Collections.Generic.IList{{TValue}}.Insert(System.Int32,{TValue})
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Insert(Int32, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Insert(System.Int32, TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove(`1)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove(`1)
  id: Remove(`1)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Remove(TValue)
  nameWithType: KeyBasedCollection<TKey, TValue>.Remove(TValue)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Remove(TValue)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves a given item and its key mapping from the collection.\n"
  syntax:
    content: public bool Remove(TValue item)
    parameters:
    - id: item
      type: '{TValue}'
      description: The item to be removed
    return:
      type: System.Boolean
      description: True if the item was removed. False otherwise.
    content.vb: Public Function Remove(item As TValue) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove*
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.Remove({TValue})
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Remove(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Remove(TValue)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove(`0)
  id: Remove(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: KeyBasedCollection<TKey, TValue>.Remove(TKey)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves the item matching a given key.\n"
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key that identifies the item to be removed.
    return:
      type: System.Boolean
      description: True if the item was removed. False otherwise.
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove*
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Remove(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Remove(TKey)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.RemoveAt(System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: KeyBasedCollection<TKey, TValue>.RemoveAt(Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.RemoveAt(System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves an item at a given index in the collection.\n"
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index of the item to be removed.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.RemoveAt*
  implements:
  - System.Collections.Generic.IList{{TValue}}.RemoveAt(System.Int32)
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).RemoveAt(System.Int32)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetEnumerator
  id: GetEnumerator
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: KeyBasedCollection<TKey, TValue>.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nReturns an enumerator that iterates over the collection.\n"
  syntax:
    content: public IEnumerator<TValue> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TValue}}
      description: An enumerator that can be used to iterate the collection.
    content.vb: Public Function GetEnumerator As IEnumerator(Of TValue)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TValue}}.GetEnumerator
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: KeyBasedCollection<TKey, TValue>.IEnumerable.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item(`0)
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item(`0)
  id: Item(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: KeyBasedCollection<TKey, TValue>.Item[TKey]
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Item[TKey]
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGets the value for the given key. Throws if not found.\n"
  syntax:
    content: public TValue this[TKey key] { get; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key used to lookup a value.
    return:
      type: '{TValue}'
    content.vb: Public ReadOnly Property Item(key As TKey) As TValue
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Thrown if the key does not match any item.
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item(System.Int32)
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item(System.Int32)
  id: Item(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: KeyBasedCollection<TKey, TValue>.Item[Int32]
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Item[System.Int32]
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGets or sets items at a given index.\n"
  syntax:
    content: public TValue this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the item to be retrieved/replaced.
    return:
      type: '{TValue}'
      description: The value from the given index.
    content.vb: Public Property Item(index As Integer) As TValue
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Throws on setting a new value at the index if the new value has a key that&apos;s already present in the collection for a different item.
  implements:
  - System.Collections.Generic.IList{{TValue}}.Item(System.Int32)
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Count
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Count
  id: Count
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: KeyBasedCollection<TKey, TValue>.Count
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nNumber of elements in the collection.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Count*
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.Count
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Count
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IsReadOnly
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IsReadOnly
  id: IsReadOnly
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: KeyBasedCollection<TKey, TValue>.IsReadOnly
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.IsReadOnly
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTells if the collection is read-only. Always false.\n"
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{TValue}}.IsReadOnly
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).IsReadOnly
references:
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  commentId: N:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  nameWithType: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{TValue}}
  commentId: T:System.Collections.Generic.IList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TValue>
  nameWithType: IList<TValue>
  fullName: System.Collections.Generic.IList<TValue>
  nameWithType.vb: IList(Of TValue)
  fullName.vb: System.Collections.Generic.IList(Of TValue)
  name.vb: IList(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TValue}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  nameWithType.vb: ICollection(Of TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  nameWithType.vb: IEnumerable(Of TValue)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}
  commentId: T:System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<KeyBasedCollection<TKey, TValue>>
  nameWithType: IEquatable<KeyBasedCollection<TKey, TValue>>
  fullName: System.IEquatable<Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>>
  nameWithType.vb: IEquatable(Of KeyBasedCollection(Of TKey, TValue))
  fullName.vb: System.IEquatable(Of Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue))
  name.vb: IEquatable(Of KeyBasedCollection(Of TKey, TValue))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
    name: KeyBasedCollection
    nameWithType: KeyBasedCollection
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
    name: KeyBasedCollection
    nameWithType: KeyBasedCollection
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler{{TValue}}
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler{`1}
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  definition: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  name: ThreadSafeListHandler<TValue>
  nameWithType: ThreadSafeListHandler<TValue>
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<TValue>
  nameWithType.vb: ThreadSafeListHandler(Of TValue)
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of TValue)
  name.vb: ThreadSafeListHandler(Of TValue)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
    name: ThreadSafeListHandler
    nameWithType: ThreadSafeListHandler
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
    name: ThreadSafeListHandler
    nameWithType: ThreadSafeListHandler
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  isExternal: true
  name: ThreadSafeListHandler<T>
  nameWithType: ThreadSafeListHandler<T>
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>
  nameWithType.vb: ThreadSafeListHandler(Of T)
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T)
  name.vb: ThreadSafeListHandler(Of T)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
    name: ThreadSafeListHandler
    nameWithType: ThreadSafeListHandler
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
    name: ThreadSafeListHandler
    nameWithType: ThreadSafeListHandler
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{`0,`1}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.#ctor
  isExternal: true
  name: KeyBasedCollection
  nameWithType: KeyBasedCollection<TKey, TValue>.KeyBasedCollection
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.KeyBasedCollection
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).KeyBasedCollection
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).KeyBasedCollection
- uid: System.Func{{TValue},{TKey}}
  commentId: T:System.Func{`1,`0}
  parent: System
  definition: System.Func`2
  name: Func<TValue, TKey>
  nameWithType: Func<TValue, TKey>
  fullName: System.Func<TValue, TKey>
  nameWithType.vb: Func(Of TValue, TKey)
  fullName.vb: System.Func(Of TValue, TKey)
  name.vb: Func(Of TValue, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TValue},System.Collections.Generic.IEnumerable{{TValue}},System.ValueTuple{System.Boolean,System.String}}
  commentId: T:System.Func{`1,System.Collections.Generic.IEnumerable{`1},System.ValueTuple{System.Boolean,System.String}}
  parent: System
  definition: System.Func`3
  name: Func<TValue, IEnumerable<TValue>, (T1, T2)<Boolean, String>>
  nameWithType: Func<TValue, IEnumerable<TValue>, (T1, T2)<Boolean, String>>
  fullName: System.Func<TValue, System.Collections.Generic.IEnumerable<TValue>, System.ValueTuple<System.Boolean, System.String>>
  nameWithType.vb: Func(Of TValue, IEnumerable(Of TValue), (T1, T2)(Of Boolean, String))
  fullName.vb: System.Func(Of TValue, System.Collections.Generic.IEnumerable(Of TValue), System.ValueTuple(Of System.Boolean, System.String))
  name.vb: Func(Of TValue, IEnumerable(Of TValue), (T1, T2)(Of Boolean, String))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.OnItemAdded*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.OnItemAdded
  isExternal: true
  name: OnItemAdded
  nameWithType: KeyBasedCollection<TKey, TValue>.OnItemAdded
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.OnItemAdded
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).OnItemAdded
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).OnItemAdded
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ForEach*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ForEach
  isExternal: true
  name: ForEach
  nameWithType: KeyBasedCollection<TKey, TValue>.ForEach
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.ForEach
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).ForEach
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).ForEach
- uid: System.Action{{TValue}}
  commentId: T:System.Action{`1}
  parent: System
  definition: System.Action`1
  name: Action<TValue>
  nameWithType: Action<TValue>
  fullName: System.Action<TValue>
  nameWithType.vb: Action(Of TValue)
  fullName.vb: System.Action(Of TValue)
  name.vb: Action(Of TValue)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Equals
  isExternal: true
  name: Equals
  nameWithType: KeyBasedCollection<TKey, TValue>.Equals
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Equals
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Equals
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Equals
- uid: System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{{TKey},{TValue}})
  commentId: M:System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection{`0,`1})
  parent: System.IEquatable{Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(KeyBasedCollection<TKey, TValue>)
  nameWithType: IEquatable<KeyBasedCollection<TKey, TValue>>.Equals(KeyBasedCollection<TKey, TValue>)
  fullName: System.IEquatable<Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>>.Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>)
  nameWithType.vb: IEquatable(Of KeyBasedCollection(Of TKey, TValue)).Equals(KeyBasedCollection(Of TKey, TValue))
  fullName.vb: System.IEquatable(Of Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue)).Equals(Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue))
  name.vb: Equals(KeyBasedCollection(Of TKey, TValue))
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<KeyBasedCollection<TKey, TValue>>.Equals
    fullName: System.IEquatable<Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
    name: KeyBasedCollection
    nameWithType: KeyBasedCollection
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of KeyBasedCollection(Of TKey, TValue)).Equals
    fullName: System.IEquatable(Of Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue)).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
    name: KeyBasedCollection
    nameWithType: KeyBasedCollection
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  isExternal: true
  name: KeyBasedCollection<TKey, TValue>
  nameWithType: KeyBasedCollection<TKey, TValue>
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue)
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue)
  name.vb: KeyBasedCollection(Of TKey, TValue)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
    name: KeyBasedCollection
    nameWithType: KeyBasedCollection
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2
    name: KeyBasedCollection
    nameWithType: KeyBasedCollection
    fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: KeyBasedCollection<TKey, TValue>.GetHashCode
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.GetHashCode
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).GetHashCode
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.TryGetValue*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.TryGetValue
  isExternal: true
  name: TryGetValue
  nameWithType: KeyBasedCollection<TKey, TValue>.TryGetValue
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.TryGetValue
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).TryGetValue
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).TryGetValue
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Add*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Add
  isExternal: true
  name: Add
  nameWithType: KeyBasedCollection<TKey, TValue>.Add
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Add
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Add
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Add
- uid: System.Collections.Generic.ICollection{{TValue}}.Add({TValue})
  commentId: M:System.Collections.Generic.ICollection{`1}.Add(`1)
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(TValue)
  nameWithType: ICollection<TValue>.Add(TValue)
  fullName: System.Collections.Generic.ICollection<TValue>.Add(TValue)
  nameWithType.vb: ICollection(Of TValue).Add(TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).Add(TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<TValue>.Add
    fullName: System.Collections.Generic.ICollection<TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of TValue).Add
    fullName: System.Collections.Generic.ICollection(Of TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: true
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Clear*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Clear
  isExternal: true
  name: Clear
  nameWithType: KeyBasedCollection<TKey, TValue>.Clear
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Clear
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Clear
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Clear
- uid: System.Collections.Generic.ICollection{{TValue}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`1}.Clear
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<TValue>.Clear()
  fullName: System.Collections.Generic.ICollection<TValue>.Clear()
  nameWithType.vb: ICollection(Of TValue).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<TValue>.Clear
    fullName: System.Collections.Generic.ICollection<TValue>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of TValue).Clear
    fullName: System.Collections.Generic.ICollection(Of TValue).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetKeyFor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetKeyFor
  isExternal: true
  name: GetKeyFor
  nameWithType: KeyBasedCollection<TKey, TValue>.GetKeyFor
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.GetKeyFor
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).GetKeyFor
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).GetKeyFor
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Contains
  isExternal: true
  name: Contains
  nameWithType: KeyBasedCollection<TKey, TValue>.Contains
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Contains
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Contains
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Contains
- uid: System.Collections.Generic.ICollection{{TValue}}.Contains({TValue})
  commentId: M:System.Collections.Generic.ICollection{`1}.Contains(`1)
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(TValue)
  nameWithType: ICollection<TValue>.Contains(TValue)
  fullName: System.Collections.Generic.ICollection<TValue>.Contains(TValue)
  nameWithType.vb: ICollection(Of TValue).Contains(TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).Contains(TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<TValue>.Contains
    fullName: System.Collections.Generic.ICollection<TValue>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of TValue).Contains
    fullName: System.Collections.Generic.ICollection(Of TValue).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ContainsKey*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.ContainsKey
  isExternal: true
  name: ContainsKey
  nameWithType: KeyBasedCollection<TKey, TValue>.ContainsKey
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.ContainsKey
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).ContainsKey
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).ContainsKey
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.CopyTo*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: KeyBasedCollection<TKey, TValue>.CopyTo
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.CopyTo
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).CopyTo
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).CopyTo
- uid: System.Collections.Generic.ICollection{{TValue}}.CopyTo({TValue}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`1}.CopyTo(`1[],System.Int32)
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TValue[], Int32)
  nameWithType: ICollection<TValue>.CopyTo(TValue[], Int32)
  fullName: System.Collections.Generic.ICollection<TValue>.CopyTo(TValue[], System.Int32)
  nameWithType.vb: ICollection(Of TValue).CopyTo(TValue(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).CopyTo(TValue(), System.Int32)
  name.vb: CopyTo(TValue(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<TValue>.CopyTo
    fullName: System.Collections.Generic.ICollection<TValue>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of TValue).CopyTo
    fullName: System.Collections.Generic.ICollection(Of TValue).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}[]'
  isExternal: true
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  nameWithType.vb: TValue()
  fullName.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IndexOf*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IndexOf
  isExternal: true
  name: IndexOf
  nameWithType: KeyBasedCollection<TKey, TValue>.IndexOf
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.IndexOf
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).IndexOf
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).IndexOf
- uid: System.Collections.Generic.IList{{TValue}}.IndexOf({TValue})
  commentId: M:System.Collections.Generic.IList{`1}.IndexOf(`1)
  parent: System.Collections.Generic.IList{{TValue}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(TValue)
  nameWithType: IList<TValue>.IndexOf(TValue)
  fullName: System.Collections.Generic.IList<TValue>.IndexOf(TValue)
  nameWithType.vb: IList(Of TValue).IndexOf(TValue)
  fullName.vb: System.Collections.Generic.IList(Of TValue).IndexOf(TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<TValue>.IndexOf
    fullName: System.Collections.Generic.IList<TValue>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of TValue).IndexOf
    fullName: System.Collections.Generic.IList(Of TValue).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Insert*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Insert
  isExternal: true
  name: Insert
  nameWithType: KeyBasedCollection<TKey, TValue>.Insert
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Insert
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Insert
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Insert
- uid: System.Collections.Generic.IList{{TValue}}.Insert(System.Int32,{TValue})
  commentId: M:System.Collections.Generic.IList{`1}.Insert(System.Int32,`1)
  parent: System.Collections.Generic.IList{{TValue}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, TValue)
  nameWithType: IList<TValue>.Insert(Int32, TValue)
  fullName: System.Collections.Generic.IList<TValue>.Insert(System.Int32, TValue)
  nameWithType.vb: IList(Of TValue).Insert(Int32, TValue)
  fullName.vb: System.Collections.Generic.IList(Of TValue).Insert(System.Int32, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<TValue>.Insert
    fullName: System.Collections.Generic.IList<TValue>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of TValue).Insert
    fullName: System.Collections.Generic.IList(Of TValue).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Remove
  isExternal: true
  name: Remove
  nameWithType: KeyBasedCollection<TKey, TValue>.Remove
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Remove
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Remove
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Remove
- uid: System.Collections.Generic.ICollection{{TValue}}.Remove({TValue})
  commentId: M:System.Collections.Generic.ICollection{`1}.Remove(`1)
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(TValue)
  nameWithType: ICollection<TValue>.Remove(TValue)
  fullName: System.Collections.Generic.ICollection<TValue>.Remove(TValue)
  nameWithType.vb: ICollection(Of TValue).Remove(TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).Remove(TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<TValue>.Remove
    fullName: System.Collections.Generic.ICollection<TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of TValue).Remove
    fullName: System.Collections.Generic.ICollection(Of TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.RemoveAt*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.RemoveAt
  isExternal: true
  name: RemoveAt
  nameWithType: KeyBasedCollection<TKey, TValue>.RemoveAt
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.RemoveAt
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).RemoveAt
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).RemoveAt
- uid: System.Collections.Generic.IList{{TValue}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`1}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{TValue}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<TValue>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<TValue>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of TValue).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of TValue).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<TValue>.RemoveAt
    fullName: System.Collections.Generic.IList<TValue>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of TValue).RemoveAt
    fullName: System.Collections.Generic.IList(Of TValue).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: KeyBasedCollection<TKey, TValue>.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.GetEnumerator
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).GetEnumerator
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TValue}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`1}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TValue}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TValue>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TValue>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TValue).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TValue>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TValue).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TValue).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TValue}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TValue>
  nameWithType: IEnumerator<TValue>
  fullName: System.Collections.Generic.IEnumerator<TValue>
  nameWithType.vb: IEnumerator(Of TValue)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TValue)
  name.vb: IEnumerator(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: KeyBasedCollection<TKey, TValue>.IEnumerable.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Item
  isExternal: true
  name: Item
  nameWithType: KeyBasedCollection<TKey, TValue>.Item
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Item
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Item
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Item
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
  isExternal: true
- uid: System.Collections.Generic.IList{{TValue}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`1}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{TValue}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<TValue>.Item[Int32]
  fullName: System.Collections.Generic.IList<TValue>.Item[System.Int32]
  nameWithType.vb: IList(Of TValue).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of TValue).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<TValue>.Item
    fullName: System.Collections.Generic.IList<TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of TValue).Item
    fullName: System.Collections.Generic.IList(Of TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Count*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.Count
  isExternal: true
  name: Count
  nameWithType: KeyBasedCollection<TKey, TValue>.Count
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.Count
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).Count
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).Count
- uid: System.Collections.Generic.ICollection{{TValue}}.Count
  commentId: P:System.Collections.Generic.ICollection{`1}.Count
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<TValue>.Count
  fullName: System.Collections.Generic.ICollection<TValue>.Count
  nameWithType.vb: ICollection(Of TValue).Count
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IsReadOnly*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection`2.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: KeyBasedCollection<TKey, TValue>.IsReadOnly
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection<TKey, TValue>.IsReadOnly
  nameWithType.vb: KeyBasedCollection(Of TKey, TValue).IsReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.KeyBasedCollection(Of TKey, TValue).IsReadOnly
- uid: System.Collections.Generic.ICollection{{TValue}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`1}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{TValue}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<TValue>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<TValue>.IsReadOnly
  nameWithType.vb: ICollection(Of TValue).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of TValue).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
