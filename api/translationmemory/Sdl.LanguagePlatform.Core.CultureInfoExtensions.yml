### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  commentId: T:Sdl.LanguagePlatform.Core.CultureInfoExtensions
  id: CultureInfoExtensions
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync(Sdl.Core.Globalization.CultureCode,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  - Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  langs:
  - csharp
  - vb
  name: CultureInfoExtensions
  nameWithType: CultureInfoExtensions
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  type: Class
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Utilities related to <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> objects.
  example: []
  syntax:
    content: public static class CultureInfoExtensions
    content.vb: Public Module CultureInfoExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  id: GetMappedCultureCodeForLegacyCode(System.String)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetMappedCultureCodeForLegacyCode(string)
  nameWithType: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(string)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Assumes the passed culture code is a legacy code and returns the mapped

    equivalent. null is returned if no mapping exists (which means that the

    code is not a legacy code or no mapping is required or yet specified).
  example: []
  syntax:
    content: public static string GetMappedCultureCodeForLegacyCode(string legacyCode)
    parameters:
    - id: legacyCode
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetMappedCultureCodeForLegacyCode(legacyCode As String) As String
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode*
  nameWithType.vb: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(String)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(String)
  name.vb: GetMappedCultureCodeForLegacyCode(String)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32)
  id: GetCultureInfo(System.Int32)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(int)
  nameWithType: CultureInfoExtensions.GetCultureInfo(int)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns the culture which corresponds to the specified LCID. If the LCID is unknown or

    invalid, an exception is thrown. Note that this will also be the case for custom cultures,

    which seem to always get the same LCID (4096).
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegistryCultureInfoAsync")]

      public static CultureInfo GetCultureInfo(int lcid)
    parameters:
    - id: lcid
      type: System.Int32
      description: The locale identifier (lcid)
    return:
      type: System.Globalization.CultureInfo
      description: A CultureInfo object, or throws for unknown LCIDs.
    content.vb: >-
      <Obsolete("Use GetRegistryCultureInfoAsync")>

      Public Shared Function GetCultureInfo(lcid As Integer) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegistryCultureInfoAsync
  nameWithType.vb: CultureInfoExtensions.GetCultureInfo(Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(Integer)
  name.vb: GetCultureInfo(Integer)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.Int32,System.Boolean)
  id: GetCultureInfo(System.Int32,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(int, bool)
  nameWithType: CultureInfoExtensions.GetCultureInfo(int, bool)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(int, bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns the culture which corresponds to the specified locale, which may be a legacy LCID 

    used internally by SDLX or Trados Translator's Workbench.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegistryCultureInfoAsync")]

      public static CultureInfo GetCultureInfo(int lcid, bool returnNullForUnknowns)
    parameters:
    - id: lcid
      type: System.Int32
      description: The locale identifier (lcid)
    - id: returnNullForUnknowns
      type: System.Boolean
      description: >-
        If true, null is returned for unknown languages. Otherwise, an exception
                    is thrown. This will also be the case if the lcid represets a custom culture (in most cases, 
                    the lcid will be 4096 in this case).
    return:
      type: System.Globalization.CultureInfo
      description: A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> object, or null if <code class="paramref">returnNullForUnknowns</code> is true.
    content.vb: >-
      <Obsolete("Use GetRegistryCultureInfoAsync")>

      Public Shared Function GetCultureInfo(lcid As Integer, returnNullForUnknowns As Boolean) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegistryCultureInfoAsync
  nameWithType.vb: CultureInfoExtensions.GetCultureInfo(Integer, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(Integer, Boolean)
  name.vb: GetCultureInfo(Integer, Boolean)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String)
  id: GetCultureInfo(System.String)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(string)
  nameWithType: CultureInfoExtensions.GetCultureInfo(string)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Similar to <xref href="System.Globalization.CultureInfo.GetCultureInfo(System.String)" data-throw-if-not-resolved="false"></xref>, but 

    covers culture names (&lt;language-code&gt;-&lt;region-code&gt;) which are used

    by SDLX and Trados Translator's Workbench, but have a different code in .Net. 

    <p>Use this method to transparently map language codes (current and legacy ones)

    to cultures, for example when processing TTX, ITD, or TMX.</p>
  remarks: >-
    To avoid an exception to be thrown, and to get <code>null</code> for unknown 
                culture codes, use <xref href="Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegistryCultureInfoAsync")]

      public static CultureInfo GetCultureInfo(string name)
    parameters:
    - id: name
      type: System.String
      description: The culture code
    return:
      type: System.Globalization.CultureInfo
      description: >-
        A CultureInfo object, using appropriate fallbacks for backwards compatibility. Throws
                    an exeption if neither the fallback heuristics nor .Net can resolve the culture name.
    content.vb: >-
      <Obsolete("Use GetRegistryCultureInfoAsync")>

      Public Shared Function GetCultureInfo(name As String) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegistryCultureInfoAsync
  nameWithType.vb: CultureInfoExtensions.GetCultureInfo(String)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(String)
  name.vb: GetCultureInfo(String)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  id: GetCultureInfo(System.String,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetCultureInfo(string, bool)
  nameWithType: CultureInfoExtensions.GetCultureInfo(string, bool)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(string, bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Similar to <xref href="System.Globalization.CultureInfo.GetCultureInfo(System.String)" data-throw-if-not-resolved="false"></xref>, but 

    covers culture names (&lt;language-code&gt;-&lt;region-code&gt;) which are used

    by SDLX and Trados Translator's Workbench, but have a different code in .Net. 

    <p>Use this method to transparently map language codes (current and legacy ones)

    to cultures, for example when processing TTX, ITD, or TMX.</p>
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegistryCultureInfoAsync")]

      public static CultureInfo GetCultureInfo(string name, bool returnNullForUnknowns)
    parameters:
    - id: name
      type: System.String
      description: The culture code
    - id: returnNullForUnknowns
      type: System.Boolean
      description: >-
        If true, null is returned for unknown culture codes. If false, an exception is thrown if
                    the culture code cannot be resolved.
    return:
      type: System.Globalization.CultureInfo
      description: >-
        A CultureInfo object, using appropriate fallbacks for backwards compatibility, or 
                    null if the culture code cannot be resolved and <code class="paramref">returnNullForUnknowns</code> is <code>true</code>.
    content.vb: >-
      <Obsolete("Use GetRegistryCultureInfoAsync")>

      Public Shared Function GetCultureInfo(name As String, returnNullForUnknowns As Boolean) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegistryCultureInfoAsync
  nameWithType.vb: CultureInfoExtensions.GetCultureInfo(String, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(String, Boolean)
  name.vb: GetCultureInfo(String, Boolean)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync(Sdl.Core.Globalization.CultureCode,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync(Sdl.Core.Globalization.CultureCode,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: GetRegistryCultureInfoAsync(Sdl.Core.Globalization.CultureCode,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegistryCultureInfoAsync(CultureCode, bool, ICultureMetadataManager)
  nameWithType: CultureInfoExtensions.GetRegistryCultureInfoAsync(CultureCode, bool, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync(Sdl.Core.Globalization.CultureCode, bool, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static Task<CultureInfo> GetRegistryCultureInfoAsync(CultureCode cultureCode, bool returnNullForUnknowns, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureCode
      type: Sdl.Core.Globalization.CultureCode
    - id: returnNullForUnknowns
      type: System.Boolean
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.Globalization.CultureInfo}
    content.vb: Public Shared Function GetRegistryCultureInfoAsync(cultureCode As CultureCode, returnNullForUnknowns As Boolean, cultureMetadataManager As ICultureMetadataManager) As Task(Of CultureInfo)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync*
  nameWithType.vb: CultureInfoExtensions.GetRegistryCultureInfoAsync(CultureCode, Boolean, ICultureMetadataManager)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync(Sdl.Core.Globalization.CultureCode, Boolean, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  name.vb: GetRegistryCultureInfoAsync(CultureCode, Boolean, ICultureMetadataManager)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(Sdl.Core.Globalization.CultureCode)
  id: IsRomanceLanguage(Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: IsRomanceLanguage(CultureCode)
  nameWithType: CultureInfoExtensions.IsRomanceLanguage(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage(Sdl.Core.Globalization.CultureCode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Determines whether the specified culture info is any of the romance languages: French, Spanish, Portuguese, 

    Italian, Romanian, Galician or Catalan.
  example: []
  syntax:
    content: public static bool IsRomanceLanguage(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The culture info.
    return:
      type: System.Boolean
      description: true if culture is any of the romance languages, otherwise false.
    content.vb: Public Shared Function IsRomanceLanguage(culture As CultureCode) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(Sdl.Core.Globalization.CultureCode)
  id: UseBlankAsWordSeparator(Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UseBlankAsWordSeparator(CultureCode)
  nameWithType: CultureInfoExtensions.UseBlankAsWordSeparator(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator(Sdl.Core.Globalization.CultureCode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Determines whether the specified culture uses blanks as word separators. This is 

    true for all cultures except those based on Japanese, Thai, or Chinese.
  example: []
  syntax:
    content: public static bool UseBlankAsWordSeparator(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The culture to test.
    return:
      type: System.Boolean
      description: true iff the language associated with the culture uses blanks as word separators.
    content.vb: Public Shared Function UseBlankAsWordSeparator(culture As CultureCode) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(Sdl.Core.Globalization.CultureCode)
  id: UseBlankAsSentenceSeparator(Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UseBlankAsSentenceSeparator(CultureCode)
  nameWithType: CultureInfoExtensions.UseBlankAsSentenceSeparator(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator(Sdl.Core.Globalization.CultureCode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Determines whether the specified culture uses blanks as sentence separators. This is 

    currently only true for Thai.
  example: []
  syntax:
    content: public static bool UseBlankAsSentenceSeparator(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The culture to test.
    return:
      type: System.Boolean
      description: true iff the language associated with the culture uses blanks as sentence separators.
    content.vb: Public Shared Function UseBlankAsSentenceSeparator(culture As CultureCode) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  id: GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionQualifiedCulture(CultureInfo)
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCulture(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Heuristically computes and returns the region-specified ("default") culture for a given

    language. If the input culture is not neutral (i.e. it is region-specific), it is returned. 

    Otherwise the method will find the region-qualified culture which most likely represents 

    the culture's default/major region.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegionQualifiedCultureAsync")]

      public static CultureInfo GetRegionQualifiedCulture(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The input culture
    return:
      type: System.Globalization.CultureInfo
      description: The input parameter, if it's a region-qualified/non-neutral culture, or the default region-qualified culture otheriwise.
    content.vb: >-
      <Obsolete("Use GetRegionQualifiedCultureAsync")>

      Public Shared Function GetRegionQualifiedCulture(culture As CultureInfo) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegionQualifiedCultureAsync
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(System.String)
  id: GetRegionQualifiedCulture(System.String)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionQualifiedCulture(string)
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCulture(string)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Heuristically computes and returns the region-specified ("default") culture code for a given

    language code. If the input culture is not neutral or does not have a region-qualified 

    equivalent, null is returned.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegionQualifiedCultureAsync")]

      public static string GetRegionQualifiedCulture(string cultureCode)
    parameters:
    - id: cultureCode
      type: System.String
    return:
      type: System.String
    content.vb: >-
      <Obsolete("Use GetRegionQualifiedCultureAsync")>

      Public Shared Function GetRegionQualifiedCulture(cultureCode As String) As String
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegionQualifiedCultureAsync
  nameWithType.vb: CultureInfoExtensions.GetRegionQualifiedCulture(String)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture(String)
  name.vb: GetRegionQualifiedCulture(String)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: GetRegionQualifiedCultureAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionQualifiedCultureAsync(CultureCode, ICultureMetadataManager)
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCultureAsync(CultureCode, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync(Sdl.Core.Globalization.CultureCode, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Rturns the region-specified ("default") culture code for a given

    language code. If the input culture is not neutral, null is returned.
  example: []
  syntax:
    content: public static Task<CultureCode> GetRegionQualifiedCultureAsync(CultureCode cultureCode, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureCode
      type: Sdl.Core.Globalization.CultureCode
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureCode}
    content.vb: Public Shared Function GetRegionQualifiedCultureAsync(cultureCode As CultureCode, cultureMetadataManager As ICultureMetadataManager) As Task(Of CultureCode)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  id: GetRegionNeutralCulture(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionNeutralCulture(CultureInfo)
  nameWithType: CultureInfoExtensions.GetRegionNeutralCulture(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes and returns the region-neutral parent culture of the input culture. If the input

    culture is already neutral, it is returned. Otherwise, the parent culture hierarchy is 

    traversed until a region-neutral culture is found.
  remarks: >-
    A region-neutral culture is not necessarily one "without dashes". For example,
                the region-neutral parent culture of <code>zh-CN</code> (Chinese, PRC) is <code>zh-CHS</code> or <code>zh-Hans</code> (Simplified
                Chinese). The exact result may depend on the operating system version and the .Net version.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetRegionNeutralCultureCodeAsync")]

      public static CultureInfo GetRegionNeutralCulture(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The input culture
    return:
      type: System.Globalization.CultureInfo
      description: The region-neutral parent culture of the input culture
    content.vb: >-
      <Obsolete("Use GetRegionNeutralCultureCodeAsync")>

      Public Shared Function GetRegionNeutralCulture(culture As CultureInfo) As CultureInfo
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetRegionNeutralCultureCodeAsync
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: GetRegionNeutralCultureCodeAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetRegionNeutralCultureCodeAsync(CultureCode, ICultureMetadataManager)
  nameWithType: CultureInfoExtensions.GetRegionNeutralCultureCodeAsync(CultureCode, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync(Sdl.Core.Globalization.CultureCode, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns the region-neutral parent culture of the input culture. If the input

    culture is already neutral, it is returned. Otherwise, the parent culture hierarchy is 

    traversed until a region-neutral culture is found.
  remarks: >-
    A region-neutral culture is not necessarily one "without dashes". For example,
                the region-neutral parent culture of <code>zh-CN</code> (Chinese, PRC) is <code>zh-CHS</code> or <code>zh-Hans</code> (Simplified
                Chinese).
  example: []
  syntax:
    content: public static Task<CultureCode> GetRegionNeutralCultureCodeAsync(CultureCode culture, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The input culture
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
      description: ''
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureCode}
      description: The region-neutral parent culture of the input culture
    content.vb: Public Shared Function GetRegionNeutralCultureCodeAsync(culture As CultureCode, cultureMetadataManager As ICultureMetadataManager) As Task(Of CultureCode)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  id: AreCompatible(System.Globalization.CultureInfo,System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: AreCompatible(CultureInfo, CultureInfo)
  nameWithType: CultureInfoExtensions.AreCompatible(CultureInfo, CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible(System.Globalization.CultureInfo, System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Checks whether two cultures (languages) are compatible. Two cultures are 

    compatible if they denote the same language which means they have to be identical or 

    their closest region-neutral parents are identical.
  example: []
  syntax:
    content: >-
      [Obsolete("Use AreCompatibleCodesAsync")]

      public static bool AreCompatible(CultureInfo c1, CultureInfo c2)
    parameters:
    - id: c1
      type: System.Globalization.CultureInfo
    - id: c2
      type: System.Globalization.CultureInfo
    return:
      type: System.Boolean
    content.vb: >-
      <Obsolete("Use AreCompatibleCodesAsync")>

      Public Shared Function AreCompatible(c1 As CultureInfo, c2 As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use AreCompatibleCodesAsync
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: AreCompatibleCodesAsync(CultureCode, CultureCode, ICultureMetadataManager)
  nameWithType: CultureInfoExtensions.AreCompatibleCodesAsync(CultureCode, CultureCode, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode, Sdl.Core.Globalization.CultureCode, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Checks whether two cultures (languages) are compatible. Two cultures are 

    compatible if they denote the same language which means they have to be identical or 

    their closest region-neutral parents are identical.
  example: []
  syntax:
    content: public static Task<bool> AreCompatibleCodesAsync(CultureCode c1, CultureCode c2, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: c1
      type: Sdl.Core.Globalization.CultureCode
    - id: c2
      type: Sdl.Core.Globalization.CultureCode
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Shared Function AreCompatibleCodesAsync(c1 As CultureCode, c2 As CultureCode, cultureMetadataManager As ICultureMetadataManager) As Task(Of Boolean)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(Sdl.Core.Globalization.CultureCode)
  id: UsesClitics(Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UsesClitics(CultureCode)
  nameWithType: CultureInfoExtensions.UsesClitics(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics(Sdl.Core.Globalization.CultureCode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Determines whether the specified culture uses clitics (English and the romance languages).
  example: []
  syntax:
    content: public static bool UsesClitics(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The culture.
    return:
      type: System.Boolean
      description: true if culture contains clitics, otherwise false.
    content.vb: Public Shared Function UsesClitics(culture As CultureCode) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  id: GetLanguageGroupID(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLanguageGroupID(CultureInfo)
  nameWithType: CultureInfoExtensions.GetLanguageGroupID(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Returns the <xref href="Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID?text=LanguageGroupID" data-throw-if-not-resolved="false"></xref> associated with the specified culture.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetLanguageGroupNameAsync")]

      public static CultureInfoExtensions.LanguageGroupID GetLanguageGroupID(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
    content.vb: >-
      <Obsolete("Use GetLanguageGroupNameAsync")>

      Public Shared Function GetLanguageGroupID(culture As CultureInfo) As CultureInfoExtensions.LanguageGroupID
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetLanguageGroupNameAsync
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  id: GetLanguageGroupName(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLanguageGroupName(CultureInfo)
  nameWithType: CultureInfoExtensions.GetLanguageGroupName(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Returns the name of the language group for the specified culture as a string.
  example: []
  syntax:
    content: >-
      [Obsolete("Use GetLanguageGroupNameAsync")]

      public static string GetLanguageGroupName(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture (may not be null)
    return:
      type: System.String
      description: >-
        The name of the language group the culture belongs to, or <code>null</code> if
                    the group is unknown.
    content.vb: >-
      <Obsolete("Use GetLanguageGroupNameAsync")>

      Public Shared Function GetLanguageGroupName(culture As CultureInfo) As String
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use GetLanguageGroupNameAsync
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: GetLanguageGroupNameAsync(System.String,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLanguageGroupNameAsync(string, ICultureMetadataManager)
  nameWithType: CultureInfoExtensions.GetLanguageGroupNameAsync(string, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync(string, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns the name of the language group for the specified culture, or for a

    parent culture if not defined for this culture, or null if unknown
  example: []
  syntax:
    content: public static Task<string> GetLanguageGroupNameAsync(string cultureName, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureName
      type: System.String
      description: ''
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function GetLanguageGroupNameAsync(cultureName As String, cultureMetadataManager As ICultureMetadataManager) As Task(Of String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync*
  nameWithType.vb: CultureInfoExtensions.GetLanguageGroupNameAsync(String, ICultureMetadataManager)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync(String, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  name.vb: GetLanguageGroupNameAsync(String, ICultureMetadataManager)
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(Sdl.Core.Globalization.CultureCode)
  id: GetLeadingClitics(Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetLeadingClitics(CultureCode)
  nameWithType: CultureInfoExtensions.GetLeadingClitics(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics(Sdl.Core.Globalization.CultureCode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns a case-sensitive string hash set containing the leading separable clitics for the provided

    culture, or <code>null</code> if none are defined.
  example: []
  syntax:
    content: public static HashSet<string> GetLeadingClitics(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Shared Function GetLeadingClitics(culture As CultureCode) As HashSet(Of String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  id: GetTrailingClitics(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: GetTrailingClitics(CultureInfo)
  nameWithType: CultureInfoExtensions.GetTrailingClitics(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns a case-sensitive string hash set containing the trailing separable clitics for the provided

    culture, or <code>null</code> if none are defined.
  example: []
  syntax:
    content: public static HashSet<string> GetTrailingClitics(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    return:
      type: System.Collections.Generic.HashSet{System.String}
    content.vb: Public Shared Function GetTrailingClitics(culture As CultureInfo) As HashSet(Of String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  id: UsesDefaultDigits(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UsesDefaultDigits(CultureInfo)
  nameWithType: CultureInfoExtensions.UsesDefaultDigits(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Determines whether the specified culture uses the standard default digits.
  example: []
  syntax:
    content: public static bool UsesDefaultDigits(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture, which must not be null or a neutral culture
    return:
      type: System.Boolean
      description: <code>true</code> if the culture uses the default digits (0-9), and <code>false</code> otherwise.
    content.vb: Public Shared Function UsesDefaultDigits(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  id: UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UsesStandardNumberGrouping(CultureInfo)
  nameWithType: CultureInfoExtensions.UsesStandardNumberGrouping(CultureInfo)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping(System.Globalization.CultureInfo)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Determines whether the provided culture uses standard three-digit grouping for number

    formatting.
  example: []
  syntax:
    content: public static bool UsesStandardNumberGrouping(CultureInfo culture)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture, which must not be null or a neutral culture
    return:
      type: System.Boolean
      description: true if the culture uses standard three-digit grouping, and false otherwise
    content.vb: Public Shared Function UsesStandardNumberGrouping(culture As CultureInfo) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(Sdl.Core.Globalization.CultureCode)
  id: UseFullWidth(Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: UseFullWidth(CultureCode)
  nameWithType: CultureInfoExtensions.UseFullWidth(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth(Sdl.Core.Globalization.CultureCode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: returns true for CJK cultures
  example: []
  syntax:
    content: public static bool UseFullWidth(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function UseFullWidth(culture As CultureCode) As Boolean
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth*
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  commentId: P:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  id: LegacyLanguageCodeMapping
  parent: Sdl.LanguagePlatform.Core.CultureInfoExtensions
  langs:
  - csharp
  - vb
  name: LegacyLanguageCodeMapping
  nameWithType: CultureInfoExtensions.LegacyLanguageCodeMapping
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Gets a mapping from legacy language codes to .Net language codes. The mapping maps from

    legacy language codes as they are used by SDLX and Trados Translator's Workbench and

    related applications to the closest language code used by .Net. 

    <p>This is an internal data structure which should not be directly used and 

    not be modified. To look up a legacy code,

    use <xref href="Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)" data-throw-if-not-resolved="false"></xref>.</p>
  example: []
  syntax:
    content: public static Dictionary<string, string> LegacyLanguageCodeMapping { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
    content.vb: Public Shared ReadOnly Property LegacyLanguageCodeMapping As Dictionary(Of String, String)
  overload: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping*
references:
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.html
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetMappedCultureCodeForLegacyCode_System_String_
  name: GetMappedCultureCodeForLegacyCode
  nameWithType: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetCultureInfo_System_Int32_
  name: GetCultureInfo
  nameWithType: CultureInfoExtensions.GetCultureInfo
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Globalization.CultureInfo.GetCultureInfo(System.String)
  commentId: M:System.Globalization.CultureInfo.GetCultureInfo(System.String)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo.getcultureinfo#system-globalization-cultureinfo-getcultureinfo(system-string)
  name: GetCultureInfo(string)
  nameWithType: CultureInfo.GetCultureInfo(string)
  fullName: System.Globalization.CultureInfo.GetCultureInfo(string)
  nameWithType.vb: CultureInfo.GetCultureInfo(String)
  fullName.vb: System.Globalization.CultureInfo.GetCultureInfo(String)
  name.vb: GetCultureInfo(String)
  spec.csharp:
  - uid: System.Globalization.CultureInfo.GetCultureInfo(System.String)
    name: GetCultureInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo.getcultureinfo#system-globalization-cultureinfo-getcultureinfo(system-string)
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: System.Globalization.CultureInfo.GetCultureInfo(System.String)
    name: GetCultureInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo.getcultureinfo#system-globalization-cultureinfo-getcultureinfo(system-string)
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetCultureInfo_System_String_System_Boolean_
  name: GetCultureInfo(string, bool)
  nameWithType: CultureInfoExtensions.GetCultureInfo(string, bool)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(string, bool)
  nameWithType.vb: CultureInfoExtensions.GetCultureInfo(String, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(String, Boolean)
  name.vb: GetCultureInfo(String, Boolean)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
    name: GetCultureInfo
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetCultureInfo_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetCultureInfo(System.String,System.Boolean)
    name: GetCultureInfo
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetCultureInfo_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetRegistryCultureInfoAsync_Sdl_Core_Globalization_CultureCode_System_Boolean_Sdl_Core_Globalization_CultureMetadataManager_ICultureMetadataManager_
  name: GetRegistryCultureInfoAsync
  nameWithType: CultureInfoExtensions.GetRegistryCultureInfoAsync
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegistryCultureInfoAsync
- uid: Sdl.Core.Globalization.CultureCode
  commentId: T:Sdl.Core.Globalization.CultureCode
  parent: Sdl.Core.Globalization
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Threading.Tasks.Task{System.Globalization.CultureInfo}
  commentId: T:System.Threading.Tasks.Task{System.Globalization.CultureInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<CultureInfo>
  nameWithType: Task<CultureInfo>
  fullName: System.Threading.Tasks.Task<System.Globalization.CultureInfo>
  nameWithType.vb: Task(Of CultureInfo)
  fullName.vb: System.Threading.Tasks.Task(Of System.Globalization.CultureInfo)
  name.vb: Task(Of CultureInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  - name: )
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization
    name: Globalization
    isExternal: true
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization
    name: Globalization
    isExternal: true
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization
    name: Globalization
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization.CultureMetadataManager
    name: CultureMetadataManager
    isExternal: true
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization
    name: Globalization
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization.CultureMetadataManager
    name: CultureMetadataManager
    isExternal: true
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_IsRomanceLanguage_Sdl_Core_Globalization_CultureCode_
  name: IsRomanceLanguage
  nameWithType: CultureInfoExtensions.IsRomanceLanguage
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.IsRomanceLanguage
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_UseBlankAsWordSeparator_Sdl_Core_Globalization_CultureCode_
  name: UseBlankAsWordSeparator
  nameWithType: CultureInfoExtensions.UseBlankAsWordSeparator
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsWordSeparator
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_UseBlankAsSentenceSeparator_Sdl_Core_Globalization_CultureCode_
  name: UseBlankAsSentenceSeparator
  nameWithType: CultureInfoExtensions.UseBlankAsSentenceSeparator
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseBlankAsSentenceSeparator
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetRegionQualifiedCulture_System_Globalization_CultureInfo_
  name: GetRegionQualifiedCulture
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCulture
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCulture
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetRegionQualifiedCultureAsync_Sdl_Core_Globalization_CultureCode_Sdl_Core_Globalization_CultureMetadataManager_ICultureMetadataManager_
  name: GetRegionQualifiedCultureAsync
  nameWithType: CultureInfoExtensions.GetRegionQualifiedCultureAsync
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionQualifiedCultureAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureCode}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureCode}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<CultureCode>
  nameWithType: Task<CultureCode>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.CultureCode>
  nameWithType.vb: Task(Of CultureCode)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.CultureCode)
  name.vb: Task(Of CultureCode)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.Core.Globalization.CultureCode
    name: CultureCode
    isExternal: true
  - name: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetRegionNeutralCulture_System_Globalization_CultureInfo_
  name: GetRegionNeutralCulture
  nameWithType: CultureInfoExtensions.GetRegionNeutralCulture
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCulture
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetRegionNeutralCultureCodeAsync_Sdl_Core_Globalization_CultureCode_Sdl_Core_Globalization_CultureMetadataManager_ICultureMetadataManager_
  name: GetRegionNeutralCultureCodeAsync
  nameWithType: CultureInfoExtensions.GetRegionNeutralCultureCodeAsync
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetRegionNeutralCultureCodeAsync
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_AreCompatible_System_Globalization_CultureInfo_System_Globalization_CultureInfo_
  name: AreCompatible
  nameWithType: CultureInfoExtensions.AreCompatible
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatible
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_AreCompatibleCodesAsync_Sdl_Core_Globalization_CultureCode_Sdl_Core_Globalization_CultureCode_Sdl_Core_Globalization_CultureMetadataManager_ICultureMetadataManager_
  name: AreCompatibleCodesAsync
  nameWithType: CultureInfoExtensions.AreCompatibleCodesAsync
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<bool>
  nameWithType: Task<bool>
  fullName: System.Threading.Tasks.Task<bool>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_UsesClitics_Sdl_Core_Globalization_CultureCode_
  name: UsesClitics
  nameWithType: CultureInfoExtensions.UsesClitics
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesClitics
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
  commentId: T:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html
  name: CultureInfoExtensions.LanguageGroupID
  nameWithType: CultureInfoExtensions.LanguageGroupID
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions
    name: CultureInfoExtensions
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
    name: LanguageGroupID
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.html
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions
    name: CultureInfoExtensions
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID
    name: LanguageGroupID
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LanguageGroupID.html
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetLanguageGroupID_System_Globalization_CultureInfo_
  name: GetLanguageGroupID
  nameWithType: CultureInfoExtensions.GetLanguageGroupID
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupID
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetLanguageGroupName_System_Globalization_CultureInfo_
  name: GetLanguageGroupName
  nameWithType: CultureInfoExtensions.GetLanguageGroupName
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupName
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetLanguageGroupNameAsync_System_String_Sdl_Core_Globalization_CultureMetadataManager_ICultureMetadataManager_
  name: GetLanguageGroupNameAsync
  nameWithType: CultureInfoExtensions.GetLanguageGroupNameAsync
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLanguageGroupNameAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetLeadingClitics_Sdl_Core_Globalization_CultureCode_
  name: GetLeadingClitics
  nameWithType: CultureInfoExtensions.GetLeadingClitics
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetLeadingClitics
- uid: System.Collections.Generic.HashSet{System.String}
  commentId: T:System.Collections.Generic.HashSet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<string>
  nameWithType: HashSet<string>
  fullName: System.Collections.Generic.HashSet<string>
  nameWithType.vb: HashSet(Of String)
  fullName.vb: System.Collections.Generic.HashSet(Of String)
  name.vb: HashSet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetTrailingClitics_System_Globalization_CultureInfo_
  name: GetTrailingClitics
  nameWithType: CultureInfoExtensions.GetTrailingClitics
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetTrailingClitics
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_UsesDefaultDigits_System_Globalization_CultureInfo_
  name: UsesDefaultDigits
  nameWithType: CultureInfoExtensions.UsesDefaultDigits
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesDefaultDigits
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_UsesStandardNumberGrouping_System_Globalization_CultureInfo_
  name: UsesStandardNumberGrouping
  nameWithType: CultureInfoExtensions.UsesStandardNumberGrouping
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UsesStandardNumberGrouping
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_UseFullWidth_Sdl_Core_Globalization_CultureCode_
  name: UseFullWidth
  nameWithType: CultureInfoExtensions.UseFullWidth
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.UseFullWidth
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetMappedCultureCodeForLegacyCode_System_String_
  name: GetMappedCultureCodeForLegacyCode(string)
  nameWithType: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(string)
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(string)
  nameWithType.vb: CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(String)
  fullName.vb: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(String)
  name.vb: GetMappedCultureCodeForLegacyCode(String)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
    name: GetMappedCultureCodeForLegacyCode
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetMappedCultureCodeForLegacyCode_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.GetMappedCultureCodeForLegacyCode(System.String)
    name: GetMappedCultureCodeForLegacyCode
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_GetMappedCultureCodeForLegacyCode_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping*
  commentId: Overload:Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CultureInfoExtensions.html#Sdl_LanguagePlatform_Core_CultureInfoExtensions_LegacyLanguageCodeMapping
  name: LegacyLanguageCodeMapping
  nameWithType: CultureInfoExtensions.LegacyLanguageCodeMapping
  fullName: Sdl.LanguagePlatform.Core.CultureInfoExtensions.LegacyLanguageCodeMapping
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<string, string>
  nameWithType: Dictionary<string, string>
  fullName: System.Collections.Generic.Dictionary<string, string>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of String, String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
