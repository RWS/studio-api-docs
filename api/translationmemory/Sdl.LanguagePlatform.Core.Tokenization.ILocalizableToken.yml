### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  id: ILocalizableToken
  parent: Sdl.LanguagePlatform.Core.Tokenization
  children:
  - Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)
  - Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)
  - Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)
  - Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext
  langs:
  - csharp
  - vb
  name: ILocalizableToken
  nameWithType: ILocalizableToken
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  type: Interface
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nDefines the interface for auto-localizable tokens. Localizable tokens have a value, and \ntheir surface representation (&quot;text&quot;) can be automatically converted into a target culture\nrepresentation, given the token&apos;s value and the target culture. \n"
  syntax:
    content: public interface ILocalizableToken
    content.vb: Public Interface ILocalizableToken
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)
  id: Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)
  parent: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  langs:
  - csharp
  - vb
  name: Localize(CultureInfo, AutoLocalizationSettings)
  nameWithType: ILocalizableToken.Localize(CultureInfo, AutoLocalizationSettings)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo%2cSdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings%2cSdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: bool Localize(CultureInfo culture, AutoLocalizationSettings autoLocalizationSettings)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    - id: autoLocalizationSettings
      type: Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
    return:
      type: System.Boolean
    content.vb: Function Localize(culture As CultureInfo, autoLocalizationSettings As AutoLocalizationSettings) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize*
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)
  id: Localize(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  langs:
  - csharp
  - vb
  name: Localize(CultureInfo, AutoLocalizationSettings, ILocalizableToken, Boolean)
  nameWithType: ILocalizableToken.Localize(CultureInfo, AutoLocalizationSettings, ILocalizableToken, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize(System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings, Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nSee <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo%2cSdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings%2cSdl.LanguagePlatform.Core.Tokenization.ILocalizableToken%2cSystem.Boolean%2cSdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: bool Localize(CultureInfo culture, AutoLocalizationSettings autoLocalizationSettings, ILocalizableToken originalMemoryToken, bool adjustCasing)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
    - id: autoLocalizationSettings
      type: Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
    - id: originalMemoryToken
      type: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
    - id: adjustCasing
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Function Localize(culture As CultureInfo, autoLocalizationSettings As AutoLocalizationSettings, originalMemoryToken As ILocalizableToken, adjustCasing As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize*
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  langs:
  - csharp
  - vb
  name: LocalizeAsync(CultureInfo, AutoLocalizationSettings, ICultureMetadataManager)
  nameWithType: ILocalizableToken.LocalizeAsync(CultureInfo, AutoLocalizationSettings, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nAuto-localizes the token according to the settings of the specified target culture \nand the provided auto-localization settings. The text of the token will be changed, \nbut not the values.\n<p>\nFor some token types, special <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings\" data-throw-if-not-resolved=\"false\"></xref> will be used, if provided.\n</p>\n"
  syntax:
    content: Task<bool> LocalizeAsync(CultureInfo culture, AutoLocalizationSettings autoLocalizationSettings, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The target culture
    - id: autoLocalizationSettings
      type: Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
      description: "Contains the <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings\" data-throw-if-not-resolved=\"false\"></xref> to use for some token types. May be null, \nin which case default settings will be used."
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: <code>true</code> if the token text has been changed, and <code>false</code> otherwise
    content.vb: Function LocalizeAsync(culture As CultureInfo, autoLocalizationSettings As AutoLocalizationSettings, cultureMetadataManager As ICultureMetadataManager) As Task(Of Boolean)
  overload: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync*
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: LocalizeAsync(System.Globalization.CultureInfo,Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings,Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken,System.Boolean,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  langs:
  - csharp
  - vb
  name: LocalizeAsync(CultureInfo, AutoLocalizationSettings, ILocalizableToken, Boolean, ICultureMetadataManager)
  nameWithType: ILocalizableToken.LocalizeAsync(CultureInfo, AutoLocalizationSettings, ILocalizableToken, Boolean, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync(System.Globalization.CultureInfo, Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings, Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken, System.Boolean, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nAuto-localizes the token according to the settings of the specified target culture \nand the provided auto-localization settings. The text of the token will be changed, \nbut not the values.\n<p>\nFor some token types, special <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings\" data-throw-if-not-resolved=\"false\"></xref> will be used, if provided.\n</p>\n"
  syntax:
    content: Task<bool> LocalizeAsync(CultureInfo culture, AutoLocalizationSettings autoLocalizationSettings, ILocalizableToken originalMemoryToken, bool adjustCasing, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The target culture
    - id: autoLocalizationSettings
      type: Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
      description: "Contains the <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings\" data-throw-if-not-resolved=\"false\"></xref> to use for some token types. May be null, \nin which case default settings will be used."
    - id: originalMemoryToken
      type: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
      description: "The original memory token. Some auto-localization settings will \nbe derived from the token, if provided."
    - id: adjustCasing
      type: System.Boolean
      description: >-
        If true, it is assumed that the token is in segment-initial position. Then, casing

        will be adjusted if the original memory token is supplied as well.
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: <code>true</code> if the token text has been changed, and <code>false</code> otherwise
    content.vb: Function LocalizeAsync(culture As CultureInfo, autoLocalizationSettings As AutoLocalizationSettings, originalMemoryToken As ILocalizableToken, adjustCasing As Boolean, cultureMetadataManager As ICultureMetadataManager) As Task(Of Boolean)
  overload: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync*
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)
  id: SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  langs:
  - csharp
  - vb
  name: SetValue(Token, Boolean)
  nameWithType: ILocalizableToken.SetValue(Token, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue(Sdl.LanguagePlatform.Core.Tokenization.Token, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nOverwrites the current token&apos;s value with the value from <code data-dev-comment-type=\"paramref\" class=\"paramref\">blueprint</code>, which\nalso must be a <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.DateTimeToken\" data-throw-if-not-resolved=\"false\"></xref>. Note that only the value and the type are\noverwritten, not the textual representation. \n"
  syntax:
    content: bool SetValue(Token blueprint, bool keepNumericSeparators)
    parameters:
    - id: blueprint
      type: Sdl.LanguagePlatform.Core.Tokenization.Token
      description: The token to take the value from
    - id: keepNumericSeparators
      type: System.Boolean
      description: >-
        Applicable to numeric (number and measurement) tokens only: if true, do not

        override the original group and decimal separators.
    return:
      type: System.Boolean
      description: A flag indicating whether the token&apos;s value or type were changed.
    content.vb: Function SetValue(blueprint As Token, keepNumericSeparators As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue*
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext
  commentId: P:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext
  id: TokenizationContext
  parent: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  langs:
  - csharp
  - vb
  name: TokenizationContext
  nameWithType: ILocalizableToken.TokenizationContext
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Tokenization
  summary: "\nThe <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext\" data-throw-if-not-resolved=\"false\"></xref> in which to apply localization etc.\n"
  syntax:
    content: TokenizationContext TokenizationContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Tokenization.TokenizationContext
    content.vb: Property TokenizationContext As TokenizationContext
  overload: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.LanguagePlatform.Core.Tokenization
  commentId: N:Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Tokenization
  nameWithType: Sdl.LanguagePlatform.Core.Tokenization
  fullName: Sdl.LanguagePlatform.Core.Tokenization
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize
  isExternal: true
  name: Localize
  nameWithType: ILocalizableToken.Localize
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.Localize
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: AutoLocalizationSettings
  nameWithType: AutoLocalizationSettings
  fullName: Sdl.LanguagePlatform.Core.Tokenization.AutoLocalizationSettings
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: ILocalizableToken
  nameWithType: ILocalizableToken
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync
  isExternal: true
  name: LocalizeAsync
  nameWithType: ILocalizableToken.LocalizeAsync
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.LocalizeAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue
  isExternal: true
  name: SetValue
  nameWithType: ILocalizableToken.SetValue
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.SetValue
- uid: Sdl.LanguagePlatform.Core.Tokenization.Token
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.Token
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: Token
  nameWithType: Token
  fullName: Sdl.LanguagePlatform.Core.Tokenization.Token
- uid: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext
  isExternal: true
  name: TokenizationContext
  nameWithType: ILocalizableToken.TokenizationContext
  fullName: Sdl.LanguagePlatform.Core.Tokenization.ILocalizableToken.TokenizationContext
- uid: Sdl.LanguagePlatform.Core.Tokenization.TokenizationContext
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.TokenizationContext
  parent: Sdl.LanguagePlatform.Core.Tokenization
  isExternal: true
  name: TokenizationContext
  nameWithType: TokenizationContext
  fullName: Sdl.LanguagePlatform.Core.Tokenization.TokenizationContext
