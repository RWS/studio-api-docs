### YamlMime:ManagedReference
items:
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner
  commentId: T:Sdl.Core.FineGrainedAlignment.LiftAligner
  id: LiftAligner
  parent: Sdl.Core.FineGrainedAlignment
  children:
  - Sdl.Core.FineGrainedAlignment.LiftAligner.#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)
  - Sdl.Core.FineGrainedAlignment.LiftAligner.Align(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  - Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  - Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  langs:
  - csharp
  - vb
  name: LiftAligner
  nameWithType: LiftAligner
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner
  type: Class
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: 'public class LiftAligner : Object'
    content.vb: >-
      Public Class LiftAligner
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.Core.FineGrainedAlignment.LiftAligner.#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)
  id: '#ctor(Sdl.Core.Globalization.CultureCode,Sdl.Core.Globalization.CultureCode)'
  parent: Sdl.Core.FineGrainedAlignment.LiftAligner
  langs:
  - csharp
  - vb
  name: LiftAligner(CultureCode, CultureCode)
  nameWithType: LiftAligner.LiftAligner(CultureCode, CultureCode)
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.LiftAligner(Sdl.Core.Globalization.CultureCode, Sdl.Core.Globalization.CultureCode)
  type: Constructor
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public LiftAligner(CultureCode sourceCulture, CultureCode targetCulture)
    parameters:
    - id: sourceCulture
      type: Sdl.Core.Globalization.CultureCode
    - id: targetCulture
      type: Sdl.Core.Globalization.CultureCode
    content.vb: Public Sub New(sourceCulture As CultureCode, targetCulture As CultureCode)
  overload: Sdl.Core.FineGrainedAlignment.LiftAligner.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.Align(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  commentId: M:Sdl.Core.FineGrainedAlignment.LiftAligner.Align(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  id: Align(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  parent: Sdl.Core.FineGrainedAlignment.LiftAligner
  langs:
  - csharp
  - vb
  name: Align(IAlignableContentPair, SimpleTree<LiftSpan>, SimpleTree<LiftSpan>, List<AlignmentEvidence>)
  nameWithType: LiftAligner.Align(IAlignableContentPair, SimpleTree<LiftSpan>, SimpleTree<LiftSpan>, List<AlignmentEvidence>)
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.Align(Sdl.Core.FineGrainedAlignment.IAlignableContentPair, Sdl.Core.FineGrainedAlignment.Core.SimpleTree<Sdl.Core.FineGrainedAlignment.Core.LiftSpan>, Sdl.Core.FineGrainedAlignment.Core.SimpleTree<Sdl.Core.FineGrainedAlignment.Core.LiftSpan>, System.Collections.Generic.List<Sdl.Core.FineGrainedAlignment.AlignmentEvidence>)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public void Align(IAlignableContentPair pair, SimpleTree<LiftSpan> sourceConstraints, SimpleTree<LiftSpan> targetConstraints, List<AlignmentEvidence> evidence)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.IAlignableContentPair
    - id: sourceConstraints
      type: Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}
    - id: targetConstraints
      type: Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}
    - id: evidence
      type: System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence}
    content.vb: Public Sub Align(pair As IAlignableContentPair, sourceConstraints As SimpleTree(Of LiftSpan), targetConstraints As SimpleTree(Of LiftSpan), evidence As List(Of AlignmentEvidence))
  overload: Sdl.Core.FineGrainedAlignment.LiftAligner.Align*
  nameWithType.vb: LiftAligner.Align(IAlignableContentPair, SimpleTree(Of LiftSpan), SimpleTree(Of LiftSpan), List(Of AlignmentEvidence))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.FineGrainedAlignment.LiftAligner.Align(Sdl.Core.FineGrainedAlignment.IAlignableContentPair, Sdl.Core.FineGrainedAlignment.Core.SimpleTree(Of Sdl.Core.FineGrainedAlignment.Core.LiftSpan), Sdl.Core.FineGrainedAlignment.Core.SimpleTree(Of Sdl.Core.FineGrainedAlignment.Core.LiftSpan), System.Collections.Generic.List(Of Sdl.Core.FineGrainedAlignment.AlignmentEvidence))
  name.vb: Align(IAlignableContentPair, SimpleTree(Of LiftSpan), SimpleTree(Of LiftSpan), List(Of AlignmentEvidence))
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  commentId: M:Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  id: AlignEx(Sdl.Core.FineGrainedAlignment.IAlignableContentPair,System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan},System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence})
  parent: Sdl.Core.FineGrainedAlignment.LiftAligner
  langs:
  - csharp
  - vb
  name: AlignEx(IAlignableContentPair, List<LiftSpan>, List<LiftSpan>, List<AlignmentEvidence>)
  nameWithType: LiftAligner.AlignEx(IAlignableContentPair, List<LiftSpan>, List<LiftSpan>, List<AlignmentEvidence>)
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx(Sdl.Core.FineGrainedAlignment.IAlignableContentPair, System.Collections.Generic.List<Sdl.Core.FineGrainedAlignment.Core.LiftSpan>, System.Collections.Generic.List<Sdl.Core.FineGrainedAlignment.Core.LiftSpan>, System.Collections.Generic.List<Sdl.Core.FineGrainedAlignment.AlignmentEvidence>)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public void AlignEx(IAlignableContentPair pair, List<LiftSpan> sourceConstraintsList, List<LiftSpan> targetConstraintsList, List<AlignmentEvidence> evidence)
    parameters:
    - id: pair
      type: Sdl.Core.FineGrainedAlignment.IAlignableContentPair
    - id: sourceConstraintsList
      type: System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}
    - id: targetConstraintsList
      type: System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}
    - id: evidence
      type: System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence}
    content.vb: Public Sub AlignEx(pair As IAlignableContentPair, sourceConstraintsList As List(Of LiftSpan), targetConstraintsList As List(Of LiftSpan), evidence As List(Of AlignmentEvidence))
  overload: Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx*
  nameWithType.vb: LiftAligner.AlignEx(IAlignableContentPair, List(Of LiftSpan), List(Of LiftSpan), List(Of AlignmentEvidence))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx(Sdl.Core.FineGrainedAlignment.IAlignableContentPair, System.Collections.Generic.List(Of Sdl.Core.FineGrainedAlignment.Core.LiftSpan), System.Collections.Generic.List(Of Sdl.Core.FineGrainedAlignment.Core.LiftSpan), System.Collections.Generic.List(Of Sdl.Core.FineGrainedAlignment.AlignmentEvidence))
  name.vb: AlignEx(IAlignableContentPair, List(Of LiftSpan), List(Of LiftSpan), List(Of AlignmentEvidence))
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  commentId: M:Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  id: DebugAlignedSpanPair(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  parent: Sdl.Core.FineGrainedAlignment.LiftAligner
  langs:
  - csharp
  - vb
  name: DebugAlignedSpanPair(LiftAlignedSpanPair)
  nameWithType: LiftAligner.DebugAlignedSpanPair(LiftAlignedSpanPair)
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair(Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair)
  type: Method
  source:
    path: Sdl.Core.FineGrainedAlignment
    isExternal: true
  assemblies:
  - Sdl.Core.FineGrainedAlignment
  namespace: Sdl.Core.FineGrainedAlignment
  syntax:
    content: public void DebugAlignedSpanPair(LiftAlignedSpanPair spanPair)
    parameters:
    - id: spanPair
      type: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
    content.vb: Public Sub DebugAlignedSpanPair(spanPair As LiftAlignedSpanPair)
  overload: Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.FineGrainedAlignment
  commentId: N:Sdl.Core.FineGrainedAlignment
  isExternal: true
  name: Sdl.Core.FineGrainedAlignment
  nameWithType: Sdl.Core.FineGrainedAlignment
  fullName: Sdl.Core.FineGrainedAlignment
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.#ctor*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.LiftAligner.#ctor
  isExternal: true
  name: LiftAligner
  nameWithType: LiftAligner.LiftAligner
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.LiftAligner
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.Align*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.LiftAligner.Align
  isExternal: true
  name: Align
  nameWithType: LiftAligner.Align
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.Align
- uid: Sdl.Core.FineGrainedAlignment.IAlignableContentPair
  commentId: T:Sdl.Core.FineGrainedAlignment.IAlignableContentPair
  parent: Sdl.Core.FineGrainedAlignment
  isExternal: true
  name: IAlignableContentPair
  nameWithType: IAlignableContentPair
  fullName: Sdl.Core.FineGrainedAlignment.IAlignableContentPair
- uid: Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}
  commentId: '!:Sdl.Core.FineGrainedAlignment.Core.SimpleTree{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}'
  definition: Sdl.Core.FineGrainedAlignment.Core.SimpleTree`1
  name: SimpleTree<LiftSpan>
  nameWithType: SimpleTree<LiftSpan>
  fullName: Sdl.Core.FineGrainedAlignment.Core.SimpleTree<Sdl.Core.FineGrainedAlignment.Core.LiftSpan>
  nameWithType.vb: SimpleTree(Of LiftSpan)
  fullName.vb: Sdl.Core.FineGrainedAlignment.Core.SimpleTree(Of Sdl.Core.FineGrainedAlignment.Core.LiftSpan)
  name.vb: SimpleTree(Of LiftSpan)
  spec.csharp:
  - uid: Sdl.Core.FineGrainedAlignment.Core.SimpleTree`1
    name: SimpleTree
    nameWithType: SimpleTree
    fullName: Sdl.Core.FineGrainedAlignment.Core.SimpleTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    name: LiftSpan
    nameWithType: LiftSpan
    fullName: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.FineGrainedAlignment.Core.SimpleTree`1
    name: SimpleTree
    nameWithType: SimpleTree
    fullName: Sdl.Core.FineGrainedAlignment.Core.SimpleTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    name: LiftSpan
    nameWithType: LiftSpan
    fullName: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence}
  commentId: '!:System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.AlignmentEvidence}'
  definition: System.Collections.Generic.List`1
  name: List<AlignmentEvidence>
  nameWithType: List<AlignmentEvidence>
  fullName: System.Collections.Generic.List<Sdl.Core.FineGrainedAlignment.AlignmentEvidence>
  nameWithType.vb: List(Of AlignmentEvidence)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.FineGrainedAlignment.AlignmentEvidence)
  name.vb: List(Of AlignmentEvidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
    name: AlignmentEvidence
    nameWithType: AlignmentEvidence
    fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
    name: AlignmentEvidence
    nameWithType: AlignmentEvidence
    fullName: Sdl.Core.FineGrainedAlignment.AlignmentEvidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.FineGrainedAlignment.Core.SimpleTree`1
  isExternal: true
  name: SimpleTree<>
  nameWithType: SimpleTree<>
  fullName: Sdl.Core.FineGrainedAlignment.Core.SimpleTree<>
  nameWithType.vb: SimpleTree(Of )
  fullName.vb: Sdl.Core.FineGrainedAlignment.Core.SimpleTree(Of )
  name.vb: SimpleTree(Of )
  spec.csharp:
  - uid: Sdl.Core.FineGrainedAlignment.Core.SimpleTree`1
    name: SimpleTree
    nameWithType: SimpleTree
    fullName: Sdl.Core.FineGrainedAlignment.Core.SimpleTree
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.FineGrainedAlignment.Core.SimpleTree`1
    name: SimpleTree
    nameWithType: SimpleTree
    fullName: Sdl.Core.FineGrainedAlignment.Core.SimpleTree
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx
  isExternal: true
  name: AlignEx
  nameWithType: LiftAligner.AlignEx
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.AlignEx
- uid: System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}
  commentId: '!:System.Collections.Generic.List{Sdl.Core.FineGrainedAlignment.Core.LiftSpan}'
  definition: System.Collections.Generic.List`1
  name: List<LiftSpan>
  nameWithType: List<LiftSpan>
  fullName: System.Collections.Generic.List<Sdl.Core.FineGrainedAlignment.Core.LiftSpan>
  nameWithType.vb: List(Of LiftSpan)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.FineGrainedAlignment.Core.LiftSpan)
  name.vb: List(Of LiftSpan)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    name: LiftSpan
    nameWithType: LiftSpan
    fullName: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    name: LiftSpan
    nameWithType: LiftSpan
    fullName: Sdl.Core.FineGrainedAlignment.Core.LiftSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair*
  commentId: Overload:Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair
  isExternal: true
  name: DebugAlignedSpanPair
  nameWithType: LiftAligner.DebugAlignedSpanPair
  fullName: Sdl.Core.FineGrainedAlignment.LiftAligner.DebugAlignedSpanPair
- uid: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
  isExternal: true
  name: LiftAlignedSpanPair
  nameWithType: LiftAlignedSpanPair
  fullName: Sdl.Core.FineGrainedAlignment.Core.LiftAlignedSpanPair
