### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  commentId: T:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  id: ThreadSafeListHandler`1
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  children:
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Add(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Clear
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Contains(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.CopyTo(`0[],System.Int32)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Count
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetEnumerator
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetSafeClone
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IndexOf(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Insert(System.Int32,`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IsReadOnly
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Item(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Items
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Remove(`0)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.RemoveAt(System.Int32)
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.SyncRoot
  - Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ThreadSafeListHandler<T>
  nameWithType: ThreadSafeListHandler<T>
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  syntax:
    content: 'public class ThreadSafeListHandler<T> : IList<T>, ICollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
      description: Generic type for the items
    content.vb: >-
      Public Class ThreadSafeListHandler(Of T)
          Implements IList(Of T), ICollection(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ThreadSafeListHandler(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T)
  name.vb: ThreadSafeListHandler(Of T)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  id: '#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)'
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: ThreadSafeListHandler(Func<T, IEnumerable<T>, (Boolean IsValid, String ErrorReason)>, Boolean)
  nameWithType: ThreadSafeListHandler<T>.ThreadSafeListHandler(Func<T, IEnumerable<T>, (Boolean IsValid, String ErrorReason)>, Boolean)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.ThreadSafeListHandler(System.Func<T, System.Collections.Generic.IEnumerable<T>, System.ValueTuple<System.Boolean, System.String>>, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nA Thread-Safe handler for a collection of items. Starts with an empty collection.\n"
  syntax:
    content: public ThreadSafeListHandler(Func<T, IEnumerable<T>, (bool IsValid, string ErrorReason)> itemValidator = null, bool allowDefault = false)
    parameters:
    - id: itemValidator
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}},System.ValueTuple{System.Boolean,System.String}}
      description: Optional validator for the items to be enforced on setting, adding or inserting items. Does not verify the items at construction time.
    - id: allowDefault
      type: System.Boolean
      description: Tells if items in the list are allowed to have the type&apos;s default value.
    content.vb: Public Sub New(itemValidator As Func(Of T, IEnumerable(Of T), (IsValid As Boolean, ErrorReason As String)(Of Boolean , String)) = Nothing, allowDefault As Boolean = False)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  nameWithType.vb: ThreadSafeListHandler(Of T).ThreadSafeListHandler(Func(Of T, IEnumerable(Of T), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).ThreadSafeListHandler(System.Func(Of T, System.Collections.Generic.IEnumerable(Of T), System.ValueTuple(Of System.Boolean, System.String)), System.Boolean)
  name.vb: ThreadSafeListHandler(Func(Of T, IEnumerable(Of T), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}},System.Boolean)'
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: ThreadSafeListHandler(IEnumerable<T>, Func<T, IEnumerable<T>, (Boolean IsValid, String ErrorReason)>, Boolean)
  nameWithType: ThreadSafeListHandler<T>.ThreadSafeListHandler(IEnumerable<T>, Func<T, IEnumerable<T>, (Boolean IsValid, String ErrorReason)>, Boolean)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.ThreadSafeListHandler(System.Collections.Generic.IEnumerable<T>, System.Func<T, System.Collections.Generic.IEnumerable<T>, System.ValueTuple<System.Boolean, System.String>>, System.Boolean)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nA Thread-Safe handler wrapping a given List. It manipulates the list directly, in a thread safe way.\nNOTE: If the list is manipulated without the handler, you can still have concurrency issues. All handling should be done through this component!\n"
  syntax:
    content: public ThreadSafeListHandler(IEnumerable<T> items, Func<T, IEnumerable<T>, (bool IsValid, string ErrorReason)> itemValidator = null, bool allowDefault = false)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The list to be manipulated through the handler in a synchronized thread-safe way.
    - id: itemValidator
      type: System.Func{{T},System.Collections.Generic.IEnumerable{{T}},System.ValueTuple{System.Boolean,System.String}}
      description: Optional validator for the items to be enforced on setting, adding or inserting items. Does not verify the items at construction time.
    - id: allowDefault
      type: System.Boolean
      description: Tells if items in the list are allowed to have the type&apos;s default value.
    content.vb: Public Sub New(items As IEnumerable(Of T), itemValidator As Func(Of T, IEnumerable(Of T), (IsValid As Boolean, ErrorReason As String)(Of Boolean , String)) = Nothing, allowDefault As Boolean = False)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when the provided items are null.
  nameWithType.vb: ThreadSafeListHandler(Of T).ThreadSafeListHandler(IEnumerable(Of T), Func(Of T, IEnumerable(Of T), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).ThreadSafeListHandler(System.Collections.Generic.IEnumerable(Of T), System.Func(Of T, System.Collections.Generic.IEnumerable(Of T), System.ValueTuple(Of System.Boolean, System.String)), System.Boolean)
  name.vb: ThreadSafeListHandler(IEnumerable(Of T), Func(Of T, IEnumerable(Of T), (IsValid As Boolean, ErrorReason As String)(Of Boolean, String)), Boolean)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Add(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Add(`0)
  id: Add(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ThreadSafeListHandler<T>.Add(T)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Add(T)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nAdds an item to the collection. Throws an exception if the item is invalid.\n"
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to be added if it passes validation rules of the collection.
    content.vb: Public Sub Add(item As T)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: ThreadSafeListHandler(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Add(T)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Clear
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ThreadSafeListHandler<T>.Clear()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Clear()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves all the items from the collection.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: ThreadSafeListHandler(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Clear()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Contains(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Contains(`0)
  id: Contains(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: ThreadSafeListHandler<T>.Contains(T)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Contains(T)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTells if the collection contains a given item.\n"
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to be searched.
    return:
      type: System.Boolean
      description: True if the item is found in the collection. False otherwise.
    content.vb: Public Function Contains(item As T) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: ThreadSafeListHandler(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Contains(T)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.CopyTo(`0[],System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: ThreadSafeListHandler<T>.CopyTo(T[], Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nCopies the items of the collection to an array, starting at a given index.\n"
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: Array where to copy items to.
    - id: arrayIndex
      type: System.Int32
      description: Index in the array where to start the copying from.
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: ThreadSafeListHandler(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IndexOf(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: ThreadSafeListHandler<T>.IndexOf(T)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.IndexOf(T)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGets the index of a given item in the collection.\n"
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to be searched in the collection.
    return:
      type: System.Int32
      description: The index of the item in the collection. -1 if not found.
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: ThreadSafeListHandler(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).IndexOf(T)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Insert(System.Int32,`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: ThreadSafeListHandler<T>.Insert(Int32, T)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Insert(System.Int32, T)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nInserts an item at a given index. Throws an exception if the item is invalid or if the index is out of bounds.\n"
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: Index where to insert the given item.
    - id: item
      type: '{T}'
      description: Item to be inserted at the given index.
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: ThreadSafeListHandler(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Insert(System.Int32, T)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Remove(`0)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Remove(`0)
  id: Remove(`0)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ThreadSafeListHandler<T>.Remove(T)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Remove(T)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves a given item from the collection, if found.\n"
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to be removed.
    return:
      type: System.Boolean
      description: True if the item was removed. False otherwise.
    content.vb: Public Function Remove(item As T) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: ThreadSafeListHandler(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Remove(T)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.RemoveAt(System.Int32)
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ThreadSafeListHandler<T>.RemoveAt(Int32)
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.RemoveAt(System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nRemoves an item at a given index.\n"
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Index for the item that needs to be removed.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.RemoveAt*
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: ThreadSafeListHandler(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).RemoveAt(System.Int32)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetEnumerator
  id: GetEnumerator
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ThreadSafeListHandler<T>.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGets an enumerator that can be used to iterate the collection.\n"
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator that can be used to iterate the collection.
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ThreadSafeListHandler(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ThreadSafeListHandler<T>.IEnumerable.GetEnumerator()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ThreadSafeListHandler(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetSafeClone
  commentId: M:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetSafeClone
  id: GetSafeClone
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: GetSafeClone()
  nameWithType: ThreadSafeListHandler<T>.GetSafeClone()
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.GetSafeClone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGenerates an array clone obtained in a thread safe way. Should be used for enumeration instead of the original list.\nManipulating the result will not change the original list.\n"
  syntax:
    content: public List<T> GetSafeClone()
    return:
      type: System.Collections.Generic.List{{T}}
      description: A snapshot of the backing list.
    content.vb: Public Function GetSafeClone As List(Of T)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetSafeClone*
  nameWithType.vb: ThreadSafeListHandler(Of T).GetSafeClone()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).GetSafeClone()
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.SyncRoot
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.SyncRoot
  id: SyncRoot
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: ThreadSafeListHandler<T>.SyncRoot
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.SyncRoot
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nThe object used for the locking mechanism that keeps the backing list operations synchronized.\n"
  syntax:
    content: public object SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property SyncRoot As Object
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.SyncRoot*
  nameWithType.vb: ThreadSafeListHandler(Of T).SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).SyncRoot
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Items
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Items
  id: Items
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: ThreadSafeListHandler<T>.Items
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Items
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nThe items, not protected by any locking mechanisms. Should not be iterated on - use GetSafeArrayClone instead.\nShould only be used if more complex manipulation is needed that is not available through the handler. Must use SyncRoot for locking!\nThis is the exposing the same exact reference provided in the constructor of the handler.\n"
  syntax:
    content: public List<T> Items { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public ReadOnly Property Items As List(Of T)
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Items*
  nameWithType.vb: ThreadSafeListHandler(Of T).Items
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Items
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Item(System.Int32)
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ThreadSafeListHandler<T>.Item[Int32]
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Item[System.Int32]
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGets or sets an item at the specified index. Throws an exception if the index is out of bounds.\n"
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: Index for the desired item.
    return:
      type: '{T}'
      description: The item at the given index.
    content.vb: Public Property Item(index As Integer) As T
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if index is out of bounds of the collection.
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: ThreadSafeListHandler(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Count
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Count
  id: Count
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ThreadSafeListHandler<T>.Count
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Count
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nGets the number of elements in the collection.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  nameWithType.vb: ThreadSafeListHandler(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Count
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IsReadOnly
  commentId: P:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IsReadOnly
  id: IsReadOnly
  parent: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ThreadSafeListHandler<T>.IsReadOnly
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.IsReadOnly
  type: Property
  source:
    path: Sdl.LanguagePlatform.TranslationMemoryApi
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemoryApi
  namespace: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  summary: "\nTells if the collection is read-only. Always returns false.\n"
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: ThreadSafeListHandler(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).IsReadOnly
references:
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  commentId: N:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  nameWithType: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.#ctor
  isExternal: true
  name: ThreadSafeListHandler
  nameWithType: ThreadSafeListHandler<T>.ThreadSafeListHandler
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.ThreadSafeListHandler
  nameWithType.vb: ThreadSafeListHandler(Of T).ThreadSafeListHandler
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).ThreadSafeListHandler
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.Func{{T},System.Collections.Generic.IEnumerable{{T}},System.ValueTuple{System.Boolean,System.String}}
  commentId: T:System.Func{`0,System.Collections.Generic.IEnumerable{`0},System.ValueTuple{System.Boolean,System.String}}
  parent: System
  definition: System.Func`3
  name: Func<T, IEnumerable<T>, (T1, T2)<Boolean, String>>
  nameWithType: Func<T, IEnumerable<T>, (T1, T2)<Boolean, String>>
  fullName: System.Func<T, System.Collections.Generic.IEnumerable<T>, System.ValueTuple<System.Boolean, System.String>>
  nameWithType.vb: Func(Of T, IEnumerable(Of T), (T1, T2)(Of Boolean, String))
  fullName.vb: System.Func(Of T, System.Collections.Generic.IEnumerable(Of T), System.ValueTuple(Of System.Boolean, System.String))
  name.vb: Func(Of T, IEnumerable(Of T), (T1, T2)(Of Boolean, String))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Add*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Add
  isExternal: true
  name: Add
  nameWithType: ThreadSafeListHandler<T>.Add
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Add
  nameWithType.vb: ThreadSafeListHandler(Of T).Add
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Clear*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Clear
  isExternal: true
  name: Clear
  nameWithType: ThreadSafeListHandler<T>.Clear
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Clear
  nameWithType.vb: ThreadSafeListHandler(Of T).Clear
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Contains*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Contains
  isExternal: true
  name: Contains
  nameWithType: ThreadSafeListHandler<T>.Contains
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Contains
  nameWithType.vb: ThreadSafeListHandler(Of T).Contains
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.CopyTo*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: ThreadSafeListHandler<T>.CopyTo
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.CopyTo
  nameWithType.vb: ThreadSafeListHandler(Of T).CopyTo
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IndexOf*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IndexOf
  isExternal: true
  name: IndexOf
  nameWithType: ThreadSafeListHandler<T>.IndexOf
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.IndexOf
  nameWithType.vb: ThreadSafeListHandler(Of T).IndexOf
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Insert*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Insert
  isExternal: true
  name: Insert
  nameWithType: ThreadSafeListHandler<T>.Insert
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Insert
  nameWithType.vb: ThreadSafeListHandler(Of T).Insert
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Remove*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Remove
  isExternal: true
  name: Remove
  nameWithType: ThreadSafeListHandler<T>.Remove
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Remove
  nameWithType.vb: ThreadSafeListHandler(Of T).Remove
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.RemoveAt*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.RemoveAt
  isExternal: true
  name: RemoveAt
  nameWithType: ThreadSafeListHandler<T>.RemoveAt
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.RemoveAt
  nameWithType.vb: ThreadSafeListHandler(Of T).RemoveAt
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: ThreadSafeListHandler<T>.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.GetEnumerator
  nameWithType.vb: ThreadSafeListHandler(Of T).GetEnumerator
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: ThreadSafeListHandler<T>.IEnumerable.GetEnumerator
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ThreadSafeListHandler(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetSafeClone*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.GetSafeClone
  isExternal: true
  name: GetSafeClone
  nameWithType: ThreadSafeListHandler<T>.GetSafeClone
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.GetSafeClone
  nameWithType.vb: ThreadSafeListHandler(Of T).GetSafeClone
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).GetSafeClone
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.SyncRoot*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.SyncRoot
  isExternal: true
  name: SyncRoot
  nameWithType: ThreadSafeListHandler<T>.SyncRoot
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.SyncRoot
  nameWithType.vb: ThreadSafeListHandler(Of T).SyncRoot
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).SyncRoot
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Items*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Items
  isExternal: true
  name: Items
  nameWithType: ThreadSafeListHandler<T>.Items
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Items
  nameWithType.vb: ThreadSafeListHandler(Of T).Items
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Items
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Item*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Item
  isExternal: true
  name: Item
  nameWithType: ThreadSafeListHandler<T>.Item
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Item
  nameWithType.vb: ThreadSafeListHandler(Of T).Item
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Count*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.Count
  isExternal: true
  name: Count
  nameWithType: ThreadSafeListHandler<T>.Count
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.Count
  nameWithType.vb: ThreadSafeListHandler(Of T).Count
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IsReadOnly*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ThreadSafeListHandler<T>.IsReadOnly
  fullName: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler<T>.IsReadOnly
  nameWithType.vb: ThreadSafeListHandler(Of T).IsReadOnly
  fullName.vb: Sdl.LanguagePlatform.TranslationMemoryApi.LiteBCM.Collection.ThreadSafeListHandler(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
