### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.WordCounter
  id: WordCounter
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync(System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token},Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions,Sdl.Core.Globalization.CultureCode)
  langs:
  - csharp
  - vb
  name: WordCounter
  nameWithType: WordCounter
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nProvides <xref href=\"Sdl.LanguagePlatform.TranslationMemory.WordCounts\" data-throw-if-not-resolved=\"false\"></xref> for a set of tokens, where necessary converting <see cref=\"!:TokenType.Word\"></see> tokens\nfor JA/ZH et al back to <see cref=\"!:TokenType.CharSequence\"></see> to produce &apos;legacy&apos; results. When creating word counts\nfor multiple segments, use a single <xref href=\"Sdl.LanguagePlatform.TranslationMemory.WordCounter\" data-throw-if-not-resolved=\"false\"></xref> object and call <xref href=\"Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync(System.Collections.Generic.IList%7bSdl.LanguagePlatform.Core.Tokenization.Token%7d%2cSdl.LanguagePlatform.TranslationMemory.WordCountsOptions%2cSdl.Core.Globalization.CultureCode)\" data-throw-if-not-resolved=\"false\"></xref>\nrepeatedly, to avoid repeated tokenizer creation in those cases.\n"
  syntax:
    content: public class WordCounter
    content.vb: Public Class WordCounter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: CreateAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.TranslationMemory.WordCounter
  langs:
  - csharp
  - vb
  name: CreateAsync(ICultureMetadataManager)
  nameWithType: WordCounter.CreateAsync(ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nCreates the <xref href=\"Sdl.LanguagePlatform.TranslationMemory.WordCounter\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public static Task<WordCounter> CreateAsync(ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.TranslationMemory.WordCounter}
    content.vb: Public Shared Function CreateAsync(cultureMetadataManager As ICultureMetadataManager) As Task(Of WordCounter)
  overload: Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync(System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token},Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions,Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync(System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token},Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions,Sdl.Core.Globalization.CultureCode)
  id: GetWordCountsAsync(System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token},Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions,Sdl.Core.Globalization.CultureCode)
  parent: Sdl.LanguagePlatform.TranslationMemory.WordCounter
  langs:
  - csharp
  - vb
  name: GetWordCountsAsync(IList<Token>, WordCountsOptions, CultureCode)
  nameWithType: WordCounter.GetWordCountsAsync(IList<Token>, WordCountsOptions, CultureCode)
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync(System.Collections.Generic.IList<Sdl.LanguagePlatform.Core.Tokenization.Token>, Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions, Sdl.Core.Globalization.CultureCode)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nProduce a <xref href=\"Sdl.LanguagePlatform.TranslationMemory.WordCounts\" data-throw-if-not-resolved=\"false\"></xref> from the specified tokens\n"
  syntax:
    content: public Task<WordCounts> GetWordCountsAsync(IList<Token> tokens, WordCountsOptions options, CultureCode cultureCode)
    parameters:
    - id: tokens
      type: System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token}
      description: The tokens to analyze
    - id: options
      type: Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions
      description: The <xref href="Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions" data-throw-if-not-resolved="false"></xref> to apply
    - id: cultureCode
      type: Sdl.Core.Globalization.CultureCode
    return:
      type: System.Threading.Tasks.Task{Sdl.LanguagePlatform.TranslationMemory.WordCounts}
    content.vb: Public Function GetWordCountsAsync(tokens As IList(Of Token), options As WordCountsOptions, cultureCode As CultureCode) As Task(Of WordCounts)
  overload: Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync*
  nameWithType.vb: WordCounter.GetWordCountsAsync(IList(Of Token), WordCountsOptions, CultureCode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync(System.Collections.Generic.IList(Of Sdl.LanguagePlatform.Core.Tokenization.Token), Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions, Sdl.Core.Globalization.CultureCode)
  name.vb: GetWordCountsAsync(IList(Of Token), WordCountsOptions, CultureCode)
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync
  isExternal: true
  name: CreateAsync
  nameWithType: WordCounter.CreateAsync
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter.CreateAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Threading.Tasks.Task{Sdl.LanguagePlatform.TranslationMemory.WordCounter}
  commentId: T:System.Threading.Tasks.Task{Sdl.LanguagePlatform.TranslationMemory.WordCounter}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WordCounter>
  nameWithType: Task<WordCounter>
  fullName: System.Threading.Tasks.Task<Sdl.LanguagePlatform.TranslationMemory.WordCounter>
  nameWithType.vb: Task(Of WordCounter)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.LanguagePlatform.TranslationMemory.WordCounter)
  name.vb: Task(Of WordCounter)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter
    name: WordCounter
    nameWithType: WordCounter
    fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter
    name: WordCounter
    nameWithType: WordCounter
    fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync
  isExternal: true
  name: GetWordCountsAsync
  nameWithType: WordCounter.GetWordCountsAsync
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounter.GetWordCountsAsync
- uid: System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token}
  commentId: T:System.Collections.Generic.IList{Sdl.LanguagePlatform.Core.Tokenization.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Token>
  nameWithType: IList<Token>
  fullName: System.Collections.Generic.IList<Sdl.LanguagePlatform.Core.Tokenization.Token>
  nameWithType.vb: IList(Of Token)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.LanguagePlatform.Core.Tokenization.Token)
  name.vb: IList(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    nameWithType: Token
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    nameWithType: Token
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: WordCountsOptions
  nameWithType: WordCountsOptions
  fullName: Sdl.LanguagePlatform.TranslationMemory.WordCountsOptions
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: System.Threading.Tasks.Task{Sdl.LanguagePlatform.TranslationMemory.WordCounts}
  commentId: T:System.Threading.Tasks.Task{Sdl.LanguagePlatform.TranslationMemory.WordCounts}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WordCounts>
  nameWithType: Task<WordCounts>
  fullName: System.Threading.Tasks.Task<Sdl.LanguagePlatform.TranslationMemory.WordCounts>
  nameWithType.vb: Task(Of WordCounts)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.LanguagePlatform.TranslationMemory.WordCounts)
  name.vb: Task(Of WordCounts)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.TranslationMemory.WordCounts
    name: WordCounts
    nameWithType: WordCounts
    fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounts
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.TranslationMemory.WordCounts
    name: WordCounts
    nameWithType: WordCounts
    fullName: Sdl.LanguagePlatform.TranslationMemory.WordCounts
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
