### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segment
  commentId: T:Sdl.LanguagePlatform.Core.Segment
  id: Segment
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.Segment.#ctor
  - Sdl.LanguagePlatform.Core.Segment.#ctor(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  - Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  - Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  - Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  - Sdl.LanguagePlatform.Core.Segment.Clear
  - Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync
  - Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token})
  - Sdl.LanguagePlatform.Core.Segment.Culture
  - Sdl.LanguagePlatform.Core.Segment.CultureName
  - Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  - Sdl.LanguagePlatform.Core.Segment.DeleteTags
  - Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  - Sdl.LanguagePlatform.Core.Segment.Duplicate
  - Sdl.LanguagePlatform.Core.Segment.Elements
  - Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  - Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  - Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  - Sdl.LanguagePlatform.Core.Segment.GetHashCode
  - Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  - Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  - Sdl.LanguagePlatform.Core.Segment.GetTagCount
  - Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  - Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  - Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  - Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  - Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  - Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  - Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  - Sdl.LanguagePlatform.Core.Segment.HasTags
  - Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  - Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  - Sdl.LanguagePlatform.Core.Segment.IsEmpty
  - Sdl.LanguagePlatform.Core.Segment.IsValid
  - Sdl.LanguagePlatform.Core.Segment.LastElement
  - Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  - Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  - Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  - Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  - Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)
  - Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)
  - Sdl.LanguagePlatform.Core.Segment.ToPlain
  - Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  - Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  - Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)
  - Sdl.LanguagePlatform.Core.Segment.ToString
  - Sdl.LanguagePlatform.Core.Segment.Tokens
  - Sdl.LanguagePlatform.Core.Segment.Trim
  - Sdl.LanguagePlatform.Core.Segment.TrimEnd
  - Sdl.LanguagePlatform.Core.Segment.TrimStart
  - Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  - Sdl.LanguagePlatform.Core.Segment.Validate
  - Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  - Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  - Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  langs:
  - csharp
  - vb
  name: Segment
  nameWithType: Segment
  fullName: Sdl.LanguagePlatform.Core.Segment
  type: Class
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Represents a segment, which is a sequence of <xref href="Sdl.LanguagePlatform.Core.SegmentElement" data-throw-if-not-resolved="false"></xref>s, 

    in a particular language.
  example: []
  syntax:
    content: >-
      [DataContract]

      public class Segment
    content.vb: >-
      <DataContract>

      Public Class Segment
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segment.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segment.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Segment()
  nameWithType: Segment.Segment()
  fullName: Sdl.LanguagePlatform.Core.Segment.Segment()
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Initializes a new instance with the <xref href="System.Globalization.CultureInfo.InvariantCulture" data-throw-if-not-resolved="false"></xref>, 

    and an empty list of elements.
  example: []
  syntax:
    content: public Segment()
    content.vb: Public Sub New()
  overload: Sdl.LanguagePlatform.Core.Segment.#ctor*
  nameWithType.vb: Segment.New()
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.New()
  name.vb: New()
- uid: Sdl.LanguagePlatform.Core.Segment.#ctor(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.#ctor(Sdl.Core.Globalization.CultureCode)
  id: '#ctor(Sdl.Core.Globalization.CultureCode)'
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Segment(CultureCode)
  nameWithType: Segment.Segment(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.Segment.Segment(Sdl.Core.Globalization.CultureCode)
  type: Constructor
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Initializes a new instance with the specified culture, and an empty list of elements.
  example: []
  syntax:
    content: public Segment(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The CultureCode object representing the language.
    content.vb: Public Sub New(culture As CultureCode)
  overload: Sdl.LanguagePlatform.Core.Segment.#ctor*
  nameWithType.vb: Segment.New(CultureCode)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.New(Sdl.Core.Globalization.CultureCode)
  name.vb: New(CultureCode)
- uid: Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  id: Equals(Sdl.LanguagePlatform.Core.Segment)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Equals(Segment)
  nameWithType: Segment.Equals(Segment)
  fullName: Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Compares this instance to another Segment object.
  example: []
  syntax:
    content: public bool Equals(Segment other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segment
      description: The other instance.
    return:
      type: System.Boolean
      description: true if the language and all the elements are the same, otherwise false.
    content.vb: Public Function Equals(other As Segment) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.Equals*
- uid: Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  id: WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: WeakEquals(Segment)
  nameWithType: Segment.WeakEquals(Segment)
  fullName: Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes weak equality with another segment.

    <p>Weak equality does not check culture compatibility and tag anchors do not need to be

    identical, but text elements must match, as well as the order of tags (element similarity must 

    not be None)</p>
  example: []
  syntax:
    content: public bool WeakEquals(Segment other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segment
    return:
      type: System.Boolean
    content.vb: Public Function WeakEquals(other As Segment) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.WeakEquals*
- uid: Sdl.LanguagePlatform.Core.Segment.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Segment.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetHashCode()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: <xref href="System.Object.GetHashCode" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this object
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.LanguagePlatform.Core.Segment.GetHashCode*
- uid: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  id: GetWeakHashCode
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetWeakHashCode()
  nameWithType: Segment.GetWeakHashCode()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns a hash code which does not depend on tag anchors in the segment. This 

    can be used for translation tracking in bilingual documents.
  example: []
  syntax:
    content: public int GetWeakHashCode()
    return:
      type: System.Int32
      description: A hash code which is independent of tag anchors.
    content.vb: Public Function GetWeakHashCode() As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode*
- uid: Sdl.LanguagePlatform.Core.Segment.Duplicate
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Duplicate
  id: Duplicate
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Duplicate()
  nameWithType: Segment.Duplicate()
  fullName: Sdl.LanguagePlatform.Core.Segment.Duplicate()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Creates a new instance that is a deep copy of this instance.
  example: []
  syntax:
    content: public Segment Duplicate()
    return:
      type: Sdl.LanguagePlatform.Core.Segment
      description: A new instance that is a deep copy of this instance.
    content.vb: Public Function Duplicate() As Segment
  overload: Sdl.LanguagePlatform.Core.Segment.Duplicate*
- uid: Sdl.LanguagePlatform.Core.Segment.Validate
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Validate
  id: Validate
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Segment.Validate()
  fullName: Sdl.LanguagePlatform.Core.Segment.Validate()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Validates the current instance, with the <xref href="Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors" data-throw-if-not-resolved="false"></xref> validation mode.
  example: []
  syntax:
    content: public ErrorCode Validate()
    return:
      type: Sdl.LanguagePlatform.Core.ErrorCode
      description: >-
        An error code (which may be <xref href="Sdl.LanguagePlatform.Core.ErrorCode.OK" data-throw-if-not-resolved="false"></xref>, indicating
                    the segment is valid).
    content.vb: Public Function Validate() As ErrorCode
  overload: Sdl.LanguagePlatform.Core.Segment.Validate*
- uid: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  commentId: M:Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  id: HasPeripheralWhitespace
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasPeripheralWhitespace()
  nameWithType: Segment.HasPeripheralWhitespace()
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Determines whether the segment starts or ends with at least one whitespace character.
  example: []
  syntax:
    content: public bool HasPeripheralWhitespace()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function HasPeripheralWhitespace() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace*
- uid: Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  id: Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Validate(ValidationMode)
  nameWithType: Segment.Validate(Segment.ValidationMode)
  fullName: Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Performs validation checks on this instance, applying the specified validation mode.
  example: []
  syntax:
    content: public ErrorCode Validate(Segment.ValidationMode mode)
    parameters:
    - id: mode
      type: Sdl.LanguagePlatform.Core.Segment.ValidationMode
      description: The validation mode to apply
    return:
      type: Sdl.LanguagePlatform.Core.ErrorCode
      description: >-
        An error code (which may be <xref href="Sdl.LanguagePlatform.Core.ErrorCode.OK" data-throw-if-not-resolved="false"></xref>, indicating
                    the segment is valid).
    content.vb: Public Function Validate(mode As Segment.ValidationMode) As ErrorCode
  overload: Sdl.LanguagePlatform.Core.Segment.Validate*
- uid: Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  id: Add(Sdl.LanguagePlatform.Core.SegmentElement)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Add(SegmentElement)
  nameWithType: Segment.Add(SegmentElement)
  fullName: Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Adds the provided segment element to the segment's list of elements. When adding a text element, 

    and the last segment element is a text element as well, they will be merged.
  example: []
  syntax:
    content: public void Add(SegmentElement element)
    parameters:
    - id: element
      type: Sdl.LanguagePlatform.Core.SegmentElement
      description: The element to append
    content.vb: Public Sub Add(element As SegmentElement)
  overload: Sdl.LanguagePlatform.Core.Segment.Add*
- uid: Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  id: Add(System.String)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Add(string)
  nameWithType: Segment.Add(string)
  fullName: Sdl.LanguagePlatform.Core.Segment.Add(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Adds the provided string as a new text element to the segment's list of elements. If

    the last segment element is a Text element as well, they will be merged.
  example: []
  syntax:
    content: public void Add(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to append
    content.vb: Public Sub Add(text As String)
  overload: Sdl.LanguagePlatform.Core.Segment.Add*
  nameWithType.vb: Segment.Add(String)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.Add(String)
  name.vb: Add(String)
- uid: Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  commentId: M:Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  id: AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<SegmentElement>)
  nameWithType: Segment.AddRange(IEnumerable<SegmentElement>)
  fullName: Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.SegmentElement>)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Adds all segment elements in the collection to this segment.
  example: []
  syntax:
    content: public void AddRange(IEnumerable<SegmentElement> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement}
      description: The elements to add
    content.vb: Public Sub AddRange(elements As IEnumerable(Of SegmentElement))
  overload: Sdl.LanguagePlatform.Core.Segment.AddRange*
  nameWithType.vb: Segment.AddRange(IEnumerable(Of SegmentElement))
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.SegmentElement))
  name.vb: AddRange(IEnumerable(Of SegmentElement))
- uid: Sdl.LanguagePlatform.Core.Segment.Clear
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Segment.Clear()
  fullName: Sdl.LanguagePlatform.Core.Segment.Clear()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Empties the list of segment elements.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Sdl.LanguagePlatform.Core.Segment.Clear*
- uid: Sdl.LanguagePlatform.Core.Segment.IsValid
  commentId: M:Sdl.LanguagePlatform.Core.Segment.IsValid
  id: IsValid
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: Segment.IsValid()
  fullName: Sdl.LanguagePlatform.Core.Segment.IsValid()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Determines if this segment is valid.
  example: []
  syntax:
    content: public bool IsValid()
    return:
      type: System.Boolean
      description: true if the segment is valid, false othwerwise.
    content.vb: Public Function IsValid() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.IsValid*
- uid: Sdl.LanguagePlatform.Core.Segment.Trim
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Trim
  id: Trim
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Trim()
  nameWithType: Segment.Trim()
  fullName: Sdl.LanguagePlatform.Core.Segment.Trim()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Removes leading whitespace from the first segment element, if that is a text element, 

    and trailing whitespace from the last segment element, if that is a text element. If the first/last

    segment element is not a text element, it will not be altered. Also, leading (trailing) whitespace 

    will not be removed from a text element if it is preceded (followed) only by non-text elements. Also

    deletes any null elements.
  example: []
  syntax:
    content: public void Trim()
    content.vb: Public Sub Trim()
  overload: Sdl.LanguagePlatform.Core.Segment.Trim*
- uid: Sdl.LanguagePlatform.Core.Segment.TrimStart
  commentId: M:Sdl.LanguagePlatform.Core.Segment.TrimStart
  id: TrimStart
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: TrimStart()
  nameWithType: Segment.TrimStart()
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimStart()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Removes leading whitespace from the first segment element, if that is a text element. 

    If the first segment element is not a text element, nothing will happen. Hence, leading 

    whitespace will not be removed from a text element if it is preceded by non-text

    elements. The number of elements may be altered by this method. Empty (null) elements

    will also be removed.
  example: []
  syntax:
    content: public string TrimStart()
    return:
      type: System.String
      description: >-
        A string consisting of the trimmed-off characters, or <code>null</code> if no 
                    characters have been trimmed off
    content.vb: Public Function TrimStart() As String
  overload: Sdl.LanguagePlatform.Core.Segment.TrimStart*
- uid: Sdl.LanguagePlatform.Core.Segment.TrimEnd
  commentId: M:Sdl.LanguagePlatform.Core.Segment.TrimEnd
  id: TrimEnd
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: TrimEnd()
  nameWithType: Segment.TrimEnd()
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimEnd()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Removes trailing whitespace from the last segment element, if that is a text element. 

    If the last segment element is not a text element, nothing will happen. Hence, trailing 

    whitespace will not be removed from a text element if it is followed by non-text

    elements. The number of elements may be altered by this method. Empty (null) elements

    will also be removed.
  example: []
  syntax:
    content: public string TrimEnd()
    return:
      type: System.String
      description: >-
        A string consisting of the trimmed-off characters, or <code>null</code> if no 
                    characters have been trimmed off
    content.vb: Public Function TrimEnd() As String
  overload: Sdl.LanguagePlatform.Core.Segment.TrimEnd*
- uid: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  commentId: M:Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  id: HasTokenBundles
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasTokenBundles()
  nameWithType: Segment.HasTokenBundles()
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns true if any of the segment's tokens is a <xref href="Sdl.LanguagePlatform.Core.Tokenization.TokenBundle" data-throw-if-not-resolved="false"></xref> (i.e. an ambigous tokenization), 

    and false otherwise. Token bundles should only be used inside the TM Kernel and not be returned

    through the TM API.
  example: []
  syntax:
    content: public bool HasTokenBundles()
    return:
      type: System.Boolean
    content.vb: Public Function HasTokenBundles() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles*
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  id: RemoveTokenBundles
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RemoveTokenBundles()
  nameWithType: Segment.RemoveTokenBundles()
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Replaces token bundles with the "best" token in that bundle. Returns true if any

    replacement has been done, and false otherwise.
  example: []
  syntax:
    content: public bool RemoveTokenBundles()
    return:
      type: System.Boolean
    content.vb: Public Function RemoveTokenBundles() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles*
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  id: RemoveUnmatchedStartAndEndTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RemoveUnmatchedStartAndEndTags()
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Deletes all tags from the segment which have a tag type of <xref href="Core.TagType.UnmatchedStart" data-throw-if-not-resolved="false"></xref>

    or <xref href="Core.TagType.UnmatchedEnd" data-throw-if-not-resolved="false"></xref>. Note that this method only tests the tag type, and 

    does not handle paired tags where the start or end tag are missing.
  example: []
  syntax:
    content: public bool RemoveUnmatchedStartAndEndTags()
    return:
      type: System.Boolean
      description: <code>true</code> if the segment was modified, and <code>false</code> otherwise.
    content.vb: Public Function RemoveUnmatchedStartAndEndTags() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags*
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  id: RemoveUnmatchedStartAndEndTags(System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RemoveUnmatchedStartAndEndTags(bool)
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags(bool)
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Deletes all tags from the segment which have a tag type of <xref href="Core.TagType.UnmatchedStart" data-throw-if-not-resolved="false"></xref>

    or <xref href="Core.TagType.UnmatchedEnd" data-throw-if-not-resolved="false"></xref>, if these tags occur in peripheral positions, which means

    that dangling end tags are only removed if they appear at the start of the segment, and dangling start

    tags are only removed if they appear at the end of the segment, with no other tags or text preceding the

    tag (in case of segment-initial dangling end tags), or following the tag (for segment-trailing dangling 

    start tags).

    <p>

    Note that this method only tests the tag type, and 

    does not handle paired tags where the start or end tag are missing.

    </p>
  example: []
  syntax:
    content: public bool RemoveUnmatchedStartAndEndTags(bool peripheralPositionsOnly)
    parameters:
    - id: peripheralPositionsOnly
      type: System.Boolean
    return:
      type: System.Boolean
      description: <code>true</code> if the segment was modified, and <code>false</code> otherwise.
    content.vb: Public Function RemoveUnmatchedStartAndEndTags(peripheralPositionsOnly As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags*
  nameWithType.vb: Segment.RemoveUnmatchedStartAndEndTags(Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(Boolean)
  name.vb: RemoveUnmatchedStartAndEndTags(Boolean)
- uid: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  id: HasUnmatchedStartOrEndTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasUnmatchedStartOrEndTags()
  nameWithType: Segment.HasUnmatchedStartOrEndTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Determines whether the segment has any unmatched start or end tags. Note that this 

    method only tests the tag type, and does not handle paired tags where the start or 

    end tag are missing.
  example: []
  syntax:
    content: public bool HasUnmatchedStartOrEndTags()
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the segment contains any unmatched start or end tags, 
                    and <code>false</code> otherwise.
    content.vb: Public Function HasUnmatchedStartOrEndTags() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags*
- uid: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  id: FillUnmatchedStartAndEndTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: FillUnmatchedStartAndEndTags()
  nameWithType: Segment.FillUnmatchedStartAndEndTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Inserts corresponding start and end tags for unmatched end and start tags to the segment. 

    For unmatched end tags, the corresponding start tags are inserted at the beginning of the 

    segment. Corresponding end tags for unmatched start tags are added at the end. In certain

    cases, not all dangling tags can be filled, and in order to obtain a valid segment without

    any unmatched tags, <xref href="Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)" data-throw-if-not-resolved="false"></xref> should be called after

    calling this method. Note that only the tag type is checked, not whether there are 

    start or end tags without a corresponding tag having the same tag anchor.

    <p>The method will discontinue if the tag pairing structure is incorrect (i.e. if there

    are overlapping tags).</p>
  example: []
  syntax:
    content: public bool FillUnmatchedStartAndEndTags()
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the segment was modified, and <code>false</code> otherwise. Note that
                    after calling this method, there may still be unmatched start or end tags in the
                    segment.
    content.vb: Public Function FillUnmatchedStartAndEndTags() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags*
- uid: Sdl.LanguagePlatform.Core.Segment.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Segment.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segment.ToString()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: <xref href="System.Object.ToString" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segment.ToString*
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain
  id: ToPlain
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain()
  nameWithType: Segment.ToPlain()
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns a string containing only the plain text in this segment. Note that

    text placeholders will be replaced with their text equivalent.
  example: []
  syntax:
    content: public string ToPlain()
    return:
      type: System.String
      description: A string containing only the plain text in this segment.
    content.vb: Public Function ToPlain() As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  id: ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain(bool, bool, out List<SegmentPosition>)
  nameWithType: Segment.ToPlain(bool, bool, out List<SegmentPosition>)
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain(bool, bool, out System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentPosition>)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes the plain-text version of the segment and returns, in the ranges list, 

    the segment range of each character of the result string. The number of elements

    in that collection will be equal to the length of the string in characters.
  example: []
  syntax:
    content: public string ToPlain(bool tolower, bool tobase, out List<SegmentPosition> ranges)
    parameters:
    - id: tolower
      type: System.Boolean
      description: If true, the returned string will be lower-cased
    - id: tobase
      type: System.Boolean
      description: >-
        If true, all letters will be mapped to their base character (i.e.
                    diacritics will be stripped)
    - id: ranges
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}
      description: >-
        A reference to the list of segment ranges which will be returned 
                    upon completion. The list includes, for each character in the result string, the 
                    position in the original segment.
    return:
      type: System.String
      description: ''
    content.vb: Public Function ToPlain(tolower As Boolean, tobase As Boolean, ranges As List(Of SegmentPosition)) As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  nameWithType.vb: Segment.ToPlain(Boolean, Boolean, List(Of SegmentPosition))
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.ToPlain(Boolean, Boolean, System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentPosition))
  name.vb: ToPlain(Boolean, Boolean, List(Of SegmentPosition))
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  id: ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain(SegmentRange)
  nameWithType: Segment.ToPlain(SegmentRange)
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Computes the plain-text version of the part of the segment specified by the provided range.
  example: []
  syntax:
    content: public string ToPlain(SegmentRange range)
    parameters:
    - id: range
      type: Sdl.LanguagePlatform.Core.SegmentRange
      description: The range of the segment to convert
    return:
      type: System.String
      description: The plain-text string corresponding to the provided range.
    content.vb: Public Function ToPlain(range As SegmentRange) As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
- uid: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  id: GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTokenIndex(SegmentPosition)
  nameWithType: Segment.GetTokenIndex(SegmentPosition)
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Returns the index of the token at the specified position.
  example: []
  syntax:
    content: public int GetTokenIndex(SegmentPosition p)
    parameters:
    - id: p
      type: Sdl.LanguagePlatform.Core.SegmentPosition
    return:
      type: System.Int32
      description: >-
        The index of the token at the specified position, or -1 if it is not found, 
                    or if the segment is not tokenized.
    content.vb: Public Function GetTokenIndex(p As SegmentPosition) As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex*
- uid: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  commentId: M:Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  id: MergeAdjacentTextRuns
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: MergeAdjacentTextRuns()
  nameWithType: Segment.MergeAdjacentTextRuns()
  fullName: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Merges adjacent text runs.
  example: []
  syntax:
    content: public void MergeAdjacentTextRuns()
    content.vb: Public Sub MergeAdjacentTextRuns()
  overload: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns*
- uid: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  commentId: M:Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  id: VerifyTokenSpans
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: VerifyTokenSpans()
  nameWithType: Segment.VerifyTokenSpans()
  fullName: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Verifies whether the spans of the segment's tokens are correct and reflect the segment's text.

    Note that the segment should be tokenized. If not, true is returned.
  example: []
  syntax:
    content: public bool VerifyTokenSpans()
    return:
      type: System.Boolean
      description: >-
        true if the verification was successful or the segment is not tokenized, 
                    and false otherwise.
    content.vb: Public Function VerifyTokenSpans() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans*
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)
  id: ToPlain(System.Int32,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain(int, int)
  nameWithType: Segment.ToPlain(int, int)
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain(int, int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns a string containing only the plain text in this segment, covering the given token range.

    An exception will be thrown if the segment's tokens are not set or the token range is outside the

    bounds.
  example: []
  syntax:
    content: public string ToPlain(int fromToken, int intoToken)
    parameters:
    - id: fromToken
      type: System.Int32
      description: The index of the first token
    - id: intoToken
      type: System.Int32
      description: The index of the last token (inclusive, i.e. "into" semantics)
    return:
      type: System.String
      description: A plain text string covering the specified token range
    content.vb: Public Function ToPlain(fromToken As Integer, intoToken As Integer) As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  nameWithType.vb: Segment.ToPlain(Integer, Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.ToPlain(Integer, Integer)
  name.vb: ToPlain(Integer, Integer)
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.DeleteTags
  id: DeleteTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: DeleteTags()
  nameWithType: Segment.DeleteTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTags()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Removes all tags from the segment, applying the <xref href="Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll" data-throw-if-not-resolved="false"></xref> tag

    deletion mode.
  example: []
  syntax:
    content: public bool DeleteTags()
    return:
      type: System.Boolean
      description: <code>true</code> if any tags were deleted, and <code>false</code> otherwise.
    content.vb: Public Function DeleteTags() As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.DeleteTags*
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  id: DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: DeleteTags(DeleteTagsAction)
  nameWithType: Segment.DeleteTags(Segment.DeleteTagsAction)
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Removes all tags from the segment, applying the specified tag deletion mode.
  example: []
  syntax:
    content: public bool DeleteTags(Segment.DeleteTagsAction mode)
    parameters:
    - id: mode
      type: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
      description: The tag deletion mode
    return:
      type: System.Boolean
      description: <code>true</code> if any tags were deleted, and <code>false</code> otherwise.
    content.vb: Public Function DeleteTags(mode As Segment.DeleteTagsAction) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.DeleteTags*
- uid: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  id: AnchorDanglingTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: AnchorDanglingTags()
  nameWithType: Segment.AnchorDanglingTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Sets the anchor for any tags which are not yet anchored (including standalone/placeholder tags).

    Does not modify tag IDs or alignment anchors.
  example: []
  syntax:
    content: public void AnchorDanglingTags()
    content.vb: Public Sub AnchorDanglingTags()
  overload: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags*
- uid: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  id: GetMaxTagAnchor
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetMaxTagAnchor()
  nameWithType: Segment.GetMaxTagAnchor()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Returns the highest tag anchor used in the segment, or 0 if no tags are present.
  example: []
  syntax:
    content: public int GetMaxTagAnchor()
    return:
      type: System.Int32
    content.vb: Public Function GetMaxTagAnchor() As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor*
- uid: Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  id: FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: FindTag(TagType, int)
  nameWithType: Segment.FindTag(TagType, int)
  fullName: Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType, int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Finds and returns the tag with the provided type and the provided tag anchor, or null

    if no such tag exists in the segment.
  example: []
  syntax:
    content: public Tag FindTag(TagType type, int anchor)
    parameters:
    - id: type
      type: Sdl.LanguagePlatform.Core.TagType
    - id: anchor
      type: System.Int32
    return:
      type: Sdl.LanguagePlatform.Core.Tag
    content.vb: Public Function FindTag(type As TagType, anchor As Integer) As Tag
  overload: Sdl.LanguagePlatform.Core.Segment.FindTag*
  nameWithType.vb: Segment.FindTag(TagType, Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType, Integer)
  name.vb: FindTag(TagType, Integer)
- uid: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  id: GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetMinMaxTagAnchor(out int, out int)
  nameWithType: Segment.GetMinMaxTagAnchor(out int, out int)
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(out int, out int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Returns the smallest and largest tag anchor used in the segment. Both default to 0.
  example: []
  syntax:
    content: public void GetMinMaxTagAnchor(out int min, out int max)
    parameters:
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    content.vb: Public Sub GetMinMaxTagAnchor(min As Integer, max As Integer)
  overload: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor*
  nameWithType.vb: Segment.GetMinMaxTagAnchor(Integer, Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(Integer, Integer)
  name.vb: GetMinMaxTagAnchor(Integer, Integer)
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  id: DeleteEmptyTagPairs(System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: DeleteEmptyTagPairs(bool)
  nameWithType: Segment.DeleteEmptyTagPairs(bool)
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Deletes empty tag pairs (a start tag directly followed by the end tag with the same

    tag anchor) from the segment.
  example: []
  syntax:
    content: public bool DeleteEmptyTagPairs(bool onlyInPeripheralPositions)
    parameters:
    - id: onlyInPeripheralPositions
      type: System.Boolean
      description: If true, will delete empty tag pairs only if they appear in peripheral positions (leading, trailing).
    return:
      type: System.Boolean
      description: true if any tags were deleted, and false otherwise.
    content.vb: Public Function DeleteEmptyTagPairs(onlyInPeripheralPositions As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs*
  nameWithType.vb: Segment.DeleteEmptyTagPairs(Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(Boolean)
  name.vb: DeleteEmptyTagPairs(Boolean)
- uid: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)
  id: RenumberTagAnchors(System.Int32@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RenumberTagAnchors(ref int)
  nameWithType: Segment.RenumberTagAnchors(ref int)
  fullName: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(ref int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Renumbers tag anchors so that they start at 1 and are consecutive. Although tag anchors

    have no semantics for standalone tags, they are also anchored in the same manner. Errors

    in tag numbering will be ignored (but preserved, i.e. invalid tag anchors will be mapped to 

    potentially new, also invalid tag anchors).
  example: []
  syntax:
    content: public bool RenumberTagAnchors(ref int maxAlignmentAnchor)
    parameters:
    - id: maxAlignmentAnchor
      type: System.Int32
    return:
      type: System.Boolean
      description: true if the any anchors were reassigned, and false otherwise.
    content.vb: Public Function RenumberTagAnchors(maxAlignmentAnchor As Integer) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors*
  nameWithType.vb: Segment.RenumberTagAnchors(Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(Integer)
  name.vb: RenumberTagAnchors(Integer)
- uid: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)
  id: RenumberTagAnchors(System.Int32,System.Int32@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RenumberTagAnchors(int, ref int)
  nameWithType: Segment.RenumberTagAnchors(int, ref int)
  fullName: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(int, ref int)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Renumbers tag anchors, starting at nextTagAnchor, in a consecutive manner. Although tag anchors

    have no semantics for standalone tags, they are also anchored in the same manner. Errors

    in tag numbering will be ignored (but preserved, i.e. invalid tag anchors will be mapped to 

    potentially new, also invalid tag anchors).
  example: []
  syntax:
    content: public bool RenumberTagAnchors(int nextTagAnchor, ref int maxAlignmentAnchor)
    parameters:
    - id: nextTagAnchor
      type: System.Int32
      description: The first anchor to assign (must be larger than zero)
    - id: maxAlignmentAnchor
      type: System.Int32
      description: Returns the highest alignment anchor in the renumbered segment.
    return:
      type: System.Boolean
      description: true if the any anchors were reassigned, and false otherwise.
    content.vb: Public Function RenumberTagAnchors(nextTagAnchor As Integer, maxAlignmentAnchor As Integer) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors*
  nameWithType.vb: Segment.RenumberTagAnchors(Integer, Integer)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(Integer, Integer)
  name.vb: RenumberTagAnchors(Integer, Integer)
- uid: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync
  id: ComputeStrictIdentityStringAsync
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ComputeStrictIdentityStringAsync()
  nameWithType: Segment.ComputeStrictIdentityStringAsync()
  fullName: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets a strict identity string - use with GetStrictHash()
  example: []
  syntax:
    content: public Task<string> ComputeStrictIdentityStringAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Function ComputeStrictIdentityStringAsync() As Task(Of String)
  overload: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync*
- uid: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token})
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token})
  id: ComputeStrictIdentityStringAsync(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token})
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ComputeStrictIdentityStringAsync(IEnumerable<Token>)
  nameWithType: Segment.ComputeStrictIdentityStringAsync(IEnumerable<Token>)
  fullName: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync(System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.Tokenization.Token>)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Generate strict identity string (not intended for fuzzy matching)
  example: []
  syntax:
    content: public static Task<string> ComputeStrictIdentityStringAsync(IEnumerable<Token> tokens)
    parameters:
    - id: tokens
      type: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token}
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
    content.vb: Public Shared Function ComputeStrictIdentityStringAsync(tokens As IEnumerable(Of Token)) As Task(Of String)
  overload: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync*
  nameWithType.vb: Segment.ComputeStrictIdentityStringAsync(IEnumerable(Of Token))
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync(System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.Tokenization.Token))
  name.vb: ComputeStrictIdentityStringAsync(IEnumerable(Of Token))
- uid: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  commentId: M:Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  id: UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: UpdateFromTokenIndices(ICollection<int>)
  nameWithType: Segment.UpdateFromTokenIndices(ICollection<int>)
  fullName: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection<int>)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Updates the segment's text from the tokens, and adjusts span indices accordingly. An exception

    is thrown if the segment is not tokenized.
  example: []
  syntax:
    content: public bool UpdateFromTokenIndices(ICollection<int> tokenIndices)
    parameters:
    - id: tokenIndices
      type: System.Collections.Generic.ICollection{System.Int32}
      description: The list of tokens to update.
    return:
      type: System.Boolean
      description: true if the segment was changed, and false otherwise.
    content.vb: Public Function UpdateFromTokenIndices(tokenIndices As ICollection(Of Integer)) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices*
  nameWithType.vb: Segment.UpdateFromTokenIndices(ICollection(Of Integer))
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection(Of Integer))
  name.vb: UpdateFromTokenIndices(ICollection(Of Integer))
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  id: GetTagPairings
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTagPairings()
  nameWithType: Segment.GetTagPairings()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagPairings()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns a dictionary of paired tag token indices, mapping from the start tag's

    token index to the end tag's token index. The segment must be tokenized, or an 

    exception is thrown.
  example: []
  syntax:
    content: public Dictionary<int, int> GetTagPairings()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
    content.vb: Public Function GetTagPairings() As Dictionary(Of Integer, Integer)
  overload: Sdl.LanguagePlatform.Core.Segment.GetTagPairings*
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagCount
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTagCount
  id: GetTagCount
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTagCount()
  nameWithType: Segment.GetTagCount()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagCount()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Returns the number of tags in the segment. Paired tags are counted only once.
  example: []
  syntax:
    content: public int GetTagCount()
    return:
      type: System.Int32
      description: The segment's tag count
    content.vb: Public Function GetTagCount() As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetTagCount*
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  id: GetTagIdGroups
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTagIdGroups()
  nameWithType: Segment.GetTagIdGroups()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups()
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes a mapping from the start tag token index to that tag's tag ID. Only

    start and standalone/placeholder tags are included in the mapping. The mapping may be n:1.

    The segment must be tokenized, or an exception is thrown.
  example: []
  syntax:
    content: public Dictionary<int, string> GetTagIdGroups()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
    content.vb: Public Function GetTagIdGroups() As Dictionary(Of Integer, String)
  overload: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups*
- uid: Sdl.LanguagePlatform.Core.Segment.IsEmpty
  commentId: P:Sdl.LanguagePlatform.Core.Segment.IsEmpty
  id: IsEmpty
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Segment.IsEmpty
  fullName: Sdl.LanguagePlatform.Core.Segment.IsEmpty
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets a value indicating whether this instance contains any elements (false) or not (true).
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.IsEmpty*
- uid: Sdl.LanguagePlatform.Core.Segment.Elements
  commentId: P:Sdl.LanguagePlatform.Core.Segment.Elements
  id: Elements
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: Segment.Elements
  fullName: Sdl.LanguagePlatform.Core.Segment.Elements
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets or sets the collection of elements in this segment.
  example: []
  syntax:
    content: >-
      [DataMember]

      public List<SegmentElement> Elements { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentElement}
    content.vb: >-
      <DataMember>

      Public Property Elements As List(Of SegmentElement)
  overload: Sdl.LanguagePlatform.Core.Segment.Elements*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segment.LastElement
  commentId: P:Sdl.LanguagePlatform.Core.Segment.LastElement
  id: LastElement
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: LastElement
  nameWithType: Segment.LastElement
  fullName: Sdl.LanguagePlatform.Core.Segment.LastElement
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets or sets the last element of this segment.
  example: []
  syntax:
    content: public SegmentElement LastElement { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.SegmentElement
    content.vb: Public Property LastElement As SegmentElement
  overload: Sdl.LanguagePlatform.Core.Segment.LastElement*
- uid: Sdl.LanguagePlatform.Core.Segment.Tokens
  commentId: P:Sdl.LanguagePlatform.Core.Segment.Tokens
  id: Tokens
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: Segment.Tokens
  fullName: Sdl.LanguagePlatform.Core.Segment.Tokens
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets or sets the collection of tokens in this segment.
  example: []
  syntax:
    content: >-
      [DataMember]

      public List<Token> Tokens { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Token}
    content.vb: >-
      <DataMember>

      Public Property Tokens As List(Of Token)
  overload: Sdl.LanguagePlatform.Core.Segment.Tokens*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  commentId: P:Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  id: HasPlaceables
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasPlaceables
  nameWithType: Segment.HasPlaceables
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Gets a bool value which indicates whether this segment contains any placeables. Note

    that the return value is only valid if the segment is tokenized.
  example: []
  syntax:
    content: public bool HasPlaceables { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasPlaceables As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasPlaceables*
- uid: Sdl.LanguagePlatform.Core.Segment.HasTags
  commentId: P:Sdl.LanguagePlatform.Core.Segment.HasTags
  id: HasTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasTags
  nameWithType: Segment.HasTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTags
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets a value which indicates whether this segment contains any tags.
  example: []
  syntax:
    content: public bool HasTags { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasTags*
- uid: Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  commentId: P:Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  id: HasPairedTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasPairedTags
  nameWithType: Segment.HasPairedTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Gets a value which indicates whether this segment contains any paired tags. Only start tags are

    checked, it is assumed that the tag structure is valid.
  example: []
  syntax:
    content: public bool HasPairedTags { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasPairedTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasPairedTags*
- uid: Sdl.LanguagePlatform.Core.Segment.CultureName
  commentId: P:Sdl.LanguagePlatform.Core.Segment.CultureName
  id: CultureName
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: CultureName
  nameWithType: Segment.CultureName
  fullName: Sdl.LanguagePlatform.Core.Segment.CultureName
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Gets or sets the culture name for this segment. The culture name must be

    resolvable through <xref href="CultureInfoExtensions.GetCultureInfo(string)" data-throw-if-not-resolved="false"></xref>, or

    an exception will be thrown.
  example: []
  syntax:
    content: >-
      [DataMember]

      public string CultureName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <DataMember>

      Public Property CultureName As String
  overload: Sdl.LanguagePlatform.Core.Segment.CultureName*
  attributes:
  - type: System.Runtime.Serialization.DataMemberAttribute
    ctor: System.Runtime.Serialization.DataMemberAttribute.#ctor
    arguments: []
- uid: Sdl.LanguagePlatform.Core.Segment.Culture
  commentId: P:Sdl.LanguagePlatform.Core.Segment.Culture
  id: Culture
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: Segment.Culture
  fullName: Sdl.LanguagePlatform.Core.Segment.Culture
  type: Property
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Gets or sets the culture for this segment.
  example: []
  syntax:
    content: public CultureCode Culture { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.CultureCode
    content.vb: Public Property Culture As CultureCode
  overload: Sdl.LanguagePlatform.Core.Segment.Culture*
references:
- uid: Sdl.LanguagePlatform.Core.SegmentElement
  commentId: T:Sdl.LanguagePlatform.Core.SegmentElement
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.SegmentElement.html
  name: SegmentElement
  nameWithType: SegmentElement
  fullName: Sdl.LanguagePlatform.Core.SegmentElement
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.html
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Globalization.CultureInfo.InvariantCulture
  commentId: P:System.Globalization.CultureInfo.InvariantCulture
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo.invariantculture
  name: InvariantCulture
  nameWithType: CultureInfo.InvariantCulture
  fullName: System.Globalization.CultureInfo.InvariantCulture
- uid: Sdl.LanguagePlatform.Core.Segment.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.#ctor
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment__ctor
  name: Segment
  nameWithType: Segment.Segment
  fullName: Sdl.LanguagePlatform.Core.Segment.Segment
  nameWithType.vb: Segment.New
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.New
  name.vb: New
- uid: Sdl.Core.Globalization.CultureCode
  commentId: T:Sdl.Core.Globalization.CultureCode
  parent: Sdl.Core.Globalization
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization
    name: Globalization
    isExternal: true
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
  - name: .
  - uid: Sdl.Core.Globalization
    name: Globalization
    isExternal: true
- uid: Sdl.LanguagePlatform.Core.Segment.Equals*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Equals
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Equals_Sdl_LanguagePlatform_Core_Segment_
  name: Equals
  nameWithType: Segment.Equals
  fullName: Sdl.LanguagePlatform.Core.Segment.Equals
- uid: Sdl.LanguagePlatform.Core.Segment
  commentId: T:Sdl.LanguagePlatform.Core.Segment
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html
  name: Segment
  nameWithType: Segment
  fullName: Sdl.LanguagePlatform.Core.Segment
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Sdl.LanguagePlatform.Core.Segment.WeakEquals*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.WeakEquals
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_WeakEquals_Sdl_LanguagePlatform_Core_Segment_
  name: WeakEquals
  nameWithType: Segment.WeakEquals
  fullName: Sdl.LanguagePlatform.Core.Segment.WeakEquals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetHashCode
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetHashCode
  name: GetHashCode
  nameWithType: Segment.GetHashCode
  fullName: Sdl.LanguagePlatform.Core.Segment.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetWeakHashCode
  name: GetWeakHashCode
  nameWithType: Segment.GetWeakHashCode
  fullName: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
- uid: Sdl.LanguagePlatform.Core.Segment.Duplicate*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Duplicate
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Duplicate
  name: Duplicate
  nameWithType: Segment.Duplicate
  fullName: Sdl.LanguagePlatform.Core.Segment.Duplicate
- uid: Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors
  commentId: F:Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.ValidationMode.html#Sdl_LanguagePlatform_Core_Segment_ValidationMode_ReportAllErrors
  name: ReportAllErrors
  nameWithType: Segment.ValidationMode.ReportAllErrors
  fullName: Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors
- uid: Sdl.LanguagePlatform.Core.ErrorCode.OK
  commentId: F:Sdl.LanguagePlatform.Core.ErrorCode.OK
  isExternal: true
  href: Sdl.LanguagePlatform.Core.ErrorCode.html#Sdl_LanguagePlatform_Core_ErrorCode_OK
  name: OK
  nameWithType: ErrorCode.OK
  fullName: Sdl.LanguagePlatform.Core.ErrorCode.OK
- uid: Sdl.LanguagePlatform.Core.Segment.Validate*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Validate
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Validate
  name: Validate
  nameWithType: Segment.Validate
  fullName: Sdl.LanguagePlatform.Core.Segment.Validate
- uid: Sdl.LanguagePlatform.Core.ErrorCode
  commentId: T:Sdl.LanguagePlatform.Core.ErrorCode
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.ErrorCode.html
  name: ErrorCode
  nameWithType: ErrorCode
  fullName: Sdl.LanguagePlatform.Core.ErrorCode
- uid: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_HasPeripheralWhitespace
  name: HasPeripheralWhitespace
  nameWithType: Segment.HasPeripheralWhitespace
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
- uid: Sdl.LanguagePlatform.Core.Segment.ValidationMode
  commentId: T:Sdl.LanguagePlatform.Core.Segment.ValidationMode
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html
  name: Segment.ValidationMode
  nameWithType: Segment.ValidationMode
  fullName: Sdl.LanguagePlatform.Core.Segment.ValidationMode
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Segment
    name: Segment
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segment.ValidationMode
    name: ValidationMode
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.ValidationMode.html
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Segment
    name: Segment
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segment.ValidationMode
    name: ValidationMode
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.ValidationMode.html
- uid: Sdl.LanguagePlatform.Core.Segment.Add*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Add
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Add_Sdl_LanguagePlatform_Core_SegmentElement_
  name: Add
  nameWithType: Segment.Add
  fullName: Sdl.LanguagePlatform.Core.Segment.Add
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sdl.LanguagePlatform.Core.Segment.AddRange*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.AddRange
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_AddRange_System_Collections_Generic_IEnumerable_Sdl_LanguagePlatform_Core_SegmentElement__
  name: AddRange
  nameWithType: Segment.AddRange
  fullName: Sdl.LanguagePlatform.Core.Segment.AddRange
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<SegmentElement>
  nameWithType: IEnumerable<SegmentElement>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.SegmentElement>
  nameWithType.vb: IEnumerable(Of SegmentElement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.SegmentElement)
  name.vb: IEnumerable(Of SegmentElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    isExternal: true
    href: Sdl.LanguagePlatform.Core.SegmentElement.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    isExternal: true
    href: Sdl.LanguagePlatform.Core.SegmentElement.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Sdl.LanguagePlatform.Core.Segment.Clear*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Clear
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Clear
  name: Clear
  nameWithType: Segment.Clear
  fullName: Sdl.LanguagePlatform.Core.Segment.Clear
- uid: Sdl.LanguagePlatform.Core.Segment.IsValid*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.IsValid
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_IsValid
  name: IsValid
  nameWithType: Segment.IsValid
  fullName: Sdl.LanguagePlatform.Core.Segment.IsValid
- uid: Sdl.LanguagePlatform.Core.Segment.Trim*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Trim
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Trim
  name: Trim
  nameWithType: Segment.Trim
  fullName: Sdl.LanguagePlatform.Core.Segment.Trim
- uid: Sdl.LanguagePlatform.Core.Segment.TrimStart*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.TrimStart
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_TrimStart
  name: TrimStart
  nameWithType: Segment.TrimStart
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimStart
- uid: Sdl.LanguagePlatform.Core.Segment.TrimEnd*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.TrimEnd
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_TrimEnd
  name: TrimEnd
  nameWithType: Segment.TrimEnd
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimEnd
- uid: Sdl.LanguagePlatform.Core.Tokenization.TokenBundle
  commentId: T:Sdl.LanguagePlatform.Core.Tokenization.TokenBundle
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Tokenization.TokenBundle.html
  name: TokenBundle
  nameWithType: TokenBundle
  fullName: Sdl.LanguagePlatform.Core.Tokenization.TokenBundle
- uid: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_HasTokenBundles
  name: HasTokenBundles
  nameWithType: Segment.HasTokenBundles
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_RemoveTokenBundles
  name: RemoveTokenBundles
  nameWithType: Segment.RemoveTokenBundles
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
- uid: Core.TagType.UnmatchedStart
  commentId: F:Core.TagType.UnmatchedStart
  isExternal: true
- uid: Core.TagType.UnmatchedEnd
  commentId: F:Core.TagType.UnmatchedEnd
  isExternal: true
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_RemoveUnmatchedStartAndEndTags
  name: RemoveUnmatchedStartAndEndTags
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
- uid: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_HasUnmatchedStartOrEndTags
  name: HasUnmatchedStartOrEndTags
  nameWithType: Segment.HasUnmatchedStartOrEndTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_RemoveUnmatchedStartAndEndTags_System_Boolean_
  name: RemoveUnmatchedStartAndEndTags(bool)
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags(bool)
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(bool)
  nameWithType.vb: Segment.RemoveUnmatchedStartAndEndTags(Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(Boolean)
  name.vb: RemoveUnmatchedStartAndEndTags(Boolean)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
    name: RemoveUnmatchedStartAndEndTags
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_RemoveUnmatchedStartAndEndTags_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
    name: RemoveUnmatchedStartAndEndTags
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_RemoveUnmatchedStartAndEndTags_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_FillUnmatchedStartAndEndTags
  name: FillUnmatchedStartAndEndTags
  nameWithType: Segment.FillUnmatchedStartAndEndTags
  fullName: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.ToString
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_ToString
  name: ToString
  nameWithType: Segment.ToString
  fullName: Sdl.LanguagePlatform.Core.Segment.ToString
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.ToPlain
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_ToPlain
  name: ToPlain
  nameWithType: Segment.ToPlain
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<SegmentPosition>
  nameWithType: List<SegmentPosition>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentPosition>
  nameWithType.vb: List(Of SegmentPosition)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentPosition)
  name.vb: List(Of SegmentPosition)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Sdl.LanguagePlatform.Core.SegmentPosition
    name: SegmentPosition
    isExternal: true
    href: Sdl.LanguagePlatform.Core.SegmentPosition.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.LanguagePlatform.Core.SegmentPosition
    name: SegmentPosition
    isExternal: true
    href: Sdl.LanguagePlatform.Core.SegmentPosition.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Sdl.LanguagePlatform.Core.SegmentRange
  commentId: T:Sdl.LanguagePlatform.Core.SegmentRange
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.SegmentRange.html
  name: SegmentRange
  nameWithType: SegmentRange
  fullName: Sdl.LanguagePlatform.Core.SegmentRange
- uid: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTokenIndex
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetTokenIndex_Sdl_LanguagePlatform_Core_SegmentPosition_
  name: GetTokenIndex
  nameWithType: Segment.GetTokenIndex
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex
- uid: Sdl.LanguagePlatform.Core.SegmentPosition
  commentId: T:Sdl.LanguagePlatform.Core.SegmentPosition
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.SegmentPosition.html
  name: SegmentPosition
  nameWithType: SegmentPosition
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition
- uid: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_MergeAdjacentTextRuns
  name: MergeAdjacentTextRuns
  nameWithType: Segment.MergeAdjacentTextRuns
  fullName: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
- uid: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_VerifyTokenSpans
  name: VerifyTokenSpans
  nameWithType: Segment.VerifyTokenSpans
  fullName: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll
  commentId: F:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.html#Sdl_LanguagePlatform_Core_Segment_DeleteTagsAction_DeleteAll
  name: DeleteAll
  nameWithType: Segment.DeleteTagsAction.DeleteAll
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.DeleteTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_DeleteTags
  name: DeleteTags
  nameWithType: Segment.DeleteTags
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTags
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
  commentId: T:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html
  name: Segment.DeleteTagsAction
  nameWithType: Segment.DeleteTagsAction
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.Segment
    name: Segment
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
    name: DeleteTagsAction
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.html
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.Segment
    name: Segment
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
    name: DeleteTagsAction
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.html
- uid: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_AnchorDanglingTags
  name: AnchorDanglingTags
  nameWithType: Segment.AnchorDanglingTags
  fullName: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
- uid: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetMaxTagAnchor
  name: GetMaxTagAnchor
  nameWithType: Segment.GetMaxTagAnchor
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
- uid: Sdl.LanguagePlatform.Core.Segment.FindTag*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.FindTag
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_FindTag_Sdl_LanguagePlatform_Core_TagType_System_Int32_
  name: FindTag
  nameWithType: Segment.FindTag
  fullName: Sdl.LanguagePlatform.Core.Segment.FindTag
- uid: Sdl.LanguagePlatform.Core.TagType
  commentId: T:Sdl.LanguagePlatform.Core.TagType
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.TagType.html
  name: TagType
  nameWithType: TagType
  fullName: Sdl.LanguagePlatform.Core.TagType
- uid: Sdl.LanguagePlatform.Core.Tag
  commentId: T:Sdl.LanguagePlatform.Core.Tag
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Tag.html
  name: Tag
  nameWithType: Tag
  fullName: Sdl.LanguagePlatform.Core.Tag
- uid: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetMinMaxTagAnchor_System_Int32__System_Int32__
  name: GetMinMaxTagAnchor
  nameWithType: Segment.GetMinMaxTagAnchor
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_DeleteEmptyTagPairs_System_Boolean_
  name: DeleteEmptyTagPairs
  nameWithType: Segment.DeleteEmptyTagPairs
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs
- uid: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_RenumberTagAnchors_System_Int32__
  name: RenumberTagAnchors
  nameWithType: Segment.RenumberTagAnchors
  fullName: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors
- uid: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_ComputeStrictIdentityStringAsync
  name: ComputeStrictIdentityStringAsync
  nameWithType: Segment.ComputeStrictIdentityStringAsync
  fullName: Sdl.LanguagePlatform.Core.Segment.ComputeStrictIdentityStringAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.Tokenization.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<Token>
  nameWithType: IEnumerable<Token>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.Tokenization.Token>
  nameWithType.vb: IEnumerable(Of Token)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.Tokenization.Token)
  name.vb: IEnumerable(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Tokenization.Token.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Tokenization.Token.html
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_UpdateFromTokenIndices_System_Collections_Generic_ICollection_System_Int32__
  name: UpdateFromTokenIndices
  nameWithType: Segment.UpdateFromTokenIndices
  fullName: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices
- uid: System.Collections.Generic.ICollection{System.Int32}
  commentId: T:System.Collections.Generic.ICollection{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<int>
  nameWithType: ICollection<int>
  fullName: System.Collections.Generic.ICollection<int>
  nameWithType.vb: ICollection(Of Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of Integer)
  name.vb: ICollection(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagPairings*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetTagPairings
  name: GetTagPairings
  nameWithType: Segment.GetTagPairings
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagPairings
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, int>
  nameWithType: Dictionary<int, int>
  fullName: System.Collections.Generic.Dictionary<int, int>
  nameWithType.vb: Dictionary(Of Integer, Integer)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, Integer)
  name.vb: Dictionary(Of Integer, Integer)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagCount*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTagCount
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetTagCount
  name: GetTagCount
  nameWithType: Segment.GetTagCount
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagCount
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_GetTagIdGroups
  name: GetTagIdGroups
  nameWithType: Segment.GetTagIdGroups
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
- uid: System.Collections.Generic.Dictionary{System.Int32,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  name: Dictionary<int, string>
  nameWithType: Dictionary<int, string>
  fullName: System.Collections.Generic.Dictionary<int, string>
  nameWithType.vb: Dictionary(Of Integer, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of Integer, String)
  name.vb: Dictionary(Of Integer, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.IsEmpty*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.IsEmpty
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_IsEmpty
  name: IsEmpty
  nameWithType: Segment.IsEmpty
  fullName: Sdl.LanguagePlatform.Core.Segment.IsEmpty
- uid: Sdl.LanguagePlatform.Core.Segment.Elements*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Elements
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Elements
  name: Elements
  nameWithType: Segment.Elements
  fullName: Sdl.LanguagePlatform.Core.Segment.Elements
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentElement}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<SegmentElement>
  nameWithType: List<SegmentElement>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentElement>
  nameWithType.vb: List(Of SegmentElement)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentElement)
  name.vb: List(Of SegmentElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    isExternal: true
    href: Sdl.LanguagePlatform.Core.SegmentElement.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    isExternal: true
    href: Sdl.LanguagePlatform.Core.SegmentElement.html
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.LastElement*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.LastElement
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_LastElement
  name: LastElement
  nameWithType: Segment.LastElement
  fullName: Sdl.LanguagePlatform.Core.Segment.LastElement
- uid: Sdl.LanguagePlatform.Core.Segment.Tokens*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Tokens
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Tokens
  name: Tokens
  nameWithType: Segment.Tokens
  fullName: Sdl.LanguagePlatform.Core.Segment.Tokens
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Token}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Token>
  nameWithType: List<Token>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Tokenization.Token>
  nameWithType.vb: List(Of Token)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Tokenization.Token)
  name.vb: List(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Tokenization.Token.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    isExternal: true
    href: Sdl.LanguagePlatform.Core.Tokenization.Token.html
  - name: )
- uid: Sdl.LanguagePlatform.Core.Segment.HasPlaceables*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_HasPlaceables
  name: HasPlaceables
  nameWithType: Segment.HasPlaceables
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPlaceables
- uid: Sdl.LanguagePlatform.Core.Segment.HasTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_HasTags
  name: HasTags
  nameWithType: Segment.HasTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTags
- uid: Sdl.LanguagePlatform.Core.Segment.HasPairedTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_HasPairedTags
  name: HasPairedTags
  nameWithType: Segment.HasPairedTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPairedTags
- uid: CultureInfoExtensions.GetCultureInfo(string)
  commentId: M:CultureInfoExtensions.GetCultureInfo(string)
  isExternal: true
- uid: Sdl.LanguagePlatform.Core.Segment.CultureName*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.CultureName
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_CultureName
  name: CultureName
  nameWithType: Segment.CultureName
  fullName: Sdl.LanguagePlatform.Core.Segment.CultureName
- uid: Sdl.LanguagePlatform.Core.Segment.Culture*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Culture
  isExternal: true
  href: Sdl.LanguagePlatform.Core.Segment.html#Sdl_LanguagePlatform_Core_Segment_Culture
  name: Culture
  nameWithType: Segment.Culture
  fullName: Sdl.LanguagePlatform.Core.Segment.Culture
