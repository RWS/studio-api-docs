### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segment
  commentId: T:Sdl.LanguagePlatform.Core.Segment
  id: Segment
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.Segment.#ctor
  - Sdl.LanguagePlatform.Core.Segment.#ctor(Sdl.Core.Globalization.CultureCode)
  - Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  - Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  - Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  - Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  - Sdl.LanguagePlatform.Core.Segment.Clear
  - Sdl.LanguagePlatform.Core.Segment.Culture
  - Sdl.LanguagePlatform.Core.Segment.CultureName
  - Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  - Sdl.LanguagePlatform.Core.Segment.DeleteTags
  - Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  - Sdl.LanguagePlatform.Core.Segment.Duplicate
  - Sdl.LanguagePlatform.Core.Segment.Elements
  - Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  - Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  - Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  - Sdl.LanguagePlatform.Core.Segment.GetHashCode
  - Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  - Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  - Sdl.LanguagePlatform.Core.Segment.GetTagCount
  - Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  - Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  - Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  - Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  - Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  - Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  - Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  - Sdl.LanguagePlatform.Core.Segment.HasTags
  - Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  - Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  - Sdl.LanguagePlatform.Core.Segment.IsEmpty
  - Sdl.LanguagePlatform.Core.Segment.IsValid
  - Sdl.LanguagePlatform.Core.Segment.LastElement
  - Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  - Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  - Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  - Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  - Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)
  - Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)
  - Sdl.LanguagePlatform.Core.Segment.Tokens
  - Sdl.LanguagePlatform.Core.Segment.ToPlain
  - Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  - Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  - Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)
  - Sdl.LanguagePlatform.Core.Segment.ToString
  - Sdl.LanguagePlatform.Core.Segment.Trim
  - Sdl.LanguagePlatform.Core.Segment.TrimEnd
  - Sdl.LanguagePlatform.Core.Segment.TrimStart
  - Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  - Sdl.LanguagePlatform.Core.Segment.Validate
  - Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  - Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  - Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  langs:
  - csharp
  - vb
  name: Segment
  nameWithType: Segment
  fullName: Sdl.LanguagePlatform.Core.Segment
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRepresents a segment, which is a sequence of <xref href=\"Sdl.LanguagePlatform.Core.SegmentElement\" data-throw-if-not-resolved=\"false\"></xref>s, \nin a particular language.\n"
  syntax:
    content: public class Segment
    content.vb: Public Class Segment
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segment.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segment.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Segment()
  nameWithType: Segment.Segment()
  fullName: Sdl.LanguagePlatform.Core.Segment.Segment()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance with the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref>, \nand an empty list of elements.\n"
  syntax:
    content: public Segment()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segment.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.#ctor(Sdl.Core.Globalization.CultureCode)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.#ctor(Sdl.Core.Globalization.CultureCode)
  id: '#ctor(Sdl.Core.Globalization.CultureCode)'
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Segment(CultureCode)
  nameWithType: Segment.Segment(CultureCode)
  fullName: Sdl.LanguagePlatform.Core.Segment.Segment(Sdl.Core.Globalization.CultureCode)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance with the specified culture, and an empty list of elements.\n"
  syntax:
    content: public Segment(CultureCode culture)
    parameters:
    - id: culture
      type: Sdl.Core.Globalization.CultureCode
      description: The CultureInfo object representing the language.
    content.vb: Public Sub New(culture As CultureCode)
  overload: Sdl.LanguagePlatform.Core.Segment.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  id: Equals(Sdl.LanguagePlatform.Core.Segment)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Equals(Segment)
  nameWithType: Segment.Equals(Segment)
  fullName: Sdl.LanguagePlatform.Core.Segment.Equals(Sdl.LanguagePlatform.Core.Segment)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCompares this instance to another Segment object.\n"
  syntax:
    content: public bool Equals(Segment other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segment
      description: The other instance.
    return:
      type: System.Boolean
      description: true if the language and all the elements are the same, otherwise false.
    content.vb: Public Function Equals(other As Segment) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  id: WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: WeakEquals(Segment)
  nameWithType: Segment.WeakEquals(Segment)
  fullName: Sdl.LanguagePlatform.Core.Segment.WeakEquals(Sdl.LanguagePlatform.Core.Segment)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nComputes weak equality with another segment.\n<p>Weak equality does not check culture compatibility and tag anchors do not need to be\nidentical, but text elements must match, as well as the order of tags (element similarity must \nnot be None)</p>\n"
  syntax:
    content: public bool WeakEquals(Segment other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segment
    return:
      type: System.Boolean
    content.vb: Public Function WeakEquals(other As Segment) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.WeakEquals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Segment.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this object
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.LanguagePlatform.Core.Segment.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  id: GetWeakHashCode
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetWeakHashCode()
  nameWithType: Segment.GetWeakHashCode()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns a hash code which does not depend on tag anchors in the segment. This \ncan be used for translation tracking in bilingual documents.\n"
  syntax:
    content: public int GetWeakHashCode()
    return:
      type: System.Int32
      description: A hash code which is independent of tag anchors.
    content.vb: Public Function GetWeakHashCode As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Duplicate
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Duplicate
  id: Duplicate
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Duplicate()
  nameWithType: Segment.Duplicate()
  fullName: Sdl.LanguagePlatform.Core.Segment.Duplicate()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCreates a new instance that is a deep copy of this instance.\n"
  syntax:
    content: public Segment Duplicate()
    return:
      type: Sdl.LanguagePlatform.Core.Segment
      description: A new instance that is a deep copy of this instance.
    content.vb: Public Function Duplicate As Segment
  overload: Sdl.LanguagePlatform.Core.Segment.Duplicate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Validate
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Validate
  id: Validate
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: Segment.Validate()
  fullName: Sdl.LanguagePlatform.Core.Segment.Validate()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nValidates the current instance, with the <xref href=\"Sdl.LanguagePlatform.Core.Segment.ValidationMode.ReportAllErrors\" data-throw-if-not-resolved=\"false\"></xref> validation mode.\n"
  syntax:
    content: public ErrorCode Validate()
    return:
      type: Sdl.LanguagePlatform.Core.ErrorCode
      description: >-
        An error code (which may be <xref href="Sdl.LanguagePlatform.Core.ErrorCode.OK" data-throw-if-not-resolved="false"></xref>, indicating

        the segment is valid).
    content.vb: Public Function Validate As ErrorCode
  overload: Sdl.LanguagePlatform.Core.Segment.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  commentId: M:Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  id: HasPeripheralWhitespace
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasPeripheralWhitespace()
  nameWithType: Segment.HasPeripheralWhitespace()
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the segment starts or ends with at least one whitespace character.\n"
  syntax:
    content: public bool HasPeripheralWhitespace()
    return:
      type: System.Boolean
    content.vb: Public Function HasPeripheralWhitespace As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  id: Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Validate(Segment.ValidationMode)
  nameWithType: Segment.Validate(Segment.ValidationMode)
  fullName: Sdl.LanguagePlatform.Core.Segment.Validate(Sdl.LanguagePlatform.Core.Segment.ValidationMode)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nPerforms validation checks on this instance, applying the specified validation mode.\n"
  syntax:
    content: public ErrorCode Validate(Segment.ValidationMode mode)
    parameters:
    - id: mode
      type: Sdl.LanguagePlatform.Core.Segment.ValidationMode
      description: The validation mode to apply
    return:
      type: Sdl.LanguagePlatform.Core.ErrorCode
      description: >-
        An error code (which may be <xref href="Sdl.LanguagePlatform.Core.ErrorCode.OK" data-throw-if-not-resolved="false"></xref>, indicating

        the segment is valid).
    content.vb: Public Function Validate(mode As Segment.ValidationMode) As ErrorCode
  overload: Sdl.LanguagePlatform.Core.Segment.Validate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  id: Add(Sdl.LanguagePlatform.Core.SegmentElement)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Add(SegmentElement)
  nameWithType: Segment.Add(SegmentElement)
  fullName: Sdl.LanguagePlatform.Core.Segment.Add(Sdl.LanguagePlatform.Core.SegmentElement)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAdds the provided segment element to the segment&apos;s list of elements. When adding a text element, \nand the last segment element is a text element as well, they will be merged. \n"
  syntax:
    content: public void Add(SegmentElement element)
    parameters:
    - id: element
      type: Sdl.LanguagePlatform.Core.SegmentElement
      description: The element to append
    content.vb: Public Sub Add(element As SegmentElement)
  overload: Sdl.LanguagePlatform.Core.Segment.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  id: Add(System.String)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Add(String)
  nameWithType: Segment.Add(String)
  fullName: Sdl.LanguagePlatform.Core.Segment.Add(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAdds the provided string as a new text element to the segment&apos;s list of elements. If\nthe last segment element is a Text element as well, they will be merged. \n"
  syntax:
    content: public void Add(string text)
    parameters:
    - id: text
      type: System.String
      description: The text to append
    content.vb: Public Sub Add(text As String)
  overload: Sdl.LanguagePlatform.Core.Segment.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  commentId: M:Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  id: AddRange(System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement})
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<SegmentElement>)
  nameWithType: Segment.AddRange(IEnumerable<SegmentElement>)
  fullName: Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.SegmentElement>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nAdds all segment elements in the collection to this segment.\n"
  syntax:
    content: public void AddRange(IEnumerable<SegmentElement> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement}
      description: The elements to add
    content.vb: Public Sub AddRange(elements As IEnumerable(Of SegmentElement))
  overload: Sdl.LanguagePlatform.Core.Segment.AddRange*
  nameWithType.vb: Segment.AddRange(IEnumerable(Of SegmentElement))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.AddRange(System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.SegmentElement))
  name.vb: AddRange(IEnumerable(Of SegmentElement))
- uid: Sdl.LanguagePlatform.Core.Segment.Clear
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Clear
  id: Clear
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Segment.Clear()
  fullName: Sdl.LanguagePlatform.Core.Segment.Clear()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nEmpties the list of segment elements.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.LanguagePlatform.Core.Segment.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.IsValid
  commentId: M:Sdl.LanguagePlatform.Core.Segment.IsValid
  id: IsValid
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: IsValid()
  nameWithType: Segment.IsValid()
  fullName: Sdl.LanguagePlatform.Core.Segment.IsValid()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines if this segment is valid.\n"
  syntax:
    content: public bool IsValid()
    return:
      type: System.Boolean
      description: true if the segment is valid, false othwerwise.
    content.vb: Public Function IsValid As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.IsValid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Trim
  commentId: M:Sdl.LanguagePlatform.Core.Segment.Trim
  id: Trim
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Trim()
  nameWithType: Segment.Trim()
  fullName: Sdl.LanguagePlatform.Core.Segment.Trim()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves leading whitespace from the first segment element, if that is a text element, \nand trailing whitespace from the last segment element, if that is a text element. If the first/last\nsegment element is not a text element, it will not be altered. Also, leading (trailing) whitespace \nwill not be removed from a text element if it is preceded (followed) only by non-text elements. Also\ndeletes any null elements.\n"
  syntax:
    content: public void Trim()
    content.vb: Public Sub Trim
  overload: Sdl.LanguagePlatform.Core.Segment.Trim*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.TrimStart
  commentId: M:Sdl.LanguagePlatform.Core.Segment.TrimStart
  id: TrimStart
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: TrimStart()
  nameWithType: Segment.TrimStart()
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimStart()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves leading whitespace from the first segment element, if that is a text element. \nIf the first segment element is not a text element, nothing will happen. Hence, leading \nwhitespace will not be removed from a text element if it is preceded by non-text\nelements. The number of elements may be altered by this method. Empty (null) elements\nwill also be removed.\n"
  syntax:
    content: public string TrimStart()
    return:
      type: System.String
      description: "A string consisting of the trimmed-off characters, or <code>null</code> if no \ncharacters have been trimmed off"
    content.vb: Public Function TrimStart As String
  overload: Sdl.LanguagePlatform.Core.Segment.TrimStart*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.TrimEnd
  commentId: M:Sdl.LanguagePlatform.Core.Segment.TrimEnd
  id: TrimEnd
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: TrimEnd()
  nameWithType: Segment.TrimEnd()
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimEnd()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves trailing whitespace from the last segment element, if that is a text element. \nIf the last segment element is not a text element, nothing will happen. Hence, trailing \nwhitespace will not be removed from a text element if it is followed by non-text\nelements. The number of elements may be altered by this method. Empty (null) elements\nwill also be removed.\n"
  syntax:
    content: public string TrimEnd()
    return:
      type: System.String
      description: "A string consisting of the trimmed-off characters, or <code>null</code> if no \ncharacters have been trimmed off"
    content.vb: Public Function TrimEnd As String
  overload: Sdl.LanguagePlatform.Core.Segment.TrimEnd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  commentId: M:Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  id: HasTokenBundles
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasTokenBundles()
  nameWithType: Segment.HasTokenBundles()
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns true if any of the segment&apos;s tokens is a <xref href=\"Sdl.LanguagePlatform.Core.Tokenization.TokenBundle\" data-throw-if-not-resolved=\"false\"></xref> (i.e. an ambigous tokenization), \nand false otherwise. Token bundles should only be used inside the TM Kernel and not be returned\nthrough the TM API.\n"
  syntax:
    content: public bool HasTokenBundles()
    return:
      type: System.Boolean
    content.vb: Public Function HasTokenBundles As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  id: RemoveTokenBundles
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RemoveTokenBundles()
  nameWithType: Segment.RemoveTokenBundles()
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReplaces token bundles with the &quot;best&quot; token in that bundle. Returns true if any\nreplacement has been done, and false otherwise.\n"
  syntax:
    content: public bool RemoveTokenBundles()
    return:
      type: System.Boolean
    content.vb: Public Function RemoveTokenBundles As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  id: RemoveUnmatchedStartAndEndTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RemoveUnmatchedStartAndEndTags()
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDeletes all tags from the segment which have a tag type of <xref href=\"Core.TagType.UnmatchedStart\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Core.TagType.UnmatchedEnd\" data-throw-if-not-resolved=\"false\"></xref>. Note that this method only tests the tag type, and \ndoes not handle paired tags where the start or end tag are missing.\n"
  syntax:
    content: public bool RemoveUnmatchedStartAndEndTags()
    return:
      type: System.Boolean
      description: <code>true</code> if the segment was modified, and <code>false</code> otherwise.
    content.vb: Public Function RemoveUnmatchedStartAndEndTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  id: RemoveUnmatchedStartAndEndTags(System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RemoveUnmatchedStartAndEndTags(Boolean)
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags(Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDeletes all tags from the segment which have a tag type of <xref href=\"Core.TagType.UnmatchedStart\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Core.TagType.UnmatchedEnd\" data-throw-if-not-resolved=\"false\"></xref>, if these tags occur in peripheral positions, which means\nthat dangling end tags are only removed if they appear at the start of the segment, and dangling start\ntags are only removed if they appear at the end of the segment, with no other tags or text preceding the\ntag (in case of segment-initial dangling end tags), or following the tag (for segment-trailing dangling \nstart tags).\n<p>\nNote that this method only tests the tag type, and \ndoes not handle paired tags where the start or end tag are missing.\n</p>\n"
  syntax:
    content: public bool RemoveUnmatchedStartAndEndTags(bool peripheralPositionsOnly)
    parameters:
    - id: peripheralPositionsOnly
      type: System.Boolean
    return:
      type: System.Boolean
      description: <code>true</code> if the segment was modified, and <code>false</code> otherwise.
    content.vb: Public Function RemoveUnmatchedStartAndEndTags(peripheralPositionsOnly As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  id: HasUnmatchedStartOrEndTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasUnmatchedStartOrEndTags()
  nameWithType: Segment.HasUnmatchedStartOrEndTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDetermines whether the segment has any unmatched start or end tags. Note that this \nmethod only tests the tag type, and does not handle paired tags where the start or \nend tag are missing.\n"
  syntax:
    content: public bool HasUnmatchedStartOrEndTags()
    return:
      type: System.Boolean
      description: "<code>true</code> if the segment contains any unmatched start or end tags, \n            and <code>false</code> otherwise."
    content.vb: Public Function HasUnmatchedStartOrEndTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  id: FillUnmatchedStartAndEndTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: FillUnmatchedStartAndEndTags()
  nameWithType: Segment.FillUnmatchedStartAndEndTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInserts corresponding start and end tags for unmatched end and start tags to the segment. \nFor unmatched end tags, the corresponding start tags are inserted at the beginning of the \nsegment. Corresponding end tags for unmatched start tags are added at the end. In certain\ncases, not all dangling tags can be filled, and in order to obtain a valid segment without\nany unmatched tags, <xref href=\"Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> should be called after\ncalling this method. Note that only the tag type is checked, not whether there are \nstart or end tags without a corresponding tag having the same tag anchor.\n<p>The method will discontinue if the tag pairing structure is incorrect (i.e. if there\nare overlapping tags).</p>\n"
  syntax:
    content: public bool FillUnmatchedStartAndEndTags()
    return:
      type: System.Boolean
      description: >-
        <code>true</code> if the segment was modified, and <code>false</code> otherwise. Note that
                    after calling this method, there may still be unmatched start or end tags in the
                    segment.
    content.vb: Public Function FillUnmatchedStartAndEndTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Segment.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segment.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segment.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain
  id: ToPlain
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain()
  nameWithType: Segment.ToPlain()
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns a string containing only the plain text in this segment. Note that\ntext placeholders will be replaced with their text equivalent.\n"
  syntax:
    content: public string ToPlain()
    return:
      type: System.String
      description: A string containing only the plain text in this segment.
    content.vb: Public Function ToPlain As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  id: ToPlain(System.Boolean,System.Boolean,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain(Boolean, Boolean, out List<SegmentPosition>)
  nameWithType: Segment.ToPlain(Boolean, Boolean, out List<SegmentPosition>)
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean, System.Boolean, out System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentPosition>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nComputes the plain-text version of the segment and returns, in the ranges list, \nthe segment range of each character of the result string. The number of elements\nin that collection will be equal to the length of the string in characters.\n"
  syntax:
    content: public string ToPlain(bool tolower, bool tobase, out List<SegmentPosition> ranges)
    parameters:
    - id: tolower
      type: System.Boolean
      description: If true, the returned string will be lower-cased
    - id: tobase
      type: System.Boolean
      description: >-
        If true, all letters will be mapped to their base character (i.e.

        diacritics will be stripped)
    - id: ranges
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}
      description: "A reference to the list of segment ranges which will be returned \nupon completion. The list includes, for each character in the result string, the \nposition in the original segment."
    return:
      type: System.String
    content.vb: Public Function ToPlain(tolower As Boolean, tobase As Boolean, ByRef ranges As List(Of SegmentPosition)) As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  nameWithType.vb: Segment.ToPlain(Boolean, Boolean, ByRef List(Of SegmentPosition))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Boolean, System.Boolean, ByRef System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentPosition))
  name.vb: ToPlain(Boolean, Boolean, ByRef List(Of SegmentPosition))
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  id: ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain(SegmentRange)
  nameWithType: Segment.ToPlain(SegmentRange)
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain(Sdl.LanguagePlatform.Core.SegmentRange)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nComputes the plain-text version of the part of the segment specified by the provided range.\n"
  syntax:
    content: public string ToPlain(SegmentRange range)
    parameters:
    - id: range
      type: Sdl.LanguagePlatform.Core.SegmentRange
      description: The range of the segment to convert
    return:
      type: System.String
      description: The plain-text string corresponding to the provided range.
    content.vb: Public Function ToPlain(range As SegmentRange) As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  id: GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTokenIndex(SegmentPosition)
  nameWithType: Segment.GetTokenIndex(SegmentPosition)
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex(Sdl.LanguagePlatform.Core.SegmentPosition)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the index of the token at the specified position.\n"
  syntax:
    content: public int GetTokenIndex(SegmentPosition p)
    parameters:
    - id: p
      type: Sdl.LanguagePlatform.Core.SegmentPosition
    return:
      type: System.Int32
      description: "The index of the token at the specified position, or -1 if it is not found, \nor if the segment is not tokenized."
    content.vb: Public Function GetTokenIndex(p As SegmentPosition) As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  commentId: M:Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  id: MergeAdjacentTextRuns
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: MergeAdjacentTextRuns()
  nameWithType: Segment.MergeAdjacentTextRuns()
  fullName: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nMerges adjacent text runs.\n"
  syntax:
    content: public void MergeAdjacentTextRuns()
    content.vb: Public Sub MergeAdjacentTextRuns
  overload: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  commentId: M:Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  id: VerifyTokenSpans
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: VerifyTokenSpans()
  nameWithType: Segment.VerifyTokenSpans()
  fullName: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nVerifies whether the spans of the segment&apos;s tokens are correct and reflect the segment&apos;s text.\nNote that the segment should be tokenized. If not, true is returned.\n"
  syntax:
    content: public bool VerifyTokenSpans()
    return:
      type: System.Boolean
      description: "true if the verification was successful or the segment is not tokenized, \nand false otherwise."
    content.vb: Public Function VerifyTokenSpans As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32,System.Int32)
  id: ToPlain(System.Int32,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: ToPlain(Int32, Int32)
  nameWithType: Segment.ToPlain(Int32, Int32)
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain(System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns a string containing only the plain text in this segment, covering the given token range.\nAn exception will be thrown if the segment&apos;s tokens are not set or the token range is outside the\nbounds.\n"
  syntax:
    content: public string ToPlain(int fromToken, int intoToken)
    parameters:
    - id: fromToken
      type: System.Int32
      description: The index of the first token
    - id: intoToken
      type: System.Int32
      description: The index of the last token (inclusive, i.e. &quot;into&quot; semantics)
    return:
      type: System.String
      description: A plain text string covering the specified token range
    content.vb: Public Function ToPlain(fromToken As Integer, intoToken As Integer) As String
  overload: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.DeleteTags
  id: DeleteTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: DeleteTags()
  nameWithType: Segment.DeleteTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTags()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves all tags from the segment, applying the <xref href=\"Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction.DeleteAll\" data-throw-if-not-resolved=\"false\"></xref> tag\ndeletion mode.\n"
  syntax:
    content: public bool DeleteTags()
    return:
      type: System.Boolean
      description: <code>true</code> if any tags were deleted, and <code>false</code> otherwise.
    content.vb: Public Function DeleteTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.DeleteTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  id: DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: DeleteTags(Segment.DeleteTagsAction)
  nameWithType: Segment.DeleteTags(Segment.DeleteTagsAction)
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTags(Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRemoves all tags from the segment, applying the specified tag deletion mode.\n"
  syntax:
    content: public bool DeleteTags(Segment.DeleteTagsAction mode)
    parameters:
    - id: mode
      type: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
      description: The tag deletion mode
    return:
      type: System.Boolean
      description: <code>true</code> if any tags were deleted, and <code>false</code> otherwise.
    content.vb: Public Function DeleteTags(mode As Segment.DeleteTagsAction) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.DeleteTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  commentId: M:Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  id: AnchorDanglingTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: AnchorDanglingTags()
  nameWithType: Segment.AnchorDanglingTags()
  fullName: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nSets the anchor for any tags which are not yet anchored (including standalone/placeholder tags).\nDoes not modify tag IDs or alignment anchors.\n"
  syntax:
    content: public void AnchorDanglingTags()
    content.vb: Public Sub AnchorDanglingTags
  overload: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  id: GetMaxTagAnchor
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetMaxTagAnchor()
  nameWithType: Segment.GetMaxTagAnchor()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the highest tag anchor used in the segment, or 0 if no tags are present.\n"
  syntax:
    content: public int GetMaxTagAnchor()
    return:
      type: System.Int32
    content.vb: Public Function GetMaxTagAnchor As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  id: FindTag(Sdl.LanguagePlatform.Core.TagType,System.Int32)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: FindTag(TagType, Int32)
  nameWithType: Segment.FindTag(TagType, Int32)
  fullName: Sdl.LanguagePlatform.Core.Segment.FindTag(Sdl.LanguagePlatform.Core.TagType, System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nFinds and returns the tag with the provided type and the provided tag anchor, or null\nif no such tag exists in the segment.\n"
  syntax:
    content: public Tag FindTag(TagType type, int anchor)
    parameters:
    - id: type
      type: Sdl.LanguagePlatform.Core.TagType
    - id: anchor
      type: System.Int32
    return:
      type: Sdl.LanguagePlatform.Core.Tag
    content.vb: Public Function FindTag(type As TagType, anchor As Integer) As Tag
  overload: Sdl.LanguagePlatform.Core.Segment.FindTag*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  id: GetMinMaxTagAnchor(System.Int32@,System.Int32@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetMinMaxTagAnchor(out Int32, out Int32)
  nameWithType: Segment.GetMinMaxTagAnchor(out Int32, out Int32)
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(out System.Int32, out System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the smallest and largest tag anchor used in the segment. Both default to 0.\n"
  syntax:
    content: public void GetMinMaxTagAnchor(out int min, out int max)
    parameters:
    - id: min
      type: System.Int32
    - id: max
      type: System.Int32
    content.vb: Public Sub GetMinMaxTagAnchor(ByRef min As Integer, ByRef max As Integer)
  overload: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor*
  nameWithType.vb: Segment.GetMinMaxTagAnchor(ByRef Int32, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor(ByRef System.Int32, ByRef System.Int32)
  name.vb: GetMinMaxTagAnchor(ByRef Int32, ByRef Int32)
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  id: DeleteEmptyTagPairs(System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: DeleteEmptyTagPairs(Boolean)
  nameWithType: Segment.DeleteEmptyTagPairs(Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs(System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nDeletes empty tag pairs (a start tag directly followed by the end tag with the same\ntag anchor) from the segment.\n"
  syntax:
    content: public bool DeleteEmptyTagPairs(bool onlyInPeripheralPositions)
    parameters:
    - id: onlyInPeripheralPositions
      type: System.Boolean
      description: If true, will delete empty tag pairs only if they appear in peripheral positions (leading, trailing).
    return:
      type: System.Boolean
      description: true if any tags were deleted, and false otherwise.
    content.vb: Public Function DeleteEmptyTagPairs(onlyInPeripheralPositions As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32@)
  id: RenumberTagAnchors(System.Int32@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RenumberTagAnchors(ref Int32)
  nameWithType: Segment.RenumberTagAnchors(ref Int32)
  fullName: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(ref System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRenumbers tag anchors so that they start at 1 and are consecutive. Although tag anchors\nhave no semantics for standalone tags, they are also anchored in the same manner. Errors\nin tag numbering will be ignored (but preserved, i.e. invalid tag anchors will be mapped to \npotentially new, also invalid tag anchors).\n"
  syntax:
    content: public bool RenumberTagAnchors(ref int maxAlignmentAnchor)
    parameters:
    - id: maxAlignmentAnchor
      type: System.Int32
    return:
      type: System.Boolean
      description: true if the any anchors were reassigned, and false otherwise.
    content.vb: Public Function RenumberTagAnchors(ByRef maxAlignmentAnchor As Integer) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors*
  nameWithType.vb: Segment.RenumberTagAnchors(ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(ByRef System.Int32)
  name.vb: RenumberTagAnchors(ByRef Int32)
- uid: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)
  commentId: M:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32,System.Int32@)
  id: RenumberTagAnchors(System.Int32,System.Int32@)
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: RenumberTagAnchors(Int32, ref Int32)
  nameWithType: Segment.RenumberTagAnchors(Int32, ref Int32)
  fullName: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32, ref System.Int32)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRenumbers tag anchors, starting at nextTagAnchor, in a consecutive manner. Although tag anchors\nhave no semantics for standalone tags, they are also anchored in the same manner. Errors\nin tag numbering will be ignored (but preserved, i.e. invalid tag anchors will be mapped to \npotentially new, also invalid tag anchors).\n"
  syntax:
    content: public bool RenumberTagAnchors(int nextTagAnchor, ref int maxAlignmentAnchor)
    parameters:
    - id: nextTagAnchor
      type: System.Int32
      description: The first anchor to assign (must be larger than zero)
    - id: maxAlignmentAnchor
      type: System.Int32
      description: Returns the highest alignment anchor in the renumbered segment.
    return:
      type: System.Boolean
      description: true if the any anchors were reassigned, and false otherwise.
    content.vb: Public Function RenumberTagAnchors(nextTagAnchor As Integer, ByRef maxAlignmentAnchor As Integer) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors*
  nameWithType.vb: Segment.RenumberTagAnchors(Int32, ByRef Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors(System.Int32, ByRef System.Int32)
  name.vb: RenumberTagAnchors(Int32, ByRef Int32)
- uid: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  commentId: M:Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  id: UpdateFromTokenIndices(System.Collections.Generic.ICollection{System.Int32})
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: UpdateFromTokenIndices(ICollection<Int32>)
  nameWithType: Segment.UpdateFromTokenIndices(ICollection<Int32>)
  fullName: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection<System.Int32>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nUpdates the segment&apos;s text from the tokens, and adjusts span indices accordingly. An exception\nis thrown if the segment is not tokenized.\n"
  syntax:
    content: public bool UpdateFromTokenIndices(ICollection<int> tokenIndices)
    parameters:
    - id: tokenIndices
      type: System.Collections.Generic.ICollection{System.Int32}
      description: The list of tokens to update.
    return:
      type: System.Boolean
      description: true if the segment was changed, and false otherwise.
    content.vb: Public Function UpdateFromTokenIndices(tokenIndices As ICollection(Of Integer)) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices*
  nameWithType.vb: Segment.UpdateFromTokenIndices(ICollection(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices(System.Collections.Generic.ICollection(Of System.Int32))
  name.vb: UpdateFromTokenIndices(ICollection(Of Int32))
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  id: GetTagPairings
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTagPairings()
  nameWithType: Segment.GetTagPairings()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagPairings()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns a dictionary of paired tag token indices, mapping from the start tag&apos;s\ntoken index to the end tag&apos;s token index. The segment must be tokenized, or an \nexception is thrown.\n"
  syntax:
    content: public Dictionary<int, int> GetTagPairings()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
    content.vb: Public Function GetTagPairings As Dictionary(Of Integer, Integer)
  overload: Sdl.LanguagePlatform.Core.Segment.GetTagPairings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagCount
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTagCount
  id: GetTagCount
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTagCount()
  nameWithType: Segment.GetTagCount()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagCount()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nReturns the number of tags in the segment. Paired tags are counted only once.\n"
  syntax:
    content: public int GetTagCount()
    return:
      type: System.Int32
      description: The segment&apos;s tag count
    content.vb: Public Function GetTagCount As Integer
  overload: Sdl.LanguagePlatform.Core.Segment.GetTagCount*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  commentId: M:Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  id: GetTagIdGroups
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: GetTagIdGroups()
  nameWithType: Segment.GetTagIdGroups()
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nComputes a mapping from the start tag token index to that tag&apos;s tag ID. Only\nstart and standalone/placeholder tags are included in the mapping. The mapping may be n:1.\nThe segment must be tokenized, or an exception is thrown.\n"
  syntax:
    content: public Dictionary<int, string> GetTagIdGroups()
    return:
      type: System.Collections.Generic.Dictionary{System.Int32,System.String}
    content.vb: Public Function GetTagIdGroups As Dictionary(Of Integer, String)
  overload: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.IsEmpty
  commentId: P:Sdl.LanguagePlatform.Core.Segment.IsEmpty
  id: IsEmpty
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Segment.IsEmpty
  fullName: Sdl.LanguagePlatform.Core.Segment.IsEmpty
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets a value indicating whether this instance contains any elements (false) or not (true).\n"
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.IsEmpty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segment.Elements
  commentId: P:Sdl.LanguagePlatform.Core.Segment.Elements
  id: Elements
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: Segment.Elements
  fullName: Sdl.LanguagePlatform.Core.Segment.Elements
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the collection of elements in this segment.\n"
  syntax:
    content: public List<SegmentElement> Elements { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentElement}
    content.vb: Public Property Elements As List(Of SegmentElement)
  overload: Sdl.LanguagePlatform.Core.Segment.Elements*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.LastElement
  commentId: P:Sdl.LanguagePlatform.Core.Segment.LastElement
  id: LastElement
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: LastElement
  nameWithType: Segment.LastElement
  fullName: Sdl.LanguagePlatform.Core.Segment.LastElement
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the last element of this segment.\n"
  syntax:
    content: public SegmentElement LastElement { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.SegmentElement
    content.vb: Public Property LastElement As SegmentElement
  overload: Sdl.LanguagePlatform.Core.Segment.LastElement*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Tokens
  commentId: P:Sdl.LanguagePlatform.Core.Segment.Tokens
  id: Tokens
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: Segment.Tokens
  fullName: Sdl.LanguagePlatform.Core.Segment.Tokens
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the collection of tokens in this segment. \n"
  syntax:
    content: public List<Token> Tokens { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Token}
    content.vb: Public Property Tokens As List(Of Token)
  overload: Sdl.LanguagePlatform.Core.Segment.Tokens*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  commentId: P:Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  id: HasPlaceables
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasPlaceables
  nameWithType: Segment.HasPlaceables
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets a bool value which indicates whether this segment contains any placeables. Note\nthat the return value is only valid if the segment is tokenized. \n"
  syntax:
    content: public bool HasPlaceables { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasPlaceables As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasPlaceables*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segment.HasTags
  commentId: P:Sdl.LanguagePlatform.Core.Segment.HasTags
  id: HasTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasTags
  nameWithType: Segment.HasTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTags
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets a value which indicates whether this segment contains any tags. \n"
  syntax:
    content: public bool HasTags { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasTags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  commentId: P:Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  id: HasPairedTags
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: HasPairedTags
  nameWithType: Segment.HasPairedTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets a value which indicates whether this segment contains any paired tags. Only start tags are\nchecked, it is assumed that the tag structure is valid.\n"
  syntax:
    content: public bool HasPairedTags { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasPairedTags As Boolean
  overload: Sdl.LanguagePlatform.Core.Segment.HasPairedTags*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.LanguagePlatform.Core.Segment.CultureName
  commentId: P:Sdl.LanguagePlatform.Core.Segment.CultureName
  id: CultureName
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: CultureName
  nameWithType: Segment.CultureName
  fullName: Sdl.LanguagePlatform.Core.Segment.CultureName
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the culture name for this segment. The culture name must be\nresolvable through <xref href=\"CultureInfoExtensions.GetCultureInfo(string)\" data-throw-if-not-resolved=\"false\"></xref>, or\nan exception will be thrown.\n"
  syntax:
    content: public string CultureName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CultureName As String
  overload: Sdl.LanguagePlatform.Core.Segment.CultureName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segment.Culture
  commentId: P:Sdl.LanguagePlatform.Core.Segment.Culture
  id: Culture
  parent: Sdl.LanguagePlatform.Core.Segment
  langs:
  - csharp
  - vb
  name: Culture
  nameWithType: Segment.Culture
  fullName: Sdl.LanguagePlatform.Core.Segment.Culture
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the culture for this segment.\n"
  syntax:
    content: public CultureCode Culture { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.CultureCode
    content.vb: Public Property Culture As CultureCode
  overload: Sdl.LanguagePlatform.Core.Segment.Culture*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segment.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.#ctor
  isExternal: true
  name: Segment
  nameWithType: Segment.Segment
  fullName: Sdl.LanguagePlatform.Core.Segment.Segment
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.LanguagePlatform.Core.Segment.Equals*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Equals
  isExternal: true
  name: Equals
  nameWithType: Segment.Equals
  fullName: Sdl.LanguagePlatform.Core.Segment.Equals
- uid: Sdl.LanguagePlatform.Core.Segment
  commentId: T:Sdl.LanguagePlatform.Core.Segment
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Segment
  nameWithType: Segment
  fullName: Sdl.LanguagePlatform.Core.Segment
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Segment.WeakEquals*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.WeakEquals
  isExternal: true
  name: WeakEquals
  nameWithType: Segment.WeakEquals
  fullName: Sdl.LanguagePlatform.Core.Segment.WeakEquals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: Segment.GetHashCode
  fullName: Sdl.LanguagePlatform.Core.Segment.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
  isExternal: true
  name: GetWeakHashCode
  nameWithType: Segment.GetWeakHashCode
  fullName: Sdl.LanguagePlatform.Core.Segment.GetWeakHashCode
- uid: Sdl.LanguagePlatform.Core.Segment.Duplicate*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Duplicate
  isExternal: true
  name: Duplicate
  nameWithType: Segment.Duplicate
  fullName: Sdl.LanguagePlatform.Core.Segment.Duplicate
- uid: Sdl.LanguagePlatform.Core.Segment.Validate*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Validate
  isExternal: true
  name: Validate
  nameWithType: Segment.Validate
  fullName: Sdl.LanguagePlatform.Core.Segment.Validate
- uid: Sdl.LanguagePlatform.Core.ErrorCode
  commentId: T:Sdl.LanguagePlatform.Core.ErrorCode
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: ErrorCode
  nameWithType: ErrorCode
  fullName: Sdl.LanguagePlatform.Core.ErrorCode
- uid: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
  isExternal: true
  name: HasPeripheralWhitespace
  nameWithType: Segment.HasPeripheralWhitespace
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPeripheralWhitespace
- uid: Sdl.LanguagePlatform.Core.Segment.ValidationMode
  commentId: T:Sdl.LanguagePlatform.Core.Segment.ValidationMode
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Segment.ValidationMode
  nameWithType: Segment.ValidationMode
  fullName: Sdl.LanguagePlatform.Core.Segment.ValidationMode
- uid: Sdl.LanguagePlatform.Core.Segment.Add*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Add
  isExternal: true
  name: Add
  nameWithType: Segment.Add
  fullName: Sdl.LanguagePlatform.Core.Segment.Add
- uid: Sdl.LanguagePlatform.Core.SegmentElement
  commentId: T:Sdl.LanguagePlatform.Core.SegmentElement
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentElement
  nameWithType: SegmentElement
  fullName: Sdl.LanguagePlatform.Core.SegmentElement
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Segment.AddRange*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.AddRange
  isExternal: true
  name: AddRange
  nameWithType: Segment.AddRange
  fullName: Sdl.LanguagePlatform.Core.Segment.AddRange
- uid: System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.LanguagePlatform.Core.SegmentElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SegmentElement>
  nameWithType: IEnumerable<SegmentElement>
  fullName: System.Collections.Generic.IEnumerable<Sdl.LanguagePlatform.Core.SegmentElement>
  nameWithType.vb: IEnumerable(Of SegmentElement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.LanguagePlatform.Core.SegmentElement)
  name.vb: IEnumerable(Of SegmentElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.LanguagePlatform.Core.Segment.Clear*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Clear
  isExternal: true
  name: Clear
  nameWithType: Segment.Clear
  fullName: Sdl.LanguagePlatform.Core.Segment.Clear
- uid: Sdl.LanguagePlatform.Core.Segment.IsValid*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.IsValid
  isExternal: true
  name: IsValid
  nameWithType: Segment.IsValid
  fullName: Sdl.LanguagePlatform.Core.Segment.IsValid
- uid: Sdl.LanguagePlatform.Core.Segment.Trim*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Trim
  isExternal: true
  name: Trim
  nameWithType: Segment.Trim
  fullName: Sdl.LanguagePlatform.Core.Segment.Trim
- uid: Sdl.LanguagePlatform.Core.Segment.TrimStart*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.TrimStart
  isExternal: true
  name: TrimStart
  nameWithType: Segment.TrimStart
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimStart
- uid: Sdl.LanguagePlatform.Core.Segment.TrimEnd*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.TrimEnd
  isExternal: true
  name: TrimEnd
  nameWithType: Segment.TrimEnd
  fullName: Sdl.LanguagePlatform.Core.Segment.TrimEnd
- uid: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
  isExternal: true
  name: HasTokenBundles
  nameWithType: Segment.HasTokenBundles
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTokenBundles
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
  isExternal: true
  name: RemoveTokenBundles
  nameWithType: Segment.RemoveTokenBundles
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveTokenBundles
- uid: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
  isExternal: true
  name: RemoveUnmatchedStartAndEndTags
  nameWithType: Segment.RemoveUnmatchedStartAndEndTags
  fullName: Sdl.LanguagePlatform.Core.Segment.RemoveUnmatchedStartAndEndTags
- uid: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
  isExternal: true
  name: HasUnmatchedStartOrEndTags
  nameWithType: Segment.HasUnmatchedStartOrEndTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasUnmatchedStartOrEndTags
- uid: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
  isExternal: true
  name: FillUnmatchedStartAndEndTags
  nameWithType: Segment.FillUnmatchedStartAndEndTags
  fullName: Sdl.LanguagePlatform.Core.Segment.FillUnmatchedStartAndEndTags
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.ToString
  isExternal: true
  name: ToString
  nameWithType: Segment.ToString
  fullName: Sdl.LanguagePlatform.Core.Segment.ToString
- uid: Sdl.LanguagePlatform.Core.Segment.ToPlain*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.ToPlain
  isExternal: true
  name: ToPlain
  nameWithType: Segment.ToPlain
  fullName: Sdl.LanguagePlatform.Core.Segment.ToPlain
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentPosition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SegmentPosition>
  nameWithType: List<SegmentPosition>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentPosition>
  nameWithType.vb: List(Of SegmentPosition)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentPosition)
  name.vb: List(Of SegmentPosition)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.SegmentPosition
    name: SegmentPosition
    nameWithType: SegmentPosition
    fullName: Sdl.LanguagePlatform.Core.SegmentPosition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.SegmentPosition
    name: SegmentPosition
    nameWithType: SegmentPosition
    fullName: Sdl.LanguagePlatform.Core.SegmentPosition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.SegmentRange
  commentId: T:Sdl.LanguagePlatform.Core.SegmentRange
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentRange
  nameWithType: SegmentRange
  fullName: Sdl.LanguagePlatform.Core.SegmentRange
- uid: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTokenIndex
  isExternal: true
  name: GetTokenIndex
  nameWithType: Segment.GetTokenIndex
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTokenIndex
- uid: Sdl.LanguagePlatform.Core.SegmentPosition
  commentId: T:Sdl.LanguagePlatform.Core.SegmentPosition
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentPosition
  nameWithType: SegmentPosition
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition
- uid: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
  isExternal: true
  name: MergeAdjacentTextRuns
  nameWithType: Segment.MergeAdjacentTextRuns
  fullName: Sdl.LanguagePlatform.Core.Segment.MergeAdjacentTextRuns
- uid: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
  isExternal: true
  name: VerifyTokenSpans
  nameWithType: Segment.VerifyTokenSpans
  fullName: Sdl.LanguagePlatform.Core.Segment.VerifyTokenSpans
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.DeleteTags
  isExternal: true
  name: DeleteTags
  nameWithType: Segment.DeleteTags
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTags
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
  commentId: T:Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Segment.DeleteTagsAction
  nameWithType: Segment.DeleteTagsAction
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteTagsAction
- uid: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
  isExternal: true
  name: AnchorDanglingTags
  nameWithType: Segment.AnchorDanglingTags
  fullName: Sdl.LanguagePlatform.Core.Segment.AnchorDanglingTags
- uid: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
  isExternal: true
  name: GetMaxTagAnchor
  nameWithType: Segment.GetMaxTagAnchor
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMaxTagAnchor
- uid: Sdl.LanguagePlatform.Core.Segment.FindTag*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.FindTag
  isExternal: true
  name: FindTag
  nameWithType: Segment.FindTag
  fullName: Sdl.LanguagePlatform.Core.Segment.FindTag
- uid: Sdl.LanguagePlatform.Core.TagType
  commentId: T:Sdl.LanguagePlatform.Core.TagType
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: TagType
  nameWithType: TagType
  fullName: Sdl.LanguagePlatform.Core.TagType
- uid: Sdl.LanguagePlatform.Core.Tag
  commentId: T:Sdl.LanguagePlatform.Core.Tag
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: Tag
  nameWithType: Tag
  fullName: Sdl.LanguagePlatform.Core.Tag
- uid: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor
  isExternal: true
  name: GetMinMaxTagAnchor
  nameWithType: Segment.GetMinMaxTagAnchor
  fullName: Sdl.LanguagePlatform.Core.Segment.GetMinMaxTagAnchor
- uid: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs
  isExternal: true
  name: DeleteEmptyTagPairs
  nameWithType: Segment.DeleteEmptyTagPairs
  fullName: Sdl.LanguagePlatform.Core.Segment.DeleteEmptyTagPairs
- uid: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors
  isExternal: true
  name: RenumberTagAnchors
  nameWithType: Segment.RenumberTagAnchors
  fullName: Sdl.LanguagePlatform.Core.Segment.RenumberTagAnchors
- uid: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices
  isExternal: true
  name: UpdateFromTokenIndices
  nameWithType: Segment.UpdateFromTokenIndices
  fullName: Sdl.LanguagePlatform.Core.Segment.UpdateFromTokenIndices
- uid: System.Collections.Generic.ICollection{System.Int32}
  commentId: T:System.Collections.Generic.ICollection{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Int32>
  nameWithType: ICollection<Int32>
  fullName: System.Collections.Generic.ICollection<System.Int32>
  nameWithType.vb: ICollection(Of Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Int32)
  name.vb: ICollection(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagPairings*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTagPairings
  isExternal: true
  name: GetTagPairings
  nameWithType: Segment.GetTagPairings
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagPairings
- uid: System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int32, Int32>
  nameWithType: Dictionary<Int32, Int32>
  fullName: System.Collections.Generic.Dictionary<System.Int32, System.Int32>
  nameWithType.vb: Dictionary(Of Int32, Int32)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int32, System.Int32)
  name.vb: Dictionary(Of Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagCount*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTagCount
  isExternal: true
  name: GetTagCount
  nameWithType: Segment.GetTagCount
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagCount
- uid: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
  isExternal: true
  name: GetTagIdGroups
  nameWithType: Segment.GetTagIdGroups
  fullName: Sdl.LanguagePlatform.Core.Segment.GetTagIdGroups
- uid: System.Collections.Generic.Dictionary{System.Int32,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.Int32,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int32, String>
  nameWithType: Dictionary<Int32, String>
  fullName: System.Collections.Generic.Dictionary<System.Int32, System.String>
  nameWithType.vb: Dictionary(Of Int32, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int32, System.String)
  name.vb: Dictionary(Of Int32, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.IsEmpty*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.IsEmpty
  isExternal: true
  name: IsEmpty
  nameWithType: Segment.IsEmpty
  fullName: Sdl.LanguagePlatform.Core.Segment.IsEmpty
- uid: Sdl.LanguagePlatform.Core.Segment.Elements*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Elements
  isExternal: true
  name: Elements
  nameWithType: Segment.Elements
  fullName: Sdl.LanguagePlatform.Core.Segment.Elements
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentElement}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.SegmentElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SegmentElement>
  nameWithType: List<SegmentElement>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.SegmentElement>
  nameWithType.vb: List(Of SegmentElement)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.SegmentElement)
  name.vb: List(Of SegmentElement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.SegmentElement
    name: SegmentElement
    nameWithType: SegmentElement
    fullName: Sdl.LanguagePlatform.Core.SegmentElement
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.LastElement*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.LastElement
  isExternal: true
  name: LastElement
  nameWithType: Segment.LastElement
  fullName: Sdl.LanguagePlatform.Core.Segment.LastElement
- uid: Sdl.LanguagePlatform.Core.Segment.Tokens*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Tokens
  isExternal: true
  name: Tokens
  nameWithType: Segment.Tokens
  fullName: Sdl.LanguagePlatform.Core.Segment.Tokens
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Token}
  commentId: '!:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Tokenization.Token}'
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Token>
  nameWithType: List<Token>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Tokenization.Token>
  nameWithType.vb: List(Of Token)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Tokenization.Token)
  name.vb: List(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    nameWithType: Token
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Tokenization.Token
    name: Token
    nameWithType: Token
    fullName: Sdl.LanguagePlatform.Core.Tokenization.Token
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segment.HasPlaceables*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasPlaceables
  isExternal: true
  name: HasPlaceables
  nameWithType: Segment.HasPlaceables
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPlaceables
- uid: Sdl.LanguagePlatform.Core.Segment.HasTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasTags
  isExternal: true
  name: HasTags
  nameWithType: Segment.HasTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasTags
- uid: Sdl.LanguagePlatform.Core.Segment.HasPairedTags*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.HasPairedTags
  isExternal: true
  name: HasPairedTags
  nameWithType: Segment.HasPairedTags
  fullName: Sdl.LanguagePlatform.Core.Segment.HasPairedTags
- uid: Sdl.LanguagePlatform.Core.Segment.CultureName*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.CultureName
  isExternal: true
  name: CultureName
  nameWithType: Segment.CultureName
  fullName: Sdl.LanguagePlatform.Core.Segment.CultureName
- uid: Sdl.LanguagePlatform.Core.Segment.Culture*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segment.Culture
  isExternal: true
  name: Culture
  nameWithType: Segment.Culture
  fullName: Sdl.LanguagePlatform.Core.Segment.Culture
