### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.StringUtilities
  commentId: T:Sdl.LanguagePlatform.Core.StringUtilities
  id: StringUtilities
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)
  - Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})
  - Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)
  - Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)
  langs:
  - csharp
  - vb
  name: StringUtilities
  nameWithType: StringUtilities
  fullName: Sdl.LanguagePlatform.Core.StringUtilities
  type: Class
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Defines utilities related to <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class StringUtilities
    content.vb: Public Module StringUtilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  id: DetermineCasing(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: DetermineCasing(string)
  nameWithType: StringUtilities.DetermineCasing(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Determines the casing as in <xref href="Sdl.LanguagePlatform.Core.StringUtilities.Casing" data-throw-if-not-resolved="false"></xref> for the input string. Casing.Mixed will be

    returned for the empty string.
  example: []
  syntax:
    content: public static StringUtilities.Casing DetermineCasing(string s)
    parameters:
    - id: s
      type: System.String
      description: The input string (must not be null)
    return:
      type: Sdl.LanguagePlatform.Core.StringUtilities.Casing
    content.vb: Public Shared Function DetermineCasing(s As String) As StringUtilities.Casing
  overload: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing*
  nameWithType.vb: StringUtilities.DetermineCasing(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(String)
  name.vb: DetermineCasing(String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])
  id: StartWithAny(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: StartWithAny(string, char[])
  nameWithType: StringUtilities.StartWithAny(string, char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(string, char[])
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns <code>true</code> if the string <code class="paramref">s</code> starts with any 

    of the characters in <code class="paramref">characterList</code>, and <code>false</code>

    otherwise.
  example: []
  syntax:
    content: public static bool StartWithAny(string s, char[] characterList)
    parameters:
    - id: s
      type: System.String
    - id: characterList
      type: System.Char[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function StartWithAny(s As String, characterList As Char()) As Boolean
  overload: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny*
  nameWithType.vb: StringUtilities.StartWithAny(String, Char())
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(String, Char())
  name.vb: StartWithAny(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])
  id: EndsWithAny(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: EndsWithAny(string, char[])
  nameWithType: StringUtilities.EndsWithAny(string, char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(string, char[])
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns <code>true</code> if the string <code class="paramref">s</code> ends with any 

    of the characters in <code class="paramref">characterList</code>, and <code>false</code>

    otherwise.
  example: []
  syntax:
    content: public static bool EndsWithAny(string s, char[] characterList)
    parameters:
    - id: s
      type: System.String
    - id: characterList
      type: System.Char[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function EndsWithAny(s As String, characterList As Char()) As Boolean
  overload: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny*
  nameWithType.vb: StringUtilities.EndsWithAny(String, Char())
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(String, Char())
  name.vb: EndsWithAny(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  id: IsAllWhitespace(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: IsAllWhitespace(string)
  nameWithType: StringUtilities.IsAllWhitespace(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Returns true if <code class="paramref">t</code> contains only whitespace characters (<xref href="Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)" data-throw-if-not-resolved="false"></xref>), 

    and false otherwise.
  example: []
  syntax:
    content: public static bool IsAllWhitespace(string t)
    parameters:
    - id: t
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAllWhitespace(t As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace*
  nameWithType.vb: StringUtilities.IsAllWhitespace(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(String)
  name.vb: IsAllWhitespace(String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  id: EscapeString(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: EscapeString(string)
  nameWithType: StringUtilities.EscapeString(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Escapes all double quotes and backslashes in a string.
  example: []
  syntax:
    content: public static string EscapeString(string s)
    parameters:
    - id: s
      type: System.String
      description: The input string.
    return:
      type: System.String
      description: The string where all double quotes will be prefixed with a backslash.
    content.vb: Public Shared Function EscapeString(s As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString*
  nameWithType.vb: StringUtilities.EscapeString(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(String)
  name.vb: EscapeString(String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})
  id: RemoveAll(System.String,System.Predicate{System.Char})
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: RemoveAll(string, Predicate<char>)
  nameWithType: StringUtilities.RemoveAll(string, Predicate<char>)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(string, System.Predicate<char>)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes a copy of <code class="paramref">s</code> in which all characters which 

    satisfy <code class="paramref">property</code> are removed.
  example: []
  syntax:
    content: public static string RemoveAll(string s, Predicate<char> property)
    parameters:
    - id: s
      type: System.String
      description: The input string
    - id: property
      type: System.Predicate{System.Char}
      description: The character property to test
    return:
      type: System.String
    content.vb: Public Shared Function RemoveAll(s As String, [property] As Predicate(Of Char)) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll*
  nameWithType.vb: StringUtilities.RemoveAll(String, Predicate(Of Char))
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(String, System.Predicate(Of Char))
  name.vb: RemoveAll(String, Predicate(Of Char))
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)
  id: EscapeString(System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: EscapeString(string, string)
  nameWithType: StringUtilities.EscapeString(string, string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(string, string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Escapes special characters in a string, prefixing them with a backslash.
  example: []
  syntax:
    content: public static string EscapeString(string s, string charactersToEscape)
    parameters:
    - id: s
      type: System.String
      description: The input string.
    - id: charactersToEscape
      type: System.String
      description: The characters to escape
    return:
      type: System.String
      description: The string where all occurrences of any of the characters to escape are prefixed with a backslash.
    content.vb: Public Shared Function EscapeString(s As String, charactersToEscape As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString*
  nameWithType.vb: StringUtilities.EscapeString(String, String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(String, String)
  name.vb: EscapeString(String, String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])
  id: GetPrefixLength(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: GetPrefixLength(string, char[])
  nameWithType: StringUtilities.GetPrefixLength(string, char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(string, char[])
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes the length of the prefix of <code class="paramref">s</code> which entirely consists 

    of characters in <code class="paramref">prefixChars</code>. If either of the parameters is 

    <code>null</code> or empty, <code>0</code> is returned.
  example: []
  syntax:
    content: public static int GetPrefixLength(string s, char[] prefixChars)
    parameters:
    - id: s
      type: System.String
      description: The string
    - id: prefixChars
      type: System.Char[]
      description: The set of prefix characters
    return:
      type: System.Int32
      description: >-
        The length of the prefix of <code class="paramref">s</code> which entirely consists
                    of characters contained in <code class="paramref">prefixChars</code>
    content.vb: Public Shared Function GetPrefixLength(s As String, prefixChars As Char()) As Integer
  overload: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength*
  nameWithType.vb: StringUtilities.GetPrefixLength(String, Char())
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(String, Char())
  name.vb: GetPrefixLength(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])
  id: GetSuffixLength(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: GetSuffixLength(string, char[])
  nameWithType: StringUtilities.GetSuffixLength(string, char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(string, char[])
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Computes the length of the suffix of <code class="paramref">s</code> which entirely consists 

    of characters in <code class="paramref">suffixChars</code>. If either of the parameters is 

    <code>null</code> or empty, <code>0</code> is returned.
  example: []
  syntax:
    content: public static int GetSuffixLength(string s, char[] suffixChars)
    parameters:
    - id: s
      type: System.String
      description: The string
    - id: suffixChars
      type: System.Char[]
      description: The set of suffix characters
    return:
      type: System.Int32
      description: >-
        The length of the suffix of <code class="paramref">s</code> which entirely consists
                    of characters contained in <code class="paramref">suffixChars</code>
    content.vb: Public Shared Function GetSuffixLength(s As String, suffixChars As Char()) As Integer
  overload: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength*
  nameWithType.vb: StringUtilities.GetSuffixLength(String, Char())
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(String, Char())
  name.vb: GetSuffixLength(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)
  id: TrimStart(System.String,System.Char[],System.String@)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: TrimStart(string, char[], out string)
  nameWithType: StringUtilities.TrimStart(string, char[], out string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(string, char[], out string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Trims off any character contained in the <code class="paramref">trimCharacters</code> from the

    start of the specified string <code class="paramref">s</code>, and returns the remainder, as well

    as the trimmed-off prefix in <code class="paramref">trimmedPrefix</code>. If either <code class="paramref">s</code>

    or <code class="paramref">trimCharacters</code> are <code>null</code> or empty, the result will be equal

    to <code class="paramref">s</code>and <code class="paramref">trimmedPrefix</code> will be null.
  example: []
  syntax:
    content: public static string TrimStart(string s, char[] trimCharacters, out string trimmedPrefix)
    parameters:
    - id: s
      type: System.String
      description: The input string
    - id: trimCharacters
      type: System.Char[]
      description: The set of characters to trim off at the start of <code class="paramref">s</code>.
    - id: trimmedPrefix
      type: System.String
      description: >-
        If any characters have been trimmed off, this out parameter will
                    contain the trimmed-off prefix. If no characters have been trimmed off, this out parameter will
                    be <code>null</code>.
    return:
      type: System.String
      description: The remainder of <code class="paramref">s</code> after trimming off the specified trim characters from the start.
    content.vb: Public Shared Function TrimStart(s As String, trimCharacters As Char(), trimmedPrefix As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart*
  nameWithType.vb: StringUtilities.TrimStart(String, Char(), String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(String, Char(), String)
  name.vb: TrimStart(String, Char(), String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)
  id: TrimEnd(System.String,System.Char[],System.String@)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: TrimEnd(string, char[], out string)
  nameWithType: StringUtilities.TrimEnd(string, char[], out string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(string, char[], out string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Trims off any character contained in the <code class="paramref">trimCharacters</code> from the

    end of the specified string <code class="paramref">s</code>, and returns the remainder, as well

    as the trimmed-off suffix in <code class="paramref">trimmedSuffix</code>. If either <code class="paramref">s</code>

    or <code class="paramref">trimCharacters</code> are <code>null</code> or empty, the result will be equal

    to <code class="paramref">s</code>and <code class="paramref">trimmedSuffix</code> will be null.
  example: []
  syntax:
    content: public static string TrimEnd(string s, char[] trimCharacters, out string trimmedSuffix)
    parameters:
    - id: s
      type: System.String
      description: The input string
    - id: trimCharacters
      type: System.Char[]
      description: The set of characters to trim off at the start of <code class="paramref">s</code>.
    - id: trimmedSuffix
      type: System.String
      description: >-
        If any characters have been trimmed off, this out parameter will
                    contain the trimmed-off suffix. If no characters have been trimmed off, this out parameter will
                    be <code>null</code>.
    return:
      type: System.String
      description: The remainder of <code class="paramref">s</code> after trimming off the specified trim characters from the end.
    content.vb: Public Shared Function TrimEnd(s As String, trimCharacters As Char(), trimmedSuffix As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd*
  nameWithType.vb: StringUtilities.TrimEnd(String, Char(), String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(String, Char(), String)
  name.vb: TrimEnd(String, Char(), String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)
  id: MergeStrings(System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: MergeStrings(string, string)
  nameWithType: StringUtilities.MergeStrings(string, string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(string, string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Appends each individual charater of <code class="paramref">b</code> to <code class="paramref">a</code>, if it is not 

    already present, and returns the result. If <code class="paramref">a</code> already contains 

    duplicates, they are kept.
  example: []
  syntax:
    content: public static string MergeStrings(string a, string b)
    parameters:
    - id: a
      type: System.String
      description: The first string
    - id: b
      type: System.String
      description: The second string
    return:
      type: System.String
      description: >-
        A string which consists of the input string <code class="paramref">a</code>, 
                    with the individual characters from <code class="paramref">b</code> appended if they are not
                    already present.
    content.vb: Public Shared Function MergeStrings(a As String, b As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings*
  nameWithType.vb: StringUtilities.MergeStrings(String, String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(String, String)
  name.vb: MergeStrings(String, String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)
  id: GenerateRandomWord(System.Int32,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: GenerateRandomWord(int, bool)
  nameWithType: StringUtilities.GenerateRandomWord(int, bool)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(int, bool)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Generates a string which consists of random letters in the range [a-z] with the

    specified length.
  example: []
  syntax:
    content: public static string GenerateRandomWord(int length, bool initialUpper)
    parameters:
    - id: length
      type: System.Int32
      description: The length of the string to be generated.
    - id: initialUpper
      type: System.Boolean
      description: >-
        If true, the initial letter of the generated string will be 
                    converted to upper-case. If false, the initial letter will remain lower-case.
    return:
      type: System.String
      description: A string which consists of a random sequence of letters [a-z] with the specified length.
    content.vb: Public Shared Function GenerateRandomWord(length As Integer, initialUpper As Boolean) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord*
  nameWithType.vb: StringUtilities.GenerateRandomWord(Integer, Boolean)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(Integer, Boolean)
  name.vb: GenerateRandomWord(Integer, Boolean)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  id: HalfWidthToFullWidth(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: HalfWidthToFullWidth(string)
  nameWithType: StringUtilities.HalfWidthToFullWidth(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Converts half-width characters to full-width characters
  example: []
  syntax:
    content: public static string HalfWidthToFullWidth(string input)
    parameters:
    - id: input
      type: System.String
      description: single byte string, halfwidth string
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function HalfWidthToFullWidth(input As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth*
  nameWithType.vb: StringUtilities.HalfWidthToFullWidth(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(String)
  name.vb: HalfWidthToFullWidth(String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  id: HalfWidthToFullWidth2(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: HalfWidthToFullWidth2(string)
  nameWithType: StringUtilities.HalfWidthToFullWidth2(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: >-
    Unlike <xref href="Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)" data-throw-if-not-resolved="false"></xref>, performs half-width to full-width 

    conversion for all available characters, not just those under ASCII 127
  example: []
  syntax:
    content: public static string HalfWidthToFullWidth2(string input)
    parameters:
    - id: input
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function HalfWidthToFullWidth2(input As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2*
  nameWithType.vb: StringUtilities.HalfWidthToFullWidth2(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(String)
  name.vb: HalfWidthToFullWidth2(String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth(System.String)
  id: FullWidthToHalfWidth(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: FullWidthToHalfWidth(string)
  nameWithType: StringUtilities.FullWidthToHalfWidth(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth(string)
  type: Method
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: Perform full-width to half-width conversion
  example: []
  syntax:
    content: public static string FullWidthToHalfWidth(string input)
    parameters:
    - id: input
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
    content.vb: Public Shared Function FullWidthToHalfWidth(input As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth*
  nameWithType.vb: StringUtilities.FullWidthToHalfWidth(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth(String)
  name.vb: FullWidthToHalfWidth(String)
references:
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.html
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.LanguagePlatform
    name: LanguagePlatform
    isExternal: true
    href: Sdl.LanguagePlatform.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core
    name: Core
    isExternal: true
    href: Sdl.LanguagePlatform.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.StringUtilities.Casing
  commentId: T:Sdl.LanguagePlatform.Core.StringUtilities.Casing
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html
  name: StringUtilities.Casing
  nameWithType: StringUtilities.Casing
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.Casing
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.StringUtilities
    name: StringUtilities
    isExternal: true
    href: Sdl.LanguagePlatform.Core.StringUtilities.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.StringUtilities.Casing
    name: Casing
    isExternal: true
    href: Sdl.LanguagePlatform.Core.StringUtilities.Casing.html
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.StringUtilities
    name: StringUtilities
    isExternal: true
    href: Sdl.LanguagePlatform.Core.StringUtilities.html
  - name: .
  - uid: Sdl.LanguagePlatform.Core.StringUtilities.Casing
    name: Casing
    isExternal: true
    href: Sdl.LanguagePlatform.Core.StringUtilities.Casing.html
- uid: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_DetermineCasing_System_String_
  name: DetermineCasing
  nameWithType: StringUtilities.DetermineCasing
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing
- uid: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_StartWithAny_System_String_System_Char___
  name: StartWithAny
  nameWithType: StringUtilities.StartWithAny
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny
- uid: System.Char[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.char
  name: char[]
  nameWithType: char[]
  fullName: char[]
  nameWithType.vb: Char()
  fullName.vb: Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_EndsWithAny_System_String_System_Char___
  name: EndsWithAny
  nameWithType: StringUtilities.EndsWithAny
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny
- uid: Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)
  commentId: M:Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)
  isExternal: true
  href: Sdl.LanguagePlatform.Core.CharacterProperties.html#Sdl_LanguagePlatform_Core_CharacterProperties_IsWhitespace_System_Char_
  name: IsWhitespace(char)
  nameWithType: CharacterProperties.IsWhitespace(char)
  fullName: Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(char)
  nameWithType.vb: CharacterProperties.IsWhitespace(Char)
  fullName.vb: Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(Char)
  name.vb: IsWhitespace(Char)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)
    name: IsWhitespace
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CharacterProperties.html#Sdl_LanguagePlatform_Core_CharacterProperties_IsWhitespace_System_Char_
  - name: (
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.CharacterProperties.IsWhitespace(System.Char)
    name: IsWhitespace
    isExternal: true
    href: Sdl.LanguagePlatform.Core.CharacterProperties.html#Sdl_LanguagePlatform_Core_CharacterProperties_IsWhitespace_System_Char_
  - name: (
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_IsAllWhitespace_System_String_
  name: IsAllWhitespace
  nameWithType: StringUtilities.IsAllWhitespace
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_EscapeString_System_String_
  name: EscapeString
  nameWithType: StringUtilities.EscapeString
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString
- uid: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_RemoveAll_System_String_System_Predicate_System_Char__
  name: RemoveAll
  nameWithType: StringUtilities.RemoveAll
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll
- uid: System.Predicate{System.Char}
  commentId: T:System.Predicate{System.Char}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<char>
  nameWithType: Predicate<char>
  fullName: System.Predicate<char>
  nameWithType.vb: Predicate(Of Char)
  fullName.vb: System.Predicate(Of Char)
  name.vb: Predicate(Of Char)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - uid: System.Char
    name: char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Char
    name: Char
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.char
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_GetPrefixLength_System_String_System_Char___
  name: GetPrefixLength
  nameWithType: StringUtilities.GetPrefixLength
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_GetSuffixLength_System_String_System_Char___
  name: GetSuffixLength
  nameWithType: StringUtilities.GetSuffixLength
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.TrimStart
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_TrimStart_System_String_System_Char___System_String__
  name: TrimStart
  nameWithType: StringUtilities.TrimStart
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_TrimEnd_System_String_System_Char___System_String__
  name: TrimEnd
  nameWithType: StringUtilities.TrimEnd
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd
- uid: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_MergeStrings_System_String_System_String_
  name: MergeStrings
  nameWithType: StringUtilities.MergeStrings
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_GenerateRandomWord_System_Int32_System_Boolean_
  name: GenerateRandomWord
  nameWithType: StringUtilities.GenerateRandomWord
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_HalfWidthToFullWidth_System_String_
  name: HalfWidthToFullWidth
  nameWithType: StringUtilities.HalfWidthToFullWidth
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_HalfWidthToFullWidth_System_String_
  name: HalfWidthToFullWidth(string)
  nameWithType: StringUtilities.HalfWidthToFullWidth(string)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(string)
  nameWithType.vb: StringUtilities.HalfWidthToFullWidth(String)
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(String)
  name.vb: HalfWidthToFullWidth(String)
  spec.csharp:
  - uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
    name: HalfWidthToFullWidth
    isExternal: true
    href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_HalfWidthToFullWidth_System_String_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  spec.vb:
  - uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
    name: HalfWidthToFullWidth
    isExternal: true
    href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_HalfWidthToFullWidth_System_String_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_HalfWidthToFullWidth2_System_String_
  name: HalfWidthToFullWidth2
  nameWithType: StringUtilities.HalfWidthToFullWidth2
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2
- uid: Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth
  isExternal: true
  href: Sdl.LanguagePlatform.Core.StringUtilities.html#Sdl_LanguagePlatform_Core_StringUtilities_FullWidthToHalfWidth_System_String_
  name: FullWidthToHalfWidth
  nameWithType: StringUtilities.FullWidthToHalfWidth
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.FullWidthToHalfWidth
