### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.SegmentPosition
  commentId: T:Sdl.LanguagePlatform.Core.SegmentPosition
  id: SegmentPosition
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.SegmentPosition.#ctor
  - Sdl.LanguagePlatform.Core.SegmentPosition.#ctor(System.Int32,System.Int32)
  - Sdl.LanguagePlatform.Core.SegmentPosition.Compare(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  - Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate
  - Sdl.LanguagePlatform.Core.SegmentPosition.Equals(System.Object)
  - Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode
  - Sdl.LanguagePlatform.Core.SegmentPosition.Index
  - Sdl.LanguagePlatform.Core.SegmentPosition.Position
  - Sdl.LanguagePlatform.Core.SegmentPosition.ToString
  langs:
  - csharp
  - vb
  name: SegmentPosition
  nameWithType: SegmentPosition
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nRepresents a position within a segment.\n"
  syntax:
    content: public class SegmentPosition
    content.vb: Public Class SegmentPosition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: SegmentPosition()
  nameWithType: SegmentPosition.SegmentPosition()
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.SegmentPosition()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance with default values.\n"
  syntax:
    content: public SegmentPosition()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.#ctor(System.Int32,System.Int32)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: SegmentPosition(Int32, Int32)
  nameWithType: SegmentPosition.SegmentPosition(Int32, Int32)
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.SegmentPosition(System.Int32, System.Int32)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nInitializes a new instance with the specified arguments.\n"
  syntax:
    content: public SegmentPosition(int runIndex, int positionInRun)
    parameters:
    - id: runIndex
      type: System.Int32
      description: The index of the segment element within the segment.
    - id: positionInRun
      type: System.Int32
      description: "The position within the run. This is only \nrelevant for <xref href=\"Sdl.LanguagePlatform.Core.Text\" data-throw-if-not-resolved=\"false\"></xref> elements, and has no effect for other segment\nelement types."
    content.vb: Public Sub New(runIndex As Integer, positionInRun As Integer)
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate
  id: Duplicate
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: Duplicate()
  nameWithType: SegmentPosition.Duplicate()
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCreates a new instance that is a deep copy of this instance.\n"
  syntax:
    content: public SegmentPosition Duplicate()
    return:
      type: Sdl.LanguagePlatform.Core.SegmentPosition
      description: A new instance that is a deep copy of this instance.
    content.vb: Public Function Duplicate As SegmentPosition
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Equals(System.Object)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SegmentPosition.Equals(Object)
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Equals(System.Object)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.Equals(object)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: >
        true if the specified object is equal to the current object;

        otherwise, false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode
  id: GetHashCode
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SegmentPosition.GetHashCode()
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for this object
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Compare(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.Compare(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  id: Compare(Sdl.LanguagePlatform.Core.SegmentPosition,Sdl.LanguagePlatform.Core.SegmentPosition)
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: Compare(SegmentPosition, SegmentPosition)
  nameWithType: SegmentPosition.Compare(SegmentPosition, SegmentPosition)
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Compare(Sdl.LanguagePlatform.Core.SegmentPosition, Sdl.LanguagePlatform.Core.SegmentPosition)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nCompares two segment positions and returns an indication of their sort order.\n"
  syntax:
    content: public static int Compare(SegmentPosition a, SegmentPosition b)
    parameters:
    - id: a
      type: Sdl.LanguagePlatform.Core.SegmentPosition
      description: The first of the two items to compare.
    - id: b
      type: Sdl.LanguagePlatform.Core.SegmentPosition
      description: The second of the two items to compare.
    return:
      type: System.Int32
      description: An int value less than zero if a precedes b, zero if a denotes the same position as b, and greater than zero if a follows b.
    content.vb: Public Shared Function Compare(a As SegmentPosition, b As SegmentPosition) As Integer
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.Compare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.ToString
  commentId: M:Sdl.LanguagePlatform.Core.SegmentPosition.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentPosition.ToString()
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the object, for display purposes.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Index
  commentId: P:Sdl.LanguagePlatform.Core.SegmentPosition.Index
  id: Index
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: SegmentPosition.Index
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Index
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the index of the run (segment element) within the segment.\n"
  syntax:
    content: public int Index { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Index As Integer
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.Index*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Position
  commentId: P:Sdl.LanguagePlatform.Core.SegmentPosition.Position
  id: Position
  parent: Sdl.LanguagePlatform.Core.SegmentPosition
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: SegmentPosition.Position
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Position
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  summary: "\nGets or sets the position within the subsegment. The value is ignored if the \nindicated segment run is not a <xref href=\"Sdl.LanguagePlatform.Core.Text\" data-throw-if-not-resolved=\"false\"></xref> run.\n"
  syntax:
    content: public int Position { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Position As Integer
  overload: Sdl.LanguagePlatform.Core.SegmentPosition.Position*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.#ctor
  isExternal: true
  name: SegmentPosition
  nameWithType: SegmentPosition.SegmentPosition
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.SegmentPosition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate
  isExternal: true
  name: Duplicate
  nameWithType: SegmentPosition.Duplicate
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Duplicate
- uid: Sdl.LanguagePlatform.Core.SegmentPosition
  commentId: T:Sdl.LanguagePlatform.Core.SegmentPosition
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: SegmentPosition
  nameWithType: SegmentPosition
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Equals*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.Equals
  isExternal: true
  name: Equals
  nameWithType: SegmentPosition.Equals
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: SegmentPosition.GetHashCode
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.GetHashCode
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Compare*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.Compare
  isExternal: true
  name: Compare
  nameWithType: SegmentPosition.Compare
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Compare
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.ToString
  isExternal: true
  name: ToString
  nameWithType: SegmentPosition.ToString
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Index*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.Index
  isExternal: true
  name: Index
  nameWithType: SegmentPosition.Index
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Index
- uid: Sdl.LanguagePlatform.Core.SegmentPosition.Position*
  commentId: Overload:Sdl.LanguagePlatform.Core.SegmentPosition.Position
  isExternal: true
  name: Position
  nameWithType: SegmentPosition.Position
  fullName: Sdl.LanguagePlatform.Core.SegmentPosition.Position
