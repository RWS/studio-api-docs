### YamlMime:ManagedReference
items:
- uid: Sdl.Core.TM.ImportExport.ExporterAsync
  commentId: T:Sdl.Core.TM.ImportExport.ExporterAsync
  id: ExporterAsync
  parent: Sdl.Core.TM.ImportExport
  children:
  - Sdl.Core.TM.ImportExport.ExporterAsync.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager,System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}})
  - Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  - Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  - Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
  - Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  langs:
  - csharp
  - vb
  name: ExporterAsync
  nameWithType: ExporterAsync
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync
  type: Class
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public class ExporterAsync
    content.vb: Public Class ExporterAsync
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.Core.TM.ImportExport.Exporter
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager,System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Sdl.Core.TM.ImportExport.ExporterAsync.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager,System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}})
  id: '#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager,System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}})'
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  langs:
  - csharp
  - vb
  name: ExporterAsync(ICultureMetadataManager, Func<Int32, Int32, Task<Boolean>>)
  nameWithType: ExporterAsync.ExporterAsync(ICultureMetadataManager, Func<Int32, Int32, Task<Boolean>>)
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExporterAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager, System.Func<System.Int32, System.Int32, System.Threading.Tasks.Task<System.Boolean>>)
  type: Constructor
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public ExporterAsync(ICultureMetadataManager cultureMetadataManager, Func<int, int, Task<bool>> batchExportedAsync = null)
    parameters:
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    - id: batchExportedAsync
      type: System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}}
    content.vb: Public Sub New(cultureMetadataManager As ICultureMetadataManager, batchExportedAsync As Func(Of Integer, Integer, Task(Of Boolean)) = Nothing)
  overload: Sdl.Core.TM.ImportExport.ExporterAsync.#ctor*
  nameWithType.vb: ExporterAsync.ExporterAsync(ICultureMetadataManager, Func(Of Int32, Int32, Task(Of Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.TM.ImportExport.ExporterAsync.ExporterAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager, System.Func(Of System.Int32, System.Int32, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: ExporterAsync(ICultureMetadataManager, Func(Of Int32, Int32, Task(Of Boolean)))
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
  commentId: M:Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32,System.Int32)
  id: OnBatchExportedAsync(System.Int32,System.Int32)
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  langs:
  - csharp
  - vb
  name: OnBatchExportedAsync(Int32, Int32)
  nameWithType: ExporterAsync.OnBatchExportedAsync(Int32, Int32)
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync(System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: protected virtual Task<bool> OnBatchExportedAsync(int totalProcessed, int totalExported)
    parameters:
    - id: totalProcessed
      type: System.Int32
    - id: totalExported
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Protected Overridable Function OnBatchExportedAsync(totalProcessed As Integer, totalExported As Integer) As Task(Of Boolean)
  overload: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  commentId: M:Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  id: ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync,System.String,System.Boolean)
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  langs:
  - csharp
  - vb
  name: ExportAsync(IExportOriginAsync, String, Boolean)
  nameWithType: ExporterAsync.ExportAsync(IExportOriginAsync, String, Boolean)
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync(Sdl.Core.TM.ImportExport.IExportOriginAsync, System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nStarts the export process with the configured settings into a file with the specified name.\n<remarks>This method supports GZip compressed files, such as: export.tmx.gz</remarks>\n"
  syntax:
    content: public Task ExportAsync(IExportOriginAsync exportOrigin, string fileName, bool overwriteExisting)
    parameters:
    - id: exportOrigin
      type: Sdl.Core.TM.ImportExport.IExportOriginAsync
    - id: fileName
      type: System.String
      description: Name of the file.
    - id: overwriteExisting
      type: System.Boolean
      description: if set to <code>true</code> [overwrite existing].
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ExportAsync(exportOrigin As IExportOriginAsync, fileName As String, overwriteExisting As Boolean) As Task
  overload: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  commentId: P:Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  id: TmxExportFormat
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  langs:
  - csharp
  - vb
  name: TmxExportFormat
  nameWithType: ExporterAsync.TmxExportFormat
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the flavour of the exported TMX.\n"
  syntax:
    content: public TranslationUnitFormat TmxExportFormat { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.TranslationUnitFormat
    content.vb: Public Property TmxExportFormat As TranslationUnitFormat
  overload: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  commentId: P:Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  id: FilterExpression
  parent: Sdl.Core.TM.ImportExport.ExporterAsync
  langs:
  - csharp
  - vb
  name: FilterExpression
  nameWithType: ExporterAsync.FilterExpression
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  type: Property
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  summary: "\nGets or sets the filter expression.\n"
  syntax:
    content: public FilterExpression FilterExpression { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.FilterExpression
      description: The filter expression.
    content.vb: Public Property FilterExpression As FilterExpression
  overload: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.TM.ImportExport
  commentId: N:Sdl.Core.TM.ImportExport
  isExternal: true
  name: Sdl.Core.TM.ImportExport
  nameWithType: Sdl.Core.TM.ImportExport
  fullName: Sdl.Core.TM.ImportExport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.#ctor*
  commentId: Overload:Sdl.Core.TM.ImportExport.ExporterAsync.#ctor
  isExternal: true
  name: ExporterAsync
  nameWithType: ExporterAsync.ExporterAsync
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExporterAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{System.Int32,System.Int32,System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`3
  name: Func<Int32, Int32, Task<Boolean>>
  nameWithType: Func<Int32, Int32, Task<Boolean>>
  fullName: System.Func<System.Int32, System.Int32, System.Threading.Tasks.Task<System.Boolean>>
  nameWithType.vb: Func(Of Int32, Int32, Task(Of Boolean))
  fullName.vb: System.Func(Of System.Int32, System.Int32, System.Threading.Tasks.Task(Of System.Boolean))
  name.vb: Func(Of Int32, Int32, Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync*
  commentId: Overload:Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync
  isExternal: true
  name: OnBatchExportedAsync
  nameWithType: ExporterAsync.OnBatchExportedAsync
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.OnBatchExportedAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync*
  commentId: Overload:Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync
  isExternal: true
  name: ExportAsync
  nameWithType: ExporterAsync.ExportAsync
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.ExportAsync
- uid: Sdl.Core.TM.ImportExport.IExportOriginAsync
  commentId: T:Sdl.Core.TM.ImportExport.IExportOriginAsync
  parent: Sdl.Core.TM.ImportExport
  isExternal: true
  name: IExportOriginAsync
  nameWithType: IExportOriginAsync
  fullName: Sdl.Core.TM.ImportExport.IExportOriginAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat*
  commentId: Overload:Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
  isExternal: true
  name: TmxExportFormat
  nameWithType: ExporterAsync.TmxExportFormat
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.TmxExportFormat
- uid: Sdl.LanguagePlatform.TranslationMemory.TranslationUnitFormat
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.TranslationUnitFormat
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: TranslationUnitFormat
  nameWithType: TranslationUnitFormat
  fullName: Sdl.LanguagePlatform.TranslationMemory.TranslationUnitFormat
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression*
  commentId: Overload:Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
  isExternal: true
  name: FilterExpression
  nameWithType: ExporterAsync.FilterExpression
  fullName: Sdl.Core.TM.ImportExport.ExporterAsync.FilterExpression
- uid: Sdl.LanguagePlatform.TranslationMemory.FilterExpression
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.FilterExpression
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: FilterExpression
  nameWithType: FilterExpression
  fullName: Sdl.LanguagePlatform.TranslationMemory.FilterExpression
