### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.TranslationMemory.Utilities
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.Utilities
  id: Utilities
  parent: Sdl.LanguagePlatform.TranslationMemory
  children:
  - Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  langs:
  - csharp
  - vb
  name: Utilities
  nameWithType: Utilities
  fullName: Sdl.LanguagePlatform.TranslationMemory.Utilities
  type: Class
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nGeneral utilities.\n"
  syntax:
    content: public static class Utilities
    content.vb: Public Module Utilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: VerifyLanguageDirectionCompatibility(Sdl.LanguagePlatform.Core.LanguagePair,Sdl.LanguagePlatform.Core.LanguagePair,Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  parent: Sdl.LanguagePlatform.TranslationMemory.Utilities
  langs:
  - csharp
  - vb
  name: VerifyLanguageDirectionCompatibility(LanguagePair, LanguagePair, ICultureMetadataManager)
  nameWithType: Utilities.VerifyLanguageDirectionCompatibility(LanguagePair, LanguagePair, ICultureMetadataManager)
  fullName: Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility(Sdl.LanguagePlatform.Core.LanguagePair, Sdl.LanguagePlatform.Core.LanguagePair, Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Method
  source:
    path: Sdl.LanguagePlatform.TranslationMemory
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.TranslationMemory
  namespace: Sdl.LanguagePlatform.TranslationMemory
  summary: "\nDetermines whether two language directions are compatible. \n"
  syntax:
    content: public static bool VerifyLanguageDirectionCompatibility(LanguagePair l1, LanguagePair l2, ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: l1
      type: Sdl.LanguagePlatform.Core.LanguagePair
      description: The first language direction (non-null)
    - id: l2
      type: Sdl.LanguagePlatform.Core.LanguagePair
      description: The second language direction (non-null)
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    return:
      type: System.Boolean
      description: "<code>true</code> if the source cultures of both language directions\n            are compatible (see <xref href=\"Sdl.LanguagePlatform.Core.CultureInfoExtensions.AreCompatibleCodesAsync(Sdl.Core.Globalization.CultureCode%2cSdl.Core.Globalization.CultureCode%2cSdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)\" data-throw-if-not-resolved=\"false\"></xref>),\n            and the target cultures of both languages are either null or are compatible \n            as well. Otherwise, returns <code>false</code>."
    content.vb: Public Shared Function VerifyLanguageDirectionCompatibility(l1 As LanguagePair, l2 As LanguagePair, cultureMetadataManager As ICultureMetadataManager) As Boolean
  overload: Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility*
  commentId: Overload:Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility
  isExternal: true
  name: VerifyLanguageDirectionCompatibility
  nameWithType: Utilities.VerifyLanguageDirectionCompatibility
  fullName: Sdl.LanguagePlatform.TranslationMemory.Utilities.VerifyLanguageDirectionCompatibility
- uid: Sdl.LanguagePlatform.Core.LanguagePair
  commentId: T:Sdl.LanguagePlatform.Core.LanguagePair
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: LanguagePair
  nameWithType: LanguagePair
  fullName: Sdl.LanguagePlatform.Core.LanguagePair
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
