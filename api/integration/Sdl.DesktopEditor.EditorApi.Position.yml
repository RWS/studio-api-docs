### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.Position
  commentId: T:Sdl.DesktopEditor.EditorApi.Position
  id: Position
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.Position.#ctor
  - Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.IAbstractContentNode)
  - Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.ITextNode,System.Int64)
  - Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.Position)
  - Sdl.DesktopEditor.EditorApi.Position.Clone
  - Sdl.DesktopEditor.EditorApi.Position.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  - Sdl.DesktopEditor.EditorApi.Position.Equals(System.Object)
  - Sdl.DesktopEditor.EditorApi.Position.GetAncestors
  - Sdl.DesktopEditor.EditorApi.Position.GetHashCode
  - Sdl.DesktopEditor.EditorApi.Position.IsAfter(Sdl.DesktopEditor.EditorApi.Position)
  - Sdl.DesktopEditor.EditorApi.Position.IsBefore(Sdl.DesktopEditor.EditorApi.Position)
  - Sdl.DesktopEditor.EditorApi.Position.IsValid
  - Sdl.DesktopEditor.EditorApi.Position.Node
  - Sdl.DesktopEditor.EditorApi.Position.TextOffset
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Position
  fullName: Sdl.DesktopEditor.EditorApi.Position
  type: Class
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nA location in the content being edited.\n"
  syntax:
    content: 'public class Position : ICloneable, IComparable<Position>'
    content.vb: >-
      Public Class Position

          Implements ICloneable, IComparable(Of Position)
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.IComparable{Sdl.DesktopEditor.EditorApi.Position}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.DesktopEditor.EditorApi.Position.#ctor
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.#ctor
  id: '#ctor'
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Position()
  nameWithType: Position.Position()
  fullName: Sdl.DesktopEditor.EditorApi.Position.Position()
  type: Constructor
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nConstructs an uninitialized position.\n"
  remarks: "\n<p>The object is not considered valid until a node has been set.</p>\n"
  syntax:
    content: public Position()
    content.vb: Public Sub New
  overload: Sdl.DesktopEditor.EditorApi.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.IAbstractContentNode)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.IAbstractContentNode)
  id: '#ctor(Sdl.DesktopEditor.EditorApi.IAbstractContentNode)'
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Position(IAbstractContentNode)
  nameWithType: Position.Position(IAbstractContentNode)
  fullName: Sdl.DesktopEditor.EditorApi.Position.Position(Sdl.DesktopEditor.EditorApi.IAbstractContentNode)
  type: Constructor
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nConstructs a position that references a node.\n"
  remarks: "\n<p>\nUse this constructor for position that are not inside text nodes.\n</p>\n"
  syntax:
    content: public Position(IAbstractContentNode node)
    parameters:
    - id: node
      type: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
      description: The node.
    content.vb: Public Sub New(node As IAbstractContentNode)
  overload: Sdl.DesktopEditor.EditorApi.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.ITextNode,System.Int64)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.ITextNode,System.Int64)
  id: '#ctor(Sdl.DesktopEditor.EditorApi.ITextNode,System.Int64)'
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Position(ITextNode, Int64)
  nameWithType: Position.Position(ITextNode, Int64)
  fullName: Sdl.DesktopEditor.EditorApi.Position.Position(Sdl.DesktopEditor.EditorApi.ITextNode, System.Int64)
  type: Constructor
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nConstructs a position that references a location inside a text node.\n"
  syntax:
    content: public Position(ITextNode node, long textOffset)
    parameters:
    - id: node
      type: Sdl.DesktopEditor.EditorApi.ITextNode
      description: the text node
    - id: textOffset
      type: System.Int64
      description: 0-based offset in the text of the text node.
    content.vb: Public Sub New(node As ITextNode, textOffset As Long)
  overload: Sdl.DesktopEditor.EditorApi.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.#ctor(Sdl.DesktopEditor.EditorApi.Position)
  id: '#ctor(Sdl.DesktopEditor.EditorApi.Position)'
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Position(Position)
  nameWithType: Position.Position(Position)
  fullName: Sdl.DesktopEditor.EditorApi.Position.Position(Sdl.DesktopEditor.EditorApi.Position)
  type: Constructor
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nConstruct a position that has the same values as another position object.\n"
  syntax:
    content: public Position(Position other)
    parameters:
    - id: other
      type: Sdl.DesktopEditor.EditorApi.Position
    content.vb: Public Sub New(other As Position)
  overload: Sdl.DesktopEditor.EditorApi.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.Equals(System.Object)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Position.Equals(Object)
  fullName: Sdl.DesktopEditor.EditorApi.Position.Equals(System.Object)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nTrue if referring to the same node and text offset.\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.DesktopEditor.EditorApi.Position.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.DesktopEditor.EditorApi.Position.GetHashCode
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.GetHashCode
  id: GetHashCode
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Position.GetHashCode()
  fullName: Sdl.DesktopEditor.EditorApi.Position.GetHashCode()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nNode hash code combined with the text offet.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.DesktopEditor.EditorApi.Position.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.DesktopEditor.EditorApi.Position.IsBefore(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.IsBefore(Sdl.DesktopEditor.EditorApi.Position)
  id: IsBefore(Sdl.DesktopEditor.EditorApi.Position)
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: IsBefore(Position)
  nameWithType: Position.IsBefore(Position)
  fullName: Sdl.DesktopEditor.EditorApi.Position.IsBefore(Sdl.DesktopEditor.EditorApi.Position)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCompare two positions to determine if this is before the other.\n"
  syntax:
    content: public bool IsBefore(Position other)
    parameters:
    - id: other
      type: Sdl.DesktopEditor.EditorApi.Position
    return:
      type: System.Boolean
      description: "<code>true</code> if both positions are valid, in the same root container, and \n            the this position is before the other."
    content.vb: Public Function IsBefore(other As Position) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.Position.IsBefore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.IsAfter(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.IsAfter(Sdl.DesktopEditor.EditorApi.Position)
  id: IsAfter(Sdl.DesktopEditor.EditorApi.Position)
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: IsAfter(Position)
  nameWithType: Position.IsAfter(Position)
  fullName: Sdl.DesktopEditor.EditorApi.Position.IsAfter(Sdl.DesktopEditor.EditorApi.Position)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCompare two positions to determine if this is after the other.\n"
  syntax:
    content: public bool IsAfter(Position other)
    parameters:
    - id: other
      type: Sdl.DesktopEditor.EditorApi.Position
    return:
      type: System.Boolean
      description: "<code>true</code> if both positions are valid, in the same root container, and \n            the this position is after the other."
    content.vb: Public Function IsAfter(other As Position) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.Position.IsAfter*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.GetAncestors
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.GetAncestors
  id: GetAncestors
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: GetAncestors()
  nameWithType: Position.GetAncestors()
  fullName: Sdl.DesktopEditor.EditorApi.Position.GetAncestors()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nOrdered list of all parent nodes, where the root node is first in the list.\n"
  syntax:
    content: public List<IAbstractContainerNode> GetAncestors()
    return:
      type: System.Collections.Generic.List{Sdl.DesktopEditor.EditorApi.IAbstractContainerNode}
    content.vb: Public Function GetAncestors As List(Of IAbstractContainerNode)
  overload: Sdl.DesktopEditor.EditorApi.Position.GetAncestors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.Clone
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.Clone
  id: Clone
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Position.Clone()
  fullName: Sdl.DesktopEditor.EditorApi.Position.Clone()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nA (shallow) clone of the object.\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
    content.vb: Public Function Clone As Object
  overload: Sdl.DesktopEditor.EditorApi.Position.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:Sdl.DesktopEditor.EditorApi.Position.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  id: CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: CompareTo(Position)
  nameWithType: Position.CompareTo(Position)
  fullName: Sdl.DesktopEditor.EditorApi.Position.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nCompare to another position.\n"
  remarks: "\n<p>\nIf the other position is <code>null</code> it is considered &quot;before&quot;.\n</p>\n<p>\nIf both positions are invalid they are considered &quot;equal&quot;.\n</p>\n<p>\nIf one position is valid and the other not, the invalid position is considered &quot;before&quot; (similar to\na null comparison).\n</p>\n<p>\nIf both positions are valid but do not appear in the same root container they cannot be\ncompared, in which case an exception is thrown.\n</p>\n"
  syntax:
    content: public int CompareTo(Position other)
    parameters:
    - id: other
      type: Sdl.DesktopEditor.EditorApi.Position
    return:
      type: System.Int32
      description: >-
        1 if the other position appears before this one, 0 if they are equal or -1 if this position

        appears before the other.
    content.vb: Public Function CompareTo(other As Position) As Integer
  overload: Sdl.DesktopEditor.EditorApi.Position.CompareTo*
  implements:
  - System.IComparable{Sdl.DesktopEditor.EditorApi.Position}.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.Node
  commentId: P:Sdl.DesktopEditor.EditorApi.Position.Node
  id: Node
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: Position.Node
  fullName: Sdl.DesktopEditor.EditorApi.Position.Node
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe node this position references, or <code>null</code> if the position is not valid.\n"
  syntax:
    content: public IAbstractContentNode Node { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
    content.vb: Public Property Node As IAbstractContentNode
  overload: Sdl.DesktopEditor.EditorApi.Position.Node*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.TextOffset
  commentId: P:Sdl.DesktopEditor.EditorApi.Position.TextOffset
  id: TextOffset
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: TextOffset
  nameWithType: Position.TextOffset
  fullName: Sdl.DesktopEditor.EditorApi.Position.TextOffset
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe 0-based offset into the text in the text node.\n"
  syntax:
    content: public long TextOffset { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property TextOffset As Long
  overload: Sdl.DesktopEditor.EditorApi.Position.TextOffset*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Position.IsValid
  commentId: P:Sdl.DesktopEditor.EditorApi.Position.IsValid
  id: IsValid
  parent: Sdl.DesktopEditor.EditorApi.Position
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: Position.IsValid
  fullName: Sdl.DesktopEditor.EditorApi.Position.IsValid
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nIndicates whether the position is valid or not.\n"
  remarks: "\n<p>\nThe position is not valid if the node is null, if the text offset is negative,\nif the text offset is non-zero for a non-text node or if the text offset is\ngreater or equal to the length of the node.\n</p>\n"
  syntax:
    content: public virtual bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsValid As Boolean
  overload: Sdl.DesktopEditor.EditorApi.Position.IsValid*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.IComparable{Sdl.DesktopEditor.EditorApi.Position}
  commentId: T:System.IComparable{Sdl.DesktopEditor.EditorApi.Position}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Position>
  nameWithType: IComparable<Position>
  fullName: System.IComparable<Sdl.DesktopEditor.EditorApi.Position>
  nameWithType.vb: IComparable(Of Position)
  fullName.vb: System.IComparable(Of Sdl.DesktopEditor.EditorApi.Position)
  name.vb: IComparable(Of Position)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.Position
    name: Position
    nameWithType: Position
    fullName: Sdl.DesktopEditor.EditorApi.Position
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.Position
    name: Position
    nameWithType: Position
    fullName: Sdl.DesktopEditor.EditorApi.Position
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.Position.#ctor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.#ctor
  isExternal: true
  name: Position
  nameWithType: Position.Position
  fullName: Sdl.DesktopEditor.EditorApi.Position.Position
- uid: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
  commentId: T:Sdl.DesktopEditor.EditorApi.IAbstractContentNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IAbstractContentNode
  nameWithType: IAbstractContentNode
  fullName: Sdl.DesktopEditor.EditorApi.IAbstractContentNode
- uid: Sdl.DesktopEditor.EditorApi.ITextNode
  commentId: T:Sdl.DesktopEditor.EditorApi.ITextNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ITextNode
  nameWithType: ITextNode
  fullName: Sdl.DesktopEditor.EditorApi.ITextNode
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Sdl.DesktopEditor.EditorApi.Position
  commentId: T:Sdl.DesktopEditor.EditorApi.Position
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Position
  nameWithType: Position
  fullName: Sdl.DesktopEditor.EditorApi.Position
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.DesktopEditor.EditorApi.Position.Equals*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.Equals
  isExternal: true
  name: Equals
  nameWithType: Position.Equals
  fullName: Sdl.DesktopEditor.EditorApi.Position.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.DesktopEditor.EditorApi.Position.GetHashCode*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: Position.GetHashCode
  fullName: Sdl.DesktopEditor.EditorApi.Position.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.DesktopEditor.EditorApi.Position.IsBefore*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.IsBefore
  isExternal: true
  name: IsBefore
  nameWithType: Position.IsBefore
  fullName: Sdl.DesktopEditor.EditorApi.Position.IsBefore
- uid: Sdl.DesktopEditor.EditorApi.Position.IsAfter*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.IsAfter
  isExternal: true
  name: IsAfter
  nameWithType: Position.IsAfter
  fullName: Sdl.DesktopEditor.EditorApi.Position.IsAfter
- uid: Sdl.DesktopEditor.EditorApi.Position.GetAncestors*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.GetAncestors
  isExternal: true
  name: GetAncestors
  nameWithType: Position.GetAncestors
  fullName: Sdl.DesktopEditor.EditorApi.Position.GetAncestors
- uid: System.Collections.Generic.List{Sdl.DesktopEditor.EditorApi.IAbstractContainerNode}
  commentId: T:System.Collections.Generic.List{Sdl.DesktopEditor.EditorApi.IAbstractContainerNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IAbstractContainerNode>
  nameWithType: List<IAbstractContainerNode>
  fullName: System.Collections.Generic.List<Sdl.DesktopEditor.EditorApi.IAbstractContainerNode>
  nameWithType.vb: List(Of IAbstractContainerNode)
  fullName.vb: System.Collections.Generic.List(Of Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  name.vb: List(Of IAbstractContainerNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    name: IAbstractContainerNode
    nameWithType: IAbstractContainerNode
    fullName: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    name: IAbstractContainerNode
    nameWithType: IAbstractContainerNode
    fullName: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.DesktopEditor.EditorApi.Position.Clone*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.Clone
  isExternal: true
  name: Clone
  nameWithType: Position.Clone
  fullName: Sdl.DesktopEditor.EditorApi.Position.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.DesktopEditor.EditorApi.Position.CompareTo*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.CompareTo
  isExternal: true
  name: CompareTo
  nameWithType: Position.CompareTo
  fullName: Sdl.DesktopEditor.EditorApi.Position.CompareTo
- uid: System.IComparable{Sdl.DesktopEditor.EditorApi.Position}.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:System.IComparable{Sdl.DesktopEditor.EditorApi.Position}.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  parent: System.IComparable{Sdl.DesktopEditor.EditorApi.Position}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Position)
  nameWithType: IComparable<Position>.CompareTo(Position)
  fullName: System.IComparable<Sdl.DesktopEditor.EditorApi.Position>.CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  nameWithType.vb: IComparable(Of Position).CompareTo(Position)
  fullName.vb: System.IComparable(Of Sdl.DesktopEditor.EditorApi.Position).CompareTo(Sdl.DesktopEditor.EditorApi.Position)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Position>.CompareTo
    fullName: System.IComparable<Sdl.DesktopEditor.EditorApi.Position>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.DesktopEditor.EditorApi.Position
    name: Position
    nameWithType: Position
    fullName: Sdl.DesktopEditor.EditorApi.Position
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Position).CompareTo
    fullName: System.IComparable(Of Sdl.DesktopEditor.EditorApi.Position).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.DesktopEditor.EditorApi.Position
    name: Position
    nameWithType: Position
    fullName: Sdl.DesktopEditor.EditorApi.Position
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.DesktopEditor.EditorApi.Position.Node*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.Node
  isExternal: true
  name: Node
  nameWithType: Position.Node
  fullName: Sdl.DesktopEditor.EditorApi.Position.Node
- uid: Sdl.DesktopEditor.EditorApi.Position.TextOffset*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.TextOffset
  isExternal: true
  name: TextOffset
  nameWithType: Position.TextOffset
  fullName: Sdl.DesktopEditor.EditorApi.Position.TextOffset
- uid: Sdl.DesktopEditor.EditorApi.Position.IsValid*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Position.IsValid
  isExternal: true
  name: IsValid
  nameWithType: Position.IsValid
  fullName: Sdl.DesktopEditor.EditorApi.Position.IsValid
