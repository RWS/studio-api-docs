### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator
  commentId: T:Sdl.DesktopEditor.EditorApi.ITextIterator
  id: ITextIterator
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter
  - Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition
  - Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl
  - Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart
  - Sdl.DesktopEditor.EditorApi.ITextIterator.Move(Sdl.DesktopEditor.EditorApi.Move)
  langs:
  - csharp
  - vb
  name: ITextIterator
  nameWithType: ITextIterator
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThis iterator can be used to iterate in a text editing fashion in the edit control.\n"
  syntax:
    content: 'public interface ITextIterator : ICloneable'
    content.vb: >-
      Public Interface ITextIterator
          Inherits ICloneable
  inheritedMembers:
  - System.ICloneable.Clone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.Move(Sdl.DesktopEditor.EditorApi.Move)
  commentId: M:Sdl.DesktopEditor.EditorApi.ITextIterator.Move(Sdl.DesktopEditor.EditorApi.Move)
  id: Move(Sdl.DesktopEditor.EditorApi.Move)
  parent: Sdl.DesktopEditor.EditorApi.ITextIterator
  langs:
  - csharp
  - vb
  name: Move(Move)
  nameWithType: ITextIterator.Move(Move)
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.Move(Sdl.DesktopEditor.EditorApi.Move)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMove the iterator in the specified direction relative to the \ncurrent position, from the edit control&apos;s perspective.\n"
  syntax:
    content: bool Move(Move typeOfMove)
    parameters:
    - id: typeOfMove
      type: Sdl.DesktopEditor.EditorApi.Move
    return:
      type: System.Boolean
      description: <code>true</code> if the move was successful
    content.vb: Function Move(typeOfMove As Move) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.ITextIterator.Move*
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition
  commentId: P:Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition
  id: CurrentPosition
  parent: Sdl.DesktopEditor.EditorApi.ITextIterator
  langs:
  - csharp
  - vb
  name: CurrentPosition
  nameWithType: ITextIterator.CurrentPosition
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe current position of the iterator.\n"
  syntax:
    content: Position CurrentPosition { get; set; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.Position
    content.vb: Property CurrentPosition As Position
  overload: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl
  commentId: P:Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl
  id: EditControl
  parent: Sdl.DesktopEditor.EditorApi.ITextIterator
  langs:
  - csharp
  - vb
  name: EditControl
  nameWithType: ITextIterator.EditControl
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe edit control the iterator refers to.\n"
  syntax:
    content: IEditControl EditControl { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IEditControl
    content.vb: ReadOnly Property EditControl As IEditControl
  overload: Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart
  commentId: P:Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart
  id: IsWordStart
  parent: Sdl.DesktopEditor.EditorApi.ITextIterator
  langs:
  - csharp
  - vb
  name: IsWordStart
  nameWithType: ITextIterator.IsWordStart
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\n<code>true</code> if the current position can be considered the start of a word.\n"
  syntax:
    content: bool IsWordStart { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsWordStart As Boolean
  overload: Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart*
  seealso:
  - linkId: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
    commentId: M:Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter
  commentId: P:Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter
  id: CurrentCharacter
  parent: Sdl.DesktopEditor.EditorApi.ITextIterator
  langs:
  - csharp
  - vb
  name: CurrentCharacter
  nameWithType: ITextIterator.CurrentCharacter
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe text character at the current position, or <code>null</code> if none.\n"
  syntax:
    content: char? CurrentCharacter { get; }
    parameters: []
    return:
      type: System.Nullable{System.Char}
    content.vb: ReadOnly Property CurrentCharacter As Char?
  overload: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.Move*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ITextIterator.Move
  isExternal: true
  name: Move
  nameWithType: ITextIterator.Move
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.Move
- uid: Sdl.DesktopEditor.EditorApi.Move
  commentId: T:Sdl.DesktopEditor.EditorApi.Move
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Move
  nameWithType: Move
  fullName: Sdl.DesktopEditor.EditorApi.Move
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition
  isExternal: true
  name: CurrentPosition
  nameWithType: ITextIterator.CurrentPosition
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentPosition
- uid: Sdl.DesktopEditor.EditorApi.Position
  commentId: T:Sdl.DesktopEditor.EditorApi.Position
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Position
  nameWithType: Position
  fullName: Sdl.DesktopEditor.EditorApi.Position
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl
  isExternal: true
  name: EditControl
  nameWithType: ITextIterator.EditControl
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.EditControl
- uid: Sdl.DesktopEditor.EditorApi.IEditControl
  commentId: T:Sdl.DesktopEditor.EditorApi.IEditControl
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IEditControl
  nameWithType: IEditControl
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart
  isExternal: true
  name: IsWordStart
  nameWithType: ITextIterator.IsWordStart
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.IsWordStart
- uid: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
  commentId: M:Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
  parent: Sdl.DesktopEditor.EditorApi.IEditControl
  isExternal: true
  name: IsWordStart(Position)
  nameWithType: IEditControl.IsWordStart(Position)
  fullName: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
  spec.csharp:
  - uid: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
    name: IsWordStart
    nameWithType: IEditControl.IsWordStart
    fullName: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.DesktopEditor.EditorApi.Position
    name: Position
    nameWithType: Position
    fullName: Sdl.DesktopEditor.EditorApi.Position
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart(Sdl.DesktopEditor.EditorApi.Position)
    name: IsWordStart
    nameWithType: IEditControl.IsWordStart
    fullName: Sdl.DesktopEditor.EditorApi.IEditControl.IsWordStart
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.DesktopEditor.EditorApi.Position
    name: Position
    nameWithType: Position
    fullName: Sdl.DesktopEditor.EditorApi.Position
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter
  isExternal: true
  name: CurrentCharacter
  nameWithType: ITextIterator.CurrentCharacter
  fullName: Sdl.DesktopEditor.EditorApi.ITextIterator.CurrentCharacter
- uid: System.Nullable{System.Char}
  commentId: T:System.Nullable{System.Char}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Char>
  nameWithType: Nullable<Char>
  fullName: System.Nullable<System.Char>
  nameWithType.vb: Nullable(Of Char)
  fullName.vb: System.Nullable(Of System.Char)
  name.vb: Nullable(Of Char)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
