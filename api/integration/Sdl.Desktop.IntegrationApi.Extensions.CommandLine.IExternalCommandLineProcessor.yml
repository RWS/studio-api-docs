### YamlMime:ManagedReference
items:
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  commentId: T:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  id: IExternalCommandLineProcessor
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  children:
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine(Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments)
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName
  langs:
  - csharp
  - vb
  name: IExternalCommandLineProcessor
  nameWithType: IExternalCommandLineProcessor
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  type: Interface
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nRepresents a command line processor extension, which is responsible for processing a number of command line arguments, which \nallow the user the execute a specific task or a set of tasks from the command line.\nThis will be executed before the main window is created.\n"
  syntax:
    content: public interface IExternalCommandLineProcessor
    content.vb: Public Interface IExternalCommandLineProcessor
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine(Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments)
  commentId: M:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine(Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments)
  id: ProcessCommandLine(Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments)
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  langs:
  - csharp
  - vb
  name: ProcessCommandLine(ExternalCommandLineArguments)
  nameWithType: IExternalCommandLineProcessor.ProcessCommandLine(ExternalCommandLineArguments)
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine(Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments)
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nThis methods is called when the processor is executed.\n"
  remarks: A command line processor will always be executed, even if none of its expected parameters have been specified.
  syntax:
    content: void ProcessCommandLine(ExternalCommandLineArguments args)
    parameters:
    - id: args
      type: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments
      description: The full set of command line arguments and values supplied by the user, not restricted to the arguments expected by this processor.
    content.vb: Sub ProcessCommandLine(args As ExternalCommandLineArguments)
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine*
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName
  id: TaskName
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  langs:
  - csharp
  - vb
  name: TaskName
  nameWithType: IExternalCommandLineProcessor.TaskName
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets the name of the task or tasks which the processor allows the user to execute from the command line.\n"
  syntax:
    content: string TaskName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property TaskName As String
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription
  id: TaskDescription
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  langs:
  - csharp
  - vb
  name: TaskDescription
  nameWithType: IExternalCommandLineProcessor.TaskDescription
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets the description of the task or tasks which the processor allows the user to execute from the command line.\n"
  syntax:
    content: string TaskDescription { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property TaskDescription As String
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments
  id: SupportedArguments
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor
  langs:
  - csharp
  - vb
  name: SupportedArguments
  nameWithType: IExternalCommandLineProcessor.SupportedArguments
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets the definitions for the supported command line arguments for this processor.\n"
  syntax:
    content: IEnumerable<ExternalCommandLineArgumentDefinition> SupportedArguments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition}
    content.vb: ReadOnly Property SupportedArguments As IEnumerable(Of ExternalCommandLineArgumentDefinition)
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  commentId: N:Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  isExternal: true
  name: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  nameWithType: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine
  isExternal: true
  name: ProcessCommandLine
  nameWithType: IExternalCommandLineProcessor.ProcessCommandLine
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.ProcessCommandLine
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments
  commentId: T:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  isExternal: true
  name: ExternalCommandLineArguments
  nameWithType: ExternalCommandLineArguments
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArguments
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName
  isExternal: true
  name: TaskName
  nameWithType: IExternalCommandLineProcessor.TaskName
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription
  isExternal: true
  name: TaskDescription
  nameWithType: IExternalCommandLineProcessor.TaskDescription
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.TaskDescription
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments
  isExternal: true
  name: SupportedArguments
  nameWithType: IExternalCommandLineProcessor.SupportedArguments
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.IExternalCommandLineProcessor.SupportedArguments
- uid: System.Collections.Generic.IEnumerable{Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExternalCommandLineArgumentDefinition>
  nameWithType: IEnumerable<ExternalCommandLineArgumentDefinition>
  fullName: System.Collections.Generic.IEnumerable<Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition>
  nameWithType.vb: IEnumerable(Of ExternalCommandLineArgumentDefinition)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition)
  name.vb: IEnumerable(Of ExternalCommandLineArgumentDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
    name: ExternalCommandLineArgumentDefinition
    nameWithType: ExternalCommandLineArgumentDefinition
    fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
    name: ExternalCommandLineArgumentDefinition
    nameWithType: ExternalCommandLineArgumentDefinition
    fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
