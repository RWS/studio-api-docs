### YamlMime:ManagedReference
items:
- uid: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator
  commentId: T:Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator
  id: IStudioEventAggregator
  parent: Sdl.Desktop.IntegrationApi.Interfaces
  children:
  - Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent``1
  - Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish``1(``0)
  langs:
  - csharp
  - vb
  name: IStudioEventAggregator
  nameWithType: IStudioEventAggregator
  fullName: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator
  type: Interface
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi.Interfaces
  summary: "\nThe contract defining the event aggregator.\n"
  syntax:
    content: public interface IStudioEventAggregator
    content.vb: Public Interface IStudioEventAggregator
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent``1
  commentId: M:Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent``1
  id: GetEvent``1
  parent: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator
  langs:
  - csharp
  - vb
  name: GetEvent<TEvent>()
  nameWithType: IStudioEventAggregator.GetEvent<TEvent>()
  fullName: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent<TEvent>()
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi.Interfaces
  summary: "\nReturns the event for which to subscribe\n"
  syntax:
    content: IObservable<TEvent> GetEvent<TEvent>()
    typeParameters:
    - id: TEvent
    return:
      type: System.IObservable{{TEvent}}
    content.vb: Function GetEvent(Of TEvent) As IObservable(Of TEvent)
  overload: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent*
  nameWithType.vb: IStudioEventAggregator.GetEvent(Of TEvent)()
  fullName.vb: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent(Of TEvent)()
  name.vb: GetEvent(Of TEvent)()
- uid: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish``1(``0)
  commentId: M:Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish``1(``0)
  id: Publish``1(``0)
  parent: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator
  langs:
  - csharp
  - vb
  name: Publish<TEvent>(TEvent)
  nameWithType: IStudioEventAggregator.Publish<TEvent>(TEvent)
  fullName: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish<TEvent>(TEvent)
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi.Interfaces
  summary: "\nPublishes the given event to all subscribers\n"
  syntax:
    content: void Publish<TEvent>(TEvent sampleEvent)
    parameters:
    - id: sampleEvent
      type: '{TEvent}'
    typeParameters:
    - id: TEvent
    content.vb: Sub Publish(Of TEvent)(sampleEvent As TEvent)
  overload: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish*
  nameWithType.vb: IStudioEventAggregator.Publish(Of TEvent)(TEvent)
  fullName.vb: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish(Of TEvent)(TEvent)
  name.vb: Publish(Of TEvent)(TEvent)
references:
- uid: Sdl.Desktop.IntegrationApi.Interfaces
  commentId: N:Sdl.Desktop.IntegrationApi.Interfaces
  isExternal: true
  name: Sdl.Desktop.IntegrationApi.Interfaces
  nameWithType: Sdl.Desktop.IntegrationApi.Interfaces
  fullName: Sdl.Desktop.IntegrationApi.Interfaces
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent
  isExternal: true
  name: GetEvent
  nameWithType: IStudioEventAggregator.GetEvent
  fullName: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.GetEvent
- uid: System.IObservable{{TEvent}}
  commentId: T:System.IObservable{``0}
  parent: System
  definition: System.IObservable`1
  name: IObservable<TEvent>
  nameWithType: IObservable<TEvent>
  fullName: System.IObservable<TEvent>
  nameWithType.vb: IObservable(Of TEvent)
  fullName.vb: System.IObservable(Of TEvent)
  name.vb: IObservable(Of TEvent)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  isExternal: true
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  nameWithType.vb: IObservable(Of T)
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish
  isExternal: true
  name: Publish
  nameWithType: IStudioEventAggregator.Publish
  fullName: Sdl.Desktop.IntegrationApi.Interfaces.IStudioEventAggregator.Publish
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: TEvent
  commentId: '!:TEvent'
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
