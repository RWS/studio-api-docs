### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  commentId: T:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  id: PlainTextMapper
  parent: Sdl.DesktopEditor.EditorApi.Implementation
  children:
  - Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.#ctor
  - Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  - Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  - Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets(System.Int32,System.Int32)
  - Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent
  - Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText
  langs:
  - csharp
  - vb
  name: PlainTextMapper
  nameWithType: PlainTextMapper
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  type: Class
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nExtracts a string of plain text from an IContainerNode, and creates mappings between \nthe plain text offsets and Framework nodes. The mappings can be used to get an IRange\nof a plain text substring.\nOne use is to obtain an IRange for incorrectly spelt words, so they can be marked up\nwith squiggly error lines.\n"
  syntax:
    content: public class PlainTextMapper
    content.vb: Public Class PlainTextMapper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.#ctor
  commentId: M:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.#ctor
  id: '#ctor'
  parent: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  langs:
  - csharp
  - vb
  name: PlainTextMapper()
  nameWithType: PlainTextMapper.PlainTextMapper()
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainTextMapper()
  type: Constructor
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nconstructor\n"
  syntax:
    content: public PlainTextMapper()
    content.vb: Public Sub New
  overload: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  commentId: M:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  id: BuildMappings(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  parent: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  langs:
  - csharp
  - vb
  name: BuildMappings(IAbstractContainerNode)
  nameWithType: PlainTextMapper.BuildMappings(IAbstractContainerNode)
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nVisits all the contained nodes, extracting text and building mappings\n"
  syntax:
    content: public void BuildMappings(IAbstractContainerNode container)
    parameters:
    - id: container
      type: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    content.vb: Public Sub BuildMappings(container As IAbstractContainerNode)
  overload: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  commentId: M:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  id: CheckIfShouldRecurseContainer(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  parent: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  langs:
  - csharp
  - vb
  name: CheckIfShouldRecurseContainer(IAbstractContainerNode)
  nameWithType: PlainTextMapper.CheckIfShouldRecurseContainer(IAbstractContainerNode)
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer(Sdl.DesktopEditor.EditorApi.IAbstractContainerNode)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nAsks The Question Should We Recurse Into Revision Marker Containers?\nIf We&apos;re Actively Wishing To Exclude Deleted Content (eg for: SpellChecking)\n"
  syntax:
    content: protected bool CheckIfShouldRecurseContainer(IAbstractContainerNode nodeContainer)
    parameters:
    - id: nodeContainer
      type: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    return:
      type: System.Boolean
    content.vb: Protected Function CheckIfShouldRecurseContainer(nodeContainer As IAbstractContainerNode) As Boolean
  overload: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets(System.Int32,System.Int32)
  commentId: M:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets(System.Int32,System.Int32)
  id: GetRangeFromPlainTextOffsets(System.Int32,System.Int32)
  parent: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  langs:
  - csharp
  - vb
  name: GetRangeFromPlainTextOffsets(Int32, Int32)
  nameWithType: PlainTextMapper.GetRangeFromPlainTextOffsets(Int32, Int32)
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets(System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nReturns the range corresponding to the portion of the plain text \nstring given by startIndex and endIndex. Returns null if there is no valid mapping\nfor the startIndex. \n"
  syntax:
    content: public ContentRange GetRangeFromPlainTextOffsets(int startIndex, int endIndex)
    parameters:
    - id: startIndex
      type: System.Int32
    - id: endIndex
      type: System.Int32
    return:
      type: Sdl.DesktopEditor.EditorApi.ContentRange
    content.vb: Public Function GetRangeFromPlainTextOffsets(startIndex As Integer, endIndex As Integer) As ContentRange
  overload: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText
  commentId: P:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText
  id: PlainText
  parent: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  langs:
  - csharp
  - vb
  name: PlainText
  nameWithType: PlainTextMapper.PlainText
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nThe plain text extracted from the IContainerNode supplied to the BuildMappings method\n"
  syntax:
    content: public string PlainText { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property PlainText As String
  overload: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent
  commentId: P:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent
  id: IgnoreDeletedRevisonContent
  parent: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper
  langs:
  - csharp
  - vb
  name: IgnoreDeletedRevisonContent
  nameWithType: PlainTextMapper.IgnoreDeletedRevisonContent
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi.Implementation
  summary: "\nWhen Set To: &apos;true&apos;, Indicates This Class Will Ignore Any Content In An &apos;IRevisionMarkerContainerNode&apos; That Has Been Marked As Deleted, \nAnd Will Not Include It In The Resulting &apos;PlainText&apos; Property.\n"
  syntax:
    content: public bool IgnoreDeletedRevisonContent { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IgnoreDeletedRevisonContent As Boolean
  overload: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.DesktopEditor.EditorApi.Implementation
  commentId: N:Sdl.DesktopEditor.EditorApi.Implementation
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi.Implementation
  nameWithType: Sdl.DesktopEditor.EditorApi.Implementation
  fullName: Sdl.DesktopEditor.EditorApi.Implementation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.#ctor*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.#ctor
  isExternal: true
  name: PlainTextMapper
  nameWithType: PlainTextMapper.PlainTextMapper
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainTextMapper
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings
  isExternal: true
  name: BuildMappings
  nameWithType: PlainTextMapper.BuildMappings
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.BuildMappings
- uid: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
  commentId: T:Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IAbstractContainerNode
  nameWithType: IAbstractContainerNode
  fullName: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer
  isExternal: true
  name: CheckIfShouldRecurseContainer
  nameWithType: PlainTextMapper.CheckIfShouldRecurseContainer
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.CheckIfShouldRecurseContainer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets
  isExternal: true
  name: GetRangeFromPlainTextOffsets
  nameWithType: PlainTextMapper.GetRangeFromPlainTextOffsets
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.GetRangeFromPlainTextOffsets
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.DesktopEditor.EditorApi.ContentRange
  commentId: T:Sdl.DesktopEditor.EditorApi.ContentRange
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ContentRange
  nameWithType: ContentRange
  fullName: Sdl.DesktopEditor.EditorApi.ContentRange
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText
  isExternal: true
  name: PlainText
  nameWithType: PlainTextMapper.PlainText
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.PlainText
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent
  isExternal: true
  name: IgnoreDeletedRevisonContent
  nameWithType: PlainTextMapper.IgnoreDeletedRevisonContent
  fullName: Sdl.DesktopEditor.EditorApi.Implementation.PlainTextMapper.IgnoreDeletedRevisonContent
