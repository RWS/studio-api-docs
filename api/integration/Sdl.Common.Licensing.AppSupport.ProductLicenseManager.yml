### YamlMime:ManagedReference
items:
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  commentId: T:Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  id: ProductLicenseManager
  parent: Sdl.Common.Licensing.AppSupport
  children:
  - Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual
  - Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense
  - Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog(System.Windows.Input.ICommand)
  - Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize(Sdl.Common.Licensing.AppSupport.Product,Microsoft.Extensions.Logging.ILoggerFactory)
  - Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance
  - Sdl.Common.Licensing.AppSupport.ProductLicenseManager.LicenseStatusChanged
  langs:
  - csharp
  - vb
  name: ProductLicenseManager
  nameWithType: ProductLicenseManager
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  type: Class
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public sealed class ProductLicenseManager
    content.vb: Public NotInheritable Class ProductLicenseManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize(Sdl.Common.Licensing.AppSupport.Product,Microsoft.Extensions.Logging.ILoggerFactory)
  commentId: M:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize(Sdl.Common.Licensing.AppSupport.Product,Microsoft.Extensions.Logging.ILoggerFactory)
  id: Initialize(Sdl.Common.Licensing.AppSupport.Product,Microsoft.Extensions.Logging.ILoggerFactory)
  parent: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  langs:
  - csharp
  - vb
  name: Initialize(Product, ILoggerFactory)
  nameWithType: ProductLicenseManager.Initialize(Product, ILoggerFactory)
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize(Sdl.Common.Licensing.AppSupport.Product, Microsoft.Extensions.Logging.ILoggerFactory)
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nInitializes the current licensing manager\n"
  syntax:
    content: public void Initialize(Product product, ILoggerFactory loggerFactory)
    parameters:
    - id: product
      type: Sdl.Common.Licensing.AppSupport.Product
    - id: loggerFactory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    content.vb: Public Sub Initialize(product As Product, loggerFactory As ILoggerFactory)
  overload: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog(System.Windows.Input.ICommand)
  commentId: M:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog(System.Windows.Input.ICommand)
  id: GetLicensingDialog(System.Windows.Input.ICommand)
  parent: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  langs:
  - csharp
  - vb
  name: GetLicensingDialog(ICommand)
  nameWithType: ProductLicenseManager.GetLicensingDialog(ICommand)
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog(System.Windows.Input.ICommand)
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nDisplay the product activation dialog with the correct application specific title, description etc.\n"
  syntax:
    content: public UserControl GetLicensingDialog(ICommand closeCommand)
    parameters:
    - id: closeCommand
      type: System.Windows.Input.ICommand
    return:
      type: System.Windows.Controls.UserControl
    content.vb: Public Function GetLicensingDialog(closeCommand As ICommand) As UserControl
  overload: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual
  commentId: P:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual
  id: CanActivateAPerpetual
  parent: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  langs:
  - csharp
  - vb
  name: CanActivateAPerpetual
  nameWithType: ProductLicenseManager.CanActivateAPerpetual
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public bool CanActivateAPerpetual { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CanActivateAPerpetual As Boolean
  overload: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance
  commentId: P:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance
  id: Instance
  parent: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: ProductLicenseManager.Instance
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public static ProductLicenseManager Instance { get; }
    parameters: []
    return:
      type: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
    content.vb: Public Shared ReadOnly Property Instance As ProductLicenseManager
  overload: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense
  commentId: P:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense
  id: CurrentProductLicense
  parent: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  langs:
  - csharp
  - vb
  name: CurrentProductLicense
  nameWithType: ProductLicenseManager.CurrentProductLicense
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  summary: "\nThe current active product license for this application\n"
  syntax:
    content: public IProductLicense CurrentProductLicense { get; }
    parameters: []
    return:
      type: Sdl.Common.Licensing.AppSupport.IProductLicense
    content.vb: Public ReadOnly Property CurrentProductLicense As IProductLicense
  overload: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.LicenseStatusChanged
  commentId: E:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.LicenseStatusChanged
  id: LicenseStatusChanged
  parent: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  langs:
  - csharp
  - vb
  name: LicenseStatusChanged
  nameWithType: ProductLicenseManager.LicenseStatusChanged
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.LicenseStatusChanged
  type: Event
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public event EventHandler LicenseStatusChanged
    return:
      type: System.EventHandler
    content.vb: Public Event LicenseStatusChanged As EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Common.Licensing.AppSupport
  commentId: N:Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: Sdl.Common.Licensing.AppSupport
  nameWithType: Sdl.Common.Licensing.AppSupport
  fullName: Sdl.Common.Licensing.AppSupport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize
  isExternal: true
  name: Initialize
  nameWithType: ProductLicenseManager.Initialize
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Initialize
- uid: Sdl.Common.Licensing.AppSupport.Product
  commentId: T:Sdl.Common.Licensing.AppSupport.Product
  parent: Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: Product
  nameWithType: Product
  fullName: Sdl.Common.Licensing.AppSupport.Product
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: '!:Microsoft.Extensions.Logging.ILoggerFactory'
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog
  isExternal: true
  name: GetLicensingDialog
  nameWithType: ProductLicenseManager.GetLicensingDialog
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.GetLicensingDialog
- uid: System.Windows.Input.ICommand
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Controls.UserControl
  commentId: '!:System.Windows.Controls.UserControl'
  isExternal: true
  name: UserControl
  nameWithType: UserControl
  fullName: System.Windows.Controls.UserControl
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual
  isExternal: true
  name: CanActivateAPerpetual
  nameWithType: ProductLicenseManager.CanActivateAPerpetual
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CanActivateAPerpetual
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance
  isExternal: true
  name: Instance
  nameWithType: ProductLicenseManager.Instance
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.Instance
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  commentId: T:Sdl.Common.Licensing.AppSupport.ProductLicenseManager
  parent: Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: ProductLicenseManager
  nameWithType: ProductLicenseManager
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager
- uid: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense
  isExternal: true
  name: CurrentProductLicense
  nameWithType: ProductLicenseManager.CurrentProductLicense
  fullName: Sdl.Common.Licensing.AppSupport.ProductLicenseManager.CurrentProductLicense
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense
  commentId: T:Sdl.Common.Licensing.AppSupport.IProductLicense
  parent: Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: IProductLicense
  nameWithType: IProductLicense
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
