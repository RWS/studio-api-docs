### YamlMime:ManagedReference
items:
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication
  commentId: T:Sdl.Desktop.IntegrationApi.AbstractApplication
  id: AbstractApplication
  parent: Sdl.Desktop.IntegrationApi
  children:
  - Sdl.Desktop.IntegrationApi.AbstractApplication.#ctor
  - Sdl.Desktop.IntegrationApi.AbstractApplication.Closing
  - Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction``1
  - Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction``1
  - Sdl.Desktop.IntegrationApi.AbstractApplication.GetController``1
  - Sdl.Desktop.IntegrationApi.AbstractApplication.GetService``1
  - Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay(Sdl.Desktop.Platform.IStudioWindow)
  langs:
  - csharp
  - vb
  name: AbstractApplication
  nameWithType: AbstractApplication
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication
  type: Class
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nBase class for the application\n"
  syntax:
    content: public abstract class AbstractApplication
    content.vb: Public MustInherit Class AbstractApplication
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.TranslationStudioAutomation.IntegrationApi.Internal.SdlTradosStudioApplication
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.#ctor
  commentId: M:Sdl.Desktop.IntegrationApi.AbstractApplication.#ctor
  id: '#ctor'
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: AbstractApplication()
  nameWithType: AbstractApplication.AbstractApplication()
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.AbstractApplication()
  type: Constructor
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nInitialize the instance of this class\n"
  syntax:
    content: protected AbstractApplication()
    content.vb: Protected Sub New
  overload: Sdl.Desktop.IntegrationApi.AbstractApplication.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.GetController``1
  commentId: M:Sdl.Desktop.IntegrationApi.AbstractApplication.GetController``1
  id: GetController``1
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: GetController<TController>()
  nameWithType: AbstractApplication.GetController<TController>()
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.GetController<TController>()
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nGets the requested controller. This supports getting view or view part controllers.\n"
  syntax:
    content: >-
      public virtual TController GetController<TController>()

          where TController : AbstractController
    typeParameters:
    - id: TController
      description: the type of the requested controller
    return:
      type: '{TController}'
      description: The controller of type T requested.
    content.vb: Public Overridable Function GetController(Of TController As AbstractController) As TController
  overload: Sdl.Desktop.IntegrationApi.AbstractApplication.GetController*
  nameWithType.vb: AbstractApplication.GetController(Of TController)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.Desktop.IntegrationApi.AbstractApplication.GetController(Of TController)()
  name.vb: GetController(Of TController)()
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction``1
  commentId: M:Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction``1
  id: GetAction``1
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: GetAction<TAction>()
  nameWithType: AbstractApplication.GetAction<TAction>()
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction<TAction>()
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nGets the requested action.\n"
  syntax:
    content: >-
      public virtual TAction GetAction<TAction>()

          where TAction : AbstractAction
    typeParameters:
    - id: TAction
      description: The requested action by type.
    return:
      type: '{TAction}'
      description: The action requested or null if none was found.
    content.vb: Public Overridable Function GetAction(Of TAction As AbstractAction) As TAction
  overload: Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction*
  nameWithType.vb: AbstractApplication.GetAction(Of TAction)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction(Of TAction)()
  name.vb: GetAction(Of TAction)()
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction``1
  commentId: M:Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction``1
  id: ExecuteAction``1
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: ExecuteAction<TAction>()
  nameWithType: AbstractApplication.ExecuteAction<TAction>()
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction<TAction>()
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nExecute the requested action\n"
  syntax:
    content: >-
      public virtual void ExecuteAction<TAction>()

          where TAction : AbstractAction
    typeParameters:
    - id: TAction
      description: The requested action by type.
    content.vb: Public Overridable Sub ExecuteAction(Of TAction As AbstractAction)
  overload: Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction*
  nameWithType.vb: AbstractApplication.ExecuteAction(Of TAction)()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction(Of TAction)()
  name.vb: ExecuteAction(Of TAction)()
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.GetService``1
  commentId: M:Sdl.Desktop.IntegrationApi.AbstractApplication.GetService``1
  id: GetService``1
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: GetService<T>()
  nameWithType: AbstractApplication.GetService<T>()
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.GetService<T>()
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nGets the requested service.\n"
  syntax:
    content: public T GetService<T>()
    typeParameters:
    - id: T
      description: The requested service by type.
    return:
      type: '{T}'
      description: The service requested or null if none was found.
    content.vb: Public Function GetService(Of T) As T
  overload: Sdl.Desktop.IntegrationApi.AbstractApplication.GetService*
  nameWithType.vb: AbstractApplication.GetService(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Desktop.IntegrationApi.AbstractApplication.GetService(Of T)()
  name.vb: GetService(Of T)()
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay(Sdl.Desktop.Platform.IStudioWindow)
  commentId: M:Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay(Sdl.Desktop.Platform.IStudioWindow)
  id: RegisterRelay(Sdl.Desktop.Platform.IStudioWindow)
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: RegisterRelay(IStudioWindow)
  nameWithType: AbstractApplication.RegisterRelay(IStudioWindow)
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay(Sdl.Desktop.Platform.IStudioWindow)
  type: Method
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nInitializes services when the window is created\n"
  syntax:
    content: protected virtual void RegisterRelay(IStudioWindow window)
    parameters:
    - id: window
      type: Sdl.Desktop.Platform.IStudioWindow
    content.vb: Protected Overridable Sub RegisterRelay(window As IStudioWindow)
  overload: Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.Closing
  commentId: E:Sdl.Desktop.IntegrationApi.AbstractApplication.Closing
  id: Closing
  parent: Sdl.Desktop.IntegrationApi.AbstractApplication
  langs:
  - csharp
  - vb
  name: Closing
  nameWithType: AbstractApplication.Closing
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.Closing
  type: Event
  source:
    path: Sdl.Desktop.IntegrationApi
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi
  namespace: Sdl.Desktop.IntegrationApi
  summary: "\nTriggered when the application is closing\n"
  syntax:
    content: public event EventHandler<CancelEventArgs> Closing
    return:
      type: System.EventHandler{System.ComponentModel.CancelEventArgs}
    content.vb: Public Event Closing As EventHandler(Of CancelEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Desktop.IntegrationApi
  commentId: N:Sdl.Desktop.IntegrationApi
  isExternal: true
  name: Sdl.Desktop.IntegrationApi
  nameWithType: Sdl.Desktop.IntegrationApi
  fullName: Sdl.Desktop.IntegrationApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.#ctor*
  commentId: Overload:Sdl.Desktop.IntegrationApi.AbstractApplication.#ctor
  isExternal: true
  name: AbstractApplication
  nameWithType: AbstractApplication.AbstractApplication
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.AbstractApplication
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.GetController*
  commentId: Overload:Sdl.Desktop.IntegrationApi.AbstractApplication.GetController
  isExternal: true
  name: GetController
  nameWithType: AbstractApplication.GetController
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.GetController
- uid: '{TController}'
  commentId: '!:TController'
  definition: TController
  name: TController
  nameWithType: TController
  fullName: TController
- uid: TController
  name: TController
  nameWithType: TController
  fullName: TController
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction*
  commentId: Overload:Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction
  isExternal: true
  name: GetAction
  nameWithType: AbstractApplication.GetAction
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.GetAction
- uid: '{TAction}'
  commentId: '!:TAction'
  definition: TAction
  name: TAction
  nameWithType: TAction
  fullName: TAction
- uid: TAction
  commentId: '!:TAction'
  name: TAction
  nameWithType: TAction
  fullName: TAction
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction*
  commentId: Overload:Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction
  isExternal: true
  name: ExecuteAction
  nameWithType: AbstractApplication.ExecuteAction
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.ExecuteAction
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.GetService*
  commentId: Overload:Sdl.Desktop.IntegrationApi.AbstractApplication.GetService
  isExternal: true
  name: GetService
  nameWithType: AbstractApplication.GetService
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.GetService
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay*
  commentId: Overload:Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay
  isExternal: true
  name: RegisterRelay
  nameWithType: AbstractApplication.RegisterRelay
  fullName: Sdl.Desktop.IntegrationApi.AbstractApplication.RegisterRelay
- uid: Sdl.Desktop.Platform.IStudioWindow
  isExternal: true
  name: IStudioWindow
  nameWithType: IStudioWindow
  fullName: Sdl.Desktop.Platform.IStudioWindow
- uid: System.EventHandler{System.ComponentModel.CancelEventArgs}
  commentId: T:System.EventHandler{System.ComponentModel.CancelEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<CancelEventArgs>
  nameWithType: EventHandler<CancelEventArgs>
  fullName: System.EventHandler<System.ComponentModel.CancelEventArgs>
  nameWithType.vb: EventHandler(Of CancelEventArgs)
  fullName.vb: System.EventHandler(Of System.ComponentModel.CancelEventArgs)
  name.vb: EventHandler(Of CancelEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.CancelEventArgs
    name: CancelEventArgs
    nameWithType: CancelEventArgs
    fullName: System.ComponentModel.CancelEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.CancelEventArgs
    name: CancelEventArgs
    nameWithType: CancelEventArgs
    fullName: System.ComponentModel.CancelEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
