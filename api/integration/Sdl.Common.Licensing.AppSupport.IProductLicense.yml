### YamlMime:ManagedReference
items:
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense
  commentId: T:Sdl.Common.Licensing.AppSupport.IProductLicense
  id: IProductLicense
  parent: Sdl.Common.Licensing.AppSupport
  children:
  - Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn
  - Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut
  - Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate
  - Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense
  - Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue(System.Int32)
  - Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature(System.Int32)
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed(System.Int32)
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn
  - Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning
  - Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType
  - Sdl.Common.Licensing.AppSupport.IProductLicense.Status
  langs:
  - csharp
  - vb
  name: IProductLicense
  nameWithType: IProductLicense
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense
  type: Interface
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: public interface IProductLicense
    content.vb: Public Interface IProductLicense
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue(System.Int32)
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue(System.Int32)
  id: GetFeatureValue(System.Int32)
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: GetFeatureValue(Int32)
  nameWithType: IProductLicense.GetFeatureValue(Int32)
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue(System.Int32)
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: string GetFeatureValue(int featureId)
    parameters:
    - id: featureId
      type: System.Int32
    return:
      type: System.String
    content.vb: Function GetFeatureValue(featureId As Integer) As String
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature(System.Int32)
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature(System.Int32)
  id: HasFeature(System.Int32)
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: HasFeature(Int32)
  nameWithType: IProductLicense.HasFeature(Int32)
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature(System.Int32)
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool HasFeature(int featureId)
    parameters:
    - id: featureId
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Function HasFeature(featureId As Integer) As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed(System.Int32)
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed(System.Int32)
  id: IsFeatureLicensed(System.Int32)
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsFeatureLicensed(Int32)
  nameWithType: IProductLicense.IsFeatureLicensed(Int32)
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed(System.Int32)
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsFeatureLicensed(int featureId)
    parameters:
    - id: featureId
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Function IsFeatureLicensed(featureId As Integer) As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning
  id: IsServerRunning
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsServerRunning()
  nameWithType: IProductLicense.IsServerRunning()
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning()
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsServerRunning()
    return:
      type: System.Boolean
    content.vb: Function IsServerRunning As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense
  id: GetDaysRemainingOnLicense
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: GetDaysRemainingOnLicense()
  nameWithType: IProductLicense.GetDaysRemainingOnLicense()
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense()
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: int? GetDaysRemainingOnLicense()
    return:
      type: System.Nullable{System.Int32}
    content.vb: Function GetDaysRemainingOnLicense As Integer?
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut
  id: CheckOut
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: CheckOut()
  nameWithType: IProductLicense.CheckOut()
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut()
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: void CheckOut()
    content.vb: Sub CheckOut
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn
  commentId: M:Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn
  id: CheckIn
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: CheckIn()
  nameWithType: IProductLicense.CheckIn()
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn()
  type: Method
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: void CheckIn()
    content.vb: Sub CheckIn
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn*
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType
  id: LicenseType
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: LicenseType
  nameWithType: IProductLicense.LicenseType
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: int LicenseType { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property LicenseType As Integer
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate
  id: ExpirationDate
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: ExpirationDate
  nameWithType: IProductLicense.ExpirationDate
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: DateTime? ExpirationDate { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: ReadOnly Property ExpirationDate As Date?
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.Status
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.Status
  id: Status
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: IProductLicense.Status
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.Status
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: LicenseStatus Status { get; }
    parameters: []
    return:
      type: Sdl.Common.Licensing.AppSupport.LicenseStatus
    content.vb: ReadOnly Property Status As LicenseStatus
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.Status*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased
  id: IsLeased
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsLeased
  nameWithType: IProductLicense.IsLeased
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsLeased { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsLeased As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo
  id: IsDemo
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsDemo
  nameWithType: IProductLicense.IsDemo
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsDemo { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsDemo As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed
  id: IsBorrowed
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsBorrowed
  nameWithType: IProductLicense.IsBorrowed
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsBorrowed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsBorrowed As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn
  id: IsLoggedIn
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsLoggedIn
  nameWithType: IProductLicense.IsLoggedIn
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsLoggedIn { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsLoggedIn As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal
  commentId: P:Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal
  id: IsLocal
  parent: Sdl.Common.Licensing.AppSupport.IProductLicense
  langs:
  - csharp
  - vb
  name: IsLocal
  nameWithType: IProductLicense.IsLocal
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal
  type: Property
  source:
    path: Sdl.Common.Licensing.AppSupport
    isExternal: true
  assemblies:
  - Sdl.Common.Licensing.AppSupport
  namespace: Sdl.Common.Licensing.AppSupport
  syntax:
    content: bool IsLocal { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsLocal As Boolean
  overload: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Common.Licensing.AppSupport
  commentId: N:Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: Sdl.Common.Licensing.AppSupport
  nameWithType: Sdl.Common.Licensing.AppSupport
  fullName: Sdl.Common.Licensing.AppSupport
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue
  isExternal: true
  name: GetFeatureValue
  nameWithType: IProductLicense.GetFeatureValue
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.GetFeatureValue
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature
  isExternal: true
  name: HasFeature
  nameWithType: IProductLicense.HasFeature
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.HasFeature
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed
  isExternal: true
  name: IsFeatureLicensed
  nameWithType: IProductLicense.IsFeatureLicensed
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsFeatureLicensed
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning
  isExternal: true
  name: IsServerRunning
  nameWithType: IProductLicense.IsServerRunning
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsServerRunning
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense
  isExternal: true
  name: GetDaysRemainingOnLicense
  nameWithType: IProductLicense.GetDaysRemainingOnLicense
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.GetDaysRemainingOnLicense
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut
  isExternal: true
  name: CheckOut
  nameWithType: IProductLicense.CheckOut
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckOut
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn
  isExternal: true
  name: CheckIn
  nameWithType: IProductLicense.CheckIn
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.CheckIn
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType
  isExternal: true
  name: LicenseType
  nameWithType: IProductLicense.LicenseType
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.LicenseType
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate
  isExternal: true
  name: ExpirationDate
  nameWithType: IProductLicense.ExpirationDate
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.ExpirationDate
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.Status*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.Status
  isExternal: true
  name: Status
  nameWithType: IProductLicense.Status
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.Status
- uid: Sdl.Common.Licensing.AppSupport.LicenseStatus
  commentId: T:Sdl.Common.Licensing.AppSupport.LicenseStatus
  parent: Sdl.Common.Licensing.AppSupport
  isExternal: true
  name: LicenseStatus
  nameWithType: LicenseStatus
  fullName: Sdl.Common.Licensing.AppSupport.LicenseStatus
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased
  isExternal: true
  name: IsLeased
  nameWithType: IProductLicense.IsLeased
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLeased
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo
  isExternal: true
  name: IsDemo
  nameWithType: IProductLicense.IsDemo
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsDemo
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed
  isExternal: true
  name: IsBorrowed
  nameWithType: IProductLicense.IsBorrowed
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsBorrowed
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn
  isExternal: true
  name: IsLoggedIn
  nameWithType: IProductLicense.IsLoggedIn
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLoggedIn
- uid: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal*
  commentId: Overload:Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal
  isExternal: true
  name: IsLocal
  nameWithType: IProductLicense.IsLocal
  fullName: Sdl.Common.Licensing.AppSupport.IProductLicense.IsLocal
