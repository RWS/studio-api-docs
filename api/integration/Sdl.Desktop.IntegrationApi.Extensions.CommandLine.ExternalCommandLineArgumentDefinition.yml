### YamlMime:ManagedReference
items:
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  commentId: T:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  id: ExternalCommandLineArgumentDefinition
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  children:
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.#ctor(System.String,System.String)
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required
  - Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues
  langs:
  - csharp
  - vb
  name: ExternalCommandLineArgumentDefinition
  nameWithType: ExternalCommandLineArgumentDefinition
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  type: Class
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nDefines a command line argument.\n"
  syntax:
    content: public class ExternalCommandLineArgumentDefinition
    content.vb: Public Class ExternalCommandLineArgumentDefinition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.#ctor(System.String,System.String)
  commentId: M:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: ExternalCommandLineArgumentDefinition(String, String)
  nameWithType: ExternalCommandLineArgumentDefinition.ExternalCommandLineArgumentDefinition(String, String)
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.ExternalCommandLineArgumentDefinition(System.String, System.String)
  type: Constructor
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nCreates a new command line argument definition with the given argument name and description.\n"
  syntax:
    content: public ExternalCommandLineArgumentDefinition(string name, string description)
    parameters:
    - id: name
      type: System.String
    - id: description
      type: System.String
    content.vb: Public Sub New(name As String, description As String)
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name
  id: Name
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ExternalCommandLineArgumentDefinition.Name
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets the argument name. The user must use this name, preceded by a slash (&apos;/&apos;) in order to specify this argument on the command line,\nfollowed by a  number of values separated by a space."
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required
  id: Required
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: Required
  nameWithType: ExternalCommandLineArgumentDefinition.Required
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets if this argument is required = true or optional = false.\n<remarks>\nThis is currently only used to display square brackets around optional arguments in the command line help.\n</remarks>\n"
  syntax:
    content: public bool Required { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Required As Boolean
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues
  id: SampleValues
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: SampleValues
  nameWithType: ExternalCommandLineArgumentDefinition.SampleValues
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets an array of sample argument value strings to be used in the command line help.\n"
  remarks: "\nThe default value is a string[] containing the main argument name appended with &apos;1&apos;.  Also when displaying the command line help if more\nsample names are needed to display required or optional sample names then an incrementing number is appended to the last\nsample name in the the array.\n"
  syntax:
    content: public string[] SampleValues { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Property SampleValues As String()
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases
  id: Aliases
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: ExternalCommandLineArgumentDefinition.Aliases
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets a list of alias arguments that can be used instead of the main argument name in the <xref href=\"Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  syntax:
    content: public IList<string> Aliases { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public Property Aliases As IList(Of String)
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description
  id: Description
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ExternalCommandLineArgumentDefinition.Description
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets the description of the argument (shown in the usage text).\n"
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues
  id: MinValues
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: MinValues
  nameWithType: ExternalCommandLineArgumentDefinition.MinValues
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets the minimum number of values expected for this argument, if it is specified. Defaults to 0.\n"
  syntax:
    content: public int MinValues { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MinValues As Integer
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues
  id: MaxValues
  parent: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition
  langs:
  - csharp
  - vb
  name: MaxValues
  nameWithType: ExternalCommandLineArgumentDefinition.MaxValues
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  summary: "\nGets or sets the maximum number of values expected for this argument, if it is specified.\nSet to -1 in order to allow un unlimited number of values. Defaults to -1.\n"
  syntax:
    content: public int MaxValues { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MaxValues As Integer
  overload: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  commentId: N:Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  isExternal: true
  name: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  nameWithType: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.#ctor*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.#ctor
  isExternal: true
  name: ExternalCommandLineArgumentDefinition
  nameWithType: ExternalCommandLineArgumentDefinition.ExternalCommandLineArgumentDefinition
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.ExternalCommandLineArgumentDefinition
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name
  isExternal: true
  name: Name
  nameWithType: ExternalCommandLineArgumentDefinition.Name
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Name
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required
  isExternal: true
  name: Required
  nameWithType: ExternalCommandLineArgumentDefinition.Required
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Required
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues
  isExternal: true
  name: SampleValues
  nameWithType: ExternalCommandLineArgumentDefinition.SampleValues
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.SampleValues
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases
  isExternal: true
  name: Aliases
  nameWithType: ExternalCommandLineArgumentDefinition.Aliases
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Aliases
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description
  isExternal: true
  name: Description
  nameWithType: ExternalCommandLineArgumentDefinition.Description
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.Description
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues
  isExternal: true
  name: MinValues
  nameWithType: ExternalCommandLineArgumentDefinition.MinValues
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MinValues
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues
  isExternal: true
  name: MaxValues
  nameWithType: ExternalCommandLineArgumentDefinition.MaxValues
  fullName: Sdl.Desktop.IntegrationApi.Extensions.CommandLine.ExternalCommandLineArgumentDefinition.MaxValues
