### YamlMime:ManagedReference
items:
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker
  commentId: T:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker
  id: LicenseChecker
  parent: Sdl.TranslationStudioAutomation.Licensing
  children:
  - Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition
  - Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed(Sdl.TranslationStudioAutomation.Licensing.StudioFeature)
  - Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed
  langs:
  - csharp
  - vb
  name: LicenseChecker
  nameWithType: LicenseChecker
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker
  type: Class
  source:
    path: Sdl.TranslationStudioAutomation.Licensing
    isExternal: true
  assemblies:
  - Sdl.TranslationStudioAutomation.Licensing
  namespace: Sdl.TranslationStudioAutomation.Licensing
  summary: "\nProvides a simple API for external applications to query for the existence of a Trados Studio license.\n"
  syntax:
    content: public static class LicenseChecker
    content.vb: Public Module LicenseChecker
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed(Sdl.TranslationStudioAutomation.Licensing.StudioFeature)
  commentId: M:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed(Sdl.TranslationStudioAutomation.Licensing.StudioFeature)
  id: IsFeatureLicensed(Sdl.TranslationStudioAutomation.Licensing.StudioFeature)
  parent: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker
  langs:
  - csharp
  - vb
  name: IsFeatureLicensed(StudioFeature)
  nameWithType: LicenseChecker.IsFeatureLicensed(StudioFeature)
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed(Sdl.TranslationStudioAutomation.Licensing.StudioFeature)
  type: Method
  source:
    path: Sdl.TranslationStudioAutomation.Licensing
    isExternal: true
  assemblies:
  - Sdl.TranslationStudioAutomation.Licensing
  namespace: Sdl.TranslationStudioAutomation.Licensing
  summary: "\nReturns True if Studio is licensed and the license supports a particular feature\n"
  syntax:
    content: public static bool IsFeatureLicensed(StudioFeature studioFeature)
    parameters:
    - id: studioFeature
      type: Sdl.TranslationStudioAutomation.Licensing.StudioFeature
      description: The feature being tested for a valid license
    return:
      type: System.Boolean
      description: True if this feature is licensed
    content.vb: Public Shared Function IsFeatureLicensed(studioFeature As StudioFeature) As Boolean
  overload: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed
  commentId: P:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed
  id: IsLicensed
  parent: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker
  langs:
  - csharp
  - vb
  name: IsLicensed
  nameWithType: LicenseChecker.IsLicensed
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed
  type: Property
  source:
    path: Sdl.TranslationStudioAutomation.Licensing
    isExternal: true
  assemblies:
  - Sdl.TranslationStudioAutomation.Licensing
  namespace: Sdl.TranslationStudioAutomation.Licensing
  summary: "\nReturns true if the machine has a valid Trados Studio license.\nThis can be any edition of Studio, including an unexpired trial.\n"
  syntax:
    content: public static bool IsLicensed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsLicensed As Boolean
  overload: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition
  commentId: P:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition
  id: CurrentEdition
  parent: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker
  langs:
  - csharp
  - vb
  name: CurrentEdition
  nameWithType: LicenseChecker.CurrentEdition
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition
  type: Property
  source:
    path: Sdl.TranslationStudioAutomation.Licensing
    isExternal: true
  assemblies:
  - Sdl.TranslationStudioAutomation.Licensing
  namespace: Sdl.TranslationStudioAutomation.Licensing
  summary: "\nReturns the currently licensed Studio edition.\nThe product may have a time limited or trial license, but they are always based on a standard Studio edition.\nSo for example the standard 30 day trial that ships with Studio is a Professional edition license, \nand so <xref href=\"Sdl.TranslationStudioAutomation.Licensing.StudioEdition.Professional\" data-throw-if-not-resolved=\"false\"></xref> would be returned here.\n"
  syntax:
    content: public static StudioEdition CurrentEdition { get; }
    parameters: []
    return:
      type: Sdl.TranslationStudioAutomation.Licensing.StudioEdition
    content.vb: Public Shared ReadOnly Property CurrentEdition As StudioEdition
  overload: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Sdl.TranslationStudioAutomation.Licensing
  commentId: N:Sdl.TranslationStudioAutomation.Licensing
  isExternal: true
  name: Sdl.TranslationStudioAutomation.Licensing
  nameWithType: Sdl.TranslationStudioAutomation.Licensing
  fullName: Sdl.TranslationStudioAutomation.Licensing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed*
  commentId: Overload:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed
  isExternal: true
  name: IsFeatureLicensed
  nameWithType: LicenseChecker.IsFeatureLicensed
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsFeatureLicensed
- uid: Sdl.TranslationStudioAutomation.Licensing.StudioFeature
  commentId: T:Sdl.TranslationStudioAutomation.Licensing.StudioFeature
  parent: Sdl.TranslationStudioAutomation.Licensing
  isExternal: true
  name: StudioFeature
  nameWithType: StudioFeature
  fullName: Sdl.TranslationStudioAutomation.Licensing.StudioFeature
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed*
  commentId: Overload:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed
  isExternal: true
  name: IsLicensed
  nameWithType: LicenseChecker.IsLicensed
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.IsLicensed
- uid: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition*
  commentId: Overload:Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition
  isExternal: true
  name: CurrentEdition
  nameWithType: LicenseChecker.CurrentEdition
  fullName: Sdl.TranslationStudioAutomation.Licensing.LicenseChecker.CurrentEdition
- uid: Sdl.TranslationStudioAutomation.Licensing.StudioEdition
  commentId: T:Sdl.TranslationStudioAutomation.Licensing.StudioEdition
  parent: Sdl.TranslationStudioAutomation.Licensing
  isExternal: true
  name: StudioEdition
  nameWithType: StudioEdition
  fullName: Sdl.TranslationStudioAutomation.Licensing.StudioEdition
