### YamlMime:ManagedReference
items:
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware
  commentId: T:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware
  id: ILocationAware
  parent: Sdl.Desktop.IntegrationApi.Extensions
  children:
  - Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator
  - Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType
  - Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex
  langs:
  - csharp
  - vb
  name: ILocationAware
  nameWithType: ILocationAware
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware
  type: Interface
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions
  summary: "\nImplements the positioning the UI elements inside the layout.\n"
  syntax:
    content: public interface ILocationAware
    content.vb: Public Interface ILocationAware
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType
  id: LocationByType
  parent: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware
  langs:
  - csharp
  - vb
  name: LocationByType
  nameWithType: ILocationAware.LocationByType
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions
  summary: "\nThe type of the location where the UI element is positioned.\n"
  syntax:
    content: Type LocationByType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Property LocationByType As Type
  overload: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex
  id: ZIndex
  parent: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware
  langs:
  - csharp
  - vb
  name: ZIndex
  nameWithType: ILocationAware.ZIndex
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions
  summary: "\nDefines a 0 based index order for the UI elements where the highest value is the most important.\n"
  remarks: "\n<p>\nThe z-Index ordering is performed only for the intergrated elements and have a lower priority than RWS ordering. It acts as importance from left to right or top to bottom.\n</p>\n<p> The highest ZIndex value is in the left or top and the lowest value is in the right or bottom. </p>        \n"
  syntax:
    content: uint ZIndex { get; set; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Property ZIndex As UInteger
  overload: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator
  commentId: P:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator
  id: IsSeparator
  parent: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware
  langs:
  - csharp
  - vb
  name: IsSeparator
  nameWithType: ILocationAware.IsSeparator
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator
  type: Property
  source:
    path: Sdl.Desktop.IntegrationApi.Extensions
    isExternal: true
  assemblies:
  - Sdl.Desktop.IntegrationApi.Extensions
  namespace: Sdl.Desktop.IntegrationApi.Extensions
  summary: "\nIs separator determines if a separator should be added before the action\n"
  syntax:
    content: bool IsSeparator { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsSeparator As Boolean
  overload: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.Desktop.IntegrationApi.Extensions
  commentId: N:Sdl.Desktop.IntegrationApi.Extensions
  isExternal: true
  name: Sdl.Desktop.IntegrationApi.Extensions
  nameWithType: Sdl.Desktop.IntegrationApi.Extensions
  fullName: Sdl.Desktop.IntegrationApi.Extensions
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType
  isExternal: true
  name: LocationByType
  nameWithType: ILocationAware.LocationByType
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.LocationByType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex
  isExternal: true
  name: ZIndex
  nameWithType: ILocationAware.ZIndex
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.ZIndex
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator*
  commentId: Overload:Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator
  isExternal: true
  name: IsSeparator
  nameWithType: ILocationAware.IsSeparator
  fullName: Sdl.Desktop.IntegrationApi.Extensions.ILocationAware.IsSeparator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
