### YamlMime:ManagedReference
items:
- uid: Sdl.Versioning.IStudioVersionService
  commentId: T:Sdl.Versioning.IStudioVersionService
  id: IStudioVersionService
  parent: Sdl.Versioning
  children:
  - Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions
  - Sdl.Versioning.IStudioVersionService.GetStudioVersion
  - Sdl.Versioning.IStudioVersionService.StudioVersionSuported(System.Version,System.Version,System.Version)
  langs:
  - csharp
  - vb
  name: IStudioVersionService
  nameWithType: IStudioVersionService
  fullName: Sdl.Versioning.IStudioVersionService
  type: Interface
  source:
    path: Sdl.Versioning
    isExternal: true
  assemblies:
  - Sdl.Versioning
  namespace: Sdl.Versioning
  summary: "\nAbstraction used to obtain installation information for the current running Trados Studio instance\n"
  syntax:
    content: public interface IStudioVersionService
    content.vb: Public Interface IStudioVersionService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions
  commentId: M:Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions
  id: GetInstalledStudioVersions
  parent: Sdl.Versioning.IStudioVersionService
  langs:
  - csharp
  - vb
  name: GetInstalledStudioVersions()
  nameWithType: IStudioVersionService.GetInstalledStudioVersions()
  fullName: Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions()
  type: Method
  source:
    path: Sdl.Versioning
    isExternal: true
  assemblies:
  - Sdl.Versioning
  namespace: Sdl.Versioning
  summary: "\nReturns a list of all installed Trados Studio versions\n"
  syntax:
    content: List<StudioVersion> GetInstalledStudioVersions()
    return:
      type: System.Collections.Generic.List{Sdl.Versioning.StudioVersion}
    content.vb: Function GetInstalledStudioVersions As List(Of StudioVersion)
  overload: Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions*
- uid: Sdl.Versioning.IStudioVersionService.GetStudioVersion
  commentId: M:Sdl.Versioning.IStudioVersionService.GetStudioVersion
  id: GetStudioVersion
  parent: Sdl.Versioning.IStudioVersionService
  langs:
  - csharp
  - vb
  name: GetStudioVersion()
  nameWithType: IStudioVersionService.GetStudioVersion()
  fullName: Sdl.Versioning.IStudioVersionService.GetStudioVersion()
  type: Method
  source:
    path: Sdl.Versioning
    isExternal: true
  assemblies:
  - Sdl.Versioning
  namespace: Sdl.Versioning
  summary: "\nReturns information for the current Trados Studio installation\n"
  syntax:
    content: StudioVersion GetStudioVersion()
    return:
      type: Sdl.Versioning.StudioVersion
    content.vb: Function GetStudioVersion As StudioVersion
  overload: Sdl.Versioning.IStudioVersionService.GetStudioVersion*
- uid: Sdl.Versioning.IStudioVersionService.StudioVersionSuported(System.Version,System.Version,System.Version)
  commentId: M:Sdl.Versioning.IStudioVersionService.StudioVersionSuported(System.Version,System.Version,System.Version)
  id: StudioVersionSuported(System.Version,System.Version,System.Version)
  parent: Sdl.Versioning.IStudioVersionService
  langs:
  - csharp
  - vb
  name: StudioVersionSuported(Version, Version, Version)
  nameWithType: IStudioVersionService.StudioVersionSuported(Version, Version, Version)
  fullName: Sdl.Versioning.IStudioVersionService.StudioVersionSuported(System.Version, System.Version, System.Version)
  type: Method
  source:
    path: Sdl.Versioning
    isExternal: true
  assemblies:
  - Sdl.Versioning
  namespace: Sdl.Versioning
  summary: "\nReturns true if the given version is supported or not\n"
  syntax:
    content: bool StudioVersionSuported(Version minVersion, Version maxVersion, Version studioVersion)
    parameters:
    - id: minVersion
      type: System.Version
    - id: maxVersion
      type: System.Version
    - id: studioVersion
      type: System.Version
    return:
      type: System.Boolean
    content.vb: Function StudioVersionSuported(minVersion As Version, maxVersion As Version, studioVersion As Version) As Boolean
  overload: Sdl.Versioning.IStudioVersionService.StudioVersionSuported*
references:
- uid: Sdl.Versioning
  commentId: N:Sdl.Versioning
  isExternal: true
  name: Sdl.Versioning
  nameWithType: Sdl.Versioning
  fullName: Sdl.Versioning
- uid: Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions*
  commentId: Overload:Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions
  isExternal: true
  name: GetInstalledStudioVersions
  nameWithType: IStudioVersionService.GetInstalledStudioVersions
  fullName: Sdl.Versioning.IStudioVersionService.GetInstalledStudioVersions
- uid: System.Collections.Generic.List{Sdl.Versioning.StudioVersion}
  commentId: T:System.Collections.Generic.List{Sdl.Versioning.StudioVersion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<StudioVersion>
  nameWithType: List<StudioVersion>
  fullName: System.Collections.Generic.List<Sdl.Versioning.StudioVersion>
  nameWithType.vb: List(Of StudioVersion)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Versioning.StudioVersion)
  name.vb: List(Of StudioVersion)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Versioning.StudioVersion
    name: StudioVersion
    nameWithType: StudioVersion
    fullName: Sdl.Versioning.StudioVersion
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Versioning.StudioVersion
    name: StudioVersion
    nameWithType: StudioVersion
    fullName: Sdl.Versioning.StudioVersion
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Versioning.IStudioVersionService.GetStudioVersion*
  commentId: Overload:Sdl.Versioning.IStudioVersionService.GetStudioVersion
  isExternal: true
  name: GetStudioVersion
  nameWithType: IStudioVersionService.GetStudioVersion
  fullName: Sdl.Versioning.IStudioVersionService.GetStudioVersion
- uid: Sdl.Versioning.StudioVersion
  commentId: T:Sdl.Versioning.StudioVersion
  parent: Sdl.Versioning
  isExternal: true
  name: StudioVersion
  nameWithType: StudioVersion
  fullName: Sdl.Versioning.StudioVersion
- uid: Sdl.Versioning.IStudioVersionService.StudioVersionSuported*
  commentId: Overload:Sdl.Versioning.IStudioVersionService.StudioVersionSuported
  isExternal: true
  name: StudioVersionSuported
  nameWithType: IStudioVersionService.StudioVersionSuported
  fullName: Sdl.Versioning.IStudioVersionService.StudioVersionSuported
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
