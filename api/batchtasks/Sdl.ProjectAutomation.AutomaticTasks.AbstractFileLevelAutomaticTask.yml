### YamlMime:ManagedReference
items:
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  commentId: T:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  id: AbstractFileLevelAutomaticTask
  parent: Sdl.ProjectAutomation.AutomaticTasks
  children:
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.#ctor
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel(System.Boolean)
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress(Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs)
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile(Sdl.ProjectAutomation.Core.ProjectFile)
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Progress
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles
  - Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile(Sdl.ProjectAutomation.Core.ProjectFile,System.String)
  langs:
  - csharp
  - vb
  name: AbstractFileLevelAutomaticTask
  nameWithType: AbstractFileLevelAutomaticTask
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  type: Class
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nBase class for file level automatic task.\n"
  syntax:
    content: public abstract class AbstractFileLevelAutomaticTask
    content.vb: Public MustInherit Class AbstractFileLevelAutomaticTask
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask
  id: OnInitializeTask
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: OnInitializeTask()
  nameWithType: AbstractFileLevelAutomaticTask.OnInitializeTask()
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask()
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nCalled when the task is initialized. Overwrite this function where further initialization is required.\n"
  syntax:
    content: protected virtual void OnInitializeTask()
    content.vb: Protected Overridable Sub OnInitializeTask
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete
  id: TaskComplete
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: TaskComplete()
  nameWithType: AbstractFileLevelAutomaticTask.TaskComplete()
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete()
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nCalled when the task is completed. Overwrite this function when further operation is required.\n"
  syntax:
    content: public virtual void TaskComplete()
    content.vb: Public Overridable Sub TaskComplete
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel(System.Boolean)
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel(System.Boolean)
  id: Cancel(System.Boolean)
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: Cancel(Boolean)
  nameWithType: AbstractFileLevelAutomaticTask.Cancel(Boolean)
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel(System.Boolean)
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nCalled when the task execution is request to cancel.\n"
  syntax:
    content: public virtual void Cancel(bool doRollback)
    parameters:
    - id: doRollback
      type: System.Boolean
    content.vb: Public Overridable Sub Cancel(doRollback As Boolean)
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute
  id: Execute
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: Execute()
  nameWithType: AbstractFileLevelAutomaticTask.Execute()
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute()
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nExecutes the task. This function does the default implementation: ensure the files ready for the task, calls ProcessFile for each files and then populate \nthe files if the files are updated.\n"
  syntax:
    content: public virtual void Execute()
    content.vb: Public Overridable Sub Execute
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile(Sdl.ProjectAutomation.Core.ProjectFile,System.String)
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile(Sdl.ProjectAutomation.Core.ProjectFile,System.String)
  id: UploadFile(Sdl.ProjectAutomation.Core.ProjectFile,System.String)
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: UploadFile(ProjectFile, String)
  nameWithType: AbstractFileLevelAutomaticTask.UploadFile(ProjectFile, String)
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile(Sdl.ProjectAutomation.Core.ProjectFile, System.String)
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nUploads the file for the new version generated.\n"
  syntax:
    content: protected virtual void UploadFile(ProjectFile projectFile, string localFilePath)
    parameters:
    - id: projectFile
      type: Sdl.ProjectAutomation.Core.ProjectFile
      description: The file to update
    - id: localFilePath
      type: System.String
      description: The local path of the file.
    content.vb: Protected Overridable Sub UploadFile(projectFile As ProjectFile, localFilePath As String)
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile(Sdl.ProjectAutomation.Core.ProjectFile)
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile(Sdl.ProjectAutomation.Core.ProjectFile)
  id: ProcessFile(Sdl.ProjectAutomation.Core.ProjectFile)
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: ProcessFile(ProjectFile)
  nameWithType: AbstractFileLevelAutomaticTask.ProcessFile(ProjectFile)
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile(Sdl.ProjectAutomation.Core.ProjectFile)
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nProcesses the file. It is implemented in the derived class.\n"
  syntax:
    content: protected abstract void ProcessFile(ProjectFile projectFile)
    parameters:
    - id: projectFile
      type: Sdl.ProjectAutomation.Core.ProjectFile
      description: the file to process
    content.vb: Protected MustOverride Sub ProcessFile(projectFile As ProjectFile)
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress(Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs)
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress(Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs)
  id: OnFileProgress(Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs)
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: OnFileProgress(TaskProgressEventArgs)
  nameWithType: AbstractFileLevelAutomaticTask.OnFileProgress(TaskProgressEventArgs)
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress(Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs)
  type: Method
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nReports the progress of this task.\n"
  syntax:
    content: protected virtual void OnFileProgress(TaskProgressEventArgs e)
    parameters:
    - id: e
      type: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
      description: The task progress event args
    content.vb: Protected Overridable Sub OnFileProgress(e As TaskProgressEventArgs)
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.#ctor
  commentId: M:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.#ctor
  id: '#ctor'
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: AbstractFileLevelAutomaticTask()
  nameWithType: AbstractFileLevelAutomaticTask.AbstractFileLevelAutomaticTask()
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.AbstractFileLevelAutomaticTask()
  type: Constructor
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  syntax:
    content: protected AbstractFileLevelAutomaticTask()
    content.vb: Protected Sub New
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  commentId: P:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  id: ShouldAddNewFileVersion
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: ShouldAddNewFileVersion
  nameWithType: AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  type: Property
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nGets/Sets if this task should add a new version of the files. If the task updates the task files, \nit should be set to true so the updated files will be preserved.\n"
  syntax:
    content: public bool ShouldAddNewFileVersion { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ShouldAddNewFileVersion As Boolean
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested
  commentId: P:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested
  id: IsCancelRequested
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: IsCancelRequested
  nameWithType: AbstractFileLevelAutomaticTask.IsCancelRequested
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested
  type: Property
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nChecks if the task is requested to be cancelled.\n"
  syntax:
    content: public bool IsCancelRequested { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsCancelRequested As Boolean
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project
  commentId: P:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project
  id: Project
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: Project
  nameWithType: AbstractFileLevelAutomaticTask.Project
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project
  type: Property
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nGets the project for this task.\n"
  syntax:
    content: public IProject Project { get; }
    parameters: []
    return:
      type: Sdl.ProjectAutomation.Core.IProject
    content.vb: Public ReadOnly Property Project As IProject
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles
  commentId: P:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles
  id: TaskFiles
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: TaskFiles
  nameWithType: AbstractFileLevelAutomaticTask.TaskFiles
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles
  type: Property
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nGets the files for this task.\n"
  syntax:
    content: public ProjectFile[] TaskFiles { get; }
    parameters: []
    return:
      type: Sdl.ProjectAutomation.Core.ProjectFile[]
    content.vb: Public ReadOnly Property TaskFiles As ProjectFile()
  overload: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Progress
  commentId: E:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Progress
  id: Progress
  parent: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: AbstractFileLevelAutomaticTask.Progress
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Progress
  type: Event
  source:
    path: Sdl.ProjectAutomation.AutomaticTasks
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.AutomaticTasks
  namespace: Sdl.ProjectAutomation.AutomaticTasks
  summary: "\nThe task progress event.\n"
  syntax:
    content: public event EventHandler<TaskProgressEventArgs> Progress
    return:
      type: System.EventHandler{Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs}
    content.vb: Public Event Progress As EventHandler(Of TaskProgressEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.ProjectAutomation.AutomaticTasks
  commentId: N:Sdl.ProjectAutomation.AutomaticTasks
  isExternal: true
  name: Sdl.ProjectAutomation.AutomaticTasks
  nameWithType: Sdl.ProjectAutomation.AutomaticTasks
  fullName: Sdl.ProjectAutomation.AutomaticTasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask
  isExternal: true
  name: OnInitializeTask
  nameWithType: AbstractFileLevelAutomaticTask.OnInitializeTask
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnInitializeTask
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete
  isExternal: true
  name: TaskComplete
  nameWithType: AbstractFileLevelAutomaticTask.TaskComplete
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskComplete
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel
  isExternal: true
  name: Cancel
  nameWithType: AbstractFileLevelAutomaticTask.Cancel
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Cancel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute
  isExternal: true
  name: Execute
  nameWithType: AbstractFileLevelAutomaticTask.Execute
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Execute
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile
  isExternal: true
  name: UploadFile
  nameWithType: AbstractFileLevelAutomaticTask.UploadFile
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.UploadFile
- uid: Sdl.ProjectAutomation.Core.ProjectFile
  isExternal: true
  name: ProjectFile
  nameWithType: ProjectFile
  fullName: Sdl.ProjectAutomation.Core.ProjectFile
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile
  isExternal: true
  name: ProcessFile
  nameWithType: AbstractFileLevelAutomaticTask.ProcessFile
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ProcessFile
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress
  isExternal: true
  name: OnFileProgress
  nameWithType: AbstractFileLevelAutomaticTask.OnFileProgress
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.OnFileProgress
- uid: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
  commentId: T:Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
  parent: Sdl.ProjectAutomation.AutomaticTasks
  isExternal: true
  name: TaskProgressEventArgs
  nameWithType: TaskProgressEventArgs
  fullName: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.#ctor*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.#ctor
  isExternal: true
  name: AbstractFileLevelAutomaticTask
  nameWithType: AbstractFileLevelAutomaticTask.AbstractFileLevelAutomaticTask
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.AbstractFileLevelAutomaticTask
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  isExternal: true
  name: ShouldAddNewFileVersion
  nameWithType: AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.ShouldAddNewFileVersion
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested
  isExternal: true
  name: IsCancelRequested
  nameWithType: AbstractFileLevelAutomaticTask.IsCancelRequested
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.IsCancelRequested
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project
  isExternal: true
  name: Project
  nameWithType: AbstractFileLevelAutomaticTask.Project
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.Project
- uid: Sdl.ProjectAutomation.Core.IProject
  isExternal: true
  name: IProject
  nameWithType: IProject
  fullName: Sdl.ProjectAutomation.Core.IProject
- uid: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles*
  commentId: Overload:Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles
  isExternal: true
  name: TaskFiles
  nameWithType: AbstractFileLevelAutomaticTask.TaskFiles
  fullName: Sdl.ProjectAutomation.AutomaticTasks.AbstractFileLevelAutomaticTask.TaskFiles
- uid: Sdl.ProjectAutomation.Core.ProjectFile[]
  isExternal: true
  name: ProjectFile[]
  nameWithType: ProjectFile[]
  fullName: Sdl.ProjectAutomation.Core.ProjectFile[]
  nameWithType.vb: ProjectFile()
  fullName.vb: Sdl.ProjectAutomation.Core.ProjectFile()
  name.vb: ProjectFile()
  spec.csharp:
  - uid: Sdl.ProjectAutomation.Core.ProjectFile
    name: ProjectFile
    nameWithType: ProjectFile
    fullName: Sdl.ProjectAutomation.Core.ProjectFile
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.ProjectAutomation.Core.ProjectFile
    name: ProjectFile
    nameWithType: ProjectFile
    fullName: Sdl.ProjectAutomation.Core.ProjectFile
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.EventHandler{Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs}
  commentId: T:System.EventHandler{Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<TaskProgressEventArgs>
  nameWithType: EventHandler<TaskProgressEventArgs>
  fullName: System.EventHandler<Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs>
  nameWithType.vb: EventHandler(Of TaskProgressEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs)
  name.vb: EventHandler(Of TaskProgressEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
    name: TaskProgressEventArgs
    nameWithType: TaskProgressEventArgs
    fullName: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
    name: TaskProgressEventArgs
    nameWithType: TaskProgressEventArgs
    fullName: Sdl.ProjectAutomation.AutomaticTasks.TaskProgressEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
