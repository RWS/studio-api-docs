### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  id: IBilingualProcessorContainer
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  children:
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor(System.Int32,Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  langs:
  - csharp
  - vb
  name: IBilingualProcessorContainer
  nameWithType: IBilingualProcessorContainer
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCommon base interface for components that hold bilingual content processors\n"
  syntax:
    content: public interface IBilingualProcessorContainer
    content.vb: Public Interface IBilingualProcessorContainer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  id: AddBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  langs:
  - csharp
  - vb
  name: AddBilingualProcessor(IBilingualContentProcessor)
  nameWithType: IBilingualProcessorContainer.AddBilingualProcessor(IBilingualContentProcessor)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nAppends a bilingual content processor to the container.\n"
  remarks: "\n<p>\nTo add a bilingual content handler (rather than a processor), use \na <code>Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.BilingualContentHandlerAdapter</code>.\n</p>\n"
  syntax:
    content: void AddBilingualProcessor(IBilingualContentProcessor processor)
    parameters:
    - id: processor
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    content.vb: Sub AddBilingualProcessor(processor As IBilingualContentProcessor)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor(System.Int32,Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor(System.Int32,Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  id: InsertBilingualProcessor(System.Int32,Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  langs:
  - csharp
  - vb
  name: InsertBilingualProcessor(Int32, IBilingualContentProcessor)
  nameWithType: IBilingualProcessorContainer.InsertBilingualProcessor(Int32, IBilingualContentProcessor)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor(System.Int32, Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nInserts a bilingual processor at a specified position in the container.\nAny item that is currently occupying that position will - after this operation - appear after the inserted processor.\n"
  remarks: "\n<p>\nTo insert a bilingual content handler (rather than a processor), use \na <code>Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.BilingualContentHandlerAdapter</code>.\n</p>\n"
  syntax:
    content: void InsertBilingualProcessor(int index, IBilingualContentProcessor processor)
    parameters:
    - id: index
      type: System.Int32
      description: Must be a value in the range [0 - Count]
    - id: processor
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    content.vb: Sub InsertBilingualProcessor(index As Integer, processor As IBilingualContentProcessor)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  id: RemoveBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  langs:
  - csharp
  - vb
  name: RemoveBilingualProcessor(IBilingualContentProcessor)
  nameWithType: IBilingualProcessorContainer.RemoveBilingualProcessor(IBilingualContentProcessor)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n\n"
  syntax:
    content: bool RemoveBilingualProcessor(IBilingualContentProcessor processor)
    parameters:
    - id: processor
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    return:
      type: System.Boolean
      description: True if anything was removed from the collection, otherwise false
    content.vb: Function RemoveBilingualProcessor(processor As IBilingualContentProcessor) As Boolean
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors
  id: GetBilingualProcessors
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  langs:
  - csharp
  - vb
  name: GetBilingualProcessors()
  nameWithType: IBilingualProcessorContainer.GetBilingualProcessors()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nThe content processors, in the order in which they will be invoked\n"
  syntax:
    content: IEnumerable<IBilingualContentProcessor> GetBilingualProcessors()
    return:
      type: System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor}
    content.vb: Function GetBilingualProcessors As IEnumerable(Of IBilingualContentProcessor)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction
  id: FileRestriction
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  langs:
  - csharp
  - vb
  name: FileRestriction
  nameWithType: IBilingualProcessorContainer.FileRestriction
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nThis delegate will be invoked for each file to be processed.\nIf the delegate returns <code>true</code>, the file\nwill be processed as normal, but if it returns <code>false</code>,\nthe file will be skipped.\n"
  remarks: "\n<p>\nIf the value is <code>null</code>, no file restrictions apply, and all files\nwill be processed.\n</p>\n<p>\nThis allows content processing to be restricted to individual files in\na multi-file document.\n</p>\n<p>\n</p>\n"
  syntax:
    content: Predicate<IPersistentFileConversionProperties> FileRestriction { get; set; }
    parameters: []
    return:
      type: System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties}
    content.vb: Property FileRestriction As Predicate(Of IPersistentFileConversionProperties)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction
  id: ParagraphUnitRestriction
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer
  langs:
  - csharp
  - vb
  name: ParagraphUnitRestriction
  nameWithType: IBilingualProcessorContainer.ParagraphUnitRestriction
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nIf set, this delegate will be invoked for each paragraph unit to be processed.\nIf the delegate returns <code>true</code>, the paragraph unit will be processed as normal. If it returns <code>false</code>,\nthe paragraph unit will be skipped.\n"
  remarks: "\nThis mechanism is used when verifying an individual part of the document.\n"
  syntax:
    content: Predicate<IParagraphUnitProperties> ParagraphUnitRestriction { get; set; }
    parameters: []
    return:
      type: System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties}
    content.vb: Property ParagraphUnitRestriction As Predicate(Of IParagraphUnitProperties)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi
  commentId: N:Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.IntegrationApi
  nameWithType: Sdl.FileTypeSupport.Framework.IntegrationApi
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor
  isExternal: true
  name: AddBilingualProcessor
  nameWithType: IBilingualProcessorContainer.AddBilingualProcessor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.AddBilingualProcessor
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IBilingualContentProcessor
  nameWithType: IBilingualContentProcessor
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
- uid: Sdl.FileTypeSupport.Framework.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor
  isExternal: true
  name: InsertBilingualProcessor
  nameWithType: IBilingualProcessorContainer.InsertBilingualProcessor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.InsertBilingualProcessor
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor
  isExternal: true
  name: RemoveBilingualProcessor
  nameWithType: IBilingualProcessorContainer.RemoveBilingualProcessor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.RemoveBilingualProcessor
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors
  isExternal: true
  name: GetBilingualProcessors
  nameWithType: IBilingualProcessorContainer.GetBilingualProcessors
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.GetBilingualProcessors
- uid: System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IBilingualContentProcessor>
  nameWithType: IEnumerable<IBilingualContentProcessor>
  fullName: System.Collections.Generic.IEnumerable<Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor>
  nameWithType.vb: IEnumerable(Of IBilingualContentProcessor)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor)
  name.vb: IEnumerable(Of IBilingualContentProcessor)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    name: IBilingualContentProcessor
    nameWithType: IBilingualContentProcessor
    fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    name: IBilingualContentProcessor
    nameWithType: IBilingualContentProcessor
    fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualContentProcessor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction
  isExternal: true
  name: FileRestriction
  nameWithType: IBilingualProcessorContainer.FileRestriction
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.FileRestriction
- uid: System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties}
  commentId: T:System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IPersistentFileConversionProperties>
  nameWithType: Predicate<IPersistentFileConversionProperties>
  fullName: System.Predicate<Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties>
  nameWithType.vb: Predicate(Of IPersistentFileConversionProperties)
  fullName.vb: System.Predicate(Of Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  name.vb: Predicate(Of IPersistentFileConversionProperties)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    name: IPersistentFileConversionProperties
    nameWithType: IPersistentFileConversionProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    name: IPersistentFileConversionProperties
    nameWithType: IPersistentFileConversionProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction
  isExternal: true
  name: ParagraphUnitRestriction
  nameWithType: IBilingualProcessorContainer.ParagraphUnitRestriction
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualProcessorContainer.ParagraphUnitRestriction
- uid: System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties}
  commentId: T:System.Predicate{Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties}
  parent: System
  definition: System.Predicate`1
  name: Predicate<IParagraphUnitProperties>
  nameWithType: Predicate<IParagraphUnitProperties>
  fullName: System.Predicate<Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties>
  nameWithType.vb: Predicate(Of IParagraphUnitProperties)
  fullName.vb: System.Predicate(Of Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties)
  name.vb: Predicate(Of IParagraphUnitProperties)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties
    name: IParagraphUnitProperties
    nameWithType: IParagraphUnitProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties
    name: IParagraphUnitProperties
    nameWithType: IParagraphUnitProperties
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.IParagraphUnitProperties
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
