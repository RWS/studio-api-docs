### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  id: IFileTypeManager
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  children:
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[])
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor(System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String[],System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,System.String)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String[],System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle
  langs:
  - csharp
  - vb
  name: IFileTypeManager
  nameWithType: IFileTypeManager
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>\nThis is the main access point for file conversion operations.\n</p>\n<p>\nThe file type manager holds a prioritized list of file type definitions.\nThe order of file type definitions is important, as it determines\nwhich file types take precedence over others in case multiple file type\ndefinitions could be used to process the same file.\nThe most significant file type definition appears first in the list.\n</p>\n<p>\nIn implementations, the file type manager is often pre-configured with a \nset of file type definitions in the host application. However, the list can also \nbe explicitly manipulated by calling <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32%2cSdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)\" data-throw-if-not-resolved=\"false\"></xref>.\nFile type definitions can be instantiated from existing files or resources \nusing the <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nCall one of the overloaded <code>GetConverter...()</code> methods to use the file type definitions to\nautomatically detect file types and initialize a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter\" data-throw-if-not-resolved=\"false\"></xref> to process the content.\n</p>\n"
  remarks: "\n<p>\nActual file type manager instances are often provided by the application that hosts the\nframework, in which case they are often pre-configured from some configuration (e.g.\nthrough the spring framework).\n</p>\n"
  syntax:
    content: public interface IFileTypeManager
    content.vb: Public Interface IFileTypeManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)
  id: FindFileTypeDefinition(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: FindFileTypeDefinition(FileTypeDefinitionId)
  nameWithType: IFileTypeManager.FindFileTypeDefinition(FileTypeDefinitionId)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition(Sdl.FileTypeSupport.Framework.FileTypeDefinitionId)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nLocates a file type definition from the collection using ids.\n"
  syntax:
    content: IFileTypeDefinition FindFileTypeDefinition(FileTypeDefinitionId id)
    parameters:
    - id: id
      type: Sdl.FileTypeSupport.Framework.FileTypeDefinitionId
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
      description: The corresponding file type definition, or <code>null</code> if none
    content.vb: Function FindFileTypeDefinition(id As FileTypeDefinitionId) As IFileTypeDefinition
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetAllMatchingFileTypeDefinitions(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetAllMatchingFileTypeDefinitions(String, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetAllMatchingFileTypeDefinitions(String, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>Returns the file type definitions that can operate on the specified file.</p>\n<p>Each file type definition is evaluated in order to determine if it can process the file,\nwhich may involve invoking the corresponding file sniffer.</p>\n<p>Only file type definitions that are enabled and not hidden are evaluated.</p>\n"
  remarks: "\n<p>\nIf more than one file type definition is returned, the order corresponds to the order \nin which the definitions appear in the manager.\n</p>\n<p>\nIf all file types are enabled, the first file type definition \nreturned is the one that is used if calling one of the <code>GetConverter</code> overloads.\n</p>\n<p>\nAny messages generated during file sniffing are reported to the optional <code data-dev-comment-type=\"paramref\" class=\"paramref\">messageHandler</code>.\n</p>\n"
  syntax:
    content: IEnumerable<Pair<IFileTypeDefinition, SniffInfo>> GetAllMatchingFileTypeDefinitions(string nativeFilePath, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePath
      type: System.String
      description: The path to the file which is &apos;sniffed&apos; in order to determine applicable file type definitions.
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: "Optional handler for messages reported by any file sniffers invoked in the process. \nYou may pass <code>null</code> for this parameter."
    return:
      type: System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}}
      description: >-
        File type definitions that can operate on the file specified, and the information

        from their file sniffers
    content.vb: Function GetAllMatchingFileTypeDefinitions(nativeFilePath As String, messageHandler As EventHandler(Of MessageEventArgs)) As IEnumerable(Of Pair(Of IFileTypeDefinition, SniffInfo))
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions*
  nameWithType.vb: IFileTypeManager.GetAllMatchingFileTypeDefinitions(String, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetAllMatchingFileTypeDefinitions(String, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetAllMatchingFileTypeDefinitions(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetAllMatchingFileTypeDefinitions(String, Language, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetAllMatchingFileTypeDefinitions(String, Language, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String, Sdl.Core.Globalization.Language, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>Returns the file type definitions that can operate on the specified file.</p>\n<p>Each file type definition is evaluated in order to determine if it can process the file,\nwhich may involve invoking the corresponding file sniffer.</p>\n<p>Only file type definitions that are enabled and not hidden are evaluated.</p>\n"
  remarks: "\n<p>\nIf more than one file type definition is returned, the order corresponds to the order \nin which the definitions appear in the manager.\n</p>\n<p>\nIf all file types are enabled, the first file type definition \nreturned is the one that is used if calling one of the <code>GetConverter</code> overloads.\n</p>\n<p>\nAny messages generated during file sniffing are reported to the optional <code data-dev-comment-type=\"paramref\" class=\"paramref\">messageHandler</code>.\n</p>\n"
  syntax:
    content: IEnumerable<Pair<IFileTypeDefinition, SniffInfo>> GetAllMatchingFileTypeDefinitions(string nativeFilePath, Language suggestedSourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePath
      type: System.String
      description: The path to the file which is &apos;sniffed&apos; in order to determine applicable file type definitions.
    - id: suggestedSourceLanguage
      type: Sdl.Core.Globalization.Language
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: "Optional handler for messages reported by any file sniffers invoked in the process. \n<param name=\"suggestedSourceLanguage\" />\n<param name=\"suggestedCodepage\" />\nYou may pass <code>null</code> for this parameter."
    return:
      type: System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}}
      description: >-
        File type definitions that can operate on the file specified, and the information

        from their file sniffers
    content.vb: Function GetAllMatchingFileTypeDefinitions(nativeFilePath As String, suggestedSourceLanguage As Language, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IEnumerable(Of Pair(Of IFileTypeDefinition, SniffInfo))
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions*
  nameWithType.vb: IFileTypeManager.GetAllMatchingFileTypeDefinitions(String, Language, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions(System.String, Sdl.Core.Globalization.Language, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetAllMatchingFileTypeDefinitions(String, Language, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetBestMatchingFileTypeDefinition(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetBestMatchingFileTypeDefinition(String, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetBestMatchingFileTypeDefinition(String, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>Returns the first file type definition that can operate on the specified file.</p>\n"
  syntax:
    content: Pair<IFileTypeDefinition, SniffInfo> GetBestMatchingFileTypeDefinition(string nativeFilePath, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePath
      type: System.String
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
    return:
      type: Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}
    content.vb: Function GetBestMatchingFileTypeDefinition(nativeFilePath As String, messageHandler As EventHandler(Of MessageEventArgs)) As Pair(Of IFileTypeDefinition, SniffInfo)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition*
  nameWithType.vb: IFileTypeManager.GetBestMatchingFileTypeDefinition(String, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetBestMatchingFileTypeDefinition(String, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetBestMatchingFileTypeDefinition(System.String,Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetBestMatchingFileTypeDefinition(String, Language, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetBestMatchingFileTypeDefinition(String, Language, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String, Sdl.Core.Globalization.Language, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>Returns the first file type definition that can operate on the specified file.</p>\n"
  syntax:
    content: Pair<IFileTypeDefinition, SniffInfo> GetBestMatchingFileTypeDefinition(string nativeFilePath, Language suggestedSourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePath
      type: System.String
    - id: suggestedSourceLanguage
      type: Sdl.Core.Globalization.Language
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
    return:
      type: Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}
    content.vb: Function GetBestMatchingFileTypeDefinition(nativeFilePath As String, suggestedSourceLanguage As Language, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As Pair(Of IFileTypeDefinition, SniffInfo)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition*
  nameWithType.vb: IFileTypeManager.GetBestMatchingFileTypeDefinition(String, Language, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition(System.String, Sdl.Core.Globalization.Language, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetBestMatchingFileTypeDefinition(String, Language, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  id: AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: AddFileTypeDefinition(IFileTypeDefinition)
  nameWithType: IFileTypeManager.AddFileTypeDefinition(IFileTypeDefinition)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nAppends a file type definition to the collection.\n"
  remarks: "\nThe file type definition is added last in the list of known file type definitions.\n"
  syntax:
    content: void AddFileTypeDefinition(IFileTypeDefinition fileTypeDefinition)
    parameters:
    - id: fileTypeDefinition
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    content.vb: Sub AddFileTypeDefinition(fileTypeDefinition As IFileTypeDefinition)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  id: CreateFileTypeDefinition(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: CreateFileTypeDefinition(String, FileTypeProfile)
  nameWithType: IFileTypeManager.CreateFileTypeDefinition(String, FileTypeProfile)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String, Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates a file type definition based on the Id and a profile override.\nThe FilterManager must discover the actual component builder associated with this definition and create a new definition based on it.\nIf a profileOverride has been supplied, then this should override the FileTypeInformation for that definition.\n"
  syntax:
    content: IFileTypeDefinition CreateFileTypeDefinition(string fileTypeDefinitionId, FileTypeProfile profileOverride)
    parameters:
    - id: fileTypeDefinitionId
      type: System.String
      description: ID of component builder which should be used to create this filter
    - id: profileOverride
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile
      description: profile used to override the FileTypeInformation
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
      description: The created IFileTypeDefinitionInstance
    content.vb: Function CreateFileTypeDefinition(fileTypeDefinitionId As String, profileOverride As FileTypeProfile) As IFileTypeDefinition
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  id: CreateFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder,Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: CreateFileTypeDefinition(IFileTypeComponentBuilder, FileTypeProfile)
  nameWithType: IFileTypeManager.CreateFileTypeDefinition(IFileTypeComponentBuilder, FileTypeProfile)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder, Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates a file type definition based on component builder and overrides the FileTypeInformation with the supplied profile override.\n"
  syntax:
    content: IFileTypeDefinition CreateFileTypeDefinition(IFileTypeComponentBuilder componentBuilder, FileTypeProfile profileOverride)
    parameters:
    - id: componentBuilder
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
      description: The component builder used to initialize the FileTypeDefinition
    - id: profileOverride
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile
      description: profile used to override the FileTypeInformation
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
      description: The created IFileTypeDefinitionInstance
    content.vb: Function CreateFileTypeDefinition(componentBuilder As IFileTypeComponentBuilder, profileOverride As FileTypeProfile) As IFileTypeDefinition
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String)
  id: CreateFileTypeDefinition(System.String)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: CreateFileTypeDefinition(String)
  nameWithType: IFileTypeManager.CreateFileTypeDefinition(String)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition(System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates a file type definition based on the filter definition ID of component builder which should be used\nto create this filter.\n"
  syntax:
    content: IFileTypeDefinition CreateFileTypeDefinition(string fileTypeDefinitionId)
    parameters:
    - id: fileTypeDefinitionId
      type: System.String
      description: ID of component builder which should be used to create this filter
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
      description: The created IFileTypeDefinitionInstance
    content.vb: Function CreateFileTypeDefinition(fileTypeDefinitionId As String) As IFileTypeDefinition
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  id: InsertFileTypeDefinition(System.Int32,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: InsertFileTypeDefinition(Int32, IFileTypeDefinition)
  nameWithType: IFileTypeManager.InsertFileTypeDefinition(Int32, IFileTypeDefinition)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32, Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nInserts a file type definition into the collection at a specific priority position. \n"
  syntax:
    content: void InsertFileTypeDefinition(int index, IFileTypeDefinition filterDefinition)
    parameters:
    - id: index
      type: System.Int32
      description: >-
        0-based index indicating the file type definition&apos;s priority in relation to the

        other currently known file type definitions.
    - id: filterDefinition
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    content.vb: Sub InsertFileTypeDefinition(index As Integer, filterDefinition As IFileTypeDefinition)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  id: RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: RemoveFileTypeDefinition(IFileTypeDefinition)
  nameWithType: IFileTypeManager.RemoveFileTypeDefinition(IFileTypeDefinition)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nRemoves a file type definition from the collection.\nIf no such file type definition exists in the collection, nothing happens.\n"
  syntax:
    content: void RemoveFileTypeDefinition(IFileTypeDefinition filterDefinition)
    parameters:
    - id: filterDefinition
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    content.vb: Sub RemoveFileTypeDefinition(filterDefinition As IFileTypeDefinition)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions
  id: ClearFileTypeDefinitions
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: ClearFileTypeDefinitions()
  nameWithType: IFileTypeManager.ClearFileTypeDefinitions()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nRemoves all file type definitions from the collection.\n"
  syntax:
    content: void ClearFileTypeDefinitions()
    content.vb: Sub ClearFileTypeDefinitions
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToBilingual(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToBilingual(String[], IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToBilingual(String[], IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String[], Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator, Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter using the filters that best match a set of native files.\nThe file converter can then be used to process all of the files as one document. The specified\nbilingual writer will be used for output.\n\nThe file type definitions are tested in sequence, and the first file type definition that\nmatches a file is used for each file. The following steps are used to determine if \na file type definition matches a file:\n<ol><li>The regular expression is evaluated against the name of the file to be converted. If it does not match,\nthe file type definition is not used.</li><li>If a file sniffer is defined for the file type definition, it gets applied to the file. If the file sniffer\ndoes not indicate that the file is supported, the file type definition is not used.</li></ol>\nIf no matching file type definition is found, a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  remarks: "\nTo convert bilingual files to native, you would typically rather use <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String%2cSdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider%2cSystem.EventHandler%7bSdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: IMultiFileConverter GetConverterToBilingual(string[] nativeFilePaths, IBilingualDocumentGenerator writer, BilingualDocumentOutputPropertiesProvider outputSettingsProvider, CultureInfo sourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePaths
      type: System.String[]
      description: The native files to be converted
    - id: writer
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
      description: Bilingual writer to use as output with the converter
    - id: outputSettingsProvider
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider
      description: >-
        Implementation of the output settings provider for bilingual

        document files. Will be passed to the multi-file converter and used for writing bilingual document files.

        If the bilingual document generator does not have a bilingual document file writer, you can pass <code>null</code>

        as parameter.
    - id: sourceLanguage
      type: System.Globalization.CultureInfo
      description: "Expected source language of the files. \n<p>The same source (and target) language must be used for all the files processed with a single converter instance.</p>\n<p>If the language can be determined automatically\nfrom the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.\nIf this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the\nlanguage. Parser components may report an error or a warning if they cannot reliably identify the language.</p>\n"
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
      description: "A rough guess on what encoding the files use. This is normally set to the default code page\nfor the language, but can also be <code>null</code>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An \nundefined codepage object can be used if no encoding can be guessed. It is then up to the file sniffer and/or parser \nto best determine the encoding, and report an error if they fail or a warning if the result is not definite.\n"
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: "An (optional) message handler implementation that will receive any messages reported\nfrom file sniffers invoked in the process. If a converter is returned, this message handler will also \nbe connected to the <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message\" data-throw-if-not-resolved=\"false\"></xref> event on the converter. You may specify <code>null</code> for this parameter."
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: >-
        A file converter object initialized to read the files, based on information from the best matching file type definitions.

        To use the file converter, add your own bilingual processors to the converter and call

        <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse" data-throw-if-not-resolved="false"></xref> or <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext" data-throw-if-not-resolved="false"></xref> to process the native files.
    content.vb: Function GetConverterToBilingual(nativeFilePaths As String(), writer As IBilingualDocumentGenerator, outputSettingsProvider As BilingualDocumentOutputPropertiesProvider, sourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    description: thrown if there are files for which no file type definition in the file type manager can be used.
  nameWithType.vb: IFileTypeManager.GetConverterToBilingual(String(), IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String(), Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator, Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToBilingual(String(), IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String[],System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String[],System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToDefaultBilingual(System.String[],System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToDefaultBilingual(String[], String, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToDefaultBilingual(String[], String, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String[], System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter in order to create a bilingual file in the default format.\n<p>\nThe converter will automatically use the filters that best match the native files to be converted.\nThese converters are selected as described below.\n</p>\n<p>\nThe file type definitions are each tested in sequence, and the first file type definition that\nmatches a file is used for each file. The following steps are used to determine if \na file type definition matches a file:\n</p>\n<ol><li>The regular expression is evaluated against the name of the file to be converted. If it does not match,\nthe file type definition is not used.</li><li>If a file sniffer is defined for the file type definition, it is applied to the file. If the file sniffer\ndoes not indicate that the file is supported, the file type definition is not used.</li></ol>\nIf no matching file type definition is found, a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  remarks: "\nTo convert bilingual files to native you would typically use <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String%2cSdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider%2cSystem.EventHandler%7bSdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example:
  - "\nThis example shows how this method could be used convert a bunch of native files into a single SDL XLIFF document.\n<pre><code>void ConvertFilesToXliff(IFileTypeManager manager, string[] nativeFiles, CultureInfo language, Codepage suggestedCodepage, string xliffFilePath)\n{\n	IMultiFileConverter converter = manager.GetConverterToDefaultBilingual(nativeFiles[], xliffFilePath, language, suggestedCodepage, null, settingsBundle);\n	converter.Parse();\n}</code></pre>\n"
  syntax:
    content: IMultiFileConverter GetConverterToDefaultBilingual(string[] nativeFilePaths, string bilingualOutputFilePath, CultureInfo sourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePaths
      type: System.String[]
      description: The native files to be converted.
    - id: bilingualOutputFilePath
      type: System.String
      description: Full path to the bilingual file to be created.
    - id: sourceLanguage
      type: System.Globalization.CultureInfo
      description: "Expected source language of the files. \n<p>The same source (and target) language must be used for all the files processed with a single converter instance.</p>\n<p>If the language can be determined automatically\nfrom the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.\nIf this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the\nlanguage. Parser components may report an error or a warning if they cannot reliably identify the language.</p>\n"
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
      description: "A rough guess of what encoding the files use. This is normally set to the default codepage\nfor the language, but can also be <code>null</code>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An \nundefined codepage object can be used if no encoding can be guessed. It is then  up to the file sniffer and/or parser \nto best determine the encoding and report an error if they fail, or a warning if the result is not definite.\n"
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: >-
        An (optional) message handler implementation that will receive any messages reported

        from file sniffers invoked in the process. If a converter is returned, this message handler will also have

        been connected to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message" data-throw-if-not-resolved="false"></xref> event on the converter. You may specify <code>null</code> for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: >-
        A file converter object initialized to read the files, based on information from the best matching file type definitions.

        To use the file converter, add your own bilingual processors to the converter and call

        <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse" data-throw-if-not-resolved="false"></xref> or <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext" data-throw-if-not-resolved="false"></xref> to process the native files.
    content.vb: Function GetConverterToDefaultBilingual(nativeFilePaths As String(), bilingualOutputFilePath As String, sourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    description: thrown if there are files for which no file type definition in the file type manager can be used.
  nameWithType.vb: IFileTypeManager.GetConverterToDefaultBilingual(String(), String, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String(), System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToDefaultBilingual(String(), String, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToDefaultBilingual(System.String,System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToDefaultBilingual(String, String, String, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToDefaultBilingual(String, String, String, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String, System.String, System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter in order to create a bilingual file in the default format.\nThe converter will only use the file type specified by the fileTypeDefinitionId and bypasses the sniffer\n"
  syntax:
    content: IMultiFileConverter GetConverterToDefaultBilingual(string fileTypeDefinitionId, string filePath, string bilingualOutputFilePath, CultureInfo sourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: fileTypeDefinitionId
      type: System.String
    - id: filePath
      type: System.String
    - id: bilingualOutputFilePath
      type: System.String
    - id: sourceLanguage
      type: System.Globalization.CultureInfo
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
    content.vb: Function GetConverterToDefaultBilingual(fileTypeDefinitionId As String, filePath As String, bilingualOutputFilePath As String, sourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual*
  nameWithType.vb: IFileTypeManager.GetConverterToDefaultBilingual(String, String, String, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String, System.String, System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToDefaultBilingual(String, String, String, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToNative(System.String[],Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToNative(String[], OutputPropertiesProvider, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToNative(String[], OutputPropertiesProvider, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String[], Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter for reading native files, doing processing on them and\ncreating native files as output in one single pass.\n<p>\nThe file type definitions are tested in sequence, and the first file type definition that\nmatches a file is used for each file. The following steps are used to determine if \na file type definition matches a file:\n</p>\n<ol><li>The regular expression is evaluated against the name of the file to be converted. If it does not match,\nthe file type definition is not used.</li><li>If a file sniffer is defined for the file type definition, it is applied to the file. If the file sniffer\ndoes not indicate that the file is supported, the file type definition is not used.</li></ol>\nIf no matching file type definition is found, a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  syntax:
    content: IMultiFileConverter GetConverterToNative(string[] nativeFilePaths, OutputPropertiesProvider outputSettingsProvider, CultureInfo sourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePaths
      type: System.String[]
      description: The native files to be converted
    - id: outputSettingsProvider
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider
      description: "Implementation of the output settings provider\nthat will be passed to the multi-file converter and used for writing files as native.\n\n<p>The returned converter will be \ninitialized to use this file type manager to create native file generators, and the specified\noutput settings provider will be used to determine the output properties for the native files\nwhen they are created.</p>\n"
    - id: sourceLanguage
      type: System.Globalization.CultureInfo
      description: >
        Expected source language of the files.

        <p>The same source (and target) language must be used for all the files processed with a single converter instance.</p>

        <p>If the language can be determined automatically

        from the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.

        If this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the

        language. Parser components may report an error or a warning if they cannot reliably identify the language.</p>
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
      description: "A rough guess of what encoding the files use. This is normally set to the default codepage\nfor the language, but can also be <code>null</code>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An \nundefined codepage object can be used if no encoding can be guessed. It is then up to the file sniffer and/or parser \nto best determine the encoding, and report an error if they fail or a warning if the result is not definite.\n"
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: >-
        An (optional) message handler implementation that will receive any messages reported

        from file sniffers invoked in the process. If a converter is returned, this message handler will also be

        connected to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message" data-throw-if-not-resolved="false"></xref> event on the converter. You may specify <code>null</code> for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: "A file converter object initialized to read the files and write corresponding output files based on the \noutput settings provider.\nTo use the file converter, add your own bilingual processors to the converter and call\n<xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext\" data-throw-if-not-resolved=\"false\"></xref> to process the native files."
    content.vb: Function GetConverterToNative(nativeFilePaths As String(), outputSettingsProvider As OutputPropertiesProvider, sourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    description: thrown if there are files for which no file type definition in the file type manager can be used.
  nameWithType.vb: IFileTypeManager.GetConverterToNative(String(), OutputPropertiesProvider, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String(), Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToNative(String(), OutputPropertiesProvider, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String[],System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String[],System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverter(System.String[],System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverter(String[], CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverter(String[], CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String[], System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter for reading native files, without passing the output to anything.\n"
  syntax:
    content: IMultiFileConverter GetConverter(string[] nativeFilePaths, CultureInfo sourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: nativeFilePaths
      type: System.String[]
      description: The native files to be converted
    - id: sourceLanguage
      type: System.Globalization.CultureInfo
      description: "Expected source language of the files. \n<p>The same source (and target) language must be used for all the files processed with a single converter instance.</p>\n<p>If the language can be determined automatically\nfrom the content of the file (e.g. when reading a bilingual format such as TTX), this parameter may be ignored by the parser.\nIf this parameter is left undefined, it is up to the file sniffer and/or parser to try to determine the\nlanguage. Parser components may report an error or a warning if they cannot reliably identify the language.</p>\n"
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
      description: "A rough guess of what encoding the files use. This is normally set to the default codepage\nfor the language, but can also be <code>null</code>. This serves only as a hint. A file sniffer can be used to determine the actual encoding for each file. An \nundefined codepage object can be used if no encoding can be guessed. It is then up to the file sniffer and/or parser \nto best determine the encoding and report an error if they fail or a warning if the result is not definite.\n"
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: >-
        An (optional) message handler implementation that will receive any messages reported

        from file sniffers invoked in the process. If a converter is returned, this message handler will also be

        connected to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message" data-throw-if-not-resolved="false"></xref> event on the converter. You may specify <code>null</code> for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: A file converter object initialized to read the files, based on information from the best matching file type definitions.
    content.vb: Function GetConverter(nativeFilePaths As String(), sourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    description: Thrown if there are files for which no file type definition in the file type manager can be used.
  nameWithType.vb: IFileTypeManager.GetConverter(String(), CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String(), System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverter(String(), CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverter(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverter(String, String, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverter(String, String, CultureInfo, Codepage, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String, System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter in order to create a bilingual file.\nThe native fileType used for parsing is defined by the fileTypeDefinitionId - no sniffing is done\n"
  syntax:
    content: IMultiFileConverter GetConverter(string fileTypeDefinitionId, string filePath, CultureInfo sourceLanguage, Codepage suggestedCodepage, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: fileTypeDefinitionId
      type: System.String
    - id: filePath
      type: System.String
    - id: sourceLanguage
      type: System.Globalization.CultureInfo
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
    content.vb: Function GetConverter(fileTypeDefinitionId As String, filePath As String, sourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter*
  nameWithType.vb: IFileTypeManager.GetConverter(String, String, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String, System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverter(String, String, CultureInfo, Codepage, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToBilingual(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToBilingual(String, IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToBilingual(String, IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String, Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator, Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter for a single file, typically of the default bilingual file type.\nThe specified bilingual document generator will be used for output.\n\nThe file type definitions are tested in order, and the first file type definition that\nmatches the input file is used. The following steps are used to determine if \na file type definition matches the file:\n<ol><li>The regular expression is evaluated against the name of the file to be converted. If it does not match,\nthe file type definition is not used.</li><li>If a file sniffer is defined for the file type definition, it gets applied to the file. If the file sniffer\ndoes not indicate that the file is supported, the file type definition is not used.</li></ol>\nIf no matching file type definition is found, a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  syntax:
    content: IMultiFileConverter GetConverterToBilingual(string bilingualInputFilePath, IBilingualDocumentGenerator writer, BilingualDocumentOutputPropertiesProvider outputSettingsProvider, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: bilingualInputFilePath
      type: System.String
      description: >-
        The file to be converted. The language and code page of this file is expected

        to be automatically detected by the file sniffer, no external hints should be necessary.
    - id: writer
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
      description: Bilingual writer to use as output with the converter
    - id: outputSettingsProvider
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider
      description: >-
        Implementation of the output settings provider for bilingual

        document files. Will be passed to the multi-file converter and used for writing bilingual document files.

        If the bilingual document generator does not have a bilingual document file writer, you can pass <code>null</code>

        for this parameter.
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: >-
        An (optional) message handler implementation that will receive any messages reported

        from file sniffers invoked in the process. If a converter is returned, this message handler will also be

        connected to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message" data-throw-if-not-resolved="false"></xref> event on the converter. You may specify <code>null</code> for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: >-
        A file converter object initialized to read the file, based on information from the best matching file type definition.

        To use the file converter, add your own bilingual processors to the converter, and call

        <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse" data-throw-if-not-resolved="false"></xref> or <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext" data-throw-if-not-resolved="false"></xref> to process the file.
    content.vb: Function GetConverterToBilingual(bilingualInputFilePath As String, writer As IBilingualDocumentGenerator, outputSettingsProvider As BilingualDocumentOutputPropertiesProvider, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    description: Thrown if no file type definition in the file type manager can be used.
  nameWithType.vb: IFileTypeManager.GetConverterToBilingual(String, IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(System.String, Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator, Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToBilingual(String, IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String,System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToDefaultBilingual(System.String,System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToDefaultBilingual(String, String, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToDefaultBilingual(String, String, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String, System.String, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter in order to read a single (typically bilingual) input file and\nwrite a bilingual output file in the default format.\n<p>\nThe converter will automatically use the file type that best matches the file to be converted.\n</p>\n<p>\nThe file type definitions are each tested in sequence, and the first file type definition that\nmatches the input file is used. The following steps are used to determine if \na file type definition matches:\n</p>\n<ol><li>The regular expression is evaluated against the name of the file to be converted. If it does not match,\nthe file type definition is not used.</li><li>If a file sniffer is defined for the file type definition, it is applied to the file. If the file sniffer\ndoes not indicate that the file is supported, the file type definition is not used.</li></ol>\nIf no matching file type definition is found, a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n"
  remarks: "\nTo convert bilingual files to native you would typically use <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String%2cSdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider%2cSystem.EventHandler%7bSdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: IMultiFileConverter GetConverterToDefaultBilingual(string bilingualInputFilePath, string bilingualOutputFilePath, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: bilingualInputFilePath
      type: System.String
      description: The native files to be converted
    - id: bilingualOutputFilePath
      type: System.String
      description: Full path to the bilingual file to be created
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: >-
        (optional) A message handler implementation that will receive any messages reported

        from file sniffers invoked in the process. If a converter is returned, this message handler will also be

        connected to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message" data-throw-if-not-resolved="false"></xref> event on the converter. You may specify <code>null</code> for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: >-
        A file converter object initialized to read the file, based on information from the best matching file type definition

        that will create an output file in the default bilingual format with the specified name.

        To use the file converter, add your own bilingual processors to the converter and call

        <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse" data-throw-if-not-resolved="false"></xref> or <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext" data-throw-if-not-resolved="false"></xref>.
    content.vb: Function GetConverterToDefaultBilingual(bilingualInputFilePath As String, bilingualOutputFilePath As String, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
    description: Thrown if no file type definition in the file type manager can be used.
  nameWithType.vb: IFileTypeManager.GetConverterToDefaultBilingual(String, String, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(System.String, System.String, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToDefaultBilingual(String, String, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverterToNative(System.String,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToNative(String, OutputPropertiesProvider, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverterToNative(String, OutputPropertiesProvider, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String, Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates a converter for parsing a single file and writing native output files.\n<p>This is intended for bilingual file types, in which the languages and codepage can be deducted\nautomatically from the file content.</p>\n\n<p>This version is typically used for parsing SDL XLIFF documents (where support for these\nhave been installed as another bilingual file type). However, it could also be used\nfor processing individual native files in which source language (and codepage) can be deducted from \nthe file content.</p>\n"
  remarks: "\nIf language (and/or codepage) cannot be successfully determined by the file type components, an exception\nshould be thrown."
  example:
  - "\nThe following code example shows how to convert an SDL XLIFF file into native target language files.\n<pre><code>void SaveAsTarget(IFileTypeManager manager, string xliffFilePath, string outputFolder)\n{\n   FolderPathProvider pathProvider = new FolderPathProvider(outputFolder);\n   IMultiFileConverter converter = manager.GetConverterToNative(xliffFilePath, pathProvider.Provider, settingsBundle);\n   converter.AddBilingualProcessor(new SourceToTargetCopier(ExistingContentHandling.Preserve));\n   converter.Parse();\n}</code></pre>\nNote that a SourceToTargetCopier object is used to ensure that ParagraphUnits without target content are output as source\n(they would otherwise be emitted as nothing, which could lead to unexpected results).\n"
  syntax:
    content: IMultiFileConverter GetConverterToNative(string bilingualInputFilePath, OutputPropertiesProvider outputSettingsProvider, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: bilingualInputFilePath
      type: System.String
      description: Full path to a bilingual (typically SDL XLIFF) file
    - id: outputSettingsProvider
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider
      description: "(Optional) implementation of the output settings provider\nthat will be passed to the multi-file converter and used for writing files as native.\n\n<p>If this parameter is provided (i.e. not null), the returned converter will be \ninitialized to use this file type manager to create native file generators, and the specified\noutput settings provider will be used to determine output properties for the native files\nwhen they are created.</p>\n"
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: "An (optional) message handler implementation that will receive any messages reported\nfrom file sniffers invoked in the process. If a converter is returned, this message handler will also \nbe connected to the <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message\" data-throw-if-not-resolved=\"false\"></xref> event on the converter. You may specify <code>null</code> for this parameter."
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: A file converter that may be used to convert bilingual files to native output files
    content.vb: Function GetConverterToNative(bilingualInputFilePath As String, outputSettingsProvider As OutputPropertiesProvider, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative*
  nameWithType.vb: IFileTypeManager.GetConverterToNative(String, OutputPropertiesProvider, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(System.String, Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverterToNative(String, OutputPropertiesProvider, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  id: GetConverter(System.String,System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs})
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverter(String, EventHandler<MessageEventArgs>)
  nameWithType: IFileTypeManager.GetConverter(String, EventHandler<MessageEventArgs>)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String, System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter that can be used to read a single bilingual file, without\noutputting content to anything in particular.\n"
  syntax:
    content: IMultiFileConverter GetConverter(string bilingualInputFilePath, EventHandler<MessageEventArgs> messageHandler)
    parameters:
    - id: bilingualInputFilePath
      type: System.String
      description: Name of the bilingual file to read
    - id: messageHandler
      type: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
      description: >-
        An (optional) message handler implementation that will receive any messages reported

        from file sniffers invoked in the process. If a converter is returned, this message handler will also have

        been connected to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Message" data-throw-if-not-resolved="false"></xref> event on the converter. You may specify <code>null</code> for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
    content.vb: Function GetConverter(bilingualInputFilePath As String, messageHandler As EventHandler(Of MessageEventArgs)) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter*
  nameWithType.vb: IFileTypeManager.GetConverter(String, EventHandler(Of MessageEventArgs))
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String, System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs))
  name.vb: GetConverter(String, EventHandler(Of MessageEventArgs))
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider)
  id: GetConverterToBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator,Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToBilingual(IBilingualParser, IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider)
  nameWithType: IFileTypeManager.GetConverterToBilingual(IBilingualParser, IBilingualDocumentGenerator, BilingualDocumentOutputPropertiesProvider)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser, Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator, Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter for an existing bilingual parser and writer.\n"
  syntax:
    content: IMultiFileConverter GetConverterToBilingual(IBilingualParser bilingualParser, IBilingualDocumentGenerator writer, BilingualDocumentOutputPropertiesProvider outputSettingsProvider)
    parameters:
    - id: bilingualParser
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
      description: Bilingual parser to be used for input with the converter
    - id: writer
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
      description: Bilingual writer to use as output with the converter
    - id: outputSettingsProvider
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider
      description: >-
        Implementation of the output settings provider for bilingual

        document files. Will be passed to the multi-file converter and used for writing bilingual document files.

        If the bilingual document generator does not have a bilingual document file writer, you can pass <code>null</code>

        for this parameter.
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: >-
        A file converter object initialized to read content using the specified parser and output

        to the specified writer.

        To use the file converter, add your own bilingual processors to the converter, and call

        <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse" data-throw-if-not-resolved="false"></xref> or <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext" data-throw-if-not-resolved="false"></xref> to process the content.
    content.vb: Function GetConverterToBilingual(bilingualParser As IBilingualParser, writer As IBilingualDocumentGenerator, outputSettingsProvider As BilingualDocumentOutputPropertiesProvider) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,System.String)
  id: GetConverterToDefaultBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,System.String)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToDefaultBilingual(IBilingualParser, String)
  nameWithType: IFileTypeManager.GetConverterToDefaultBilingual(IBilingualParser, String)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter to write a bilingual output file in the default format, reading\ninput from a specified bilingual parser.\n"
  syntax:
    content: IMultiFileConverter GetConverterToDefaultBilingual(IBilingualParser bilingualParser, string bilingualOutputFilePath)
    parameters:
    - id: bilingualParser
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
      description: The parser to be used for input
    - id: bilingualOutputFilePath
      type: System.String
      description: Full path to the bilingual file to be created
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: >-
        A file converter object initialized to read content using the bilingual parser and write

        an output file in the default bilingual format with the specified name.

        To use the file converter, add your own bilingual processors to the converter and call

        <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.Parse" data-throw-if-not-resolved="false"></xref> or <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter.ParseNext" data-throw-if-not-resolved="false"></xref>.
    content.vb: Function GetConverterToDefaultBilingual(bilingualParser As IBilingualParser, bilingualOutputFilePath As String) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider)
  id: GetConverterToNative(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverterToNative(IBilingualParser, OutputPropertiesProvider)
  nameWithType: IFileTypeManager.GetConverterToNative(IBilingualParser, OutputPropertiesProvider)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser, Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates a converter for writing native output files for content read by a specified bilingual parser.\n"
  syntax:
    content: IMultiFileConverter GetConverterToNative(IBilingualParser bilingualParser, OutputPropertiesProvider outputSettingsProvider)
    parameters:
    - id: bilingualParser
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
      description: The parser that will be used for input
    - id: outputSettingsProvider
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider
      description: "(Optional) implementation of the output settings provider\nthat will be passed to the multi-file converter and used for writing files as native\n\n<p>If this parameter is provided (i.e. not <code>null</code>), the returned converter will be \ninitialized to use this file type manager to create native file generators, and the specified\noutput settings provider will be used to determine output properties for the native files\nwhen they are created.</p>\n"
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
      description: A file converter that may be used to convert bilingual content to native output files
    content.vb: Function GetConverterToNative(bilingualParser As IBilingualParser, outputSettingsProvider As OutputPropertiesProvider) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser)
  id: GetConverter(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: GetConverter(IBilingualParser)
  nameWithType: IFileTypeManager.GetConverter(IBilingualParser)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCreates and initializes a file converter to use a specific bilingual parser, and not output to anything in particular.\n"
  syntax:
    content: IMultiFileConverter GetConverter(IBilingualParser bilingualParser)
    parameters:
    - id: bilingualParser
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
    content.vb: Function GetConverter(bilingualParser As IBilingualParser) As IMultiFileConverter
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor(System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor(System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  id: BuildExtractor(System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildExtractor(String, CultureInfo, Codepage, INativeTextLocationMessageReporter)
  nameWithType: IFileTypeManager.BuildExtractor(String, CultureInfo, Codepage, INativeTextLocationMessageReporter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor(System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper function used by the file type manager implementation and other components that need to \ncreate components that are normally used through the file converters objects.\n<p>Determines the best matching file type for the specified file according to the rules\ndescribed in the documentation of <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter(System.String%5b%5d%2cSystem.Globalization.CultureInfo%2cSdl.Core.Globalization.Codepage%2cSystem.EventHandler%7bSdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs%7d)\" data-throw-if-not-resolved=\"false\"></xref> and returns an initialized \nfile extractor that can be used to process the file.</p>\n"
  syntax:
    content: IFileExtractor BuildExtractor(string filePath, CultureInfo cultureInfo, Codepage suggestedCodepage, INativeTextLocationMessageReporter messageReporter)
    parameters:
    - id: filePath
      type: System.String
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: Source CultureInfo of the file
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
      description: Suggested codepage of the file
    - id: messageReporter
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter
      description: (Optional) message reporter implementation that will be passed to file sniffers
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
    content.vb: Function BuildExtractor(filePath As String, cultureInfo As CultureInfo, suggestedCodepage As Codepage, messageReporter As INativeTextLocationMessageReporter) As IFileExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException
    description: Thrown if none of the file type definitions can be used to process the file
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  id: BuildExtractorNoSniffing(System.String,System.String,System.Globalization.CultureInfo,Sdl.Core.Globalization.Codepage,Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildExtractorNoSniffing(String, String, CultureInfo, Codepage, INativeTextLocationMessageReporter)
  nameWithType: IFileTypeManager.BuildExtractorNoSniffing(String, String, CultureInfo, Codepage, INativeTextLocationMessageReporter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing(System.String, System.String, System.Globalization.CultureInfo, Sdl.Core.Globalization.Codepage, Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nBuilds a FileExtractor without sniffing - the FileType to use is defined by the fileTypeDefinitionId\n"
  syntax:
    content: IFileExtractor BuildExtractorNoSniffing(string fileTypeDefinitionId, string filePath, CultureInfo suggestedSourceLanguage, Codepage suggestedCodepage, INativeTextLocationMessageReporter messageReporter)
    parameters:
    - id: fileTypeDefinitionId
      type: System.String
    - id: filePath
      type: System.String
    - id: suggestedSourceLanguage
      type: System.Globalization.CultureInfo
    - id: suggestedCodepage
      type: Sdl.Core.Globalization.Codepage
    - id: messageReporter
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
    content.vb: Function BuildExtractorNoSniffing(fileTypeDefinitionId As String, filePath As String, suggestedSourceLanguage As CultureInfo, suggestedCodepage As Codepage, messageReporter As INativeTextLocationMessageReporter) As IFileExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  id: BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildNativeGenerator(IPersistentFileConversionProperties)
  nameWithType: IFileTypeManager.BuildNativeGenerator(IPersistentFileConversionProperties)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper function used by the file type manager implementation and other components that need to\ncreate a file generator component from a specific file type definition.\n<p>\nCreates and initializes a file generator that can be used to write native output files.\n</p>\n"
  remarks: "\nThis method may be used as a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.NativeGeneratorProvider\" data-throw-if-not-resolved=\"false\"></xref> delegate in the <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter\" data-throw-if-not-resolved=\"false\"></xref>.\n<example>\nThe following example shows how to use this method with a multi file converter:\n<pre><code>void SetNativeGeneratorProvider(IFileTypeManager manager, IMultiFileConverter converter)\n{\n   converter.NativeGeneratorProvider = new NativeGeneratorProvider(manager.BuildFileGenerator);\n}</code></pre>\n</example>\n"
  syntax:
    content: IFileGenerator BuildNativeGenerator(IPersistentFileConversionProperties fileConversionProperties)
    parameters:
    - id: fileConversionProperties
      type: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
      description: "Properties with information on the file being generated,\nincluding the id of the file type definition used to convert the original native file. \nThis can either be the persistent file properties that were created when reading\nthe original native file, or they can be retrieved from the bilingual parser."
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
      description: "\nA file generator object that can be used to create a single native file.\n"
    content.vb: Function BuildNativeGenerator(fileConversionProperties As IPersistentFileConversionProperties) As IFileGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator*
  exceptions:
  - type: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException
    commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException
    description: "thrown if the specified file type definition ID is not \none of the file type definitions in the file type manager"
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  id: BuildNativeGeneratorWithVerifiers(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildNativeGeneratorWithVerifiers(IPersistentFileConversionProperties)
  nameWithType: IFileTypeManager.BuildNativeGeneratorWithVerifiers(IPersistentFileConversionProperties)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nThis is an alternative implementation of the <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties)\" data-throw-if-not-resolved=\"false\"></xref> method, which creates a generator with\nobjects that will perform native verification of the generated file.\n"
  syntax:
    content: IFileGenerator BuildNativeGeneratorWithVerifiers(IPersistentFileConversionProperties fileConversionProperties)
    parameters:
    - id: fileConversionProperties
      type: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
    content.vb: Function BuildNativeGeneratorWithVerifiers(fileConversionProperties As IPersistentFileConversionProperties) As IFileGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  id: BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildBilingualGenerator(IFileTypeDefinition)
  nameWithType: IFileTypeManager.BuildBilingualGenerator(IFileTypeDefinition)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper function used by the file type manager implementation and other components that need to\ninstantiate a bilingual generator for a specific file type.\n"
  remarks: "\n"
  syntax:
    content: IBilingualDocumentGenerator BuildBilingualGenerator(IFileTypeDefinition filterDefinitionToUse)
    parameters:
    - id: filterDefinitionToUse
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
    content.vb: Function BuildBilingualGenerator(filterDefinitionToUse As IFileTypeDefinition) As IBilingualDocumentGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator
  id: BuildDefaultBilingualGenerator
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildDefaultBilingualGenerator()
  nameWithType: IFileTypeManager.BuildDefaultBilingualGenerator()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper function that constructs an instance of a generator for the default bilingual file format,\nif set.\n"
  syntax:
    content: IBilingualDocumentGenerator BuildDefaultBilingualGenerator()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
      description: <code>null</code> if no default bilingual file type has been set
    content.vb: Function BuildDefaultBilingualGenerator As IBilingualDocumentGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator*
  seealso:
  - linkId: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
    commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter)
  id: BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildBilingualGenerator(IBilingualDocumentWriter)
  nameWithType: IFileTypeManager.BuildBilingualGenerator(IBilingualDocumentWriter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper function to create a bilingual generator for a bilingual document writer, so that\nit can be used with relevant overloads to <code>GetConverter</code>.\n"
  syntax:
    content: IBilingualDocumentGenerator BuildBilingualGenerator(IBilingualDocumentWriter bilingualWriter)
    parameters:
    - id: bilingualWriter
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter
      description: >-
        a bilingual document writer, capable of serializing the

        bilingual content model
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
      description: >-
        a bilingual document generator instance where the bilingual writer is assigned

        to the <xref href="Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator.Writer" data-throw-if-not-resolved="false"></xref> property.
    content.vb: Function BuildBilingualGenerator(bilingualWriter As IBilingualDocumentWriter) As IBilingualDocumentGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  id: BuildFileExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildFileExtractor(IBilingualParser, IFileTypeComponentBuilder)
  nameWithType: IFileTypeManager.BuildFileExtractor(IBilingualParser, IFileTypeComponentBuilder)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser, Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a file extractor so that it can be used by filter component builders.\n"
  syntax:
    content: IFileExtractor BuildFileExtractor(IBilingualParser fileReader, IFileTypeComponentBuilder componentBuilder)
    parameters:
    - id: fileReader
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
    - id: componentBuilder
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
    content.vb: Function BuildFileExtractor(fileReader As IBilingualParser, componentBuilder As IFileTypeComponentBuilder) As IFileExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  id: BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildSubContentExtractor(IBilingualParser, IFileTypeComponentBuilder)
  nameWithType: IFileTypeManager.BuildSubContentExtractor(IBilingualParser, IFileTypeComponentBuilder)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser, Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a sub-content extractor so that it can be used by filter component builders.\n"
  syntax:
    content: ISubContentExtractor BuildSubContentExtractor(IBilingualParser fileReader, IFileTypeComponentBuilder componentBuilder)
    parameters:
    - id: fileReader
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
    - id: componentBuilder
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor
    content.vb: Function BuildSubContentExtractor(fileReader As IBilingualParser, componentBuilder As IFileTypeComponentBuilder) As ISubContentExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  id: BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildSubContentExtractor(INativeSubContentExtractor, IFileTypeComponentBuilder)
  nameWithType: IFileTypeManager.BuildSubContentExtractor(INativeSubContentExtractor, IFileTypeComponentBuilder)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor, Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a sub-content file extractor so that it can be used by filter component builders.\n"
  syntax:
    content: ISubContentExtractor BuildSubContentExtractor(INativeSubContentExtractor subContentReader, IFileTypeComponentBuilder componentBuilder)
    parameters:
    - id: subContentReader
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor
    - id: componentBuilder
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor
    content.vb: Function BuildSubContentExtractor(subContentReader As INativeSubContentExtractor, componentBuilder As IFileTypeComponentBuilder) As ISubContentExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  id: BuildFileExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor,Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildFileExtractor(INativeExtractor, IFileTypeComponentBuilder)
  nameWithType: IFileTypeManager.BuildFileExtractor(INativeExtractor, IFileTypeComponentBuilder)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor, Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a file extractor so that it can be used by filter component builders.\n"
  syntax:
    content: IFileExtractor BuildFileExtractor(INativeExtractor fileReader, IFileTypeComponentBuilder componentBuilder)
    parameters:
    - id: fileReader
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor
    - id: componentBuilder
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
    content.vb: Function BuildFileExtractor(fileReader As INativeExtractor, componentBuilder As IFileTypeComponentBuilder) As IFileExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  id: BuildNativeExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildNativeExtractor(INativeFileParser)
  nameWithType: IFileTypeManager.BuildNativeExtractor(INativeFileParser)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a native extractor so that it can be used by filter component builders.\n"
  syntax:
    content: INativeExtractor BuildNativeExtractor(INativeFileParser nativeFileParser)
    parameters:
    - id: nativeFileParser
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor
    content.vb: Function BuildNativeExtractor(nativeFileParser As INativeFileParser) As INativeExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  id: BuildNativeSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildNativeSubContentExtractor(INativeFileParser)
  nameWithType: IFileTypeManager.BuildNativeSubContentExtractor(INativeFileParser)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a native sub-content extractor so that it can be used by filter component builders.\n"
  syntax:
    content: INativeSubContentExtractor BuildNativeSubContentExtractor(INativeFileParser nativeFileParser)
    parameters:
    - id: nativeFileParser
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor
    content.vb: Function BuildNativeSubContentExtractor(nativeFileParser As INativeFileParser) As INativeSubContentExtractor
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation
  id: BuildFileTypeInformation
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildFileTypeInformation()
  nameWithType: IFileTypeManager.BuildFileTypeInformation()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create file type information so that it can be used by filter component builders.\n"
  syntax:
    content: IFileTypeInformation BuildFileTypeInformation()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation
    content.vb: Function BuildFileTypeInformation As IFileTypeInformation
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  id: BuildFileGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildFileGenerator(IBilingualWriter)
  nameWithType: IFileTypeManager.BuildFileGenerator(IBilingualWriter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a file generator so that it can be used by filter component builders.\n"
  syntax:
    content: IFileGenerator BuildFileGenerator(IBilingualWriter bilingualWriter)
    parameters:
    - id: bilingualWriter
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
    content.vb: Function BuildFileGenerator(bilingualWriter As IBilingualWriter) As IFileGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  id: BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildNativeGenerator(INativeFileWriter)
  nameWithType: IFileTypeManager.BuildNativeGenerator(INativeFileWriter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a native generator so that it can be used by filter component builders.\n"
  syntax:
    content: INativeGenerator BuildNativeGenerator(INativeFileWriter nativeFileWriter)
    parameters:
    - id: nativeFileWriter
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator
    content.vb: Function BuildNativeGenerator(nativeFileWriter As INativeFileWriter) As INativeGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator)
  id: BuildFileGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildFileGenerator(INativeGenerator)
  nameWithType: IFileTypeManager.BuildFileGenerator(INativeGenerator)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a file generator so that it can be used by filter component builders.\n"
  syntax:
    content: IFileGenerator BuildFileGenerator(INativeGenerator nativeGenerator)
    parameters:
    - id: nativeGenerator
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
    content.vb: Function BuildFileGenerator(nativeGenerator As INativeGenerator) As IFileGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  id: BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildSubContentGenerator(IBilingualWriter)
  nameWithType: IFileTypeManager.BuildSubContentGenerator(IBilingualWriter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a sub content generator so that it can be used by filter component builders. \n"
  syntax:
    content: ISubContentGenerator BuildSubContentGenerator(IBilingualWriter bilingualWriter)
    parameters:
    - id: bilingualWriter
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator
    content.vb: Function BuildSubContentGenerator(bilingualWriter As IBilingualWriter) As ISubContentGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  id: BuildNativeSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildNativeSubContentGenerator(INativeFileWriter)
  nameWithType: IFileTypeManager.BuildNativeSubContentGenerator(INativeFileWriter)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a native sub content generator so that it can be used by filter component builders.\n"
  syntax:
    content: INativeSubContentGenerator BuildNativeSubContentGenerator(INativeFileWriter nativeFileWriter)
    parameters:
    - id: nativeFileWriter
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter
    return:
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator
    content.vb: Function BuildNativeSubContentGenerator(nativeFileWriter As INativeFileWriter) As INativeSubContentGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator)
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator)
  id: BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator)
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildSubContentGenerator(INativeSubContentGenerator)
  nameWithType: IFileTypeManager.BuildSubContentGenerator(INativeSubContentGenerator)
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator(Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a sub content generator so that it can be used by filter component builders.\n"
  syntax:
    content: ISubContentGenerator BuildSubContentGenerator(INativeSubContentGenerator nativeSubContentGenerator)
    parameters:
    - id: nativeSubContentGenerator
      type: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator
    content.vb: Function BuildSubContentGenerator(nativeSubContentGenerator As INativeSubContentGenerator) As ISubContentGenerator
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory
  id: BuildPreviewSetsFactory
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildPreviewSetsFactory()
  nameWithType: IFileTypeManager.BuildPreviewSetsFactory()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a preview sets factory so that it can be used by filter compnent builders.\n"
  syntax:
    content: IPreviewSetsFactory BuildPreviewSetsFactory()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory
    content.vb: Function BuildPreviewSetsFactory As IPreviewSetsFactory
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory
  id: BuildQuickTagsFactory
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildQuickTagsFactory()
  nameWithType: IFileTypeManager.BuildQuickTagsFactory()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a QuickTags factory so that it can be used by filter component builders.\n"
  syntax:
    content: IQuickTagsFactory BuildQuickTagsFactory()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory
    content.vb: Function BuildQuickTagsFactory As IQuickTagsFactory
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection
  id: BuildVerifierCollection
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildVerifierCollection()
  nameWithType: IFileTypeManager.BuildVerifierCollection()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create a verifier collection so that it can be used by filter component builders.\n"
  syntax:
    content: IVerifierCollection BuildVerifierCollection()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection
    content.vb: Function BuildVerifierCollection As IVerifierCollection
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo
  id: BuildGeneratorInfo
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildGeneratorInfo()
  nameWithType: IFileTypeManager.BuildGeneratorInfo()
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create generator information so that it can be used by filter component builders.\n"
  syntax:
    content: IGeneratorInfo BuildGeneratorInfo()
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    content.vb: Function BuildGeneratorInfo As IGeneratorInfo
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo*
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[])
  commentId: M:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[])
  id: BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[])
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: BuildAdditionalGeneratorsInfo(IGeneratorInfo[])
  nameWithType: IFileTypeManager.BuildAdditionalGeneratorsInfo(IGeneratorInfo[])
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[])
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nHelper method to create additional generator information so that it can be used by filter component builders.\n"
  syntax:
    content: IAdditionalGeneratorsInfo BuildAdditionalGeneratorsInfo(params IGeneratorInfo[] generators)
    parameters:
    - id: generators
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[]
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
    content.vb: Function BuildAdditionalGeneratorsInfo(ParamArray generators As IGeneratorInfo()) As IAdditionalGeneratorsInfo
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo*
  nameWithType.vb: IFileTypeManager.BuildAdditionalGeneratorsInfo(IGeneratorInfo())
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo(Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo())
  name.vb: BuildAdditionalGeneratorsInfo(IGeneratorInfo())
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation
  id: ConfigurationVersionInformation
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: ConfigurationVersionInformation
  nameWithType: IFileTypeManager.ConfigurationVersionInformation
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>\nProvides information on the version of the configuration information that is used to instantiate the current\ninstance of the IFileTypeManager. This can be used to determine whether the instance is working with the \nlatest version of configuration information that the host application requires.\n</p>\n<p>\nFor instance, applications may transfer their file type manager configuration information from one system to another.\nBy checking this property the application can determine the state of the configuration, and perform additional\ntasks to ensure the configuration is in the format that the application requires (e.g. deploy additional filters\nthat have only been released in the latest version of the application).\n</p>\n"
  syntax:
    content: string ConfigurationVersionInformation { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ConfigurationVersionInformation As String
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory
  id: FileTypeDefinitionFactory
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: FileTypeDefinitionFactory
  nameWithType: IFileTypeManager.FileTypeDefinitionFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nProvides access to the implementation used to instantiate file type\ndefinitions. Can be used to explicitly create a file type definition\nthat can be added to the manager by calling <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition(Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition(System.Int32%2cSdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: IFileTypeDefinitionFactory FileTypeDefinitionFactory { get; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory
    content.vb: ReadOnly Property FileTypeDefinitionFactory As IFileTypeDefinitionFactory
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions
  id: FileTypeDefinitions
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: FileTypeDefinitions
  nameWithType: IFileTypeManager.FileTypeDefinitions
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\n<p>\nThe file type definitions that are currently known to this instance of the file type manager.\n</p>\n<p>\nThe order of the file type definitions defines their relative priority, with \nthe most significant file type definition appearing first.\n</p>\n"
  syntax:
    content: IFileTypeDefinition[] FileTypeDefinitions { get; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition[]
    content.vb: ReadOnly Property FileTypeDefinitions As IFileTypeDefinition()
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes
  id: AutoLoadedFileTypes
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: AutoLoadedFileTypes
  nameWithType: IFileTypeManager.AutoLoadedFileTypes
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nGets a list of filetypes which should be auto-loaded by the Host. This is used to indicate\nnew file types in this particular version of the FileTypeManager\n"
  syntax:
    content: List<string> AutoLoadedFileTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: ReadOnly Property AutoLoadedFileTypes As List(Of String)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle
  id: SettingsBundle
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: SettingsBundle
  nameWithType: IFileTypeManager.SettingsBundle
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nThe settings bundle containing the settings used by components of the\nFileTypeManager. This property should be set before any operations\nrequiring the use of settings are invoked (for example, <code>GetConverterToBilingual</code>\nimplementations) or the operation may not work as expected.\nThis property can return <code>null</code> if no settings bundle has been set.\n"
  syntax:
    content: ISettingsBundle SettingsBundle { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Settings.ISettingsBundle
    content.vb: Property SettingsBundle As ISettingsBundle
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  id: DefaultBilingualFileTypeDefinition
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager
  langs:
  - csharp
  - vb
  name: DefaultBilingualFileTypeDefinition
  nameWithType: IFileTypeManager.DefaultBilingualFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nThe file type definitions that should be used as the default bilingual file type, or <code>null</code> if none.\n"
  remarks: "\n<p>\nBy default, this property returns the first file type definition in the list for which the \n<xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation.IsBilingualDocumentFileType\" data-throw-if-not-resolved=\"false\"></xref> is true.\n</p>\n<p>\nThe default bilingual file type can be explicitly changed by setting this property to another\nfile type definition in the list that is also a bilingual document file type.\n</p>\n<p>\nAttempting to set this property to a file type definition that is not in the list will yield \na <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\nAttempting to set this property to a file type definition that is not a bilingual document file type will\nyield a <xref href=\"Sdl.FileTypeSupport.Framework.IntegrationApi.NotBilingualFileTypeException\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: IFileTypeDefinition DefaultBilingualFileTypeDefinition { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    content.vb: Property DefaultBilingualFileTypeDefinition As IFileTypeDefinition
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi
  commentId: N:Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.IntegrationApi
  nameWithType: Sdl.FileTypeSupport.Framework.IntegrationApi
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition
  isExternal: true
  name: FindFileTypeDefinition
  nameWithType: IFileTypeManager.FindFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FindFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.FileTypeDefinitionId
  commentId: T:Sdl.FileTypeSupport.Framework.FileTypeDefinitionId
  parent: Sdl.FileTypeSupport.Framework
  isExternal: true
  name: FileTypeDefinitionId
  nameWithType: FileTypeDefinitionId
  fullName: Sdl.FileTypeSupport.Framework.FileTypeDefinitionId
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileTypeDefinition
  nameWithType: IFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework
  commentId: N:Sdl.FileTypeSupport.Framework
  isExternal: true
  name: Sdl.FileTypeSupport.Framework
  nameWithType: Sdl.FileTypeSupport.Framework
  fullName: Sdl.FileTypeSupport.Framework
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions
  isExternal: true
  name: GetAllMatchingFileTypeDefinitions
  nameWithType: IFileTypeManager.GetAllMatchingFileTypeDefinitions
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetAllMatchingFileTypeDefinitions
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
  commentId: T:System.EventHandler{Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<MessageEventArgs>
  nameWithType: EventHandler<MessageEventArgs>
  fullName: System.EventHandler<Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs>
  nameWithType.vb: EventHandler(Of MessageEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs)
  name.vb: EventHandler(Of MessageEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs
    name: MessageEventArgs
    nameWithType: MessageEventArgs
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs
    name: MessageEventArgs
    nameWithType: MessageEventArgs
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.MessageEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Pair<IFileTypeDefinition, SniffInfo>>
  nameWithType: IEnumerable<Pair<IFileTypeDefinition, SniffInfo>>
  fullName: System.Collections.Generic.IEnumerable<Sdl.FileTypeSupport.Framework.Pair<Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition, Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo>>
  nameWithType.vb: IEnumerable(Of Pair(Of IFileTypeDefinition, SniffInfo))
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.FileTypeSupport.Framework.Pair(Of Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition, Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo))
  name.vb: IEnumerable(Of Pair(Of IFileTypeDefinition, SniffInfo))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    name: IFileTypeDefinition
    nameWithType: IFileTypeDefinition
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    name: SniffInfo
    nameWithType: SniffInfo
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    name: IFileTypeDefinition
    nameWithType: IFileTypeDefinition
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    name: SniffInfo
    nameWithType: SniffInfo
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Globalization.Language
  isExternal: true
  name: Language
  nameWithType: Language
  fullName: Sdl.Core.Globalization.Language
- uid: Sdl.Core.Globalization.Codepage
  isExternal: true
  name: Codepage
  nameWithType: Codepage
  fullName: Sdl.Core.Globalization.Codepage
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition
  isExternal: true
  name: GetBestMatchingFileTypeDefinition
  nameWithType: IFileTypeManager.GetBestMatchingFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetBestMatchingFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}
  commentId: T:Sdl.FileTypeSupport.Framework.Pair{Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition,Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo}
  parent: Sdl.FileTypeSupport.Framework
  definition: Sdl.FileTypeSupport.Framework.Pair`2
  name: Pair<IFileTypeDefinition, SniffInfo>
  nameWithType: Pair<IFileTypeDefinition, SniffInfo>
  fullName: Sdl.FileTypeSupport.Framework.Pair<Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition, Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo>
  nameWithType.vb: Pair(Of IFileTypeDefinition, SniffInfo)
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition, Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo)
  name.vb: Pair(Of IFileTypeDefinition, SniffInfo)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    name: IFileTypeDefinition
    nameWithType: IFileTypeDefinition
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    name: SniffInfo
    nameWithType: SniffInfo
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    name: IFileTypeDefinition
    nameWithType: IFileTypeDefinition
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    name: SniffInfo
    nameWithType: SniffInfo
    fullName: Sdl.FileTypeSupport.Framework.NativeApi.SniffInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Pair`2
  commentId: T:Sdl.FileTypeSupport.Framework.Pair`2
  isExternal: true
  name: Pair<FirstType, SecondType>
  nameWithType: Pair<FirstType, SecondType>
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>
  nameWithType.vb: Pair(Of FirstType, SecondType)
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType)
  name.vb: Pair(Of FirstType, SecondType)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: FirstType
    nameWithType: FirstType
    fullName: FirstType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: SecondType
    nameWithType: SecondType
    fullName: SecondType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Pair`2
    name: Pair
    nameWithType: Pair
    fullName: Sdl.FileTypeSupport.Framework.Pair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: FirstType
    nameWithType: FirstType
    fullName: FirstType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: SecondType
    nameWithType: SecondType
    fullName: SecondType
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition
  isExternal: true
  name: AddFileTypeDefinition
  nameWithType: IFileTypeManager.AddFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AddFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition
  isExternal: true
  name: CreateFileTypeDefinition
  nameWithType: IFileTypeManager.CreateFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.CreateFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: FileTypeProfile
  nameWithType: FileTypeProfile
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeProfile
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileTypeComponentBuilder
  nameWithType: IFileTypeComponentBuilder
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeComponentBuilder
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition
  isExternal: true
  name: InsertFileTypeDefinition
  nameWithType: IFileTypeManager.InsertFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.InsertFileTypeDefinition
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition
  isExternal: true
  name: RemoveFileTypeDefinition
  nameWithType: IFileTypeManager.RemoveFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.RemoveFileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions
  isExternal: true
  name: ClearFileTypeDefinitions
  nameWithType: IFileTypeManager.ClearFileTypeDefinitions
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ClearFileTypeDefinitions
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual
  isExternal: true
  name: GetConverterToBilingual
  nameWithType: IFileTypeManager.GetConverterToBilingual
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToBilingual
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
  isExternal: true
  name: OneOrMoreFilesNotSupportedException
  nameWithType: OneOrMoreFilesNotSupportedException
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.OneOrMoreFilesNotSupportedException
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IBilingualDocumentGenerator
  nameWithType: IBilingualDocumentGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IBilingualDocumentGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: BilingualDocumentOutputPropertiesProvider
  nameWithType: BilingualDocumentOutputPropertiesProvider
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.BilingualDocumentOutputPropertiesProvider
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IMultiFileConverter
  nameWithType: IMultiFileConverter
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IMultiFileConverter
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual
  isExternal: true
  name: GetConverterToDefaultBilingual
  nameWithType: IFileTypeManager.GetConverterToDefaultBilingual
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToDefaultBilingual
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative
  isExternal: true
  name: GetConverterToNative
  nameWithType: IFileTypeManager.GetConverterToNative
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverterToNative
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: OutputPropertiesProvider
  nameWithType: OutputPropertiesProvider
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.OutputPropertiesProvider
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter
  isExternal: true
  name: GetConverter
  nameWithType: IFileTypeManager.GetConverter
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.GetConverter
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IBilingualParser
  nameWithType: IBilingualParser
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualParser
- uid: Sdl.FileTypeSupport.Framework.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor
  isExternal: true
  name: BuildExtractor
  nameWithType: IFileTypeManager.BuildExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractor
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException
  isExternal: true
  name: FileNotSupportedException
  nameWithType: FileNotSupportedException
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.FileNotSupportedException
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeTextLocationMessageReporter
  nameWithType: INativeTextLocationMessageReporter
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeTextLocationMessageReporter
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileExtractor
  nameWithType: IFileExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileExtractor
- uid: Sdl.FileTypeSupport.Framework.NativeApi
  commentId: N:Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.NativeApi
  nameWithType: Sdl.FileTypeSupport.Framework.NativeApi
  fullName: Sdl.FileTypeSupport.Framework.NativeApi
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing
  isExternal: true
  name: BuildExtractorNoSniffing
  nameWithType: IFileTypeManager.BuildExtractorNoSniffing
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildExtractorNoSniffing
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator
  isExternal: true
  name: BuildNativeGenerator
  nameWithType: IFileTypeManager.BuildNativeGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException
  isExternal: true
  name: FileTypeDefinitionNotFoundException
  nameWithType: FileTypeDefinitionNotFoundException
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.FileTypeDefinitionNotFoundException
- uid: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: IPersistentFileConversionProperties
  nameWithType: IPersistentFileConversionProperties
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.IPersistentFileConversionProperties
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileGenerator
  nameWithType: IFileGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers
  isExternal: true
  name: BuildNativeGeneratorWithVerifiers
  nameWithType: IFileTypeManager.BuildNativeGeneratorWithVerifiers
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeGeneratorWithVerifiers
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator
  isExternal: true
  name: BuildBilingualGenerator
  nameWithType: IFileTypeManager.BuildBilingualGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildBilingualGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator
  isExternal: true
  name: BuildDefaultBilingualGenerator
  nameWithType: IFileTypeManager.BuildDefaultBilingualGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildDefaultBilingualGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  isExternal: true
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IBilingualDocumentWriter
  nameWithType: IBilingualDocumentWriter
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualDocumentWriter
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor
  isExternal: true
  name: BuildFileExtractor
  nameWithType: IFileTypeManager.BuildFileExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileExtractor
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor
  isExternal: true
  name: BuildSubContentExtractor
  nameWithType: IFileTypeManager.BuildSubContentExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentExtractor
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: ISubContentExtractor
  nameWithType: ISubContentExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentExtractor
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeSubContentExtractor
  nameWithType: INativeSubContentExtractor
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentExtractor
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeExtractor
  nameWithType: INativeExtractor
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeExtractor
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor
  isExternal: true
  name: BuildNativeExtractor
  nameWithType: IFileTypeManager.BuildNativeExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeExtractor
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeFileParser
  nameWithType: INativeFileParser
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileParser
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor
  isExternal: true
  name: BuildNativeSubContentExtractor
  nameWithType: IFileTypeManager.BuildNativeSubContentExtractor
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentExtractor
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation
  isExternal: true
  name: BuildFileTypeInformation
  nameWithType: IFileTypeManager.BuildFileTypeInformation
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileTypeInformation
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileTypeInformation
  nameWithType: IFileTypeInformation
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeInformation
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator
  isExternal: true
  name: BuildFileGenerator
  nameWithType: IFileTypeManager.BuildFileGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildFileGenerator
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IBilingualWriter
  nameWithType: IBilingualWriter
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IBilingualWriter
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeFileWriter
  nameWithType: INativeFileWriter
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeFileWriter
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeGenerator
  nameWithType: INativeGenerator
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator
  isExternal: true
  name: BuildSubContentGenerator
  nameWithType: IFileTypeManager.BuildSubContentGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildSubContentGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: ISubContentGenerator
  nameWithType: ISubContentGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.ISubContentGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator
  isExternal: true
  name: BuildNativeSubContentGenerator
  nameWithType: IFileTypeManager.BuildNativeSubContentGenerator
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildNativeSubContentGenerator
- uid: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator
  commentId: T:Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator
  parent: Sdl.FileTypeSupport.Framework.NativeApi
  isExternal: true
  name: INativeSubContentGenerator
  nameWithType: INativeSubContentGenerator
  fullName: Sdl.FileTypeSupport.Framework.NativeApi.INativeSubContentGenerator
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory
  isExternal: true
  name: BuildPreviewSetsFactory
  nameWithType: IFileTypeManager.BuildPreviewSetsFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildPreviewSetsFactory
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IPreviewSetsFactory
  nameWithType: IPreviewSetsFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IPreviewSetsFactory
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory
  isExternal: true
  name: BuildQuickTagsFactory
  nameWithType: IFileTypeManager.BuildQuickTagsFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildQuickTagsFactory
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IQuickTagsFactory
  nameWithType: IQuickTagsFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IQuickTagsFactory
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection
  isExternal: true
  name: BuildVerifierCollection
  nameWithType: IFileTypeManager.BuildVerifierCollection
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildVerifierCollection
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IVerifierCollection
  nameWithType: IVerifierCollection
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IVerifierCollection
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo
  isExternal: true
  name: BuildGeneratorInfo
  nameWithType: IFileTypeManager.BuildGeneratorInfo
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildGeneratorInfo
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IGeneratorInfo
  nameWithType: IGeneratorInfo
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo
  isExternal: true
  name: BuildAdditionalGeneratorsInfo
  nameWithType: IFileTypeManager.BuildAdditionalGeneratorsInfo
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.BuildAdditionalGeneratorsInfo
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[]
  isExternal: true
  name: IGeneratorInfo[]
  nameWithType: IGeneratorInfo[]
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo[]
  nameWithType.vb: IGeneratorInfo()
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo()
  name.vb: IGeneratorInfo()
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    name: IGeneratorInfo
    nameWithType: IGeneratorInfo
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    name: IGeneratorInfo
    nameWithType: IGeneratorInfo
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IAdditionalGeneratorsInfo
  nameWithType: IAdditionalGeneratorsInfo
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation
  isExternal: true
  name: ConfigurationVersionInformation
  nameWithType: IFileTypeManager.ConfigurationVersionInformation
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.ConfigurationVersionInformation
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory
  isExternal: true
  name: FileTypeDefinitionFactory
  nameWithType: IFileTypeManager.FileTypeDefinitionFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitionFactory
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileTypeDefinitionFactory
  nameWithType: IFileTypeDefinitionFactory
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionFactory
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions
  isExternal: true
  name: FileTypeDefinitions
  nameWithType: IFileTypeManager.FileTypeDefinitions
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.FileTypeDefinitions
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition[]
  isExternal: true
  name: IFileTypeDefinition[]
  nameWithType: IFileTypeDefinition[]
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition[]
  nameWithType.vb: IFileTypeDefinition()
  fullName.vb: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition()
  name.vb: IFileTypeDefinition()
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    name: IFileTypeDefinition
    nameWithType: IFileTypeDefinition
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    name: IFileTypeDefinition
    nameWithType: IFileTypeDefinition
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinition
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes
  isExternal: true
  name: AutoLoadedFileTypes
  nameWithType: IFileTypeManager.AutoLoadedFileTypes
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.AutoLoadedFileTypes
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle
  isExternal: true
  name: SettingsBundle
  nameWithType: IFileTypeManager.SettingsBundle
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.SettingsBundle
- uid: Sdl.Core.Settings.ISettingsBundle
  isExternal: true
  name: ISettingsBundle
  nameWithType: ISettingsBundle
  fullName: Sdl.Core.Settings.ISettingsBundle
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
  isExternal: true
  name: DefaultBilingualFileTypeDefinition
  nameWithType: IFileTypeManager.DefaultBilingualFileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeManager.DefaultBilingualFileTypeDefinition
