### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  id: ObservableList`1
  parent: Sdl.FileTypeSupport.Framework.Core.Settings
  children:
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Add(`0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Clear
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ClearListItemSettings(Sdl.Core.Settings.ISettingsGroup,System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CollectionChanged
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Contains(`0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CopyTo(`0[],System.Int32)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Count
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CreateObservableStringList(System.String[])
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Equals(System.Object)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Find(System.Predicate{`0})
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetEnumerator
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetHashCode
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetListItemFromSettings(Sdl.Core.Settings.ISettingsGroup,System.String,System.Boolean@)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IndexOf(`0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Insert(System.Int32,`0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IsReadOnly
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Item(System.Int32)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PopulateFromSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PropertyChanged
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Remove(`0)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.RemoveAt(System.Int32)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort(System.Comparison{`0})
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.System#Collections#IEnumerable#GetEnumerator
  - Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ToArray
  langs:
  - csharp
  - vb
  name: ObservableList<T>
  nameWithType: ObservableList<T>
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nAn implementation of <code>IList&lt;T></code> which fires <xref href=\"System.Collections.Specialized.INotifyCollectionChanged\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> when required. This allows the list to be used as\na data source for WPF user controls implementing data-binding.\n"
  syntax:
    content: 'public class ObservableList<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable'
    typeParameters:
    - id: T
      description: The type of object contained in the list.
    content.vb: >-
      Public Class ObservableList(Of T)
          Implements IList(Of T), ICollection(Of T), IEnumerable(Of T), IEnumerable
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.FileTypeSupport.Framework.Core.Settings.ComplexObservableList`1
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ObservableList(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T)
  name.vb: ObservableList(Of T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CreateObservableStringList(System.String[])
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CreateObservableStringList(System.String[])
  id: CreateObservableStringList(System.String[])
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: CreateObservableStringList(String[])
  nameWithType: ObservableList<T>.CreateObservableStringList(String[])
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.CreateObservableStringList(System.String[])
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nFactory method used by the Spring framework to create observable string lists\nto assign to the properties that require them.\n"
  syntax:
    content: public static ObservableList<string> CreateObservableStringList(string[] strings)
    parameters:
    - id: strings
      type: System.String[]
    return:
      type: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList{System.String}
    content.vb: Public Shared Function CreateObservableStringList(strings As String()) As ObservableList(Of String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CreateObservableStringList*
  nameWithType.vb: ObservableList(Of T).CreateObservableStringList(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).CreateObservableStringList(System.String())
  name.vb: CreateObservableStringList(String())
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor
  id: '#ctor'
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: ObservableList()
  nameWithType: ObservableList<T>.ObservableList()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ObservableList()
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nDefault constructor creating a new empty list with a default capacity.\n"
  syntax:
    content: public ObservableList()
    content.vb: Public Sub New
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor*
  nameWithType.vb: ObservableList(Of T).ObservableList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ObservableList()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: ObservableList(IEnumerable<T>)
  nameWithType: ObservableList<T>.ObservableList(IEnumerable<T>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ObservableList(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nConstructor which takes a collection of T and adds it to this list\n"
  syntax:
    content: public ObservableList(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to be added
    content.vb: Public Sub New(collection As IEnumerable(Of T))
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor*
  nameWithType.vb: ObservableList(Of T).ObservableList(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ObservableList(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ObservableList(IEnumerable(Of T))
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: ObservableList<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nInserts the elements of a collection into list at the specified index.\n"
  syntax:
    content: public void InsertRange(int index, IEnumerable<T> collection)
    parameters:
    - id: index
      type: System.Int32
      description: The index to insert elements at.
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The elements to insert into the list.
    content.vb: Public Sub InsertRange(index As Integer, collection As IEnumerable(Of T))
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.InsertRange*
  nameWithType.vb: ObservableList(Of T).InsertRange(Int32, IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  nameWithType: ObservableList<T>.AddRange(IEnumerable<T>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nAdds the elements of the specified collection to the list.\n"
  syntax:
    content: public void AddRange(IEnumerable<T> collection)
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection of elements to add to the list.
    content.vb: Public Sub AddRange(collection As IEnumerable(Of T))
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.AddRange*
  nameWithType.vb: ObservableList(Of T).AddRange(IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ToArray
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ToArray
  id: ToArray
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: ObservableList<T>.ToArray()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ToArray()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nCopies the elements of the list to a new array.\n"
  syntax:
    content: public T[] ToArray()
    return:
      type: '{T}[]'
      description: A new array containing the elements of the list.
    content.vb: Public Function ToArray As T()
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ToArray*
  nameWithType.vb: ObservableList(Of T).ToArray()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ToArray()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort
  id: Sort
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: ObservableList<T>.Sort()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Sort()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nSorts the list using the default comparer.\n"
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort*
  nameWithType.vb: ObservableList(Of T).Sort()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Sort()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Sort(IComparer<T>)
  nameWithType: ObservableList<T>.Sort(IComparer<T>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nSorts the list using the provided comparer.\n"
  syntax:
    content: public void Sort(IComparer<T> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The comparer to sort the list with.
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort*
  nameWithType.vb: ObservableList(Of T).Sort(IComparer(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort(System.Comparison{`0})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Sort(Comparison<T>)
  nameWithType: ObservableList<T>.Sort(Comparison<T>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Sort(System.Comparison<T>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nSorts the list using the provided comparison delegate\n"
  syntax:
    content: public void Sort(Comparison<T> comparison)
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
      description: The delegate to use when comparing
    content.vb: Public Sub Sort(comparison As Comparison(Of T))
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort*
  nameWithType.vb: ObservableList(Of T).Sort(Comparison(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IndexOf(`0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: ObservableList<T>.IndexOf(T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.IndexOf(T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nDetermines the index of the specified item in the list.\n"
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to locate in the list.
    return:
      type: System.Int32
      description: The zero-based index of the item in the list.
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IndexOf*
  implements:
  - System.Collections.Generic.IList{{T}}.IndexOf({T})
  nameWithType.vb: ObservableList(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).IndexOf(T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Insert(System.Int32,`0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: ObservableList<T>.Insert(Int32, T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Insert(System.Int32, T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nInserts an item into the list at the specified index.\n"
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index to insert the item at.
    - id: item
      type: '{T}'
      description: The item to insert into the list.
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Insert*
  implements:
  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  nameWithType.vb: ObservableList(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Insert(System.Int32, T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Find(System.Predicate{`0})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Find(System.Predicate{`0})
  id: Find(System.Predicate{`0})
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Find(Predicate<T>)
  nameWithType: ObservableList<T>.Find(Predicate<T>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Find(System.Predicate<T>)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nSearches for an element that matches the conditions defined by the specified predicate, \nand returns the first occurrence within the entire ObservableList.\n"
  syntax:
    content: public T Find(Predicate<T> match)
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: '{T}'
      description: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.
    content.vb: Public Function Find(match As Predicate(Of T)) As T
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Find*
  nameWithType.vb: ObservableList(Of T).Find(Predicate(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.RemoveAt(System.Int32)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ObservableList<T>.RemoveAt(Int32)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRemoves the list item at the specified index.\n"
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.RemoveAt*
  implements:
  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  nameWithType.vb: ObservableList(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).RemoveAt(System.Int32)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Add(`0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Add(`0)
  id: Add(`0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: ObservableList<T>.Add(T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Add(T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nAdds an item to the list.\n"
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to add to the list.
    content.vb: Public Sub Add(item As T)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: ObservableList(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Add(T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Clear
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Clear
  id: Clear
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ObservableList<T>.Clear()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Clear()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRemoves all items from the list.\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: ObservableList(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Clear()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Contains(`0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Contains(`0)
  id: Contains(`0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: ObservableList<T>.Contains(T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Contains(T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nDetermines whether the list contains a specific item.\n"
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to search the list for.
    return:
      type: System.Boolean
      description: <code>true</code> if the list contains the item.
    content.vb: Public Function Contains(item As T) As Boolean
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: ObservableList(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Contains(T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CopyTo(`0[],System.Int32)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: ObservableList<T>.CopyTo(T[], Int32)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nCopies the elements of the list to an array, starting at a particular index.\n"
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
      description: The array to copy the list items in to.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index of the array from which to start copying.
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: ObservableList(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Remove(`0)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Remove(`0)
  id: Remove(`0)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: ObservableList<T>.Remove(T)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Remove(T)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRemoves the first occurrence of a specific item from the list.\n"
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item to remove.
    return:
      type: System.Boolean
      description: <code>true</code> if the item was successfully removed.
    content.vb: Public Function Remove(item As T) As Boolean
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: ObservableList(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Remove(T)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetEnumerator
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetEnumerator
  id: GetEnumerator
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ObservableList<T>.GetEnumerator()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.GetEnumerator()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nReturns an enumerator that iterates through the list.\n"
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator that iterates through the list.
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ObservableList(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).GetEnumerator()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ObservableList<T>.IEnumerable.GetEnumerator()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nReturns an enumerator that iterates through the list.\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that iterates through the list.
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableList(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  id: SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: SaveToSettingsGroup(ISettingsGroup, String)
  nameWithType: ObservableList<T>.SaveToSettingsGroup(ISettingsGroup, String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nSaves this list to the settings group using the setting ID as a base.\n"
  syntax:
    content: public virtual void SaveToSettingsGroup(ISettingsGroup settingsGroup, string listSettingId)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group to save to.
    - id: listSettingId
      type: System.String
      description: The setting ID to use as a base when saving the list.
    content.vb: Public Overridable Sub SaveToSettingsGroup(settingsGroup As ISettingsGroup, listSettingId As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.SaveToSettingsGroup*
  nameWithType.vb: ObservableList(Of T).SaveToSettingsGroup(ISettingsGroup, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup, System.String)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PopulateFromSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PopulateFromSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  id: PopulateFromSettingsGroup(Sdl.Core.Settings.ISettingsGroup,System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: PopulateFromSettingsGroup(ISettingsGroup, String)
  nameWithType: ObservableList<T>.PopulateFromSettingsGroup(ISettingsGroup, String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.PopulateFromSettingsGroup(Sdl.Core.Settings.ISettingsGroup, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRestores the list from the settings group and populates itself using the setting ID as its base.\n"
  syntax:
    content: public virtual void PopulateFromSettingsGroup(ISettingsGroup settingsGroup, string listSettingId)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group to load from.
    - id: listSettingId
      type: System.String
      description: The setting ID to use as a base when populating the list.
    content.vb: Public Overridable Sub PopulateFromSettingsGroup(settingsGroup As ISettingsGroup, listSettingId As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PopulateFromSettingsGroup*
  nameWithType.vb: ObservableList(Of T).PopulateFromSettingsGroup(ISettingsGroup, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).PopulateFromSettingsGroup(Sdl.Core.Settings.ISettingsGroup, System.String)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ClearListItemSettings(Sdl.Core.Settings.ISettingsGroup,System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ClearListItemSettings(Sdl.Core.Settings.ISettingsGroup,System.String)
  id: ClearListItemSettings(Sdl.Core.Settings.ISettingsGroup,System.String)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: ClearListItemSettings(ISettingsGroup, String)
  nameWithType: ObservableList<T>.ClearListItemSettings(ISettingsGroup, String)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ClearListItemSettings(Sdl.Core.Settings.ISettingsGroup, System.String)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRemoves all saved items belonging to this list from the stored settings group. This is\ncalled from <xref href=\"Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList%601.SaveToSettingsGroup(Sdl.Core.Settings.ISettingsGroup%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to make sure that the settings being updated\nare all saved cleanly.\n"
  syntax:
    content: public virtual void ClearListItemSettings(ISettingsGroup settingsGroup, string listSettingId)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group to remove the settings from.
    - id: listSettingId
      type: System.String
      description: The ID of the setting to remove.
    content.vb: Public Overridable Sub ClearListItemSettings(settingsGroup As ISettingsGroup, listSettingId As String)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ClearListItemSettings*
  nameWithType.vb: ObservableList(Of T).ClearListItemSettings(ISettingsGroup, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ClearListItemSettings(Sdl.Core.Settings.ISettingsGroup, System.String)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetListItemFromSettings(Sdl.Core.Settings.ISettingsGroup,System.String,System.Boolean@)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetListItemFromSettings(Sdl.Core.Settings.ISettingsGroup,System.String,System.Boolean@)
  id: GetListItemFromSettings(Sdl.Core.Settings.ISettingsGroup,System.String,System.Boolean@)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: GetListItemFromSettings(ISettingsGroup, String, out Boolean)
  nameWithType: ObservableList<T>.GetListItemFromSettings(ISettingsGroup, String, out Boolean)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.GetListItemFromSettings(Sdl.Core.Settings.ISettingsGroup, System.String, out System.Boolean)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nGets the setting for the list item from the settings group and populates it.\n"
  syntax:
    content: protected virtual T GetListItemFromSettings(ISettingsGroup settingsGroup, string listItemSetting, out bool foundSetting)
    parameters:
    - id: settingsGroup
      type: Sdl.Core.Settings.ISettingsGroup
      description: The settings group containing the list item settings.
    - id: listItemSetting
      type: System.String
      description: The setting ID to use to retrieve the setting.
    - id: foundSetting
      type: System.Boolean
      description: A flag which reports if the setting was found or not.
    return:
      type: '{T}'
      description: The populated list item.
    content.vb: Protected Overridable Function GetListItemFromSettings(settingsGroup As ISettingsGroup, listItemSetting As String, ByRef foundSetting As Boolean) As T
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetListItemFromSettings*
  nameWithType.vb: ObservableList(Of T).GetListItemFromSettings(ISettingsGroup, String, ByRef Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).GetListItemFromSettings(Sdl.Core.Settings.ISettingsGroup, System.String, ByRef System.Boolean)
  name.vb: GetListItemFromSettings(ISettingsGroup, String, ByRef Boolean)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Equals(System.Object)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ObservableList<T>.Equals(Object)
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Equals(System.Object)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nDetermines whether the given object is equal to this object.\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: given object
    return:
      type: System.Boolean
      description: whether equal to this object
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Equals*
  nameWithType.vb: ObservableList(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Equals(System.Object)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetHashCode
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetHashCode
  id: GetHashCode
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ObservableList<T>.GetHashCode()
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.GetHashCode()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nGets the hash code.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: hash code
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetHashCode*
  nameWithType.vb: ObservableList(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).GetHashCode()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Item(System.Int32)
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ObservableList<T>.Item[Int32]
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Item[System.Int32]
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nRetrieves the list item at the specified index.\n"
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to retrieve.
    return:
      type: '{T}'
      description: The item located at the index.
    content.vb: Public Property Item(index As Integer) As T
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Item*
  implements:
  - System.Collections.Generic.IList{{T}}.Item(System.Int32)
  nameWithType.vb: ObservableList(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Count
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Count
  id: Count
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ObservableList<T>.Count
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Count
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nThe number of elements contained in the list.\n"
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: ObservableList(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Count
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IsReadOnly
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IsReadOnly
  id: IsReadOnly
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ObservableList<T>.IsReadOnly
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.IsReadOnly
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nDetermines whether the list is read-only.\n"
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: ObservableList(Of T).IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).IsReadOnly
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CollectionChanged
  commentId: E:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CollectionChanged
  id: CollectionChanged
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ObservableList<T>.CollectionChanged
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.CollectionChanged
  type: Event
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nEvent that is fired whenever the list collection has changed.\n"
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  nameWithType.vb: ObservableList(Of T).CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).CollectionChanged
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PropertyChanged
  commentId: E:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PropertyChanged
  id: PropertyChanged
  parent: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: ObservableList<T>.PropertyChanged
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.PropertyChanged
  type: Event
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Settings
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Settings
  namespace: Sdl.FileTypeSupport.Framework.Core.Settings
  summary: "\nEvent that is fired whenever the value of a property on the list has changed.\n"
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  nameWithType.vb: ObservableList(Of T).PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).PropertyChanged
references:
- uid: Sdl.FileTypeSupport.Framework.Core.Settings
  commentId: N:Sdl.FileTypeSupport.Framework.Core.Settings
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.Core.Settings
  nameWithType: Sdl.FileTypeSupport.Framework.Core.Settings
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CreateObservableStringList*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CreateObservableStringList
  isExternal: true
  name: CreateObservableStringList
  nameWithType: ObservableList<T>.CreateObservableStringList
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.CreateObservableStringList
  nameWithType.vb: ObservableList(Of T).CreateObservableStringList
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).CreateObservableStringList
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList{System.String}
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList{System.String}
  parent: Sdl.FileTypeSupport.Framework.Core.Settings
  definition: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  name: ObservableList<String>
  nameWithType: ObservableList<String>
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<System.String>
  nameWithType.vb: ObservableList(Of String)
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of System.String)
  name.vb: ObservableList(Of String)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
    name: ObservableList
    nameWithType: ObservableList
    fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
    name: ObservableList
    nameWithType: ObservableList
    fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
  isExternal: true
  name: ObservableList<T>
  nameWithType: ObservableList<T>
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>
  nameWithType.vb: ObservableList(Of T)
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T)
  name.vb: ObservableList(Of T)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
    name: ObservableList
    nameWithType: ObservableList
    fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1
    name: ObservableList
    nameWithType: ObservableList
    fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.#ctor
  isExternal: true
  name: ObservableList
  nameWithType: ObservableList<T>.ObservableList
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ObservableList
  nameWithType.vb: ObservableList(Of T).ObservableList
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ObservableList
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.InsertRange*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.InsertRange
  isExternal: true
  name: InsertRange
  nameWithType: ObservableList<T>.InsertRange
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.InsertRange
  nameWithType.vb: ObservableList(Of T).InsertRange
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).InsertRange
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.AddRange*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.AddRange
  isExternal: true
  name: AddRange
  nameWithType: ObservableList<T>.AddRange
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.AddRange
  nameWithType.vb: ObservableList(Of T).AddRange
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).AddRange
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ToArray*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ToArray
  isExternal: true
  name: ToArray
  nameWithType: ObservableList<T>.ToArray
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ToArray
  nameWithType.vb: ObservableList(Of T).ToArray
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ToArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Sort
  isExternal: true
  name: Sort
  nameWithType: ObservableList<T>.Sort
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Sort
  nameWithType.vb: ObservableList(Of T).Sort
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Sort
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison{{T}}
  commentId: T:System.Comparison{`0}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: true
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullName.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IndexOf*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IndexOf
  isExternal: true
  name: IndexOf
  nameWithType: ObservableList<T>.IndexOf
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.IndexOf
  nameWithType.vb: ObservableList(Of T).IndexOf
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).IndexOf
- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})
  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Insert*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Insert
  isExternal: true
  name: Insert
  nameWithType: ObservableList<T>.Insert
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Insert
  nameWithType.vb: ObservableList(Of T).Insert
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Insert
- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})
  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Find*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Find
  isExternal: true
  name: Find
  nameWithType: ObservableList<T>.Find
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Find
  nameWithType.vb: ObservableList(Of T).Find
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Find
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{`0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.RemoveAt*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.RemoveAt
  isExternal: true
  name: RemoveAt
  nameWithType: ObservableList<T>.RemoveAt
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.RemoveAt
  nameWithType.vb: ObservableList(Of T).RemoveAt
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).RemoveAt
- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Add*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Add
  isExternal: true
  name: Add
  nameWithType: ObservableList<T>.Add
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Add
  nameWithType.vb: ObservableList(Of T).Add
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Clear*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Clear
  isExternal: true
  name: Clear
  nameWithType: ObservableList<T>.Clear
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Clear
  nameWithType.vb: ObservableList(Of T).Clear
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Contains*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Contains
  isExternal: true
  name: Contains
  nameWithType: ObservableList<T>.Contains
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Contains
  nameWithType.vb: ObservableList(Of T).Contains
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CopyTo*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: ObservableList<T>.CopyTo
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.CopyTo
  nameWithType.vb: ObservableList(Of T).CopyTo
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Remove*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Remove
  isExternal: true
  name: Remove
  nameWithType: ObservableList<T>.Remove
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Remove
  nameWithType.vb: ObservableList(Of T).Remove
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetEnumerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: ObservableList<T>.GetEnumerator
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.GetEnumerator
  nameWithType.vb: ObservableList(Of T).GetEnumerator
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator
  nameWithType: ObservableList<T>.IEnumerable.GetEnumerator
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableList(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.SaveToSettingsGroup*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.SaveToSettingsGroup
  isExternal: true
  name: SaveToSettingsGroup
  nameWithType: ObservableList<T>.SaveToSettingsGroup
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.SaveToSettingsGroup
  nameWithType.vb: ObservableList(Of T).SaveToSettingsGroup
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).SaveToSettingsGroup
- uid: Sdl.Core.Settings.ISettingsGroup
  isExternal: true
  name: ISettingsGroup
  nameWithType: ISettingsGroup
  fullName: Sdl.Core.Settings.ISettingsGroup
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PopulateFromSettingsGroup*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.PopulateFromSettingsGroup
  isExternal: true
  name: PopulateFromSettingsGroup
  nameWithType: ObservableList<T>.PopulateFromSettingsGroup
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.PopulateFromSettingsGroup
  nameWithType.vb: ObservableList(Of T).PopulateFromSettingsGroup
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).PopulateFromSettingsGroup
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ClearListItemSettings*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.ClearListItemSettings
  isExternal: true
  name: ClearListItemSettings
  nameWithType: ObservableList<T>.ClearListItemSettings
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.ClearListItemSettings
  nameWithType.vb: ObservableList(Of T).ClearListItemSettings
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).ClearListItemSettings
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetListItemFromSettings*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetListItemFromSettings
  isExternal: true
  name: GetListItemFromSettings
  nameWithType: ObservableList<T>.GetListItemFromSettings
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.GetListItemFromSettings
  nameWithType.vb: ObservableList(Of T).GetListItemFromSettings
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).GetListItemFromSettings
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Equals*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Equals
  isExternal: true
  name: Equals
  nameWithType: ObservableList<T>.Equals
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Equals
  nameWithType.vb: ObservableList(Of T).Equals
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetHashCode*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: ObservableList<T>.GetHashCode
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.GetHashCode
  nameWithType.vb: ObservableList(Of T).GetHashCode
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).GetHashCode
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Item*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Item
  isExternal: true
  name: Item
  nameWithType: ObservableList<T>.Item
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Item
  nameWithType.vb: ObservableList(Of T).Item
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Item
- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)
  parent: System.Collections.Generic.IList{{T}}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Count*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.Count
  isExternal: true
  name: Count
  nameWithType: ObservableList<T>.Count
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.Count
  nameWithType.vb: ObservableList(Of T).Count
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IsReadOnly*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ObservableList<T>.IsReadOnly
  fullName: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList<T>.IsReadOnly
  nameWithType.vb: ObservableList(Of T).IsReadOnly
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Settings.ObservableList(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: System.ComponentModel.PropertyChangedEventHandler
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
