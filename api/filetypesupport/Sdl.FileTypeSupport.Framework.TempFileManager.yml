### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.TempFileManager
  commentId: T:Sdl.FileTypeSupport.Framework.TempFileManager
  id: TempFileManager
  parent: Sdl.FileTypeSupport.Framework
  children:
  - Sdl.FileTypeSupport.Framework.TempFileManager.#ctor
  - Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String)
  - Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)
  - Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles
  - Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete
  - Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty
  - Sdl.FileTypeSupport.Framework.TempFileManager.Deleted
  - Sdl.FileTypeSupport.Framework.TempFileManager.Dispose
  - Sdl.FileTypeSupport.Framework.TempFileManager.Dispose(System.Boolean)
  - Sdl.FileTypeSupport.Framework.TempFileManager.FilePath
  - Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess
  - Sdl.FileTypeSupport.Framework.TempFileManager.Finalize
  - Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  - Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  - Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  - Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile(Sdl.FileTypeSupport.Framework.TempFileManager@,Sdl.FileTypeSupport.Framework.TempFileManager)
  langs:
  - csharp
  - vb
  name: TempFileManager
  nameWithType: TempFileManager
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager
  type: Class
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Creates and manages a tempoary file ensuring that it is deleted when no longer required.
  remarks: >-
    <p>The temp file's file system readonly flag can also be set using <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly" data-throw-if-not-resolved="false"></xref> and also 

    the file can be locked using <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.Locked" data-throw-if-not-resolved="false"></xref> to prevent it being deleted by

    the user or any disk space management software.

    </p>

    <p>This class uses the <xref href="Sdl.FileTypeSupport.Framework.FileJanitor" data-throw-if-not-resolved="false"></xref> class so it

    provides a convenient way to create and manage session-scope temporary files. Make sure that

    all objects needing access to the temp file have access to a corresponding TempFileManager object, 

    that way when it is no longer referenced by any live objects and it gets garbage collected

    the temporary file is deleted.

    </p>

    <p>

    The class also implements the <code>IDisposable</code> interface, and deletes the

    FileJanitor managed file in the <code>Dispose()</code> implementation.

    </p>

    <p>

    If the file for some reason cannot be deleted no error is raised.

    </p>

    <p>

    Note that the .NET Framework does not guarantee that finalizers will be called,

    so there is always a possibility that the file does not get deleted.

    </p>

    <p>

    The TempFileManager class also has a static method AutoDeleteNonLockedFiles() that can be called

    during applicaiton startup to delete any temp files that may not have been deleted previously.

    </p>
  example: []
  syntax:
    content: 'public class TempFileManager : IDisposable'
    content.vb: Public Class TempFileManager Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor
  id: '#ctor'
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: TempFileManager()
  nameWithType: TempFileManager.TempFileManager()
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TempFileManager()
  type: Constructor
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    Creates a temp file with a random name and manages it.

    See <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.%23ctor(System.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> for more details.
  example: []
  syntax:
    content: public TempFileManager()
    content.vb: Public Sub New()
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor*
  nameWithType.vb: TempFileManager.New()
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.New()
  name.vb: New()
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: TempFileManager(string)
  nameWithType: TempFileManager.TempFileManager(string)
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TempFileManager(string)
  type: Constructor
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    Creates the named temp file in a random temp directory or named sub-directory and manages it.

    See <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.%23ctor(System.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> for more details.
  example: []
  syntax:
    content: public TempFileManager(string filePath)
    parameters:
    - id: filePath
      type: System.String
      description: A temp filename to create or empty for a random filename to be generated.
    content.vb: Public Sub New(filePath As String)
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor*
  nameWithType.vb: TempFileManager.New(String)
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.New(String)
  name.vb: New(String)
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: TempFileManager(string, bool)
  nameWithType: TempFileManager.TempFileManager(string, bool)
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TempFileManager(string, bool)
  type: Constructor
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Creates a temp file and manages it.
  remarks: >-
    <p>If an empty file name is given then a random temp file is created.

    If only a file name is given then a temp folder is created and a file with the file name is created.

    If a full or partial path is given the then a temp folder with the last folder name in the path is created

    and a file with the file name is created within it.

    </p>
  example: []
  syntax:
    content: public TempFileManager(string filePath, bool lockFile)
    parameters:
    - id: filePath
      type: System.String
      description: A temp filename to create or empty for a random filename to be generated.
    - id: lockFile
      type: System.Boolean
      description: >-
        If set to <code>true</code> the file is created in this constructor and locked with a read write stream
                    available through <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(filePath As String, lockFile As Boolean)
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor*
  nameWithType.vb: TempFileManager.New(String, Boolean)
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.New(String, Boolean)
  name.vb: New(String, Boolean)
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Finalize
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.Finalize
  id: Finalize
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: ~TempFileManager()
  nameWithType: TempFileManager.~TempFileManager()
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.~TempFileManager()
  type: Method
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Deletes the file, if possible.
  example: []
  syntax:
    content: protected ~TempFileManager()
    content.vb: 'Protected '
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.Finalize*
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose(System.Boolean)
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: TempFileManager.Dispose(bool)
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose(bool)
  type: Method
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Implementation of the recommended dispose protocol. Deletes the file if possible.
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true if this method is called from IDisposable.Dispose() and false if called from Finalizer
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose*
  nameWithType.vb: TempFileManager.Dispose(Boolean)
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile(Sdl.FileTypeSupport.Framework.TempFileManager@,Sdl.FileTypeSupport.Framework.TempFileManager)
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile(Sdl.FileTypeSupport.Framework.TempFileManager@,Sdl.FileTypeSupport.Framework.TempFileManager)
  id: TakeOverManagedFile(Sdl.FileTypeSupport.Framework.TempFileManager@,Sdl.FileTypeSupport.Framework.TempFileManager)
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: TakeOverManagedFile(ref TempFileManager, TempFileManager)
  nameWithType: TempFileManager.TakeOverManagedFile(ref TempFileManager, TempFileManager)
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile(ref Sdl.FileTypeSupport.Framework.TempFileManager, Sdl.FileTypeSupport.Framework.TempFileManager)
  type: Method
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    This method handles the logic of handing over the management 

    of a TempFileManager managed file to a new managed file
  example: []
  syntax:
    content: public static void TakeOverManagedFile(ref TempFileManager managedFile, TempFileManager value)
    parameters:
    - id: managedFile
      type: Sdl.FileTypeSupport.Framework.TempFileManager
      description: ''
    - id: value
      type: Sdl.FileTypeSupport.Framework.TempFileManager
      description: ''
    content.vb: Public Shared Sub TakeOverManagedFile(managedFile As TempFileManager, value As TempFileManager)
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile*
  nameWithType.vb: TempFileManager.TakeOverManagedFile(TempFileManager, TempFileManager)
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile(Sdl.FileTypeSupport.Framework.TempFileManager, Sdl.FileTypeSupport.Framework.TempFileManager)
  name.vb: TakeOverManagedFile(TempFileManager, TempFileManager)
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles
  id: AutoDeleteNonLockedFiles
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: AutoDeleteNonLockedFiles()
  nameWithType: TempFileManager.AutoDeleteNonLockedFiles()
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles()
  type: Method
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Deletes all <xref href="Sdl.FileTypeSupport.Framework.TempFileManager" data-throw-if-not-resolved="false"></xref> managed tempoary files and tempoary folders that could not be deleted previously.
  remarks: >-
    <p>This public static method is designed to be called when the using applicatin starts up so that

    all tempoary files that have been created by a previous invocation of the applicaion that could

    not be automatically delted can be deleted when the using application restarts.

    </p>

    <p>This also employs a locking mechanism so that if two instances of the application are launched

    only the first instance will delete temp files that were left from a previous instance of the applicaiton.

    </p>
  example: []
  syntax:
    content: public static void AutoDeleteNonLockedFiles()
    content.vb: Public Shared Sub AutoDeleteNonLockedFiles()
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.Dispose
  id: Dispose
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TempFileManager.Dispose()
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose()
  type: Method
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Deletes the file, if it exists.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose*
  implements:
  - System.IDisposable.Dispose
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.FilePath
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.FilePath
  id: FilePath
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: FilePath
  nameWithType: TempFileManager.FilePath
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.FilePath
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: Full path to the file to be deleted.
  example: []
  syntax:
    content: public string FilePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property FilePath As String
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.FilePath*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty
  id: DeleteDirectoryIfEmpty
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: DeleteDirectoryIfEmpty
  nameWithType: TempFileManager.DeleteDirectoryIfEmpty
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    If <code>true</code> a check will be made after the file

    has been deleted, and if no other files exist in the

    same directory that directory will also be deleted.
  example: []
  syntax:
    content: public bool DeleteDirectoryIfEmpty { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property DeleteDirectoryIfEmpty As Boolean
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  id: Locked
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: Locked
  nameWithType: TempFileManager.Locked
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    Set to create (if it does not exist) and then to lock the temp file.

    The locked <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> is available from <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public bool Locked { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Locked As Boolean
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.Locked*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  id: ReadOnly
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: ReadOnly
  nameWithType: TempFileManager.ReadOnly
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: If set to <code>true</code> the managed temp file's readonly file system flag is set.
  remarks: The file must exist or be subsequently locked by setting <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.Locked" data-throw-if-not-resolved="false"></xref> for this property to have any effect.
  example: []
  syntax:
    content: public bool ReadOnly { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property [ReadOnly] As Boolean
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  id: LockedFileStream
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: LockedFileStream
  nameWithType: TempFileManager.LockedFileStream
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    Returns the locked <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> instace if the temp file was previously locked by setting

    <xref href="Sdl.FileTypeSupport.Framework.TempFileManager.Locked" data-throw-if-not-resolved="false"></xref>.
  remarks: The <xref href="System.IO.FileStream" data-throw-if-not-resolved="false"></xref> is opened for read/write access and share read access.
  example: []
  syntax:
    content: public FileStream LockedFileStream { get; set; }
    parameters: []
    return:
      type: System.IO.FileStream
    content.vb: Public Property LockedFileStream As FileStream
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess
  id: FileProcess
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: FileProcess
  nameWithType: TempFileManager.FileProcess
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: >-
    Can be set to a running process' <xref href="System.Diagnostics.Process" data-throw-if-not-resolved="false"></xref> instance so that the managed temp file is

    deleted when the process exits.
  example: []
  syntax:
    content: public Process FileProcess { get; set; }
    parameters: []
    return:
      type: System.Diagnostics.Process
    content.vb: Public Property FileProcess As Process
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete
  id: CancelDelete
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: CancelDelete
  nameWithType: TempFileManager.CancelDelete
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: If <code>true</code> then this managed file is not deleted when this instance is disposed.
  example: []
  syntax:
    content: public bool CancelDelete { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CancelDelete As Boolean
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete*
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Deleted
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.Deleted
  id: Deleted
  parent: Sdl.FileTypeSupport.Framework.TempFileManager
  langs:
  - csharp
  - vb
  name: Deleted
  nameWithType: TempFileManager.Deleted
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Deleted
  type: Property
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: If <code>true</code> then this managed file was sucessfully deleted.
  example: []
  syntax:
    content: public bool Deleted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Deleted As Boolean
  overload: Sdl.FileTypeSupport.Framework.TempFileManager.Deleted*
references:
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_ReadOnly
  name: ReadOnly
  nameWithType: TempFileManager.ReadOnly
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_Locked
  name: Locked
  nameWithType: TempFileManager.Locked
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Locked
- uid: Sdl.FileTypeSupport.Framework.FileJanitor
  commentId: T:Sdl.FileTypeSupport.Framework.FileJanitor
  parent: Sdl.FileTypeSupport.Framework
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.FileJanitor.html
  name: FileJanitor
  nameWithType: FileJanitor
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor
- uid: Sdl.FileTypeSupport.Framework
  commentId: N:Sdl.FileTypeSupport.Framework
  isExternal: true
  href: Sdl.html
  name: Sdl.FileTypeSupport.Framework
  nameWithType: Sdl.FileTypeSupport.Framework
  fullName: Sdl.FileTypeSupport.Framework
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.FileTypeSupport
    name: FileTypeSupport
    isExternal: true
    href: Sdl.FileTypeSupport.html
  - name: .
  - uid: Sdl.FileTypeSupport.Framework
    name: Framework
    isExternal: true
    href: Sdl.FileTypeSupport.Framework.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.FileTypeSupport
    name: FileTypeSupport
    isExternal: true
    href: Sdl.FileTypeSupport.html
  - name: .
  - uid: Sdl.FileTypeSupport.Framework
    name: Framework
    isExternal: true
    href: Sdl.FileTypeSupport.Framework.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)
  commentId: M:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager__ctor_System_String_System_Boolean_
  name: TempFileManager(string, bool)
  nameWithType: TempFileManager.TempFileManager(string, bool)
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TempFileManager(string, bool)
  nameWithType.vb: TempFileManager.New(String, Boolean)
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.New(String, Boolean)
  name.vb: New(String, Boolean)
  spec.csharp:
  - uid: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor(System.String,System.Boolean)
    name: TempFileManager
    isExternal: true
    href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager__ctor_System_String_System_Boolean_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - name: New
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.#ctor
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager__ctor
  name: TempFileManager
  nameWithType: TempFileManager.TempFileManager
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TempFileManager
  nameWithType.vb: TempFileManager.New
  fullName.vb: Sdl.FileTypeSupport.Framework.TempFileManager.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  commentId: P:Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_LockedFileStream
  name: LockedFileStream
  nameWithType: TempFileManager.LockedFileStream
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Finalize*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.Finalize
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_Finalize
  name: ~TempFileManager
  nameWithType: TempFileManager.~TempFileManager
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.~TempFileManager
  spec.csharp:
  - name: "~"
  - uid: Sdl.FileTypeSupport.Framework.TempFileManager.Finalize*
    name: TempFileManager
    isExternal: true
    href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_Finalize
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.Dispose
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_Dispose_System_Boolean_
  name: Dispose
  nameWithType: TempFileManager.Dispose
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Dispose
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_TakeOverManagedFile_Sdl_FileTypeSupport_Framework_TempFileManager__Sdl_FileTypeSupport_Framework_TempFileManager_
  name: TakeOverManagedFile
  nameWithType: TempFileManager.TakeOverManagedFile
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.TakeOverManagedFile
- uid: Sdl.FileTypeSupport.Framework.TempFileManager
  commentId: T:Sdl.FileTypeSupport.Framework.TempFileManager
  parent: Sdl.FileTypeSupport.Framework
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html
  name: TempFileManager
  nameWithType: TempFileManager
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_AutoDeleteNonLockedFiles
  name: AutoDeleteNonLockedFiles
  nameWithType: TempFileManager.AutoDeleteNonLockedFiles
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.AutoDeleteNonLockedFiles
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.FilePath*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.FilePath
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_FilePath
  name: FilePath
  nameWithType: TempFileManager.FilePath
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.FilePath
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_DeleteDirectoryIfEmpty
  name: DeleteDirectoryIfEmpty
  nameWithType: TempFileManager.DeleteDirectoryIfEmpty
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.DeleteDirectoryIfEmpty
- uid: System.IO.FileStream
  commentId: T:System.IO.FileStream
  parent: System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.io.filestream
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Locked*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.Locked
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_Locked
  name: Locked
  nameWithType: TempFileManager.Locked
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Locked
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.IO
    name: IO
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.io
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_ReadOnly
  name: ReadOnly
  nameWithType: TempFileManager.ReadOnly
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.ReadOnly
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_LockedFileStream
  name: LockedFileStream
  nameWithType: TempFileManager.LockedFileStream
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.LockedFileStream
- uid: System.Diagnostics.Process
  commentId: T:System.Diagnostics.Process
  parent: System.Diagnostics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.diagnostics.process
  name: Process
  nameWithType: Process
  fullName: System.Diagnostics.Process
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_FileProcess
  name: FileProcess
  nameWithType: TempFileManager.FileProcess
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.FileProcess
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Diagnostics
    name: Diagnostics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.diagnostics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Diagnostics
    name: Diagnostics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.diagnostics
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_CancelDelete
  name: CancelDelete
  nameWithType: TempFileManager.CancelDelete
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.CancelDelete
- uid: Sdl.FileTypeSupport.Framework.TempFileManager.Deleted*
  commentId: Overload:Sdl.FileTypeSupport.Framework.TempFileManager.Deleted
  isExternal: true
  href: Sdl.FileTypeSupport.Framework.TempFileManager.html#Sdl_FileTypeSupport_Framework_TempFileManager_Deleted
  name: Deleted
  nameWithType: TempFileManager.Deleted
  fullName: Sdl.FileTypeSupport.Framework.TempFileManager.Deleted
