### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
  commentId: T:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
  id: PluginLoadExceptionEventArgs
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.#ctor(Sdl.Core.PluginFramework.IPluginDescriptor,System.Exception)
  - Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception
  - Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor
  langs:
  - csharp
  - vb
  name: PluginLoadExceptionEventArgs
  nameWithType: PluginLoadExceptionEventArgs
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nEventArgs class for the <xref href=\"Sdl.Core.PluginFramework.PluginManager.PluginLoadException\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  syntax:
    content: 'public class PluginLoadExceptionEventArgs : EventArgs'
    content.vb: >-
      Public Class PluginLoadExceptionEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.#ctor(Sdl.Core.PluginFramework.IPluginDescriptor,System.Exception)
  commentId: M:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.#ctor(Sdl.Core.PluginFramework.IPluginDescriptor,System.Exception)
  id: '#ctor(Sdl.Core.PluginFramework.IPluginDescriptor,System.Exception)'
  parent: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
  langs:
  - csharp
  - vb
  name: PluginLoadExceptionEventArgs(IPluginDescriptor, Exception)
  nameWithType: PluginLoadExceptionEventArgs.PluginLoadExceptionEventArgs(IPluginDescriptor, Exception)
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginLoadExceptionEventArgs(Sdl.Core.PluginFramework.IPluginDescriptor, System.Exception)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nInitializes a new instance of the PluginLoadExceptionEventArgs class.\n"
  syntax:
    content: public PluginLoadExceptionEventArgs(IPluginDescriptor pluginDescriptor, Exception exception)
    parameters:
    - id: pluginDescriptor
      type: Sdl.Core.PluginFramework.IPluginDescriptor
      description: The plug-in descriptor of the plug-in that failed to load.
    - id: exception
      type: System.Exception
      description: The exception that occurred while loading the plug-in.
    content.vb: Public Sub New(pluginDescriptor As IPluginDescriptor, exception As Exception)
  overload: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor
  commentId: P:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor
  id: PluginDescriptor
  parent: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
  langs:
  - csharp
  - vb
  name: PluginDescriptor
  nameWithType: PluginLoadExceptionEventArgs.PluginDescriptor
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets the plug-in descriptor of the plug-in that failed to load.\n"
  syntax:
    content: public IPluginDescriptor PluginDescriptor { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor
    content.vb: Public ReadOnly Property PluginDescriptor As IPluginDescriptor
  overload: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception
  commentId: P:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception
  id: Exception
  parent: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: PluginLoadExceptionEventArgs.Exception
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets the exception that occurred when loading the plug-in.\n"
  syntax:
    content: public Exception Exception { get; }
    parameters: []
    return:
      type: System.Exception
    content.vb: Public ReadOnly Property Exception As Exception
  overload: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.#ctor
  isExternal: true
  name: PluginLoadExceptionEventArgs
  nameWithType: PluginLoadExceptionEventArgs.PluginLoadExceptionEventArgs
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginLoadExceptionEventArgs
- uid: Sdl.Core.PluginFramework.IPluginDescriptor
  commentId: T:Sdl.Core.PluginFramework.IPluginDescriptor
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginDescriptor
  nameWithType: IPluginDescriptor
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor*
  commentId: Overload:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor
  isExternal: true
  name: PluginDescriptor
  nameWithType: PluginLoadExceptionEventArgs.PluginDescriptor
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.PluginDescriptor
- uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception*
  commentId: Overload:Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception
  isExternal: true
  name: Exception
  nameWithType: PluginLoadExceptionEventArgs.Exception
  fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs.Exception
