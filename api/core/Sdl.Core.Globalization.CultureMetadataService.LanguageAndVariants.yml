### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
  commentId: T:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
  id: LanguageAndVariants
  parent: Sdl.Core.Globalization.CultureMetadataService
  children:
  - Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.#ctor
  - Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData
  - Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes
  langs:
  - csharp
  - vb
  name: LanguageAndVariants
  nameWithType: LanguageAndVariants
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nStores the information both for a <xref href=\"Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData\" data-throw-if-not-resolved=\"false\"></xref> and \n(if that language is region-neutral) and the codes for\nany regional variants that are supported, primarily to \nallow for <xref href=\"Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync\" data-throw-if-not-resolved=\"false\"></xref> to continue\nto be exposed without needing to retrieve data for all languages.\n"
  remarks: "This avoids either having separate JSON representations \n(storage/transmission) or duplicating information (which is\nbased on <xref href=\"Sdl.Core.Globalization.LanguageData.ParentLanguageCode\" data-throw-if-not-resolved=\"false\"></xref>)"
  syntax:
    content: public class LanguageAndVariants
    content.vb: Public Class LanguageAndVariants
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.#ctor
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.#ctor
  id: '#ctor'
  parent: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
  langs:
  - csharp
  - vb
  name: LanguageAndVariants()
  nameWithType: LanguageAndVariants.LanguageAndVariants()
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageAndVariants()
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  syntax:
    content: public LanguageAndVariants()
    content.vb: Public Sub New
  overload: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData
  commentId: P:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData
  id: LanguageData
  parent: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
  langs:
  - csharp
  - vb
  name: LanguageData
  nameWithType: LanguageAndVariants.LanguageData
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nThe <xref href=\"Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData\" data-throw-if-not-resolved=\"false\"></xref> concerned\n"
  syntax:
    content: public LanguageData LanguageData { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.LanguageData
    content.vb: Public Property LanguageData As LanguageData
  overload: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes
  commentId: P:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes
  id: RegionSpecificLanguageCodes
  parent: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
  langs:
  - csharp
  - vb
  name: RegionSpecificLanguageCodes
  nameWithType: LanguageAndVariants.RegionSpecificLanguageCodes
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nThe codes for any regional variants that <xref href=\"Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData\" data-throw-if-not-resolved=\"false\"></xref> has\n"
  syntax:
    content: public string[] RegionSpecificLanguageCodes { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Property RegionSpecificLanguageCodes As String()
  overload: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.Globalization.CultureMetadataService
  commentId: N:Sdl.Core.Globalization.CultureMetadataService
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataService
  nameWithType: Sdl.Core.Globalization.CultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.#ctor*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.#ctor
  isExternal: true
  name: LanguageAndVariants
  nameWithType: LanguageAndVariants.LanguageAndVariants
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageAndVariants
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData
  isExternal: true
  name: LanguageData
  nameWithType: LanguageAndVariants.LanguageData
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.LanguageData
- uid: Sdl.Core.Globalization.LanguageData
  commentId: T:Sdl.Core.Globalization.LanguageData
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageData
  nameWithType: LanguageData
  fullName: Sdl.Core.Globalization.LanguageData
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes
  isExternal: true
  name: RegionSpecificLanguageCodes
  nameWithType: LanguageAndVariants.RegionSpecificLanguageCodes
  fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants.RegionSpecificLanguageCodes
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
