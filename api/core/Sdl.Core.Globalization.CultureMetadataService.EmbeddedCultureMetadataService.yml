### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  commentId: T:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  id: EmbeddedCultureMetadataService
  parent: Sdl.Core.Globalization.CultureMetadataService
  children:
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.#ctor
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync
  langs:
  - csharp
  - vb
  name: EmbeddedCultureMetadataService
  nameWithType: EmbeddedCultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nImplementation of <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref> that reads embedded JSON, for use\nonly in desktop projects when required and/or test scenarios\n"
  syntax:
    content: 'public class EmbeddedCultureMetadataService : ICultureMetadataService'
    content.vb: >-
      Public Class EmbeddedCultureMetadataService
          Implements ICultureMetadataService
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.#ctor
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.#ctor
  id: '#ctor'
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: EmbeddedCultureMetadataService()
  nameWithType: EmbeddedCultureMetadataService.EmbeddedCultureMetadataService()
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.EmbeddedCultureMetadataService()
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nConstrutor, reads data from embedded JSON\n"
  syntax:
    content: public EmbeddedCultureMetadataService()
    content.vb: Public Sub New
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync
  id: GetVersionAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetVersionAsync()
  nameWithType: EmbeddedCultureMetadataService.GetVersionAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<string> GetVersionAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetVersionAsync As Task(Of String)
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync(System.String,System.String)
  id: GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String, String)
  nameWithType: EmbeddedCultureMetadataService.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageAndVariants> GetLanguageAsync(string languageCodeInProduct, string productId)
    parameters:
    - id: languageCodeInProduct
      type: System.String
    - id: productId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants}
    content.vb: Public Function GetLanguageAsync(languageCodeInProduct As String, productId As String) As Task(Of LanguageAndVariants)
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync(System.String[])
  id: GetLanguagesAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetLanguagesAsync(String[])
  nameWithType: EmbeddedCultureMetadataService.GetLanguagesAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public virtual Task<LanguageAndVariants[]> GetLanguagesAsync(string[] languageCodes = null)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
    content.vb: Public Overridable Function GetLanguagesAsync(languageCodes As String() = Nothing) As Task(Of LanguageAndVariants())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  nameWithType.vb: EmbeddedCultureMetadataService.GetLanguagesAsync(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync(System.String())
  name.vb: GetLanguagesAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync
  id: GetNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetNeutralLanguagesAsync()
  nameWithType: EmbeddedCultureMetadataService.GetNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageAndVariants[]> GetNeutralLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
    content.vb: Public Function GetNeutralLanguagesAsync As Task(Of LanguageAndVariants())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync(System.String)
  id: GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetSupportedLanguagesAsync(String)
  nameWithType: EmbeddedCultureMetadataService.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageAndVariants[]> GetSupportedLanguagesAsync(string productId)
    parameters:
    - id: productId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
    content.vb: Public Function GetSupportedLanguagesAsync(productId As String) As Task(Of LanguageAndVariants())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync
  id: GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProductsAsync()
  nameWithType: EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<Product[]> GetAllRegisteredProductsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
    content.vb: Public Function GetAllRegisteredProductsAsync As Task(Of Product())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync(System.String[])
  id: GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetLanguageMetadataAsync(String[])
  nameWithType: EmbeddedCultureMetadataService.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public virtual Task<LanguageMetadata[]> GetLanguageMetadataAsync(string[] languageCodes = null)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Public Overridable Function GetLanguageMetadataAsync(languageCodes As String() = Nothing) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  nameWithType.vb: EmbeddedCultureMetadataService.GetLanguageMetadataAsync(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync(System.String[])
  id: GetNumberMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetNumberMetadataAsync(String[])
  nameWithType: EmbeddedCultureMetadataService.GetNumberMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<NumberMetadata[]> GetNumberMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]}
    content.vb: Public Function GetNumberMetadataAsync(languageCodes As String()) As Task(Of NumberMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  nameWithType.vb: EmbeddedCultureMetadataService.GetNumberMetadataAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync(System.String())
  name.vb: GetNumberMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync
  id: GetUnitDefinitionsAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetUnitDefinitionsAsync()
  nameWithType: EmbeddedCultureMetadataService.GetUnitDefinitionsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<UnitDefinition[]> GetUnitDefinitionsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
    content.vb: Public Function GetUnitDefinitionsAsync As Task(Of UnitDefinition())
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync(System.String[])
  id: GetUnitMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService
  langs:
  - csharp
  - vb
  name: GetUnitMetadataAsync(String[])
  nameWithType: EmbeddedCultureMetadataService.GetUnitMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<Dictionary<string, UnitMetadata[]>> GetUnitMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]}}
    content.vb: Public Function GetUnitMetadataAsync(languageCodes As String()) As Task(Of Dictionary(Of String, UnitMetadata()))
  overload: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  nameWithType.vb: EmbeddedCultureMetadataService.GetUnitMetadataAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync(System.String())
  name.vb: GetUnitMetadataAsync(String())
references:
- uid: Sdl.Core.Globalization.CultureMetadataService
  commentId: N:Sdl.Core.Globalization.CultureMetadataService
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataService
  nameWithType: Sdl.Core.Globalization.CultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  commentId: T:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  parent: Sdl.Core.Globalization.CultureMetadataService
  isExternal: true
  name: ICultureMetadataService
  nameWithType: ICultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.#ctor*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.#ctor
  isExternal: true
  name: EmbeddedCultureMetadataService
  nameWithType: EmbeddedCultureMetadataService.EmbeddedCultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.EmbeddedCultureMetadataService
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync
  isExternal: true
  name: GetVersionAsync
  nameWithType: EmbeddedCultureMetadataService.GetVersionAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetVersionAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetVersionAsync()
  nameWithType: ICultureMetadataService.GetVersionAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
    name: GetVersionAsync
    nameWithType: ICultureMetadataService.GetVersionAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
    name: GetVersionAsync
    nameWithType: ICultureMetadataService.GetVersionAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync
  isExternal: true
  name: GetLanguageAsync
  nameWithType: EmbeddedCultureMetadataService.GetLanguageAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetLanguageAsync(String, String)
  nameWithType: ICultureMetadataService.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
    name: GetLanguageAsync
    nameWithType: ICultureMetadataService.GetLanguageAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
    name: GetLanguageAsync
    nameWithType: ICultureMetadataService.GetLanguageAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageAndVariants>
  nameWithType: Task<LanguageAndVariants>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants>
  nameWithType.vb: Task(Of LanguageAndVariants)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants)
  name.vb: Task(Of LanguageAndVariants)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync
  isExternal: true
  name: GetLanguagesAsync
  nameWithType: EmbeddedCultureMetadataService.GetLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetLanguagesAsync(String[])
  nameWithType: ICultureMetadataService.GetLanguagesAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  nameWithType.vb: ICultureMetadataService.GetLanguagesAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String())
  name.vb: GetLanguagesAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
    name: GetLanguagesAsync
    nameWithType: ICultureMetadataService.GetLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
    name: GetLanguagesAsync
    nameWithType: ICultureMetadataService.GetLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageAndVariants[]>
  nameWithType: Task<LanguageAndVariants[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]>
  nameWithType.vb: Task(Of LanguageAndVariants())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants())
  name.vb: Task(Of LanguageAndVariants())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync
  isExternal: true
  name: GetNeutralLanguagesAsync
  nameWithType: EmbeddedCultureMetadataService.GetNeutralLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNeutralLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetNeutralLanguagesAsync()
  nameWithType: ICultureMetadataService.GetNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
    name: GetNeutralLanguagesAsync
    nameWithType: ICultureMetadataService.GetNeutralLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
    name: GetNeutralLanguagesAsync
    nameWithType: ICultureMetadataService.GetNeutralLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync
  isExternal: true
  name: GetSupportedLanguagesAsync
  nameWithType: EmbeddedCultureMetadataService.GetSupportedLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetSupportedLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetSupportedLanguagesAsync(String)
  nameWithType: ICultureMetadataService.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
    name: GetSupportedLanguagesAsync
    nameWithType: ICultureMetadataService.GetSupportedLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
    name: GetSupportedLanguagesAsync
    nameWithType: ICultureMetadataService.GetSupportedLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync
  isExternal: true
  name: GetAllRegisteredProductsAsync
  nameWithType: EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetAllRegisteredProductsAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetAllRegisteredProductsAsync()
  nameWithType: ICultureMetadataService.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
    name: GetAllRegisteredProductsAsync
    nameWithType: ICultureMetadataService.GetAllRegisteredProductsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
    name: GetAllRegisteredProductsAsync
    nameWithType: ICultureMetadataService.GetAllRegisteredProductsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Product[]>
  nameWithType: Task<Product[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageRegistry.Product[]>
  nameWithType.vb: Task(Of Product())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageRegistry.Product())
  name.vb: Task(Of Product())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync
  isExternal: true
  name: GetLanguageMetadataAsync
  nameWithType: EmbeddedCultureMetadataService.GetLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetLanguageMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetLanguageMetadataAsync(String[])
  nameWithType: ICultureMetadataService.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  nameWithType.vb: ICultureMetadataService.GetLanguageMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
    name: GetLanguageMetadataAsync
    nameWithType: ICultureMetadataService.GetLanguageMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
    name: GetLanguageMetadataAsync
    nameWithType: ICultureMetadataService.GetLanguageMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageMetadata[]>
  nameWithType: Task<LanguageMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]>
  nameWithType.vb: Task(Of LanguageMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata())
  name.vb: Task(Of LanguageMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync
  isExternal: true
  name: GetNumberMetadataAsync
  nameWithType: EmbeddedCultureMetadataService.GetNumberMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetNumberMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetNumberMetadataAsync(String[])
  nameWithType: ICultureMetadataService.GetNumberMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  nameWithType.vb: ICultureMetadataService.GetNumberMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String())
  name.vb: GetNumberMetadataAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
    name: GetNumberMetadataAsync
    nameWithType: ICultureMetadataService.GetNumberMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
    name: GetNumberMetadataAsync
    nameWithType: ICultureMetadataService.GetNumberMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NumberMetadata[]>
  nameWithType: Task<NumberMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]>
  nameWithType.vb: Task(Of NumberMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.NumberMetadata.NumberMetadata())
  name.vb: Task(Of NumberMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync
  isExternal: true
  name: GetUnitDefinitionsAsync
  nameWithType: EmbeddedCultureMetadataService.GetUnitDefinitionsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitDefinitionsAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetUnitDefinitionsAsync()
  nameWithType: ICultureMetadataService.GetUnitDefinitionsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
    name: GetUnitDefinitionsAsync
    nameWithType: ICultureMetadataService.GetUnitDefinitionsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
    name: GetUnitDefinitionsAsync
    nameWithType: ICultureMetadataService.GetUnitDefinitionsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitDefinition[]>
  nameWithType: Task<UnitDefinition[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]>
  nameWithType.vb: Task(Of UnitDefinition())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitDefinition.UnitDefinition())
  name.vb: Task(Of UnitDefinition())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync
  isExternal: true
  name: GetUnitMetadataAsync
  nameWithType: EmbeddedCultureMetadataService.GetUnitMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.EmbeddedCultureMetadataService.GetUnitMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  isExternal: true
  name: GetUnitMetadataAsync(String[])
  nameWithType: ICultureMetadataService.GetUnitMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  nameWithType.vb: ICultureMetadataService.GetUnitMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String())
  name.vb: GetUnitMetadataAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
    name: GetUnitMetadataAsync
    nameWithType: ICultureMetadataService.GetUnitMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
    name: GetUnitMetadataAsync
    nameWithType: ICultureMetadataService.GetUnitMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<String, UnitMetadata[]>>
  nameWithType: Task<Dictionary<String, UnitMetadata[]>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String, Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]>>
  nameWithType.vb: Task(Of Dictionary(Of String, UnitMetadata()))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of System.String, Sdl.Core.Globalization.UnitMetadata.UnitMetadata()))
  name.vb: Task(Of Dictionary(Of String, UnitMetadata()))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
