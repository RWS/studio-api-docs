### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.LanguageData
  commentId: T:Sdl.Core.Globalization.LanguageData
  id: LanguageData
  parent: Sdl.Core.Globalization
  children:
  - Sdl.Core.Globalization.LanguageData.#ctor
  - Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  - Sdl.Core.Globalization.LanguageData.Direction
  - Sdl.Core.Globalization.LanguageData.EnglishName
  - Sdl.Core.Globalization.LanguageData.IsNeutral
  - Sdl.Core.Globalization.LanguageData.LanguageCode
  - Sdl.Core.Globalization.LanguageData.LanguageGroup
  - Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  - Sdl.Core.Globalization.LanguageData.Script
  - Sdl.Core.Globalization.LanguageData.SupportedProducts
  langs:
  - csharp
  - vb
  name: LanguageData
  nameWithType: LanguageData
  fullName: Sdl.Core.Globalization.LanguageData
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nAllows serialization of data exposed by <xref href=\"Sdl.Core.Globalization.LanguageBase\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public class LanguageData
    content.vb: Public Class LanguageData
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.Core.Globalization.LanguageBase
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.LanguageData.#ctor
  commentId: M:Sdl.Core.Globalization.LanguageData.#ctor
  id: '#ctor'
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: LanguageData()
  nameWithType: LanguageData.LanguageData()
  fullName: Sdl.Core.Globalization.LanguageData.LanguageData()
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  syntax:
    content: public LanguageData()
    content.vb: Public Sub New
  overload: Sdl.Core.Globalization.LanguageData.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.LanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageData.LanguageCode
  id: LanguageCode
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: LanguageCode
  nameWithType: LanguageData.LanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.LanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nThe ISO formatted code corresponding to the Language\n"
  syntax:
    content: public virtual string LanguageCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property LanguageCode As String
  overload: Sdl.Core.Globalization.LanguageData.LanguageCode*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.Core.Globalization.LanguageData.EnglishName
  commentId: P:Sdl.Core.Globalization.LanguageData.EnglishName
  id: EnglishName
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: EnglishName
  nameWithType: LanguageData.EnglishName
  fullName: Sdl.Core.Globalization.LanguageData.EnglishName
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nEnglish name of the language;\n"
  syntax:
    content: public string EnglishName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property EnglishName As String
  overload: Sdl.Core.Globalization.LanguageData.EnglishName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.IsNeutral
  commentId: P:Sdl.Core.Globalization.LanguageData.IsNeutral
  id: IsNeutral
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: IsNeutral
  nameWithType: LanguageData.IsNeutral
  fullName: Sdl.Core.Globalization.LanguageData.IsNeutral
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nMarks a neutral language\n"
  syntax:
    content: public bool IsNeutral { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsNeutral As Boolean
  overload: Sdl.Core.Globalization.LanguageData.IsNeutral*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.Direction
  commentId: P:Sdl.Core.Globalization.LanguageData.Direction
  id: Direction
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: LanguageData.Direction
  fullName: Sdl.Core.Globalization.LanguageData.Direction
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nMarks the direction of the language, can be &quot;ltr&quot;-left-to-right or &quot;rtl&quot;-right-to-left\n"
  syntax:
    content: public string Direction { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Direction As String
  overload: Sdl.Core.Globalization.LanguageData.Direction*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  id: ParentLanguageCode
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: ParentLanguageCode
  nameWithType: LanguageData.ParentLanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nISO code of the parent language\n"
  syntax:
    content: public string ParentLanguageCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ParentLanguageCode As String
  overload: Sdl.Core.Globalization.LanguageData.ParentLanguageCode*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  id: DefaultSpecificLanguageCode
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: DefaultSpecificLanguageCode
  nameWithType: LanguageData.DefaultSpecificLanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nISO code of the default specific culture, used mostly in serialization/deserialization\n"
  syntax:
    content: public string DefaultSpecificLanguageCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property DefaultSpecificLanguageCode As String
  overload: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.Script
  commentId: P:Sdl.Core.Globalization.LanguageData.Script
  id: Script
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: Script
  nameWithType: LanguageData.Script
  fullName: Sdl.Core.Globalization.LanguageData.Script
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nThe language writing script (E.g.:Latn, Cyrl).\n"
  syntax:
    content: public string Script { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Script As String
  overload: Sdl.Core.Globalization.LanguageData.Script*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.SupportedProducts
  commentId: P:Sdl.Core.Globalization.LanguageData.SupportedProducts
  id: SupportedProducts
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: SupportedProducts
  nameWithType: LanguageData.SupportedProducts
  fullName: Sdl.Core.Globalization.LanguageData.SupportedProducts
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nDictionary of supported products and their respective alternative language codes\n"
  syntax:
    content: public Dictionary<Product, List<AlternativeLanguageCode>> SupportedProducts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{Sdl.Core.Globalization.LanguageRegistry.Product,System.Collections.Generic.List{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
    content.vb: Public Property SupportedProducts As Dictionary(Of Product, List(Of AlternativeLanguageCode))
  overload: Sdl.Core.Globalization.LanguageData.SupportedProducts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageData.LanguageGroup
  commentId: P:Sdl.Core.Globalization.LanguageData.LanguageGroup
  id: LanguageGroup
  parent: Sdl.Core.Globalization.LanguageData
  langs:
  - csharp
  - vb
  name: LanguageGroup
  nameWithType: LanguageData.LanguageGroup
  fullName: Sdl.Core.Globalization.LanguageData.LanguageGroup
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nGroup used for categorizing language. Null if unknown or\nif defined in a parent language. See https://confluence.sdl.com/display/LCC/Language+Groups\n"
  syntax:
    content: public string LanguageGroup { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LanguageGroup As String
  overload: Sdl.Core.Globalization.LanguageData.LanguageGroup*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.LanguageData.#ctor*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.#ctor
  isExternal: true
  name: LanguageData
  nameWithType: LanguageData.LanguageData
  fullName: Sdl.Core.Globalization.LanguageData.LanguageData
- uid: Sdl.Core.Globalization.LanguageData.LanguageCode*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.LanguageCode
  isExternal: true
  name: LanguageCode
  nameWithType: LanguageData.LanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.LanguageCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.Globalization.LanguageData.EnglishName*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.EnglishName
  isExternal: true
  name: EnglishName
  nameWithType: LanguageData.EnglishName
  fullName: Sdl.Core.Globalization.LanguageData.EnglishName
- uid: Sdl.Core.Globalization.LanguageData.IsNeutral*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.IsNeutral
  isExternal: true
  name: IsNeutral
  nameWithType: LanguageData.IsNeutral
  fullName: Sdl.Core.Globalization.LanguageData.IsNeutral
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.Globalization.LanguageData.Direction*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.Direction
  isExternal: true
  name: Direction
  nameWithType: LanguageData.Direction
  fullName: Sdl.Core.Globalization.LanguageData.Direction
- uid: Sdl.Core.Globalization.LanguageData.ParentLanguageCode*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  isExternal: true
  name: ParentLanguageCode
  nameWithType: LanguageData.ParentLanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.ParentLanguageCode
- uid: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  isExternal: true
  name: DefaultSpecificLanguageCode
  nameWithType: LanguageData.DefaultSpecificLanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
- uid: Sdl.Core.Globalization.LanguageData.Script*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.Script
  isExternal: true
  name: Script
  nameWithType: LanguageData.Script
  fullName: Sdl.Core.Globalization.LanguageData.Script
- uid: Sdl.Core.Globalization.LanguageData.SupportedProducts*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.SupportedProducts
  isExternal: true
  name: SupportedProducts
  nameWithType: LanguageData.SupportedProducts
  fullName: Sdl.Core.Globalization.LanguageData.SupportedProducts
- uid: System.Collections.Generic.Dictionary{Sdl.Core.Globalization.LanguageRegistry.Product,System.Collections.Generic.List{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  commentId: T:System.Collections.Generic.Dictionary{Sdl.Core.Globalization.LanguageRegistry.Product,System.Collections.Generic.List{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Product, List<AlternativeLanguageCode>>
  nameWithType: Dictionary<Product, List<AlternativeLanguageCode>>
  fullName: System.Collections.Generic.Dictionary<Sdl.Core.Globalization.LanguageRegistry.Product, System.Collections.Generic.List<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>>
  nameWithType.vb: Dictionary(Of Product, List(Of AlternativeLanguageCode))
  fullName.vb: System.Collections.Generic.Dictionary(Of Sdl.Core.Globalization.LanguageRegistry.Product, System.Collections.Generic.List(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode))
  name.vb: Dictionary(Of Product, List(Of AlternativeLanguageCode))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Globalization.LanguageData.LanguageGroup*
  commentId: Overload:Sdl.Core.Globalization.LanguageData.LanguageGroup
  isExternal: true
  name: LanguageGroup
  nameWithType: LanguageData.LanguageGroup
  fullName: Sdl.Core.Globalization.LanguageData.LanguageGroup
