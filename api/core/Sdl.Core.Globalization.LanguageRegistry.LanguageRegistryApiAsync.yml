### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  id: LanguageRegistryApiAsync
  parent: Sdl.Core.Globalization.LanguageRegistry
  children:
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync(System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String,System.Boolean)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync(System.String[])
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync(System.String,System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync(System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject(Sdl.Core.Globalization.LanguageDataContainer)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance(Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync)
  langs:
  - csharp
  - vb
  name: LanguageRegistryApiAsync
  nameWithType: LanguageRegistryApiAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nApi providing all the LanguageRegistry operations\n"
  syntax:
    content: public class LanguageRegistryApiAsync
    content.vb: Public Class LanguageRegistryApiAsync
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance(Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance(Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync)
  id: SetCompatibilityInstance(Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: SetCompatibilityInstance(LanguageRegistryApiAsync)
  nameWithType: LanguageRegistryApiAsync.SetCompatibilityInstance(LanguageRegistryApiAsync)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance(Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\n\n"
  syntax:
    content: protected static void SetCompatibilityInstance(LanguageRegistryApiAsync instance)
    parameters:
    - id: instance
      type: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
    content.vb: Protected Shared Sub SetCompatibilityInstance(instance As LanguageRegistryApiAsync)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: '#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)'
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: LanguageRegistryApiAsync(ICultureMetadataManager)
  nameWithType: LanguageRegistryApiAsync.LanguageRegistryApiAsync(ICultureMetadataManager)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.LanguageRegistryApiAsync(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\n\n"
  syntax:
    content: public LanguageRegistryApiAsync(ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    content.vb: Public Sub New(cultureMetadataManager As ICultureMetadataManager)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync
  id: GetAllLanguagesAsync
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetAllLanguagesAsync()
  nameWithType: LanguageRegistryApiAsync.GetAllLanguagesAsync()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all the languages registered\n"
  syntax:
    content: public Task<IList<LanguageBase>> GetAllLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
      description: List with all available languages
    content.vb: Public Function GetAllLanguagesAsync As Task(Of IList(Of LanguageBase))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync
  id: GetAllNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetAllNeutralLanguagesAsync()
  nameWithType: LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all the neutral languages registered\n"
  syntax:
    content: public Task<IList<LanguageBase>> GetAllNeutralLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
      description: List with all the neutral languages
    content.vb: Public Function GetAllNeutralLanguagesAsync As Task(Of IList(Of LanguageBase))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync
  id: GetAllSpecificLanguagesAsync
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetAllSpecificLanguagesAsync()
  nameWithType: LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all the specific languages registered, these are cultures not neutral\n"
  syntax:
    content: public Task<IList<LanguageBase>> GetAllSpecificLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
      description: List with all specific languages
    content.vb: Public Function GetAllSpecificLanguagesAsync As Task(Of IList(Of LanguageBase))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync(System.String[])
  id: GetLanguagesAsync(System.String[])
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetLanguagesAsync(String[])
  nameWithType: LanguageRegistryApiAsync.GetLanguagesAsync(String[])
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets a selection of languages\n"
  syntax:
    content: public Task<IList<LanguageBase>> GetLanguagesAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
    content.vb: Public Function GetLanguagesAsync(languageCodes As String()) As Task(Of IList(Of LanguageBase))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync*
  nameWithType.vb: LanguageRegistryApiAsync.GetLanguagesAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync(System.String())
  name.vb: GetLanguagesAsync(String())
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String,System.String)
  id: GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String, String)
  nameWithType: LanguageRegistryApiAsync.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase> GetLanguageAsync(string alternativeLanguageCode, string productId)
    parameters:
    - id: alternativeLanguageCode
      type: System.String
    - id: productId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
    content.vb: Public Function GetLanguageAsync(alternativeLanguageCode As String, productId As String) As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String,System.Boolean)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String,System.Boolean)
  id: GetLanguageAsync(System.String,System.Boolean)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String, Boolean)
  nameWithType: LanguageRegistryApiAsync.GetLanguageAsync(String, Boolean)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets a language based on a code\n"
  syntax:
    content: public Task<LanguageBase> GetLanguageAsync(string languageCode, bool exceptionIfUnknown = false)
    parameters:
    - id: languageCode
      type: System.String
      description: Searched code
    - id: exceptionIfUnknown
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
      description: Language having the languageCode Code, or exception if not found and flag set
    content.vb: Public Function GetLanguageAsync(languageCode As String, exceptionIfUnknown As Boolean = False) As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync(System.String[])
  id: GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetLanguageMetadataAsync(String[])
  nameWithType: LanguageRegistryApiAsync.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGet <xref href=\"Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the exact codes \nspecified only, or all available if <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodes</code> is null\n"
  syntax:
    content: public Task<LanguageMetadata[]> GetLanguageMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Public Function GetLanguageMetadataAsync(languageCodes As String()) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync*
  nameWithType.vb: LanguageRegistryApiAsync.GetLanguageMetadataAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(System.String[])
  id: GetApplicableLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetApplicableLanguageMetadataAsync(String[])
  nameWithType: LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageMetadata[]> GetApplicableLanguageMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Public Function GetApplicableLanguageMetadataAsync(languageCodes As String()) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync*
  nameWithType.vb: LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync(System.String())
  name.vb: GetApplicableLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync(System.String)
  id: GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetSupportedLanguagesAsync(String)
  nameWithType: LanguageRegistryApiAsync.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets all supported languages for a given product\n"
  syntax:
    content: public Task<IList<LanguageBase>> GetSupportedLanguagesAsync(string productId)
    parameters:
    - id: productId
      type: System.String
      description: Id of the searched product
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
      description: Array of all supported languages for a product
    content.vb: Public Function GetSupportedLanguagesAsync(productId As String) As Task(Of IList(Of LanguageBase))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync
  id: GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProductsAsync()
  nameWithType: LanguageRegistryApiAsync.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nGets a list of all the products supported\n"
  syntax:
    content: public Task<IList<Product>> GetAllRegisteredProductsAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}}
      description: list of Product objects
    content.vb: Public Function GetAllRegisteredProductsAsync As Task(Of IList(Of Product))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync(System.String,System.String)
  id: GetAlternativeLanguageCodesAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetAlternativeLanguageCodesAsync(String, String)
  nameWithType: LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync(String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nReturns the languages code(s) used by the product specified for the\nlanguage code specified - which may be the same as the language code specified,\nor may be one or more alternative codes - or an empty list if the language\nspecified is not supported by the product. \n"
  syntax:
    content: public Task<IList<AlternativeLanguageCode>> GetAlternativeLanguageCodesAsync(string productId, string languageCode)
    parameters:
    - id: productId
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
      description: string that represents the alternative language code for the language and the product given
    content.vb: Public Function GetAlternativeLanguageCodesAsync(productId As String, languageCode As String) As Task(Of IList(Of AlternativeLanguageCode))
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync(System.String,System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync(System.String,System.String,System.String)
  id: GetProductSpecificCodeWithFallbackAsync(System.String,System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: GetProductSpecificCodeWithFallbackAsync(String, String, String)
  nameWithType: LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync(String, String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync(System.String, System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nReturns the best available mapping from sourceProduct to targetProduct for sourceLanguageCode.\nIf sourceLanguage doesn&apos;t have a mapping, it falls back to its parent and the parent&apos;s defaultSpecificLanguage\n"
  syntax:
    content: public Task<(IList<AlternativeLanguageCode> codes, MappingType mappingType)> GetProductSpecificCodeWithFallbackAsync(string sourceProductId, string sourceLanguageCode, string targetProductId)
    parameters:
    - id: sourceProductId
      type: System.String
    - id: sourceLanguageCode
      type: System.String
    - id: targetProductId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode},Sdl.Core.Globalization.LanguageRegistry.MappingType}}
    content.vb: Public Function GetProductSpecificCodeWithFallbackAsync(sourceProductId As String, sourceLanguageCode As String, targetProductId As String) As Task(Of(codes As IList(Of AlternativeLanguageCode), mappingType As MappingType)(Of IList(Of AlternativeLanguageCode), MappingType)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject(Sdl.Core.Globalization.LanguageDataContainer)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject(Sdl.Core.Globalization.LanguageDataContainer)
  id: SerializeObject(Sdl.Core.Globalization.LanguageDataContainer)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: SerializeObject(LanguageDataContainer)
  nameWithType: LanguageRegistryApiAsync.SerializeObject(LanguageDataContainer)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject(Sdl.Core.Globalization.LanguageDataContainer)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\nSerialization of the object to JSON\n"
  syntax:
    content: public static string SerializeObject(LanguageDataContainer container)
    parameters:
    - id: container
      type: Sdl.Core.Globalization.LanguageDataContainer
    return:
      type: System.String
    content.vb: Public Shared Function SerializeObject(container As LanguageDataContainer) As String
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager
  commentId: P:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager
  id: CultureMetadataManager
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  langs:
  - csharp
  - vb
  name: CultureMetadataManager
  nameWithType: LanguageRegistryApiAsync.CultureMetadataManager
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.LanguageRegistry
  summary: "\n\n"
  syntax:
    content: public ICultureMetadataManager CultureMetadataManager { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    content.vb: Public ReadOnly Property CultureMetadataManager As ICultureMetadataManager
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.Globalization.LanguageRegistry
  commentId: N:Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: Sdl.Core.Globalization.LanguageRegistry
  nameWithType: Sdl.Core.Globalization.LanguageRegistry
  fullName: Sdl.Core.Globalization.LanguageRegistry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance
  isExternal: true
  name: SetCompatibilityInstance
  nameWithType: LanguageRegistryApiAsync.SetCompatibilityInstance
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SetCompatibilityInstance
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
  parent: Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: LanguageRegistryApiAsync
  nameWithType: LanguageRegistryApiAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.#ctor*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.#ctor
  isExternal: true
  name: LanguageRegistryApiAsync
  nameWithType: LanguageRegistryApiAsync.LanguageRegistryApiAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.LanguageRegistryApiAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync
  isExternal: true
  name: GetAllLanguagesAsync
  nameWithType: LanguageRegistryApiAsync.GetAllLanguagesAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllLanguagesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<LanguageBase>>
  nameWithType: Task<IList<LanguageBase>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageBase>>
  nameWithType.vb: Task(Of IList(Of LanguageBase))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageBase))
  name.vb: Task(Of IList(Of LanguageBase))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync
  isExternal: true
  name: GetAllNeutralLanguagesAsync
  nameWithType: LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllNeutralLanguagesAsync
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync
  isExternal: true
  name: GetAllSpecificLanguagesAsync
  nameWithType: LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllSpecificLanguagesAsync
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync
  isExternal: true
  name: GetLanguagesAsync
  nameWithType: LanguageRegistryApiAsync.GetLanguagesAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguagesAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync
  isExternal: true
  name: GetLanguageAsync
  nameWithType: LanguageRegistryApiAsync.GetLanguageAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageBase>
  nameWithType: Task<LanguageBase>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageBase>
  nameWithType.vb: Task(Of LanguageBase)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageBase)
  name.vb: Task(Of LanguageBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync
  isExternal: true
  name: GetLanguageMetadataAsync
  nameWithType: LanguageRegistryApiAsync.GetLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageMetadataAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageMetadata[]>
  nameWithType: Task<LanguageMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]>
  nameWithType.vb: Task(Of LanguageMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata())
  name.vb: Task(Of LanguageMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync
  isExternal: true
  name: GetApplicableLanguageMetadataAsync
  nameWithType: LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetApplicableLanguageMetadataAsync
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync
  isExternal: true
  name: GetSupportedLanguagesAsync
  nameWithType: LanguageRegistryApiAsync.GetSupportedLanguagesAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetSupportedLanguagesAsync
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync
  isExternal: true
  name: GetAllRegisteredProductsAsync
  nameWithType: LanguageRegistryApiAsync.GetAllRegisteredProductsAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAllRegisteredProductsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Product>>
  nameWithType: Task<IList<Product>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.Product>>
  nameWithType.vb: Task(Of IList(Of Product))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.Product))
  name.vb: Task(Of IList(Of Product))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync
  isExternal: true
  name: GetAlternativeLanguageCodesAsync
  nameWithType: LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetAlternativeLanguageCodesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<AlternativeLanguageCode>>
  nameWithType: Task<IList<AlternativeLanguageCode>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>>
  nameWithType.vb: Task(Of IList(Of AlternativeLanguageCode))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode))
  name.vb: Task(Of IList(Of AlternativeLanguageCode))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync
  isExternal: true
  name: GetProductSpecificCodeWithFallbackAsync
  nameWithType: LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetProductSpecificCodeWithFallbackAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode},Sdl.Core.Globalization.LanguageRegistry.MappingType}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode},Sdl.Core.Globalization.LanguageRegistry.MappingType}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2)<IList<AlternativeLanguageCode>, MappingType>>
  nameWithType: Task<(T1, T2)<IList<AlternativeLanguageCode>, MappingType>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>, Sdl.Core.Globalization.LanguageRegistry.MappingType>>
  nameWithType.vb: Task(Of (T1, T2)(Of IList(Of AlternativeLanguageCode), MappingType))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode), Sdl.Core.Globalization.LanguageRegistry.MappingType))
  name.vb: Task(Of (T1, T2)(Of IList(Of AlternativeLanguageCode), MappingType))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.LanguageRegistry.MappingType
    name: MappingType
    nameWithType: MappingType
    fullName: Sdl.Core.Globalization.LanguageRegistry.MappingType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.LanguageRegistry.MappingType
    name: MappingType
    nameWithType: MappingType
    fullName: Sdl.Core.Globalization.LanguageRegistry.MappingType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject
  isExternal: true
  name: SerializeObject
  nameWithType: LanguageRegistryApiAsync.SerializeObject
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.SerializeObject
- uid: Sdl.Core.Globalization.LanguageDataContainer
  commentId: T:Sdl.Core.Globalization.LanguageDataContainer
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageDataContainer
  nameWithType: LanguageDataContainer
  fullName: Sdl.Core.Globalization.LanguageDataContainer
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager
  isExternal: true
  name: CultureMetadataManager
  nameWithType: LanguageRegistryApiAsync.CultureMetadataManager
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.CultureMetadataManager
