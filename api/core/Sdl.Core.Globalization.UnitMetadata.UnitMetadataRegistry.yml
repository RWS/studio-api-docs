### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  commentId: T:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  id: UnitMetadataRegistry
  parent: Sdl.Core.Globalization.UnitMetadata
  children:
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync(System.String,System.String)
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync(System.String)
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync(System.String,System.String)
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync(System.String,System.String)
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync(System.String,System.String)
  - Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync(System.String)
  langs:
  - csharp
  - vb
  name: UnitMetadataRegistry
  nameWithType: UnitMetadataRegistry
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nManages the available <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> data \n"
  syntax:
    content: public class UnitMetadataRegistry
    content.vb: Public Class UnitMetadataRegistry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: '#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)'
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: UnitMetadataRegistry(ICultureMetadataManager)
  nameWithType: UnitMetadataRegistry.UnitMetadataRegistry(ICultureMetadataManager)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.UnitMetadataRegistry(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\n\n"
  syntax:
    content: public UnitMetadataRegistry(ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    content.vb: Public Sub New(cultureMetadataManager As ICultureMetadataManager)
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync
  id: GetUnitDefinitionSetAsync
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: GetUnitDefinitionSetAsync()
  nameWithType: UnitMetadataRegistry.GetUnitDefinitionSetAsync()
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nThe complete set of <xref href=\"Sdl.Core.Globalization.UnitDefinition\" data-throw-if-not-resolved=\"false\"></xref> objects \n"
  syntax:
    content: public Task<UnitDefinitionSet> GetUnitDefinitionSetAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet}
    content.vb: Public Function GetUnitDefinitionSetAsync As Task(Of UnitDefinitionSet)
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync(System.String)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync(System.String)
  id: GetUnitMetadataSetAsync(System.String)
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: GetUnitMetadataSetAsync(String)
  nameWithType: UnitMetadataRegistry.GetUnitMetadataSetAsync(String)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\n\n"
  syntax:
    content: public Task<UnitMetadataSet> GetUnitMetadataSetAsync(string langCode)
    parameters:
    - id: langCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet}
    content.vb: Public Function GetUnitMetadataSetAsync(langCode As String) As Task(Of UnitMetadataSet)
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync(System.String,System.String)
  id: GetUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: GetUnitMetadataFromLabelAsync(String, String)
  nameWithType: UnitMetadataRegistry.GetUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nReturns the first <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> corresponding to <code data-dev-comment-type=\"paramref\" class=\"paramref\">label</code>\nfor the culture <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCode</code>, or if none found, for the parent\nculture if available, or null if no match is found.\n"
  syntax:
    content: public Task<UnitMetadata> GetUnitMetadataFromLabelAsync(string label, string languageCode)
    parameters:
    - id: label
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
    content.vb: Public Function GetUnitMetadataFromLabelAsync(label As String, languageCode As String) As Task(Of UnitMetadata)
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync(System.String,System.String)
  id: AllUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: AllUnitMetadataFromLabelAsync(String, String)
  nameWithType: UnitMetadataRegistry.AllUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nReturns all <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> corresponding to <code data-dev-comment-type=\"paramref\" class=\"paramref\">label</code>\nfor the culture <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCode</code>, or if none found, for the parent\nculture if available, or an empty list if no match is found.\n"
  remarks: >-
    For some cultures, a given label might be used for two or more different units, e.g. as a top-level default label for

    one unit, and a language-specific plural form for another unit.
  syntax:
    content: public Task<List<UnitMetadata>> AllUnitMetadataFromLabelAsync(string label, string languageCode)
    parameters:
    - id: label
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Public Function AllUnitMetadataFromLabelAsync(label As String, languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync(System.String)
  id: GetAllMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: GetAllMetadataAsync(String)
  nameWithType: UnitMetadataRegistry.GetAllMetadataAsync(String)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nProvide all metadata that should be recognised in the language for\nall units, from all levels of hierarchy. Note: may therefore return\nmultiple <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> objects with the same <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata.UnitKey\" data-throw-if-not-resolved=\"false\"></xref> .\nRespects the <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata.DoNotInherit\" data-throw-if-not-resolved=\"false\"></xref> flag, i.e. objects above\nwill not be included.\n"
  syntax:
    content: public Task<List<UnitMetadata>> GetAllMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Public Function GetAllMetadataAsync(languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync(System.String,System.String)
  id: GetPreferredLabelValueSetAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: GetPreferredLabelValueSetAsync(String, String)
  nameWithType: UnitMetadataRegistry.GetPreferredLabelValueSetAsync(String, String)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nReturns the preferred <xref href=\"Sdl.Core.Globalization.UnitMetadata.LabelValueSet\" data-throw-if-not-resolved=\"false\"></xref> to use for the unit\nspecified in the language specified.\n"
  syntax:
    content: public Task<LabelValueSet> GetPreferredLabelValueSetAsync(string unitKey, string languageCode)
    parameters:
    - id: unitKey
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
    content.vb: Public Function GetPreferredLabelValueSetAsync(unitKey As String, languageCode As String) As Task(Of LabelValueSet)
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync(System.String,System.String)
  id: GetUnitMetadataFromKeyAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry
  langs:
  - csharp
  - vb
  name: GetUnitMetadataFromKeyAsync(String, String)
  nameWithType: UnitMetadataRegistry.GetUnitMetadataFromKeyAsync(String, String)
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.UnitMetadata
  summary: "\nReturns the most language-specific <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> available for\nthe unit and language specified, checking parent language and top-level/neutral metadata\n"
  syntax:
    content: public Task<(UnitMetadata unitMetadata, string languageCodeFound)> GetUnitMetadataFromKeyAsync(string unitKey, string languageCode)
    parameters:
    - id: unitKey
      type: System.String
    - id: languageCode
      type: System.String
      description: The language to check
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
    content.vb: Public Function GetUnitMetadataFromKeyAsync(unitKey As String, languageCode As String) As Task(Of(unitMetadata As UnitMetadata, languageCodeFound As String)(Of UnitMetadata , String))
  overload: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.Globalization.UnitMetadata
  commentId: N:Sdl.Core.Globalization.UnitMetadata
  isExternal: true
  name: Sdl.Core.Globalization.UnitMetadata
  nameWithType: Sdl.Core.Globalization.UnitMetadata
  fullName: Sdl.Core.Globalization.UnitMetadata
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.#ctor*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.#ctor
  isExternal: true
  name: UnitMetadataRegistry
  nameWithType: UnitMetadataRegistry.UnitMetadataRegistry
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.UnitMetadataRegistry
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync
  isExternal: true
  name: GetUnitDefinitionSetAsync
  nameWithType: UnitMetadataRegistry.GetUnitDefinitionSetAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitDefinitionSetAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitDefinitionSet>
  nameWithType: Task<UnitDefinitionSet>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet>
  nameWithType.vb: Task(Of UnitDefinitionSet)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet)
  name.vb: Task(Of UnitDefinitionSet)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet
    name: UnitDefinitionSet
    nameWithType: UnitDefinitionSet
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet
    name: UnitDefinitionSet
    nameWithType: UnitDefinitionSet
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinitionSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync
  isExternal: true
  name: GetUnitMetadataSetAsync
  nameWithType: UnitMetadataRegistry.GetUnitMetadataSetAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataSetAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitMetadataSet>
  nameWithType: Task<UnitMetadataSet>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet>
  nameWithType.vb: Task(Of UnitMetadataSet)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet)
  name.vb: Task(Of UnitMetadataSet)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet
    name: UnitMetadataSet
    nameWithType: UnitMetadataSet
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet
    name: UnitMetadataSet
    nameWithType: UnitMetadataSet
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync
  isExternal: true
  name: GetUnitMetadataFromLabelAsync
  nameWithType: UnitMetadataRegistry.GetUnitMetadataFromLabelAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromLabelAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitMetadata>
  nameWithType: Task<UnitMetadata>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.UnitMetadata>
  nameWithType.vb: Task(Of UnitMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata)
  name.vb: Task(Of UnitMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync
  isExternal: true
  name: AllUnitMetadataFromLabelAsync
  nameWithType: UnitMetadataRegistry.AllUnitMetadataFromLabelAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.AllUnitMetadataFromLabelAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<UnitMetadata>>
  nameWithType: Task<List<UnitMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Sdl.Core.Globalization.UnitMetadata.UnitMetadata>>
  nameWithType.vb: Task(Of List(Of UnitMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata))
  name.vb: Task(Of List(Of UnitMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync
  isExternal: true
  name: GetAllMetadataAsync
  nameWithType: UnitMetadataRegistry.GetAllMetadataAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetAllMetadataAsync
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync
  isExternal: true
  name: GetPreferredLabelValueSetAsync
  nameWithType: UnitMetadataRegistry.GetPreferredLabelValueSetAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetPreferredLabelValueSetAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LabelValueSet>
  nameWithType: Task<LabelValueSet>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.LabelValueSet>
  nameWithType.vb: Task(Of LabelValueSet)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.LabelValueSet)
  name.vb: Task(Of LabelValueSet)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    name: LabelValueSet
    nameWithType: LabelValueSet
    fullName: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    name: LabelValueSet
    nameWithType: LabelValueSet
    fullName: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync*
  commentId: Overload:Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync
  isExternal: true
  name: GetUnitMetadataFromKeyAsync
  nameWithType: UnitMetadataRegistry.GetUnitMetadataFromKeyAsync
  fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadataRegistry.GetUnitMetadataFromKeyAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2)<UnitMetadata, String>>
  nameWithType: Task<(T1, T2)<UnitMetadata, String>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<Sdl.Core.Globalization.UnitMetadata.UnitMetadata, System.String>>
  nameWithType.vb: Task(Of (T1, T2)(Of UnitMetadata, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata, System.String))
  name.vb: Task(Of (T1, T2)(Of UnitMetadata, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
