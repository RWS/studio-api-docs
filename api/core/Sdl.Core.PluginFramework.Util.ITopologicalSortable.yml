### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  commentId: T:Sdl.Core.PluginFramework.Util.ITopologicalSortable
  id: ITopologicalSortable
  parent: Sdl.Core.PluginFramework.Util
  children:
  - Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id
  - Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter
  - Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore
  - Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority
  langs:
  - csharp
  - vb
  name: ITopologicalSortable
  nameWithType: ITopologicalSortable
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nInterface to be implemented by classes that need to support sorting topologically using the <xref href=\"Sdl.Core.PluginFramework.Util.TopologicalSort%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  syntax:
    content: public interface ITopologicalSortable
    content.vb: Public Interface ITopologicalSortable
  seealso:
  - linkId: Sdl.Core.PluginFramework.Util.TopologicalSort`1
    commentId: T:Sdl.Core.PluginFramework.Util.TopologicalSort`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id
  commentId: P:Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id
  id: Id
  parent: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ITopologicalSortable.Id
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nGets the id of the item.\n"
  syntax:
    content: string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Id As String
  overload: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore
  commentId: P:Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore
  id: InsertBefore
  parent: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  langs:
  - csharp
  - vb
  name: InsertBefore
  nameWithType: ITopologicalSortable.InsertBefore
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nReturns the id of the item before which this item needs to appear. Can be null.\n"
  syntax:
    content: string InsertBefore { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property InsertBefore As String
  overload: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter
  commentId: P:Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter
  id: InsertAfter
  parent: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  langs:
  - csharp
  - vb
  name: InsertAfter
  nameWithType: ITopologicalSortable.InsertAfter
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nReturns the id of the item after which this item needs to appear. Can be null.\n"
  syntax:
    content: string InsertAfter { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property InsertAfter As String
  overload: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority
  commentId: P:Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority
  id: Priority
  parent: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: ITopologicalSortable.Priority
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nReturns the sorting priority of this item.\n"
  remarks: >-
    When two items specify the same criteria, for example InsertBefore=x, then the item with the highest priority, will be inserted

    right before x, followed by the item with the lower priority.
  syntax:
    content: int Priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Priority As Integer
  overload: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework.Util
  commentId: N:Sdl.Core.PluginFramework.Util
  isExternal: true
  name: Sdl.Core.PluginFramework.Util
  nameWithType: Sdl.Core.PluginFramework.Util
  fullName: Sdl.Core.PluginFramework.Util
- uid: Sdl.Core.PluginFramework.Util.TopologicalSort`1
  commentId: T:Sdl.Core.PluginFramework.Util.TopologicalSort`1
  isExternal: true
  name: TopologicalSort<T>
  nameWithType: TopologicalSort<T>
  fullName: Sdl.Core.PluginFramework.Util.TopologicalSort<T>
  nameWithType.vb: TopologicalSort(Of T)
  fullName.vb: Sdl.Core.PluginFramework.Util.TopologicalSort(Of T)
  name.vb: TopologicalSort(Of T)
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.Util.TopologicalSort`1
    name: TopologicalSort
    nameWithType: TopologicalSort
    fullName: Sdl.Core.PluginFramework.Util.TopologicalSort
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.PluginFramework.Util.TopologicalSort`1
    name: TopologicalSort
    nameWithType: TopologicalSort
    fullName: Sdl.Core.PluginFramework.Util.TopologicalSort
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id*
  commentId: Overload:Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id
  isExternal: true
  name: Id
  nameWithType: ITopologicalSortable.Id
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore*
  commentId: Overload:Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore
  isExternal: true
  name: InsertBefore
  nameWithType: ITopologicalSortable.InsertBefore
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertBefore
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter*
  commentId: Overload:Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter
  isExternal: true
  name: InsertAfter
  nameWithType: ITopologicalSortable.InsertAfter
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.InsertAfter
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority*
  commentId: Overload:Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority
  isExternal: true
  name: Priority
  nameWithType: ITopologicalSortable.Priority
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable.Priority
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
