### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  commentId: T:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  id: ICultureMetadataService
  parent: Sdl.Core.Globalization.CultureMetadataService
  children:
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  langs:
  - csharp
  - vb
  name: ICultureMetadataService
  nameWithType: ICultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  type: Interface
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nProvides metadata about languages and their related properties. In particular, \nprovides data for a refactored <xref href=\"Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync\" data-throw-if-not-resolved=\"false\"></xref> that allows\n<xref href=\"Sdl.Core.Globalization.LanguageBase\" data-throw-if-not-resolved=\"false\"></xref> et al to continue to be used, but without having all the\nmetadata embedded, and with support for <xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: See <a href="https://confluence.sdl.com/display/LPD/Synchronising+language+metadata+across+applications%2C+services+and+platforms">Synchronising language metadata across applications, services and platforms</a> for more details
  syntax:
    content: public interface ICultureMetadataService
    content.vb: Public Interface ICultureMetadataService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  id: GetVersionAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetVersionAsync()
  nameWithType: ICultureMetadataService.GetVersionAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns the version of the data served. Consumers can use this to \ninvalidate caches.\n"
  syntax:
    content: Task<string> GetVersionAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function GetVersionAsync As Task(Of String)
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync*
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  id: GetLanguagesAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetLanguagesAsync(String[])
  nameWithType: ICultureMetadataService.GetLanguagesAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants\" data-throw-if-not-resolved=\"false\"></xref> either for all\nsupported languages, or for the subset of codes specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodes</code>.\nAny unrecognized language code is omitted from the results.\n"
  syntax:
    content: Task<LanguageAndVariants[]> GetLanguagesAsync(string[] languageCodes = null)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
    content.vb: Function GetLanguagesAsync(languageCodes As String() = Nothing) As Task(Of LanguageAndVariants())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync*
  nameWithType.vb: ICultureMetadataService.GetLanguagesAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String())
  name.vb: GetLanguagesAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  id: GetNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetNeutralLanguagesAsync()
  nameWithType: ICultureMetadataService.GetNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants\" data-throw-if-not-resolved=\"false\"></xref> for all\nneutral languages\n"
  syntax:
    content: Task<LanguageAndVariants[]> GetNeutralLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
    content.vb: Function GetNeutralLanguagesAsync As Task(Of LanguageAndVariants())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync*
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String,System.String)
  id: GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String, String)
  nameWithType: ICultureMetadataService.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nGets a language based on the code used in a specific product\n"
  remarks: "If <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodeInProduct</code> matches the <xref href=\"Sdl.Core.Globalization.LanguageData.LanguageCode\" data-throw-if-not-resolved=\"false\"></xref>\nof a <xref href=\"Sdl.Core.Globalization.LanguageData\" data-throw-if-not-resolved=\"false\"></xref> returned by <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"Sdl.Core.Globalization.LanguageData.SupportedProducts\" data-throw-if-not-resolved=\"false\"></xref>\nincludes an item whose <xref href=\"Sdl.Core.Globalization.LanguageRegistry.Product.ProductId\" data-throw-if-not-resolved=\"false\"></xref> matches <code data-dev-comment-type=\"paramref\" class=\"paramref\">productId</code>, it will be returned.\nOtherwise, the <xref href=\"Sdl.Core.Globalization.LanguageData\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"Sdl.Core.Globalization.LanguageData.SupportedProducts\" data-throw-if-not-resolved=\"false\"></xref> includes an item with \nmatching <xref href=\"Sdl.Core.Globalization.LanguageRegistry.Product.ProductId\" data-throw-if-not-resolved=\"false\"></xref> as well as an <xref href=\"Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode\" data-throw-if-not-resolved=\"false\"></xref> matching \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodeInProduct</code> will be returned, if found.\n"
  syntax:
    content: Task<LanguageAndVariants> GetLanguageAsync(string languageCodeInProduct, string productId)
    parameters:
    - id: languageCodeInProduct
      type: System.String
      description: Code as used in product
    - id: productId
      type: System.String
      description: ID of product
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants}
      description: Language corresponding to that code for the given product
    content.vb: Function GetLanguageAsync(languageCodeInProduct As String, productId As String) As Task(Of LanguageAndVariants)
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync*
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  id: GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetSupportedLanguagesAsync(String)
  nameWithType: ICultureMetadataService.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants\" data-throw-if-not-resolved=\"false\"></xref> for all languages \nsupported in the specified product.\n"
  syntax:
    content: Task<LanguageAndVariants[]> GetSupportedLanguagesAsync(string productId)
    parameters:
    - id: productId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
    content.vb: Function GetSupportedLanguagesAsync(productId As String) As Task(Of LanguageAndVariants())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync*
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  id: GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProductsAsync()
  nameWithType: ICultureMetadataService.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns an array of any product mentioned as supported for any language.\n"
  syntax:
    content: Task<Product[]> GetAllRegisteredProductsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
    content.vb: Function GetAllRegisteredProductsAsync As Task(Of Product())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync*
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  id: GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetLanguageMetadataAsync(String[])
  nameWithType: ICultureMetadataService.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns <xref href=\"Sdl.Core.Globalization.LanguageMetadata\" data-throw-if-not-resolved=\"false\"></xref> either for all supported\nlanguages (when <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodes</code> is null) or for the subset of codes specified\nin <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodes</code>. Any unrecognized language code is omitted from the results.\n"
  remarks: If codes are specified that are not known, they are omitted from the results.
  syntax:
    content: Task<LanguageMetadata[]> GetLanguageMetadataAsync(string[] languageCodes = null)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Function GetLanguageMetadataAsync(languageCodes As String() = Nothing) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync*
  nameWithType.vb: ICultureMetadataService.GetLanguageMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  id: GetNumberMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetNumberMetadataAsync(String[])
  nameWithType: ICultureMetadataService.GetNumberMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns <xref href=\"Sdl.Core.Globalization.NumberMetadata.NumberMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the \nlanguages specified only, if specific data for them exists\n"
  syntax:
    content: Task<NumberMetadata[]> GetNumberMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]}
    content.vb: Function GetNumberMetadataAsync(languageCodes As String()) As Task(Of NumberMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync*
  nameWithType.vb: ICultureMetadataService.GetNumberMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync(System.String())
  name.vb: GetNumberMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  id: GetUnitDefinitionsAsync
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetUnitDefinitionsAsync()
  nameWithType: ICultureMetadataService.GetUnitDefinitionsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nReturns the complete set of supported unit definitions\n"
  syntax:
    content: Task<UnitDefinition[]> GetUnitDefinitionsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
    content.vb: Function GetUnitDefinitionsAsync As Task(Of UnitDefinition())
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync*
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  id: GetUnitMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService
  langs:
  - csharp
  - vb
  name: GetUnitMetadataAsync(String[])
  nameWithType: ICultureMetadataService.GetUnitMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataService
  summary: "\nGets unit metadata for the specific language code(s), if any\n"
  syntax:
    content: Task<Dictionary<string, UnitMetadata[]>> GetUnitMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]}}
    content.vb: Function GetUnitMetadataAsync(languageCodes As String()) As Task(Of Dictionary(Of String, UnitMetadata()))
  overload: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync*
  nameWithType.vb: ICultureMetadataService.GetUnitMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync(System.String())
  name.vb: GetUnitMetadataAsync(String())
references:
- uid: Sdl.Core.Globalization.CultureMetadataService
  commentId: N:Sdl.Core.Globalization.CultureMetadataService
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataService
  nameWithType: Sdl.Core.Globalization.CultureMetadataService
  fullName: Sdl.Core.Globalization.CultureMetadataService
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
  isExternal: true
  name: GetVersionAsync
  nameWithType: ICultureMetadataService.GetVersionAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync
  isExternal: true
  name: GetLanguagesAsync
  nameWithType: ICultureMetadataService.GetLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguagesAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageAndVariants[]>
  nameWithType: Task<LanguageAndVariants[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants[]>
  nameWithType.vb: Task(Of LanguageAndVariants())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants())
  name.vb: Task(Of LanguageAndVariants())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
  isExternal: true
  name: GetNeutralLanguagesAsync
  nameWithType: ICultureMetadataService.GetNeutralLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNeutralLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync
  isExternal: true
  name: GetLanguageAsync
  nameWithType: ICultureMetadataService.GetLanguageAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageAndVariants>
  nameWithType: Task<LanguageAndVariants>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants>
  nameWithType.vb: Task(Of LanguageAndVariants)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants)
  name.vb: Task(Of LanguageAndVariants)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    name: LanguageAndVariants
    nameWithType: LanguageAndVariants
    fullName: Sdl.Core.Globalization.CultureMetadataService.LanguageAndVariants
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync
  isExternal: true
  name: GetSupportedLanguagesAsync
  nameWithType: ICultureMetadataService.GetSupportedLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetSupportedLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
  isExternal: true
  name: GetAllRegisteredProductsAsync
  nameWithType: ICultureMetadataService.GetAllRegisteredProductsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetAllRegisteredProductsAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Product[]>
  nameWithType: Task<Product[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageRegistry.Product[]>
  nameWithType.vb: Task(Of Product())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageRegistry.Product())
  name.vb: Task(Of Product())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync
  isExternal: true
  name: GetLanguageMetadataAsync
  nameWithType: ICultureMetadataService.GetLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetLanguageMetadataAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageMetadata[]>
  nameWithType: Task<LanguageMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]>
  nameWithType.vb: Task(Of LanguageMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata())
  name.vb: Task(Of LanguageMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync
  isExternal: true
  name: GetNumberMetadataAsync
  nameWithType: ICultureMetadataService.GetNumberMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetNumberMetadataAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NumberMetadata[]>
  nameWithType: Task<NumberMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.NumberMetadata.NumberMetadata[]>
  nameWithType.vb: Task(Of NumberMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.NumberMetadata.NumberMetadata())
  name.vb: Task(Of NumberMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
  isExternal: true
  name: GetUnitDefinitionsAsync
  nameWithType: ICultureMetadataService.GetUnitDefinitionsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitDefinitionsAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitDefinition[]>
  nameWithType: Task<UnitDefinition[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]>
  nameWithType.vb: Task(Of UnitDefinition())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitDefinition.UnitDefinition())
  name.vb: Task(Of UnitDefinition())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync
  isExternal: true
  name: GetUnitMetadataAsync
  nameWithType: ICultureMetadataService.GetUnitMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetUnitMetadataAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.Dictionary{System.String,Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Dictionary<String, UnitMetadata[]>>
  nameWithType: Task<Dictionary<String, UnitMetadata[]>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.String, Sdl.Core.Globalization.UnitMetadata.UnitMetadata[]>>
  nameWithType.vb: Task(Of Dictionary(Of String, UnitMetadata()))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.Dictionary(Of System.String, Sdl.Core.Globalization.UnitMetadata.UnitMetadata()))
  name.vb: Task(Of Dictionary(Of String, UnitMetadata()))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
