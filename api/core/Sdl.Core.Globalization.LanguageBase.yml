### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.LanguageBase
  commentId: T:Sdl.Core.Globalization.LanguageBase
  id: LanguageBase
  parent: Sdl.Core.Globalization
  children:
  - Sdl.Core.Globalization.LanguageBase.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  - Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageResult
  - Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageRetrievalAttempted
  - Sdl.Core.Globalization.LanguageBase._evaluationResult
  - Sdl.Core.Globalization.LanguageBase._isoAbbreviation
  - Sdl.Core.Globalization.LanguageBase._lazyCultureInfo
  - Sdl.Core.Globalization.LanguageBase._regionalVariantsResult
  - Sdl.Core.Globalization.LanguageBase.CultureMetadataManager
  - Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings
  - Sdl.Core.Globalization.LanguageBase.Equals(Sdl.Core.Globalization.LanguageBase,Sdl.Core.Globalization.LanguageBase)
  - Sdl.Core.Globalization.LanguageBase.Equals(System.Object)
  - Sdl.Core.Globalization.LanguageBase.Equals(System.String,System.String)
  - Sdl.Core.Globalization.LanguageBase.FormatIsoCode(System.String,System.Boolean)
  - Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync
  - Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync
  - Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync
  - Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  - Sdl.Core.Globalization.LanguageBase.GetHashCode
  - Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync
  - Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync
  - Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync
  - Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid(Sdl.Core.Globalization.LanguageBase)
  - Sdl.Core.Globalization.LanguageBase.IsoAbbreviation
  - Sdl.Core.Globalization.LanguageBase.IsValid
  - Sdl.Core.Globalization.LanguageBase.LanguageCode
  - Sdl.Core.Globalization.LanguageBase.ToString
  - Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator
  - Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator
  - Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts
  langs:
  - csharp
  - vb
  name: LanguageBase
  nameWithType: LanguageBase
  fullName: Sdl.Core.Globalization.LanguageBase
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<p>Represents a language in the sense of a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>\nobject, using a mechanism that allows basic manipulations and adds metadata not\navailable in <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> such as\n<xref href=\"Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n\n<p>This class was originally introduced as an alternative to the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> class\nin the .NET Framework so that when working with files we could convert\nthe file on a system that supported a particular language (i.e. the<xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>\nfor this language abbreviation was known), and still allow the file to subsequently\nbe opened on a system that did not yet have support for this language.</p>\n\n<p>Depending on what processing is to be done this may be a perfectly\nvalid use case, and it would have been too harsh a restriction to require support\nfor the language to be installed on all systems that may ever look at the file.</p>\n\nNow, we no longer require a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> to be installed\non a system for this kind of use, since instead of creating it direcly from .NET, \na <xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref> should instead be retrieved, which is built from metadata\nwe control, such that the same set of languages is available on all platforms. \nA <xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref> can be retrieved either from <xref href=\"Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n\n<p>Under normal circumstances the language should be retrieved via <xref href=\"Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync.GetLanguageAsync(System.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\nor other <xref href=\"Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApiAsync\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n\n<p>In addition, in the past this wrapper allowed a language to be represented by a plain string\nwhen no <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> for this language is supported on the system, and thus\nallowed the language to be represented until some truly language specific \nprocessing is needed (i.e. when the corresponding <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> is required). Such an object\ncould be created with the Language(string) constructor. However, this is now\ndeprecated, since all supported cultures can now be used on all platforms, as <xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref>. \nFlows like that should be adjusted either just to use a string, or to use a <xref href=\"Sdl.Core.Globalization.CultureCode\" data-throw-if-not-resolved=\"false\"></xref>, or to use\n<xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n\n<p>When supported by our products the corresponding <code>CultureInfo</code> can be obtained \ndirectly from the <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> property. If not supported this will throw an\n<xref href=\"Sdl.Core.Globalization.UnsupportedLanguageException\" data-throw-if-not-resolved=\"false\"></xref>.</p> \n\n<p>Use the <xref href=\"Sdl.Core.Globalization.LanguageBase.IsValid\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync\" data-throw-if-not-resolved=\"false\"></xref> properties to determine\nif the language has been set and whether it is supported by our products.</p>\n"
  remarks: >-
    This class is only marked Serializable to support legacy binary serialization in the legacy

    Sdl.Core Language class. The Serializable attribute here should be removed in future - the class is

    not intended for serialization
  syntax:
    content: 'public class LanguageBase : LanguageData'
    content.vb: >-
      Public Class LanguageBase
          Inherits LanguageData
  inheritance:
  - System.Object
  - Sdl.Core.Globalization.LanguageData
  inheritedMembers:
  - Sdl.Core.Globalization.LanguageData.EnglishName
  - Sdl.Core.Globalization.LanguageData.IsNeutral
  - Sdl.Core.Globalization.LanguageData.Direction
  - Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  - Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  - Sdl.Core.Globalization.LanguageData.Script
  - Sdl.Core.Globalization.LanguageData.SupportedProducts
  - Sdl.Core.Globalization.LanguageData.LanguageGroup
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.LanguageBase.CultureMetadataManager
  commentId: F:Sdl.Core.Globalization.LanguageBase.CultureMetadataManager
  id: CultureMetadataManager
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: CultureMetadataManager
  nameWithType: LanguageBase.CultureMetadataManager
  fullName: Sdl.Core.Globalization.LanguageBase.CultureMetadataManager
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nThe required <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref> is set in the constructor in non-legacy flows,\nbut for the moment needs to be settable by the derived legacy Language class to support binary\nserialization.\n"
  syntax:
    content: protected ICultureMetadataManager CultureMetadataManager
    return:
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    content.vb: Protected CultureMetadataManager As ICultureMetadataManager
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase._isoAbbreviation
  commentId: F:Sdl.Core.Globalization.LanguageBase._isoAbbreviation
  id: _isoAbbreviation
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: _isoAbbreviation
  nameWithType: LanguageBase._isoAbbreviation
  fullName: Sdl.Core.Globalization.LanguageBase._isoAbbreviation
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nthe ISO language abbreviation, as explained in the documentation comments below\n"
  syntax:
    content: protected string _isoAbbreviation
    return:
      type: System.String
    content.vb: Protected _isoAbbreviation As String
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase._lazyCultureInfo
  commentId: F:Sdl.Core.Globalization.LanguageBase._lazyCultureInfo
  id: _lazyCultureInfo
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: _lazyCultureInfo
  nameWithType: LanguageBase._lazyCultureInfo
  fullName: Sdl.Core.Globalization.LanguageBase._lazyCultureInfo
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\ncached, lazy evaluated corresponding culture info\n"
  syntax:
    content: protected CultureInfo _lazyCultureInfo
    return:
      type: System.Globalization.CultureInfo
    content.vb: Protected _lazyCultureInfo As CultureInfo
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase._evaluationResult
  commentId: F:Sdl.Core.Globalization.LanguageBase._evaluationResult
  id: _evaluationResult
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: _evaluationResult
  nameWithType: LanguageBase._evaluationResult
  fullName: Sdl.Core.Globalization.LanguageBase._evaluationResult
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: protected LanguageBase.EvaluationResult _evaluationResult
    return:
      type: Sdl.Core.Globalization.LanguageBase.EvaluationResult
    content.vb: Protected _evaluationResult As LanguageBase.EvaluationResult
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase._regionalVariantsResult
  commentId: F:Sdl.Core.Globalization.LanguageBase._regionalVariantsResult
  id: _regionalVariantsResult
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: _regionalVariantsResult
  nameWithType: LanguageBase._regionalVariantsResult
  fullName: Sdl.Core.Globalization.LanguageBase._regionalVariantsResult
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: protected IList<LanguageBase> _regionalVariantsResult
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}
    content.vb: Protected _regionalVariantsResult As IList(Of LanguageBase)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageResult
  commentId: F:Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageResult
  id: _defaultSpecificLanguageResult
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: _defaultSpecificLanguageResult
  nameWithType: LanguageBase._defaultSpecificLanguageResult
  fullName: Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageResult
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: protected LanguageBase _defaultSpecificLanguageResult
    return:
      type: Sdl.Core.Globalization.LanguageBase
    content.vb: Protected _defaultSpecificLanguageResult As LanguageBase
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageRetrievalAttempted
  commentId: F:Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageRetrievalAttempted
  id: _defaultSpecificLanguageRetrievalAttempted
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: _defaultSpecificLanguageRetrievalAttempted
  nameWithType: LanguageBase._defaultSpecificLanguageRetrievalAttempted
  fullName: Sdl.Core.Globalization.LanguageBase._defaultSpecificLanguageRetrievalAttempted
  type: Field
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: protected bool _defaultSpecificLanguageRetrievalAttempted
    return:
      type: System.Boolean
    content.vb: Protected _defaultSpecificLanguageRetrievalAttempted As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid(Sdl.Core.Globalization.LanguageBase)
  commentId: M:Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid(Sdl.Core.Globalization.LanguageBase)
  id: IsNullOrInvalid(Sdl.Core.Globalization.LanguageBase)
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: IsNullOrInvalid(LanguageBase)
  nameWithType: LanguageBase.IsNullOrInvalid(LanguageBase)
  fullName: Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid(Sdl.Core.Globalization.LanguageBase)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the language object is <code>null</code> or not initialized.\n"
  syntax:
    content: public static bool IsNullOrInvalid(LanguageBase language)
    parameters:
    - id: language
      type: Sdl.Core.Globalization.LanguageBase
      description: the Language to test
    return:
      type: System.Boolean
      description: <code>true</code> if the language object is <code>null</code> or not initialized.
    content.vb: Public Shared Function IsNullOrInvalid(language As LanguageBase) As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.LanguageBase.Equals(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageBase.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: Equals(String, String)
  nameWithType: LanguageBase.Equals(String, String)
  fullName: Sdl.Core.Globalization.LanguageBase.Equals(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the two strings are the same, ignoring case.\n"
  syntax:
    content: public static bool Equals(string isoAbbreviation1, string isoAbbreviation2)
    parameters:
    - id: isoAbbreviation1
      type: System.String
      description: the string of the first isoAbbreviation to compare
    - id: isoAbbreviation2
      type: System.String
      description: the string of the second isoAbbreviation to compare
    return:
      type: System.Boolean
      description: <code>true</code> if the two strings are the same, ignoring case.
    content.vb: Public Shared Function Equals(isoAbbreviation1 As String, isoAbbreviation2 As String) As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.LanguageBase.Equals(Sdl.Core.Globalization.LanguageBase,Sdl.Core.Globalization.LanguageBase)
  commentId: M:Sdl.Core.Globalization.LanguageBase.Equals(Sdl.Core.Globalization.LanguageBase,Sdl.Core.Globalization.LanguageBase)
  id: Equals(Sdl.Core.Globalization.LanguageBase,Sdl.Core.Globalization.LanguageBase)
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: Equals(LanguageBase, LanguageBase)
  nameWithType: LanguageBase.Equals(LanguageBase, LanguageBase)
  fullName: Sdl.Core.Globalization.LanguageBase.Equals(Sdl.Core.Globalization.LanguageBase, Sdl.Core.Globalization.LanguageBase)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if both objects are null or if they represent the same language.\n"
  syntax:
    content: public static bool Equals(LanguageBase language1, LanguageBase language2)
    parameters:
    - id: language1
      type: Sdl.Core.Globalization.LanguageBase
      description: the first Language to compare
    - id: language2
      type: Sdl.Core.Globalization.LanguageBase
      description: the second Language to compare
    return:
      type: System.Boolean
      description: <code>true</code> if both objects are null or if they represent the same language.
    content.vb: Public Shared Function Equals(language1 As LanguageBase, language2 As LanguageBase) As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.LanguageBase.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  commentId: M:Sdl.Core.Globalization.LanguageBase.#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  id: '#ctor(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)'
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: LanguageBase(ICultureMetadataManager)
  nameWithType: LanguageBase.LanguageBase(ICultureMetadataManager)
  fullName: Sdl.Core.Globalization.LanguageBase.LanguageBase(Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager)
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nDefault constructor, creates an invalid language object.\n"
  syntax:
    content: protected LanguageBase(ICultureMetadataManager cultureMetadataManager)
    parameters:
    - id: cultureMetadataManager
      type: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
    content.vb: Protected Sub New(cultureMetadataManager As ICultureMetadataManager)
  overload: Sdl.Core.Globalization.LanguageBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync
  id: GetCultureInfoAsync
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetCultureInfoAsync()
  nameWithType: LanguageBase.GetCultureInfoAsync()
  fullName: Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nSee <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> property\n"
  syntax:
    content: public Task<CultureInfo> GetCultureInfoAsync()
    return:
      type: System.Threading.Tasks.Task{System.Globalization.CultureInfo}
    content.vb: Public Function GetCultureInfoAsync As Task(Of CultureInfo)
  overload: Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync*
  exceptions:
  - type: Sdl.Core.Globalization.UnsupportedLanguageException
    commentId: T:Sdl.Core.Globalization.UnsupportedLanguageException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync
  id: GetIsSupportedAsync
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetIsSupportedAsync()
  nameWithType: LanguageBase.GetIsSupportedAsync()
  fullName: Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the language is valid and supported on this system.\n"
  syntax:
    content: public Task<bool> GetIsSupportedAsync()
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function GetIsSupportedAsync As Task(Of Boolean)
  overload: Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync
  id: GetRegionalVariantsAsync
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetRegionalVariantsAsync()
  nameWithType: LanguageBase.GetRegionalVariantsAsync()
  fullName: Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nList of the regional variants of the language\n"
  syntax:
    content: public Task<IList<LanguageBase>> GetRegionalVariantsAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
    content.vb: Public Function GetRegionalVariantsAsync As Task(Of IList(Of LanguageBase))
  overload: Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync
  id: GetParentLanguageAsync
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetParentLanguageAsync()
  nameWithType: LanguageBase.GetParentLanguageAsync()
  fullName: Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nParent language\n"
  syntax:
    content: public Task<LanguageBase> GetParentLanguageAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
    content.vb: Public Function GetParentLanguageAsync As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync
  id: GetDefaultSpecificLanguageAsync
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetDefaultSpecificLanguageAsync()
  nameWithType: LanguageBase.GetDefaultSpecificLanguageAsync()
  fullName: Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nDefault specific language\n"
  syntax:
    content: public Task<LanguageBase> GetDefaultSpecificLanguageAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
    content.vb: Public Function GetDefaultSpecificLanguageAsync As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync
  id: GetDisplayNameAsync
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetDisplayNameAsync()
  nameWithType: LanguageBase.GetDisplayNameAsync()
  fullName: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nReturns a name of the language that may be displayed to users, with default settings\n"
  syntax:
    content: public Task<string> GetDisplayNameAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetDisplayNameAsync As Task(Of String)
  overload: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  id: GetDisplayNameAsync(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetDisplayNameAsync(LanguageFormat, Boolean)
  nameWithType: LanguageBase.GetDisplayNameAsync(LanguageFormat, Boolean)
  fullName: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync(Sdl.Core.Globalization.LanguageFormat, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nReturns a name of the language that may be displayed to users.\n"
  syntax:
    content: public Task<string> GetDisplayNameAsync(LanguageFormat languageFormat, bool includeCountry)
    parameters:
    - id: languageFormat
      type: Sdl.Core.Globalization.LanguageFormat
      description: the TeamWorks LanguageFormat
    - id: includeCountry
      type: System.Boolean
      description: whether to include the country in the returned name
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A name of the language that may be displayed to users.
    content.vb: Public Function GetDisplayNameAsync(languageFormat As LanguageFormat, includeCountry As Boolean) As Task(Of String)
  overload: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageBase.FormatIsoCode(System.String,System.Boolean)
  commentId: M:Sdl.Core.Globalization.LanguageBase.FormatIsoCode(System.String,System.Boolean)
  id: FormatIsoCode(System.String,System.Boolean)
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: FormatIsoCode(String, Boolean)
  nameWithType: LanguageBase.FormatIsoCode(String, Boolean)
  fullName: Sdl.Core.Globalization.LanguageBase.FormatIsoCode(System.String, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: protected static string FormatIsoCode(string isoCode, bool includeCountry)
    parameters:
    - id: isoCode
      type: System.String
    - id: includeCountry
      type: System.Boolean
    return:
      type: System.String
    content.vb: Protected Shared Function FormatIsoCode(isoCode As String, includeCountry As Boolean) As String
  overload: Sdl.Core.Globalization.LanguageBase.FormatIsoCode*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Sdl.Core.Globalization.LanguageBase.Equals(System.Object)
  commentId: M:Sdl.Core.Globalization.LanguageBase.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LanguageBase.Equals(Object)
  fullName: Sdl.Core.Globalization.LanguageBase.Equals(System.Object)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the ISO abbreviation for the two languages correspond.\n"
  remarks: The comparison is not case sensitive.
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'the object to compare this language to '
    return:
      type: System.Boolean
      description: <code>true</code> if the ISO abbreviation for the two languages correspond.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.Core.Globalization.LanguageBase.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.Globalization.LanguageBase.ToString
  commentId: M:Sdl.Core.Globalization.LanguageBase.ToString
  id: ToString
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LanguageBase.ToString()
  fullName: Sdl.Core.Globalization.LanguageBase.ToString()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nThe ISO abbreviation for the language.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The ISO abbreviation for the language.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.Core.Globalization.LanguageBase.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.Globalization.LanguageBase.GetHashCode
  commentId: M:Sdl.Core.Globalization.LanguageBase.GetHashCode
  id: GetHashCode
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LanguageBase.GetHashCode()
  fullName: Sdl.Core.Globalization.LanguageBase.GetHashCode()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nHash code based on the ISO abbreviation for the language.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code based on the ISO abbreviation for the language.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.Core.Globalization.LanguageBase.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.Globalization.LanguageBase.IsoAbbreviation
  commentId: P:Sdl.Core.Globalization.LanguageBase.IsoAbbreviation
  id: IsoAbbreviation
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: IsoAbbreviation
  nameWithType: LanguageBase.IsoAbbreviation
  fullName: Sdl.Core.Globalization.LanguageBase.IsoAbbreviation
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: public string IsoAbbreviation { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IsoAbbreviation As String
  overload: Sdl.Core.Globalization.LanguageBase.IsoAbbreviation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings
  commentId: P:Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings
  id: DefaultDisplaySettings
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: DefaultDisplaySettings
  nameWithType: LanguageBase.DefaultDisplaySettings
  fullName: Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nDefault settings for how languages should be shown to users.\n"
  remarks: "\n<p>\nSince this is a static property, changing its values means changing \nthe language display for the entire process.\n</p>\n<p>\nIf you are interested to know when these properties change,\nattach a handler to the <xref href=\"Sdl.Core.Globalization.LanguageDisplaySettings.SettingsChanged\" data-throw-if-not-resolved=\"false\"></xref> event of this object.\n</p>\n"
  syntax:
    content: public static LanguageDisplaySettings DefaultDisplaySettings { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.LanguageDisplaySettings
    content.vb: Public Shared ReadOnly Property DefaultDisplaySettings As LanguageDisplaySettings
  overload: Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator
  commentId: P:Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator
  id: UseBlankAsWordSeparator
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: UseBlankAsWordSeparator
  nameWithType: LanguageBase.UseBlankAsWordSeparator
  fullName: Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: public bool UseBlankAsWordSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UseBlankAsWordSeparator As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator
  commentId: P:Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator
  id: UseBlankAsSentenceSeparator
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: UseBlankAsSentenceSeparator
  nameWithType: LanguageBase.UseBlankAsSentenceSeparator
  fullName: Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: public bool UseBlankAsSentenceSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UseBlankAsSentenceSeparator As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.LanguageBase.IsValid
  commentId: P:Sdl.Core.Globalization.LanguageBase.IsValid
  id: IsValid
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: LanguageBase.IsValid
  fullName: Sdl.Core.Globalization.LanguageBase.IsValid
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if an ISO abbreviation has been set for the language.\n"
  remarks: >-
    This does not mean that the language code is actual a valid code.

    Since the ISO code could be unsupported on this system there is no easy

    way to ensure that the code actually is valid.

    To check if the code is supported on this system test the <xref href="Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync" data-throw-if-not-resolved="false"></xref> property.
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.IsValid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts
  commentId: P:Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts
  id: UsesCharacterCounts
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: UsesCharacterCounts
  nameWithType: LanguageBase.UsesCharacterCounts
  fullName: Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the language uses character counts rather than word counts.\n"
  syntax:
    content: public bool UsesCharacterCounts { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UsesCharacterCounts As Boolean
  overload: Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.LanguageBase.LanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageBase.LanguageCode
  id: LanguageCode
  parent: Sdl.Core.Globalization.LanguageBase
  langs:
  - csharp
  - vb
  name: LanguageCode
  nameWithType: LanguageBase.LanguageCode
  fullName: Sdl.Core.Globalization.LanguageBase.LanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  summary: "\nThe ISO formatted code corresponding to the Language\n"
  syntax:
    content: public override string LanguageCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides Property LanguageCode As String
  overridden: Sdl.Core.Globalization.LanguageData.LanguageCode
  overload: Sdl.Core.Globalization.LanguageBase.LanguageCode*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.Globalization.LanguageData
  commentId: T:Sdl.Core.Globalization.LanguageData
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageData
  nameWithType: LanguageData
  fullName: Sdl.Core.Globalization.LanguageData
- uid: Sdl.Core.Globalization.LanguageData.EnglishName
  commentId: P:Sdl.Core.Globalization.LanguageData.EnglishName
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: EnglishName
  nameWithType: LanguageData.EnglishName
  fullName: Sdl.Core.Globalization.LanguageData.EnglishName
- uid: Sdl.Core.Globalization.LanguageData.IsNeutral
  commentId: P:Sdl.Core.Globalization.LanguageData.IsNeutral
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: IsNeutral
  nameWithType: LanguageData.IsNeutral
  fullName: Sdl.Core.Globalization.LanguageData.IsNeutral
- uid: Sdl.Core.Globalization.LanguageData.Direction
  commentId: P:Sdl.Core.Globalization.LanguageData.Direction
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: Direction
  nameWithType: LanguageData.Direction
  fullName: Sdl.Core.Globalization.LanguageData.Direction
- uid: Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageData.ParentLanguageCode
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: ParentLanguageCode
  nameWithType: LanguageData.ParentLanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.ParentLanguageCode
- uid: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: DefaultSpecificLanguageCode
  nameWithType: LanguageData.DefaultSpecificLanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.DefaultSpecificLanguageCode
- uid: Sdl.Core.Globalization.LanguageData.Script
  commentId: P:Sdl.Core.Globalization.LanguageData.Script
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: Script
  nameWithType: LanguageData.Script
  fullName: Sdl.Core.Globalization.LanguageData.Script
- uid: Sdl.Core.Globalization.LanguageData.SupportedProducts
  commentId: P:Sdl.Core.Globalization.LanguageData.SupportedProducts
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: SupportedProducts
  nameWithType: LanguageData.SupportedProducts
  fullName: Sdl.Core.Globalization.LanguageData.SupportedProducts
- uid: Sdl.Core.Globalization.LanguageData.LanguageGroup
  commentId: P:Sdl.Core.Globalization.LanguageData.LanguageGroup
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: LanguageGroup
  nameWithType: LanguageData.LanguageGroup
  fullName: Sdl.Core.Globalization.LanguageData.LanguageGroup
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Sdl.Core.Globalization.LanguageBase.EvaluationResult
  commentId: T:Sdl.Core.Globalization.LanguageBase.EvaluationResult
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageBase.EvaluationResult
  nameWithType: LanguageBase.EvaluationResult
  fullName: Sdl.Core.Globalization.LanguageBase.EvaluationResult
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<LanguageBase>
  nameWithType: IList<LanguageBase>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageBase>
  nameWithType.vb: IList(Of LanguageBase)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageBase)
  name.vb: IList(Of LanguageBase)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Globalization.LanguageBase
  commentId: T:Sdl.Core.Globalization.LanguageBase
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageBase
  nameWithType: LanguageBase
  fullName: Sdl.Core.Globalization.LanguageBase
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid
  isExternal: true
  name: IsNullOrInvalid
  nameWithType: LanguageBase.IsNullOrInvalid
  fullName: Sdl.Core.Globalization.LanguageBase.IsNullOrInvalid
- uid: Sdl.Core.Globalization.LanguageBase.Equals*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.Equals
  isExternal: true
  name: Equals
  nameWithType: LanguageBase.Equals
  fullName: Sdl.Core.Globalization.LanguageBase.Equals
- uid: Sdl.Core.Globalization.LanguageBase.#ctor*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.#ctor
  isExternal: true
  name: LanguageBase
  nameWithType: LanguageBase.LanguageBase
  fullName: Sdl.Core.Globalization.LanguageBase.LanguageBase
- uid: Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync
  isExternal: true
  name: GetCultureInfoAsync
  nameWithType: LanguageBase.GetCultureInfoAsync
  fullName: Sdl.Core.Globalization.LanguageBase.GetCultureInfoAsync
- uid: Sdl.Core.Globalization.UnsupportedLanguageException
  commentId: T:Sdl.Core.Globalization.UnsupportedLanguageException
  isExternal: true
  name: UnsupportedLanguageException
  nameWithType: UnsupportedLanguageException
  fullName: Sdl.Core.Globalization.UnsupportedLanguageException
- uid: System.Threading.Tasks.Task{System.Globalization.CultureInfo}
  commentId: T:System.Threading.Tasks.Task{System.Globalization.CultureInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CultureInfo>
  nameWithType: Task<CultureInfo>
  fullName: System.Threading.Tasks.Task<System.Globalization.CultureInfo>
  nameWithType.vb: Task(Of CultureInfo)
  fullName.vb: System.Threading.Tasks.Task(Of System.Globalization.CultureInfo)
  name.vb: Task(Of CultureInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync
  isExternal: true
  name: GetIsSupportedAsync
  nameWithType: LanguageBase.GetIsSupportedAsync
  fullName: Sdl.Core.Globalization.LanguageBase.GetIsSupportedAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync
  isExternal: true
  name: GetRegionalVariantsAsync
  nameWithType: LanguageBase.GetRegionalVariantsAsync
  fullName: Sdl.Core.Globalization.LanguageBase.GetRegionalVariantsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageBase}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<LanguageBase>>
  nameWithType: Task<IList<LanguageBase>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageBase>>
  nameWithType.vb: Task(Of IList(Of LanguageBase))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageBase))
  name.vb: Task(Of IList(Of LanguageBase))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync
  isExternal: true
  name: GetParentLanguageAsync
  nameWithType: LanguageBase.GetParentLanguageAsync
  fullName: Sdl.Core.Globalization.LanguageBase.GetParentLanguageAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageBase>
  nameWithType: Task<LanguageBase>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageBase>
  nameWithType.vb: Task(Of LanguageBase)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageBase)
  name.vb: Task(Of LanguageBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync
  isExternal: true
  name: GetDefaultSpecificLanguageAsync
  nameWithType: LanguageBase.GetDefaultSpecificLanguageAsync
  fullName: Sdl.Core.Globalization.LanguageBase.GetDefaultSpecificLanguageAsync
- uid: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync
  isExternal: true
  name: GetDisplayNameAsync
  nameWithType: LanguageBase.GetDisplayNameAsync
  fullName: Sdl.Core.Globalization.LanguageBase.GetDisplayNameAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageFormat
  commentId: T:Sdl.Core.Globalization.LanguageFormat
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageFormat
  nameWithType: LanguageFormat
  fullName: Sdl.Core.Globalization.LanguageFormat
- uid: Sdl.Core.Globalization.LanguageBase.FormatIsoCode*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.FormatIsoCode
  isExternal: true
  name: FormatIsoCode
  nameWithType: LanguageBase.FormatIsoCode
  fullName: Sdl.Core.Globalization.LanguageBase.FormatIsoCode
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageBase.ToString*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.ToString
  isExternal: true
  name: ToString
  nameWithType: LanguageBase.ToString
  fullName: Sdl.Core.Globalization.LanguageBase.ToString
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageBase.GetHashCode*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: LanguageBase.GetHashCode
  fullName: Sdl.Core.Globalization.LanguageBase.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.Core.Globalization.LanguageBase.IsoAbbreviation*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.IsoAbbreviation
  isExternal: true
  name: IsoAbbreviation
  nameWithType: LanguageBase.IsoAbbreviation
  fullName: Sdl.Core.Globalization.LanguageBase.IsoAbbreviation
- uid: Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings
  isExternal: true
  name: DefaultDisplaySettings
  nameWithType: LanguageBase.DefaultDisplaySettings
  fullName: Sdl.Core.Globalization.LanguageBase.DefaultDisplaySettings
- uid: Sdl.Core.Globalization.LanguageDisplaySettings
  commentId: T:Sdl.Core.Globalization.LanguageDisplaySettings
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageDisplaySettings
  nameWithType: LanguageDisplaySettings
  fullName: Sdl.Core.Globalization.LanguageDisplaySettings
- uid: Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator
  isExternal: true
  name: UseBlankAsWordSeparator
  nameWithType: LanguageBase.UseBlankAsWordSeparator
  fullName: Sdl.Core.Globalization.LanguageBase.UseBlankAsWordSeparator
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator
  isExternal: true
  name: UseBlankAsSentenceSeparator
  nameWithType: LanguageBase.UseBlankAsSentenceSeparator
  fullName: Sdl.Core.Globalization.LanguageBase.UseBlankAsSentenceSeparator
- uid: Sdl.Core.Globalization.LanguageBase.IsValid*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.IsValid
  isExternal: true
  name: IsValid
  nameWithType: LanguageBase.IsValid
  fullName: Sdl.Core.Globalization.LanguageBase.IsValid
- uid: Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts
  isExternal: true
  name: UsesCharacterCounts
  nameWithType: LanguageBase.UsesCharacterCounts
  fullName: Sdl.Core.Globalization.LanguageBase.UsesCharacterCounts
- uid: Sdl.Core.Globalization.LanguageData.LanguageCode
  commentId: P:Sdl.Core.Globalization.LanguageData.LanguageCode
  parent: Sdl.Core.Globalization.LanguageData
  isExternal: true
  name: LanguageCode
  nameWithType: LanguageData.LanguageCode
  fullName: Sdl.Core.Globalization.LanguageData.LanguageCode
- uid: Sdl.Core.Globalization.LanguageBase.LanguageCode*
  commentId: Overload:Sdl.Core.Globalization.LanguageBase.LanguageCode
  isExternal: true
  name: LanguageCode
  nameWithType: LanguageBase.LanguageCode
  fullName: Sdl.Core.Globalization.LanguageBase.LanguageCode
