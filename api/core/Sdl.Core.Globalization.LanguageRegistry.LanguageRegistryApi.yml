### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  id: LanguageRegistryApi
  parent: Sdl.Core.Globalization.LanguageRegistry
  children:
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata(System.String[])
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String,System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata(System.String[])
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages(System.String[])
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  - Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  langs:
  - csharp
  - vb
  name: LanguageRegistryApi
  nameWithType: LanguageRegistryApi
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  type: Class
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: 'public sealed class LanguageRegistryApi : LanguageRegistryApiAsync'
    content.vb: >-
      Public NotInheritable Class LanguageRegistryApi
          Inherits LanguageRegistryApiAsync
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  id: GetAllLanguages
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllLanguages()
  nameWithType: LanguageRegistryApi.GetAllLanguages()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<Language> GetAllLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
    content.vb: Public Function GetAllLanguages As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  id: GetAllNeutralLanguages
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllNeutralLanguages()
  nameWithType: LanguageRegistryApi.GetAllNeutralLanguages()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<Language> GetAllNeutralLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
    content.vb: Public Function GetAllNeutralLanguages As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  id: GetAllSpecificLanguages
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllSpecificLanguages()
  nameWithType: LanguageRegistryApi.GetAllSpecificLanguages()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<Language> GetAllSpecificLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
    content.vb: Public Function GetAllSpecificLanguages As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages(System.String[])
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages(System.String[])
  id: GetLanguages(System.String[])
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetLanguages(String[])
  nameWithType: LanguageRegistryApi.GetLanguages(String[])
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<Language> GetLanguages(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
    content.vb: Public Function GetLanguages(languageCodes As String()) As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages*
  nameWithType.vb: LanguageRegistryApi.GetLanguages(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages(System.String())
  name.vb: GetLanguages(String())
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  id: GetLanguage(System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetLanguage(String)
  nameWithType: LanguageRegistryApi.GetLanguage(String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public Language GetLanguage(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: Sdl.Core.Globalization.Language
    content.vb: Public Function GetLanguage(languageCode As String) As Language
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String,System.String)
  id: GetLanguage(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetLanguage(String, String)
  nameWithType: LanguageRegistryApi.GetLanguage(String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public Language GetLanguage(string alternativeLanguageCode, string productId)
    parameters:
    - id: alternativeLanguageCode
      type: System.String
    - id: productId
      type: System.String
    return:
      type: Sdl.Core.Globalization.Language
    content.vb: Public Function GetLanguage(alternativeLanguageCode As String, productId As String) As Language
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata(System.String[])
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata(System.String[])
  id: GetLanguageMetadata(System.String[])
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetLanguageMetadata(String[])
  nameWithType: LanguageRegistryApi.GetLanguageMetadata(String[])
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public LanguageMetadata[] GetLanguageMetadata(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]
    content.vb: Public Function GetLanguageMetadata(languageCodes As String()) As LanguageMetadata()
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata*
  nameWithType.vb: LanguageRegistryApi.GetLanguageMetadata(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata(System.String())
  name.vb: GetLanguageMetadata(String())
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata(System.String[])
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata(System.String[])
  id: GetApplicableLanguageMetadata(System.String[])
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetApplicableLanguageMetadata(String[])
  nameWithType: LanguageRegistryApi.GetApplicableLanguageMetadata(String[])
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public LanguageMetadata[] GetApplicableLanguageMetadata(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]
    content.vb: Public Function GetApplicableLanguageMetadata(languageCodes As String()) As LanguageMetadata()
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata*
  nameWithType.vb: LanguageRegistryApi.GetApplicableLanguageMetadata(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata(System.String())
  name.vb: GetApplicableLanguageMetadata(String())
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  id: GetSupportedLanguages(System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetSupportedLanguages(String)
  nameWithType: LanguageRegistryApi.GetSupportedLanguages(String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<Language> GetSupportedLanguages(string productId)
    parameters:
    - id: productId
      type: System.String
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
    content.vb: Public Function GetSupportedLanguages(productId As String) As IList(Of Language)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  id: GetAllRegisteredProducts
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProducts()
  nameWithType: LanguageRegistryApi.GetAllRegisteredProducts()
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<Product> GetAllRegisteredProducts()
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}
    content.vb: Public Function GetAllRegisteredProducts As IList(Of Product)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String,System.String)
  id: GetAlternativeLanguageCodes(System.String,System.String)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetAlternativeLanguageCodes(String, String)
  nameWithType: LanguageRegistryApi.GetAlternativeLanguageCodes(String, String)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<AlternativeLanguageCode> GetAlternativeLanguageCodes(string productId, string languageCode)
    parameters:
    - id: productId
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
    content.vb: Public Function GetAlternativeLanguageCodes(productId As String, languageCode As String) As IList(Of AlternativeLanguageCode)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  commentId: M:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  id: GetProductSpecificCodeWithFallback(System.String,System.String,System.String,Sdl.Core.Globalization.LanguageRegistry.MappingType@)
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: GetProductSpecificCodeWithFallback(String, String, String, out MappingType)
  nameWithType: LanguageRegistryApi.GetProductSpecificCodeWithFallback(String, String, String, out MappingType)
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String, System.String, System.String, out Sdl.Core.Globalization.LanguageRegistry.MappingType)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public IList<AlternativeLanguageCode> GetProductSpecificCodeWithFallback(string sourceProductId, string sourceLanguageCode, string targetProductId, out MappingType mappingType)
    parameters:
    - id: sourceProductId
      type: System.String
    - id: sourceLanguageCode
      type: System.String
    - id: targetProductId
      type: System.String
    - id: mappingType
      type: Sdl.Core.Globalization.LanguageRegistry.MappingType
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
    content.vb: Public Function GetProductSpecificCodeWithFallback(sourceProductId As String, sourceLanguageCode As String, targetProductId As String, ByRef mappingType As MappingType) As IList(Of AlternativeLanguageCode)
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback*
  nameWithType.vb: LanguageRegistryApi.GetProductSpecificCodeWithFallback(String, String, String, ByRef MappingType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback(System.String, System.String, System.String, ByRef Sdl.Core.Globalization.LanguageRegistry.MappingType)
  name.vb: GetProductSpecificCodeWithFallback(String, String, String, ByRef MappingType)
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  commentId: P:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  id: Instance
  parent: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: LanguageRegistryApi.Instance
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization.LanguageRegistry
  syntax:
    content: public static LanguageRegistryApi Instance { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
    content.vb: Public Shared ReadOnly Property Instance As LanguageRegistryApi
  overload: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Sdl.Core.Globalization.LanguageRegistry
  commentId: N:Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: Sdl.Core.Globalization.LanguageRegistry
  nameWithType: Sdl.Core.Globalization.LanguageRegistry
  fullName: Sdl.Core.Globalization.LanguageRegistry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
  isExternal: true
  name: GetAllLanguages
  nameWithType: LanguageRegistryApi.GetAllLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllLanguages
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Language>
  nameWithType: IList<Language>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.Language>
  nameWithType.vb: IList(Of Language)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.Language)
  name.vb: IList(Of Language)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
  isExternal: true
  name: GetAllNeutralLanguages
  nameWithType: LanguageRegistryApi.GetAllNeutralLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllNeutralLanguages
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
  isExternal: true
  name: GetAllSpecificLanguages
  nameWithType: LanguageRegistryApi.GetAllSpecificLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllSpecificLanguages
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages
  isExternal: true
  name: GetLanguages
  nameWithType: LanguageRegistryApi.GetLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguages
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage
  isExternal: true
  name: GetLanguage
  nameWithType: LanguageRegistryApi.GetLanguage
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.Globalization.Language
  commentId: T:Sdl.Core.Globalization.Language
  parent: Sdl.Core.Globalization
  isExternal: true
  name: Language
  nameWithType: Language
  fullName: Sdl.Core.Globalization.Language
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata
  isExternal: true
  name: GetLanguageMetadata
  nameWithType: LanguageRegistryApi.GetLanguageMetadata
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetLanguageMetadata
- uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]
  isExternal: true
  name: LanguageMetadata[]
  nameWithType: LanguageMetadata[]
  fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]
  nameWithType.vb: LanguageMetadata()
  fullName.vb: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata()
  name.vb: LanguageMetadata()
  spec.csharp:
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata
  isExternal: true
  name: GetApplicableLanguageMetadata
  nameWithType: LanguageRegistryApi.GetApplicableLanguageMetadata
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetApplicableLanguageMetadata
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages
  isExternal: true
  name: GetSupportedLanguages
  nameWithType: LanguageRegistryApi.GetSupportedLanguages
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetSupportedLanguages
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
  isExternal: true
  name: GetAllRegisteredProducts
  nameWithType: LanguageRegistryApi.GetAllRegisteredProducts
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAllRegisteredProducts
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.Product}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Product>
  nameWithType: IList<Product>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.Product>
  nameWithType.vb: IList(Of Product)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.Product)
  name.vb: IList(Of Product)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes
  isExternal: true
  name: GetAlternativeLanguageCodes
  nameWithType: LanguageRegistryApi.GetAlternativeLanguageCodes
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetAlternativeLanguageCodes
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<AlternativeLanguageCode>
  nameWithType: IList<AlternativeLanguageCode>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>
  nameWithType.vb: IList(Of AlternativeLanguageCode)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode)
  name.vb: IList(Of AlternativeLanguageCode)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback
  isExternal: true
  name: GetProductSpecificCodeWithFallback
  nameWithType: LanguageRegistryApi.GetProductSpecificCodeWithFallback
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.GetProductSpecificCodeWithFallback
- uid: Sdl.Core.Globalization.LanguageRegistry.MappingType
  commentId: '!:Sdl.Core.Globalization.LanguageRegistry.MappingType'
  isExternal: true
  name: MappingType
  nameWithType: MappingType
  fullName: Sdl.Core.Globalization.LanguageRegistry.MappingType
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance*
  commentId: Overload:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
  isExternal: true
  name: Instance
  nameWithType: LanguageRegistryApi.Instance
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi.Instance
- uid: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  commentId: T:Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
  parent: Sdl.Core.Globalization.LanguageRegistry
  isExternal: true
  name: LanguageRegistryApi
  nameWithType: LanguageRegistryApi
  fullName: Sdl.Core.Globalization.LanguageRegistry.LanguageRegistryApi
