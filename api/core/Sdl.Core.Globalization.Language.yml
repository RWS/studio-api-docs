### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.Language
  commentId: T:Sdl.Core.Globalization.Language
  id: Language
  parent: Sdl.Core.Globalization
  children:
  - Sdl.Core.Globalization.Language.#ctor
  - Sdl.Core.Globalization.Language.#ctor(Sdl.Core.Globalization.Language)
  - Sdl.Core.Globalization.Language.#ctor(System.Globalization.CultureInfo)
  - Sdl.Core.Globalization.Language.#ctor(System.String)
  - Sdl.Core.Globalization.Language.Clone
  - Sdl.Core.Globalization.Language.CultureInfo
  - Sdl.Core.Globalization.Language.DefaultDisplaySettings
  - Sdl.Core.Globalization.Language.DefaultSpecificCulture
  - Sdl.Core.Globalization.Language.DefaultSpecificCultureCode
  - Sdl.Core.Globalization.Language.DefaultSpecificLanguage
  - Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode
  - Sdl.Core.Globalization.Language.Direction
  - Sdl.Core.Globalization.Language.DisplayName
  - Sdl.Core.Globalization.Language.EnglishName
  - Sdl.Core.Globalization.Language.Equals(Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Language)
  - Sdl.Core.Globalization.Language.Equals(System.Object)
  - Sdl.Core.Globalization.Language.Equals(System.String,System.String)
  - Sdl.Core.Globalization.Language.GetAllLanguages
  - Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes(System.String)
  - Sdl.Core.Globalization.Language.GetDisplayName(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  - Sdl.Core.Globalization.Language.GetFlagImage(System.Boolean,System.Single,System.Int32)
  - Sdl.Core.Globalization.Language.GetHashCode
  - Sdl.Core.Globalization.Language.GetImage(System.Boolean)
  - Sdl.Core.Globalization.Language.Image
  - Sdl.Core.Globalization.Language.IsNeutral
  - Sdl.Core.Globalization.Language.IsNullOrInvalid(Sdl.Core.Globalization.Language)
  - Sdl.Core.Globalization.Language.IsoAbbreviation
  - Sdl.Core.Globalization.Language.IsSupported
  - Sdl.Core.Globalization.Language.IsValid
  - Sdl.Core.Globalization.Language.LanguageCode
  - Sdl.Core.Globalization.Language.LdmlData
  - Sdl.Core.Globalization.Language.ParentIsoCode
  - Sdl.Core.Globalization.Language.ParentLanguage
  - Sdl.Core.Globalization.Language.ParentLanguageCode
  - Sdl.Core.Globalization.Language.RegionalVariants
  - Sdl.Core.Globalization.Language.Script
  - Sdl.Core.Globalization.Language.SupportedProducts
  - Sdl.Core.Globalization.Language.ToString
  - Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator
  - Sdl.Core.Globalization.Language.UseBlankAsWordSeparator
  - Sdl.Core.Globalization.Language.UsesCharacterCounts
  langs:
  - csharp
  - vb
  name: Language
  nameWithType: Language
  fullName: Sdl.Core.Globalization.Language
  type: Class
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<p>Represents a language in the sense of a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>\nobject, using a mechanism that allows basic manipulations on a system where the language\nis not fully supported.</p>\n\n<p>The reason we use this type as opposed to the <code>CultureInfo</code> class\nin the .NET Framework is that when working with files we may convert\nthe file on a system that supports a particular language (i.e. the <code>CultureInfo</code>\nfor this language abbreviation is known), but the file may subsequently\nbe opened on a system that does not yet have support for this language.</p>\n\n<p>Depending on what processing is to be done this may be a perfectly\nvalid use case, and it would be too harsh a restriction to require support\nfor the language to be installed on all systems that may ever look at the file.</p>\n\n<p>Under normal circumstances the language should be created from a <code>CultureInfo</code> object.</p>\n\n<p>In addition this wrapper allows a language to be represented by a plain string\nwhen no <code>CultureInfo</code> for this language is supported on the system, and thus\nallows the language to be represented until some truly language specific \nprocessing is needed (i.e. when the corresponding <code>CultureInfo</code> is required).</p>\n\n<p>When supported by the operating system the corresponding <code>CultureInfo</code> can be obtained \ndirectly from the <xref href=\"Sdl.Core.Globalization.Language.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> property. If not supported this will throw an\n<xref href=\"Sdl.Core.Globalization.UnsupportedLanguageException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n\n<p>Use the <xref href=\"Sdl.Core.Globalization.Language.IsValid\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.Core.Globalization.Language.IsSupported\" data-throw-if-not-resolved=\"false\"></xref> properties to determine\nif the language has been set and whether it is supported by the operating system.</p>\n"
  syntax:
    content: 'public class Language : ICloneable'
    content.vb: >-
      Public Class Language
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.Language.IsNullOrInvalid(Sdl.Core.Globalization.Language)
  commentId: M:Sdl.Core.Globalization.Language.IsNullOrInvalid(Sdl.Core.Globalization.Language)
  id: IsNullOrInvalid(Sdl.Core.Globalization.Language)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: IsNullOrInvalid(Language)
  nameWithType: Language.IsNullOrInvalid(Language)
  fullName: Sdl.Core.Globalization.Language.IsNullOrInvalid(Sdl.Core.Globalization.Language)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the language object is <code>null</code> or not initialized.\n"
  syntax:
    content: public static bool IsNullOrInvalid(Language language)
    parameters:
    - id: language
      type: Sdl.Core.Globalization.Language
      description: the Language to test
    return:
      type: System.Boolean
      description: <code>true</code> if the language object is <code>null</code> or not initialized.
    content.vb: Public Shared Function IsNullOrInvalid(language As Language) As Boolean
  overload: Sdl.Core.Globalization.Language.IsNullOrInvalid*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.Language.GetAllLanguages
  commentId: M:Sdl.Core.Globalization.Language.GetAllLanguages
  id: GetAllLanguages
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: GetAllLanguages()
  nameWithType: Language.GetAllLanguages()
  fullName: Sdl.Core.Globalization.Language.GetAllLanguages()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nReturns all languages supported by the system.\n"
  syntax:
    content: public static Language[] GetAllLanguages()
    return:
      type: Sdl.Core.Globalization.Language[]
      description: All languages supported by the system.
    content.vb: Public Shared Function GetAllLanguages As Language()
  overload: Sdl.Core.Globalization.Language.GetAllLanguages*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.Language.Equals(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.Language.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Equals(String, String)
  nameWithType: Language.Equals(String, String)
  fullName: Sdl.Core.Globalization.Language.Equals(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the two strings are the same, ignoring case.\n"
  syntax:
    content: public static bool Equals(string isoAbbreviation1, string isoAbbreviation2)
    parameters:
    - id: isoAbbreviation1
      type: System.String
      description: the string of the first isoAbbreviation to compare
    - id: isoAbbreviation2
      type: System.String
      description: the string of the second isoAbbreviation to compare
    return:
      type: System.Boolean
      description: <code>true</code> if the two strings are the same, ignoring case.
    content.vb: Public Shared Function Equals(isoAbbreviation1 As String, isoAbbreviation2 As String) As Boolean
  overload: Sdl.Core.Globalization.Language.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.Language.Equals(Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Language)
  commentId: M:Sdl.Core.Globalization.Language.Equals(Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Language)
  id: Equals(Sdl.Core.Globalization.Language,Sdl.Core.Globalization.Language)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Equals(Language, Language)
  nameWithType: Language.Equals(Language, Language)
  fullName: Sdl.Core.Globalization.Language.Equals(Sdl.Core.Globalization.Language, Sdl.Core.Globalization.Language)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if both objects are null or if they represent the same language.\n"
  syntax:
    content: public static bool Equals(Language language1, Language language2)
    parameters:
    - id: language1
      type: Sdl.Core.Globalization.Language
      description: the first Language to compare
    - id: language2
      type: Sdl.Core.Globalization.Language
      description: the second Language to compare
    return:
      type: System.Boolean
      description: <code>true</code> if both objects are null or if they represent the same language.
    content.vb: Public Shared Function Equals(language1 As Language, language2 As Language) As Boolean
  overload: Sdl.Core.Globalization.Language.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.Globalization.Language.#ctor(System.Globalization.CultureInfo)
  commentId: M:Sdl.Core.Globalization.Language.#ctor(System.Globalization.CultureInfo)
  id: '#ctor(System.Globalization.CultureInfo)'
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Language(CultureInfo)
  nameWithType: Language.Language(CultureInfo)
  fullName: Sdl.Core.Globalization.Language.Language(System.Globalization.CultureInfo)
  type: Constructor
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nConstruction from an existing CultureInfo instance.\n"
  syntax:
    content: public Language(CultureInfo cultureInfo)
    parameters:
    - id: cultureInfo
      type: System.Globalization.CultureInfo
    content.vb: Public Sub New(cultureInfo As CultureInfo)
  overload: Sdl.Core.Globalization.Language.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.#ctor(System.String)
  commentId: M:Sdl.Core.Globalization.Language.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Language(String)
  nameWithType: Language.Language(String)
  fullName: Sdl.Core.Globalization.Language.Language(System.String)
  type: Constructor
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nConstruction from an ISO abbreviation string.\n\nSee <xref href=\"Sdl.Core.Globalization.Language.IsoAbbreviation\" data-throw-if-not-resolved=\"false\"></xref> for information about the expected format\nof the string.\n"
  remarks: "\nThis constructor is intended mainly for serialization purposes. \nUnder normal circumstances language objects should be created from <code>CultureInfo</code> objects.\n"
  syntax:
    content: public Language(string isoAbbreviation)
    parameters:
    - id: isoAbbreviation
      type: System.String
      description: see <xref href="Sdl.Core.Globalization.Language.IsoAbbreviation" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(isoAbbreviation As String)
  overload: Sdl.Core.Globalization.Language.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.#ctor
  commentId: M:Sdl.Core.Globalization.Language.#ctor
  id: '#ctor'
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Language()
  nameWithType: Language.Language()
  fullName: Sdl.Core.Globalization.Language.Language()
  type: Constructor
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nDefault constructor, creates an invalid language object.\n"
  syntax:
    content: public Language()
    content.vb: Public Sub New
  overload: Sdl.Core.Globalization.Language.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.#ctor(Sdl.Core.Globalization.Language)
  commentId: M:Sdl.Core.Globalization.Language.#ctor(Sdl.Core.Globalization.Language)
  id: '#ctor(Sdl.Core.Globalization.Language)'
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Language(Language)
  nameWithType: Language.Language(Language)
  fullName: Sdl.Core.Globalization.Language.Language(Sdl.Core.Globalization.Language)
  type: Constructor
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nProtected constructor used in cloning.\n"
  syntax:
    content: protected Language(Language other)
    parameters:
    - id: other
      type: Sdl.Core.Globalization.Language
    content.vb: Protected Sub New(other As Language)
  overload: Sdl.Core.Globalization.Language.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.Core.Globalization.Language.Clone
  commentId: M:Sdl.Core.Globalization.Language.Clone
  id: Clone
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Language.Clone()
  fullName: Sdl.Core.Globalization.Language.Clone()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nCreate an identical clone of this object.\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
      description: the cloned object
    content.vb: Public Function Clone As Object
  overload: Sdl.Core.Globalization.Language.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.GetDisplayName(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  commentId: M:Sdl.Core.Globalization.Language.GetDisplayName(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  id: GetDisplayName(Sdl.Core.Globalization.LanguageFormat,System.Boolean)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: GetDisplayName(LanguageFormat, Boolean)
  nameWithType: Language.GetDisplayName(LanguageFormat, Boolean)
  fullName: Sdl.Core.Globalization.Language.GetDisplayName(Sdl.Core.Globalization.LanguageFormat, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nReturns a name of the language that may be displayed to users.\n"
  syntax:
    content: public string GetDisplayName(LanguageFormat languageFormat, bool includeCountry)
    parameters:
    - id: languageFormat
      type: Sdl.Core.Globalization.LanguageFormat
      description: the TeamWorks LanguageFormat
    - id: includeCountry
      type: System.Boolean
      description: whether to include the country in the returned name
    return:
      type: System.String
      description: A name of the language that may be displayed to users.
    content.vb: Public Function GetDisplayName(languageFormat As LanguageFormat, includeCountry As Boolean) As String
  overload: Sdl.Core.Globalization.Language.GetDisplayName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.GetFlagImage(System.Boolean,System.Single,System.Int32)
  commentId: M:Sdl.Core.Globalization.Language.GetFlagImage(System.Boolean,System.Single,System.Int32)
  id: GetFlagImage(System.Boolean,System.Single,System.Int32)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: GetFlagImage(Boolean, Single, Int32)
  nameWithType: Language.GetFlagImage(Boolean, Single, Int32)
  fullName: Sdl.Core.Globalization.Language.GetFlagImage(System.Boolean, System.Single, System.Int32)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  syntax:
    content: public Image GetFlagImage(bool useFlag = true, float scaleFactor = 1F, int baseSize = 24)
    parameters:
    - id: useFlag
      type: System.Boolean
    - id: scaleFactor
      type: System.Single
    - id: baseSize
      type: System.Int32
    return:
      type: System.Drawing.Image
    content.vb: Public Function GetFlagImage(useFlag As Boolean = True, scaleFactor As Single = 1F, baseSize As Integer = 24) As Image
  overload: Sdl.Core.Globalization.Language.GetFlagImage*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.Equals(System.Object)
  commentId: M:Sdl.Core.Globalization.Language.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Language.Equals(Object)
  fullName: Sdl.Core.Globalization.Language.Equals(System.Object)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the ISO abbreviation for the two languages correspond.\n"
  remarks: The comparison is not case sensitive.
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: 'the object to compare this language to '
    return:
      type: System.Boolean
      description: <code>true</code> if the ISO abbreviation for the two languages correspond.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.Core.Globalization.Language.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.Globalization.Language.ToString
  commentId: M:Sdl.Core.Globalization.Language.ToString
  id: ToString
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Language.ToString()
  fullName: Sdl.Core.Globalization.Language.ToString()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nThe ISO abbreviation for the language.\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The ISO abbreviation for the language.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.Core.Globalization.Language.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.Globalization.Language.GetHashCode
  commentId: M:Sdl.Core.Globalization.Language.GetHashCode
  id: GetHashCode
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Language.GetHashCode()
  fullName: Sdl.Core.Globalization.Language.GetHashCode()
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nHash code based on the ISO abbreviation for the language.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: Hash code based on the ISO abbreviation for the language.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.Core.Globalization.Language.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes(System.String)
  commentId: M:Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes(System.String)
  id: GetAlternativeLanguageCodes(System.String)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: GetAlternativeLanguageCodes(String)
  nameWithType: Language.GetAlternativeLanguageCodes(String)
  fullName: Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nGets an alternative language code for the language, based on the product ID\n"
  syntax:
    content: >-
      [Obsolete("Obsolete, use  LanguageRegistryApi.GetAlternativeLanguageCodes")]

      public string[] GetAlternativeLanguageCodes(string productId)
    parameters:
    - id: productId
      type: System.String
    return:
      type: System.String[]
      description: string that represents the alternative language code for the language and the product given
    content.vb: >-
      <Obsolete("Obsolete, use  LanguageRegistryApi.GetAlternativeLanguageCodes")>

      Public Function GetAlternativeLanguageCodes(productId As String) As String()
  overload: Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Obsolete, use  LanguageRegistryApi.GetAlternativeLanguageCodes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.GetImage(System.Boolean)
  commentId: M:Sdl.Core.Globalization.Language.GetImage(System.Boolean)
  id: GetImage(System.Boolean)
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: GetImage(Boolean)
  nameWithType: Language.GetImage(Boolean)
  fullName: Sdl.Core.Globalization.Language.GetImage(System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  syntax:
    content: >-
      [Obsolete("Obsolete, use GetFlagImage")]

      public Image GetImage(bool useFlag)
    parameters:
    - id: useFlag
      type: System.Boolean
    return:
      type: System.Drawing.Image
    content.vb: >-
      <Obsolete("Obsolete, use GetFlagImage")>

      Public Function GetImage(useFlag As Boolean) As Image
  overload: Sdl.Core.Globalization.Language.GetImage*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Obsolete, use GetFlagImage
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.DefaultDisplaySettings
  commentId: P:Sdl.Core.Globalization.Language.DefaultDisplaySettings
  id: DefaultDisplaySettings
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: DefaultDisplaySettings
  nameWithType: Language.DefaultDisplaySettings
  fullName: Sdl.Core.Globalization.Language.DefaultDisplaySettings
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nDefault settings for how languages should be shown to users.\n"
  remarks: "\n<p>\nSince this is a static property, changing its values means changing \nthe language display for the entire process.\n</p>\n<p>\nIf you are interested to know when these properties change,\nattach a handler to the <xref href=\"Sdl.Core.Globalization.LanguageDisplaySettings.SettingsChanged\" data-throw-if-not-resolved=\"false\"></xref> event of this object.\n</p>\n"
  syntax:
    content: public static LanguageDisplaySettings DefaultDisplaySettings { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.LanguageDisplaySettings
    content.vb: Public Shared ReadOnly Property DefaultDisplaySettings As LanguageDisplaySettings
  overload: Sdl.Core.Globalization.Language.DefaultDisplaySettings*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.CultureInfo
  commentId: P:Sdl.Core.Globalization.Language.CultureInfo
  id: CultureInfo
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: CultureInfo
  nameWithType: Language.CultureInfo
  fullName: Sdl.Core.Globalization.Language.CultureInfo
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nThe CultureInfo for this language.\n\nIf this language is not supported on this machine an \n<xref href=\"Sdl.Core.Globalization.UnsupportedLanguageException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.\n\nIf the ISO abbreviation is null this property returns null.\n"
  syntax:
    content: public CultureInfo CultureInfo { get; set; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: Public Property CultureInfo As CultureInfo
  overload: Sdl.Core.Globalization.Language.CultureInfo*
  exceptions:
  - type: Sdl.Core.Globalization.UnsupportedLanguageException
    commentId: T:Sdl.Core.Globalization.UnsupportedLanguageException
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.UseBlankAsWordSeparator
  commentId: P:Sdl.Core.Globalization.Language.UseBlankAsWordSeparator
  id: UseBlankAsWordSeparator
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: UseBlankAsWordSeparator
  nameWithType: Language.UseBlankAsWordSeparator
  fullName: Sdl.Core.Globalization.Language.UseBlankAsWordSeparator
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: public bool UseBlankAsWordSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UseBlankAsWordSeparator As Boolean
  overload: Sdl.Core.Globalization.Language.UseBlankAsWordSeparator*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator
  commentId: P:Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator
  id: UseBlankAsSentenceSeparator
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: UseBlankAsSentenceSeparator
  nameWithType: Language.UseBlankAsSentenceSeparator
  fullName: Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n\n"
  syntax:
    content: public bool UseBlankAsSentenceSeparator { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UseBlankAsSentenceSeparator As Boolean
  overload: Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.IsValid
  commentId: P:Sdl.Core.Globalization.Language.IsValid
  id: IsValid
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: Language.IsValid
  fullName: Sdl.Core.Globalization.Language.IsValid
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if an ISO abbreviation has been set for the language.\n"
  remarks: >-
    This does not mean that the language code is actual a valid code.

    Since the ISO code could be unsupported on this system there is no easy

    way to ensure that the code actually is valid.

    To check if the code is supported on this system test the <xref href="Sdl.Core.Globalization.Language.IsSupported" data-throw-if-not-resolved="false"></xref> property.
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: Sdl.Core.Globalization.Language.IsValid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.IsSupported
  commentId: P:Sdl.Core.Globalization.Language.IsSupported
  id: IsSupported
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: IsSupported
  nameWithType: Language.IsSupported
  fullName: Sdl.Core.Globalization.Language.IsSupported
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the language is valid and supported on this system.\n"
  syntax:
    content: public bool IsSupported { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSupported As Boolean
  overload: Sdl.Core.Globalization.Language.IsSupported*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.UsesCharacterCounts
  commentId: P:Sdl.Core.Globalization.Language.UsesCharacterCounts
  id: UsesCharacterCounts
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: UsesCharacterCounts
  nameWithType: Language.UsesCharacterCounts
  fullName: Sdl.Core.Globalization.Language.UsesCharacterCounts
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\n<code>true</code> if the language uses character counts rather than word counts.\n"
  syntax:
    content: public bool UsesCharacterCounts { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property UsesCharacterCounts As Boolean
  overload: Sdl.Core.Globalization.Language.UsesCharacterCounts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.LanguageCode
  commentId: P:Sdl.Core.Globalization.Language.LanguageCode
  id: LanguageCode
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: LanguageCode
  nameWithType: Language.LanguageCode
  fullName: Sdl.Core.Globalization.Language.LanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nThe ISO formatted code corresponding to the Language\n"
  syntax:
    content: public string LanguageCode { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property LanguageCode As String
  overload: Sdl.Core.Globalization.Language.LanguageCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.EnglishName
  commentId: P:Sdl.Core.Globalization.Language.EnglishName
  id: EnglishName
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: EnglishName
  nameWithType: Language.EnglishName
  fullName: Sdl.Core.Globalization.Language.EnglishName
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nEnglish name of the language;\n"
  syntax:
    content: public string EnglishName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property EnglishName As String
  overload: Sdl.Core.Globalization.Language.EnglishName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.IsNeutral
  commentId: P:Sdl.Core.Globalization.Language.IsNeutral
  id: IsNeutral
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: IsNeutral
  nameWithType: Language.IsNeutral
  fullName: Sdl.Core.Globalization.Language.IsNeutral
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nMarks a neutral language\n"
  syntax:
    content: public bool IsNeutral { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNeutral As Boolean
  overload: Sdl.Core.Globalization.Language.IsNeutral*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.Direction
  commentId: P:Sdl.Core.Globalization.Language.Direction
  id: Direction
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: Language.Direction
  fullName: Sdl.Core.Globalization.Language.Direction
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nMarks the direction of the language, can be &quot;ltr&quot;-left-to-right or &quot;rtl&quot;-right-to-left\n"
  syntax:
    content: public string Direction { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Direction As String
  overload: Sdl.Core.Globalization.Language.Direction*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.ParentLanguageCode
  commentId: P:Sdl.Core.Globalization.Language.ParentLanguageCode
  id: ParentLanguageCode
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: ParentLanguageCode
  nameWithType: Language.ParentLanguageCode
  fullName: Sdl.Core.Globalization.Language.ParentLanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nISO code of the parent language\n"
  syntax:
    content: public string ParentLanguageCode { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ParentLanguageCode As String
  overload: Sdl.Core.Globalization.Language.ParentLanguageCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode
  commentId: P:Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode
  id: DefaultSpecificLanguageCode
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: DefaultSpecificLanguageCode
  nameWithType: Language.DefaultSpecificLanguageCode
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nISO code of the default specific culture, used mostly in serialization/deserialization\n"
  syntax:
    content: public string DefaultSpecificLanguageCode { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DefaultSpecificLanguageCode As String
  overload: Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.Script
  commentId: P:Sdl.Core.Globalization.Language.Script
  id: Script
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Script
  nameWithType: Language.Script
  fullName: Sdl.Core.Globalization.Language.Script
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nThe language writing script (E.g.:Latn, Cyrl).\n"
  syntax:
    content: public string Script { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Script As String
  overload: Sdl.Core.Globalization.Language.Script*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.SupportedProducts
  commentId: P:Sdl.Core.Globalization.Language.SupportedProducts
  id: SupportedProducts
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: SupportedProducts
  nameWithType: Language.SupportedProducts
  fullName: Sdl.Core.Globalization.Language.SupportedProducts
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nDictionary of supported products and their respective alternative language codes\n"
  syntax:
    content: public Dictionary<Product, List<AlternativeLanguageCode>> SupportedProducts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{Sdl.Core.Globalization.LanguageRegistry.Product,System.Collections.Generic.List{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
    content.vb: Public ReadOnly Property SupportedProducts As Dictionary(Of Product, List(Of AlternativeLanguageCode))
  overload: Sdl.Core.Globalization.Language.SupportedProducts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.RegionalVariants
  commentId: P:Sdl.Core.Globalization.Language.RegionalVariants
  id: RegionalVariants
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: RegionalVariants
  nameWithType: Language.RegionalVariants
  fullName: Sdl.Core.Globalization.Language.RegionalVariants
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nList of the regional variants of the language\n"
  syntax:
    content: public IList<Language> RegionalVariants { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
    content.vb: Public Property RegionalVariants As IList(Of Language)
  overload: Sdl.Core.Globalization.Language.RegionalVariants*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.ParentLanguage
  commentId: P:Sdl.Core.Globalization.Language.ParentLanguage
  id: ParentLanguage
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: ParentLanguage
  nameWithType: Language.ParentLanguage
  fullName: Sdl.Core.Globalization.Language.ParentLanguage
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nParent language\n"
  syntax:
    content: public Language ParentLanguage { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.Language
    content.vb: Public ReadOnly Property ParentLanguage As Language
  overload: Sdl.Core.Globalization.Language.ParentLanguage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.DefaultSpecificLanguage
  commentId: P:Sdl.Core.Globalization.Language.DefaultSpecificLanguage
  id: DefaultSpecificLanguage
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: DefaultSpecificLanguage
  nameWithType: Language.DefaultSpecificLanguage
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificLanguage
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nDefault specific language language\n"
  syntax:
    content: public Language DefaultSpecificLanguage { get; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.Language
    content.vb: Public ReadOnly Property DefaultSpecificLanguage As Language
  overload: Sdl.Core.Globalization.Language.DefaultSpecificLanguage*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.LdmlData
  commentId: P:Sdl.Core.Globalization.Language.LdmlData
  id: LdmlData
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: LdmlData
  nameWithType: Language.LdmlData
  fullName: Sdl.Core.Globalization.Language.LdmlData
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nLdml Data for the language\n"
  syntax:
    content: public string LdmlData { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property LdmlData As String
  overload: Sdl.Core.Globalization.Language.LdmlData*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.DisplayName
  commentId: P:Sdl.Core.Globalization.Language.DisplayName
  id: DisplayName
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: Language.DisplayName
  fullName: Sdl.Core.Globalization.Language.DisplayName
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nReturns the name of the language as it should be displayed to users.\n"
  syntax:
    content: public string DisplayName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DisplayName As String
  overload: Sdl.Core.Globalization.Language.DisplayName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.Globalization.Language.IsoAbbreviation
  commentId: P:Sdl.Core.Globalization.Language.IsoAbbreviation
  id: IsoAbbreviation
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: IsoAbbreviation
  nameWithType: Language.IsoAbbreviation
  fullName: Sdl.Core.Globalization.Language.IsoAbbreviation
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  syntax:
    content: public string IsoAbbreviation { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property IsoAbbreviation As String
  overload: Sdl.Core.Globalization.Language.IsoAbbreviation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.DefaultSpecificCultureCode
  commentId: P:Sdl.Core.Globalization.Language.DefaultSpecificCultureCode
  id: DefaultSpecificCultureCode
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: DefaultSpecificCultureCode
  nameWithType: Language.DefaultSpecificCultureCode
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificCultureCode
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nISO code of the default specific culture, used mostly in serialization/deserialization\n"
  syntax:
    content: >-
      [Obsolete("Obsolete, use DefaultSpecificLanguageCode")]

      public string DefaultSpecificCultureCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Obsolete("Obsolete, use DefaultSpecificLanguageCode")>

      Public Property DefaultSpecificCultureCode As String
  overload: Sdl.Core.Globalization.Language.DefaultSpecificCultureCode*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Obsolete, use DefaultSpecificLanguageCode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.DefaultSpecificCulture
  commentId: P:Sdl.Core.Globalization.Language.DefaultSpecificCulture
  id: DefaultSpecificCulture
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: DefaultSpecificCulture
  nameWithType: Language.DefaultSpecificCulture
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificCulture
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nDefault specific language\n"
  syntax:
    content: >-
      [Obsolete("Obsolete, use DefaultSpecificLanguage")]

      public Language DefaultSpecificCulture { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.Language
    content.vb: >-
      <Obsolete("Obsolete, use DefaultSpecificLanguage")>

      Public Property DefaultSpecificCulture As Language
  overload: Sdl.Core.Globalization.Language.DefaultSpecificCulture*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Obsolete, use DefaultSpecificLanguage
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.ParentIsoCode
  commentId: P:Sdl.Core.Globalization.Language.ParentIsoCode
  id: ParentIsoCode
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: ParentIsoCode
  nameWithType: Language.ParentIsoCode
  fullName: Sdl.Core.Globalization.Language.ParentIsoCode
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  summary: "\nOBSOLETE,use ParentLanguageCode \n"
  syntax:
    content: >-
      [Obsolete("Obsolete, use  ParentLanguageCode")]

      public string ParentIsoCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Obsolete("Obsolete, use  ParentLanguageCode")>

      Public Property ParentIsoCode As String
  overload: Sdl.Core.Globalization.Language.ParentIsoCode*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Obsolete, use  ParentLanguageCode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.Language.Image
  commentId: P:Sdl.Core.Globalization.Language.Image
  id: Image
  parent: Sdl.Core.Globalization.Language
  langs:
  - csharp
  - vb
  name: Image
  nameWithType: Language.Image
  fullName: Sdl.Core.Globalization.Language.Image
  type: Property
  source:
    path: Sdl.Core.Globalization
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization
  namespace: Sdl.Core.Globalization
  syntax:
    content: >-
      [Obsolete("Obsolete, use GetFlagImage")]

      public Image Image { get; }
    parameters: []
    return:
      type: System.Drawing.Image
    content.vb: >-
      <Obsolete("Obsolete, use GetFlagImage")>

      Public ReadOnly Property Image As Image
  overload: Sdl.Core.Globalization.Language.Image*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Obsolete, use GetFlagImage
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.Language.IsNullOrInvalid*
  commentId: Overload:Sdl.Core.Globalization.Language.IsNullOrInvalid
  isExternal: true
  name: IsNullOrInvalid
  nameWithType: Language.IsNullOrInvalid
  fullName: Sdl.Core.Globalization.Language.IsNullOrInvalid
- uid: Sdl.Core.Globalization.Language
  commentId: T:Sdl.Core.Globalization.Language
  parent: Sdl.Core.Globalization
  isExternal: true
  name: Language
  nameWithType: Language
  fullName: Sdl.Core.Globalization.Language
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.Globalization.Language.GetAllLanguages*
  commentId: Overload:Sdl.Core.Globalization.Language.GetAllLanguages
  isExternal: true
  name: GetAllLanguages
  nameWithType: Language.GetAllLanguages
  fullName: Sdl.Core.Globalization.Language.GetAllLanguages
- uid: Sdl.Core.Globalization.Language[]
  isExternal: true
  name: Language[]
  nameWithType: Language[]
  fullName: Sdl.Core.Globalization.Language[]
  nameWithType.vb: Language()
  fullName.vb: Sdl.Core.Globalization.Language()
  name.vb: Language()
  spec.csharp:
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.Globalization.Language.Equals*
  commentId: Overload:Sdl.Core.Globalization.Language.Equals
  isExternal: true
  name: Equals
  nameWithType: Language.Equals
  fullName: Sdl.Core.Globalization.Language.Equals
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.Globalization.Language.#ctor*
  commentId: Overload:Sdl.Core.Globalization.Language.#ctor
  isExternal: true
  name: Language
  nameWithType: Language.Language
  fullName: Sdl.Core.Globalization.Language.Language
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Sdl.Core.Globalization.Language.Clone*
  commentId: Overload:Sdl.Core.Globalization.Language.Clone
  isExternal: true
  name: Clone
  nameWithType: Language.Clone
  fullName: Sdl.Core.Globalization.Language.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.Language.GetDisplayName*
  commentId: Overload:Sdl.Core.Globalization.Language.GetDisplayName
  isExternal: true
  name: GetDisplayName
  nameWithType: Language.GetDisplayName
  fullName: Sdl.Core.Globalization.Language.GetDisplayName
- uid: Sdl.Core.Globalization.LanguageFormat
  commentId: T:Sdl.Core.Globalization.LanguageFormat
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageFormat
  nameWithType: LanguageFormat
  fullName: Sdl.Core.Globalization.LanguageFormat
- uid: Sdl.Core.Globalization.Language.GetFlagImage*
  commentId: Overload:Sdl.Core.Globalization.Language.GetFlagImage
  isExternal: true
  name: GetFlagImage
  nameWithType: Language.GetFlagImage
  fullName: Sdl.Core.Globalization.Language.GetFlagImage
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Image
  isExternal: true
  name: Image
  nameWithType: Image
  fullName: System.Drawing.Image
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.Language.ToString*
  commentId: Overload:Sdl.Core.Globalization.Language.ToString
  isExternal: true
  name: ToString
  nameWithType: Language.ToString
  fullName: Sdl.Core.Globalization.Language.ToString
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.Language.GetHashCode*
  commentId: Overload:Sdl.Core.Globalization.Language.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: Language.GetHashCode
  fullName: Sdl.Core.Globalization.Language.GetHashCode
- uid: Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes*
  commentId: Overload:Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes
  isExternal: true
  name: GetAlternativeLanguageCodes
  nameWithType: Language.GetAlternativeLanguageCodes
  fullName: Sdl.Core.Globalization.Language.GetAlternativeLanguageCodes
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.Globalization.Language.GetImage*
  commentId: Overload:Sdl.Core.Globalization.Language.GetImage
  isExternal: true
  name: GetImage
  nameWithType: Language.GetImage
  fullName: Sdl.Core.Globalization.Language.GetImage
- uid: Sdl.Core.Globalization.Language.DefaultDisplaySettings*
  commentId: Overload:Sdl.Core.Globalization.Language.DefaultDisplaySettings
  isExternal: true
  name: DefaultDisplaySettings
  nameWithType: Language.DefaultDisplaySettings
  fullName: Sdl.Core.Globalization.Language.DefaultDisplaySettings
- uid: Sdl.Core.Globalization.LanguageDisplaySettings
  commentId: T:Sdl.Core.Globalization.LanguageDisplaySettings
  parent: Sdl.Core.Globalization
  isExternal: true
  name: LanguageDisplaySettings
  nameWithType: LanguageDisplaySettings
  fullName: Sdl.Core.Globalization.LanguageDisplaySettings
- uid: Sdl.Core.Globalization.Language.CultureInfo*
  commentId: Overload:Sdl.Core.Globalization.Language.CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: Language.CultureInfo
  fullName: Sdl.Core.Globalization.Language.CultureInfo
- uid: Sdl.Core.Globalization.UnsupportedLanguageException
  commentId: T:Sdl.Core.Globalization.UnsupportedLanguageException
  isExternal: true
  name: UnsupportedLanguageException
  nameWithType: UnsupportedLanguageException
  fullName: Sdl.Core.Globalization.UnsupportedLanguageException
- uid: Sdl.Core.Globalization.Language.UseBlankAsWordSeparator*
  commentId: Overload:Sdl.Core.Globalization.Language.UseBlankAsWordSeparator
  isExternal: true
  name: UseBlankAsWordSeparator
  nameWithType: Language.UseBlankAsWordSeparator
  fullName: Sdl.Core.Globalization.Language.UseBlankAsWordSeparator
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator*
  commentId: Overload:Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator
  isExternal: true
  name: UseBlankAsSentenceSeparator
  nameWithType: Language.UseBlankAsSentenceSeparator
  fullName: Sdl.Core.Globalization.Language.UseBlankAsSentenceSeparator
- uid: Sdl.Core.Globalization.Language.IsValid*
  commentId: Overload:Sdl.Core.Globalization.Language.IsValid
  isExternal: true
  name: IsValid
  nameWithType: Language.IsValid
  fullName: Sdl.Core.Globalization.Language.IsValid
- uid: Sdl.Core.Globalization.Language.IsSupported*
  commentId: Overload:Sdl.Core.Globalization.Language.IsSupported
  isExternal: true
  name: IsSupported
  nameWithType: Language.IsSupported
  fullName: Sdl.Core.Globalization.Language.IsSupported
- uid: Sdl.Core.Globalization.Language.UsesCharacterCounts*
  commentId: Overload:Sdl.Core.Globalization.Language.UsesCharacterCounts
  isExternal: true
  name: UsesCharacterCounts
  nameWithType: Language.UsesCharacterCounts
  fullName: Sdl.Core.Globalization.Language.UsesCharacterCounts
- uid: Sdl.Core.Globalization.Language.LanguageCode*
  commentId: Overload:Sdl.Core.Globalization.Language.LanguageCode
  isExternal: true
  name: LanguageCode
  nameWithType: Language.LanguageCode
  fullName: Sdl.Core.Globalization.Language.LanguageCode
- uid: Sdl.Core.Globalization.Language.EnglishName*
  commentId: Overload:Sdl.Core.Globalization.Language.EnglishName
  isExternal: true
  name: EnglishName
  nameWithType: Language.EnglishName
  fullName: Sdl.Core.Globalization.Language.EnglishName
- uid: Sdl.Core.Globalization.Language.IsNeutral*
  commentId: Overload:Sdl.Core.Globalization.Language.IsNeutral
  isExternal: true
  name: IsNeutral
  nameWithType: Language.IsNeutral
  fullName: Sdl.Core.Globalization.Language.IsNeutral
- uid: Sdl.Core.Globalization.Language.Direction*
  commentId: Overload:Sdl.Core.Globalization.Language.Direction
  isExternal: true
  name: Direction
  nameWithType: Language.Direction
  fullName: Sdl.Core.Globalization.Language.Direction
- uid: Sdl.Core.Globalization.Language.ParentLanguageCode*
  commentId: Overload:Sdl.Core.Globalization.Language.ParentLanguageCode
  isExternal: true
  name: ParentLanguageCode
  nameWithType: Language.ParentLanguageCode
  fullName: Sdl.Core.Globalization.Language.ParentLanguageCode
- uid: Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode*
  commentId: Overload:Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode
  isExternal: true
  name: DefaultSpecificLanguageCode
  nameWithType: Language.DefaultSpecificLanguageCode
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificLanguageCode
- uid: Sdl.Core.Globalization.Language.Script*
  commentId: Overload:Sdl.Core.Globalization.Language.Script
  isExternal: true
  name: Script
  nameWithType: Language.Script
  fullName: Sdl.Core.Globalization.Language.Script
- uid: Sdl.Core.Globalization.Language.SupportedProducts*
  commentId: Overload:Sdl.Core.Globalization.Language.SupportedProducts
  isExternal: true
  name: SupportedProducts
  nameWithType: Language.SupportedProducts
  fullName: Sdl.Core.Globalization.Language.SupportedProducts
- uid: System.Collections.Generic.Dictionary{Sdl.Core.Globalization.LanguageRegistry.Product,System.Collections.Generic.List{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  commentId: T:System.Collections.Generic.Dictionary{Sdl.Core.Globalization.LanguageRegistry.Product,System.Collections.Generic.List{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Product, List<AlternativeLanguageCode>>
  nameWithType: Dictionary<Product, List<AlternativeLanguageCode>>
  fullName: System.Collections.Generic.Dictionary<Sdl.Core.Globalization.LanguageRegistry.Product, System.Collections.Generic.List<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>>
  nameWithType.vb: Dictionary(Of Product, List(Of AlternativeLanguageCode))
  fullName.vb: System.Collections.Generic.Dictionary(Of Sdl.Core.Globalization.LanguageRegistry.Product, System.Collections.Generic.List(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode))
  name.vb: Dictionary(Of Product, List(Of AlternativeLanguageCode))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.Globalization.Language.RegionalVariants*
  commentId: Overload:Sdl.Core.Globalization.Language.RegionalVariants
  isExternal: true
  name: RegionalVariants
  nameWithType: Language.RegionalVariants
  fullName: Sdl.Core.Globalization.Language.RegionalVariants
- uid: System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
  commentId: T:System.Collections.Generic.IList{Sdl.Core.Globalization.Language}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Language>
  nameWithType: IList<Language>
  fullName: System.Collections.Generic.IList<Sdl.Core.Globalization.Language>
  nameWithType.vb: IList(Of Language)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.Globalization.Language)
  name.vb: IList(Of Language)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.Language
    name: Language
    nameWithType: Language
    fullName: Sdl.Core.Globalization.Language
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.Language.ParentLanguage*
  commentId: Overload:Sdl.Core.Globalization.Language.ParentLanguage
  isExternal: true
  name: ParentLanguage
  nameWithType: Language.ParentLanguage
  fullName: Sdl.Core.Globalization.Language.ParentLanguage
- uid: Sdl.Core.Globalization.Language.DefaultSpecificLanguage*
  commentId: Overload:Sdl.Core.Globalization.Language.DefaultSpecificLanguage
  isExternal: true
  name: DefaultSpecificLanguage
  nameWithType: Language.DefaultSpecificLanguage
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificLanguage
- uid: Sdl.Core.Globalization.Language.LdmlData*
  commentId: Overload:Sdl.Core.Globalization.Language.LdmlData
  isExternal: true
  name: LdmlData
  nameWithType: Language.LdmlData
  fullName: Sdl.Core.Globalization.Language.LdmlData
- uid: Sdl.Core.Globalization.Language.DisplayName*
  commentId: Overload:Sdl.Core.Globalization.Language.DisplayName
  isExternal: true
  name: DisplayName
  nameWithType: Language.DisplayName
  fullName: Sdl.Core.Globalization.Language.DisplayName
- uid: Sdl.Core.Globalization.Language.IsoAbbreviation*
  commentId: Overload:Sdl.Core.Globalization.Language.IsoAbbreviation
  isExternal: true
  name: IsoAbbreviation
  nameWithType: Language.IsoAbbreviation
  fullName: Sdl.Core.Globalization.Language.IsoAbbreviation
- uid: Sdl.Core.Globalization.Language.DefaultSpecificCultureCode*
  commentId: Overload:Sdl.Core.Globalization.Language.DefaultSpecificCultureCode
  isExternal: true
  name: DefaultSpecificCultureCode
  nameWithType: Language.DefaultSpecificCultureCode
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificCultureCode
- uid: Sdl.Core.Globalization.Language.DefaultSpecificCulture*
  commentId: Overload:Sdl.Core.Globalization.Language.DefaultSpecificCulture
  isExternal: true
  name: DefaultSpecificCulture
  nameWithType: Language.DefaultSpecificCulture
  fullName: Sdl.Core.Globalization.Language.DefaultSpecificCulture
- uid: Sdl.Core.Globalization.Language.ParentIsoCode*
  commentId: Overload:Sdl.Core.Globalization.Language.ParentIsoCode
  isExternal: true
  name: ParentIsoCode
  nameWithType: Language.ParentIsoCode
  fullName: Sdl.Core.Globalization.Language.ParentIsoCode
- uid: Sdl.Core.Globalization.Language.Image*
  commentId: Overload:Sdl.Core.Globalization.Language.Image
  isExternal: true
  name: Image
  nameWithType: Language.Image
  fullName: Sdl.Core.Globalization.Language.Image
