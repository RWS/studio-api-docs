### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  id: ExtensionsRepository
  parent: Sdl.Core.PluginFramework.Integration
  children:
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object})
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean})
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Object)
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``1(Sdl.Core.PluginFramework.IExtension)
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``1(System.Type,System.Type)
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``3
  - Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance
  langs:
  - csharp
  - vb
  name: ExtensionsRepository
  nameWithType: ExtensionsRepository
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nImplements an extensions repository which stores singleton instances of the extensions\n"
  syntax:
    content: 'public sealed class ExtensionsRepository : Object'
    content.vb: >-
      Public NotInheritable Class ExtensionsRepository
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean})
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean})
  id: FirstOrDefault(System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean})
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: FirstOrDefault(Func<ExtensionStoreItem, Boolean>)
  nameWithType: ExtensionsRepository.FirstOrDefault(Func<ExtensionStoreItem, Boolean>)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Func<Sdl.Core.PluginFramework.Integration.ExtensionStoreItem, System.Boolean>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nReturns the first element stored in the repository that satisfies a condition or a default value if no such element found.\n"
  syntax:
    content: public ExtensionStoreItem FirstOrDefault(Func<ExtensionStoreItem, bool> predicate)
    parameters:
    - id: predicate
      type: System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean}
      description: The predicate used for the searching inside the repository.
    return:
      type: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
      description: Returns the first element stored in the repository that contains the instance reference.
    content.vb: Public Function FirstOrDefault(predicate As Func(Of ExtensionStoreItem, Boolean)) As ExtensionStoreItem
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault*
  nameWithType.vb: ExtensionsRepository.FirstOrDefault(Func(Of ExtensionStoreItem, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Func(Of Sdl.Core.PluginFramework.Integration.ExtensionStoreItem, System.Boolean))
  name.vb: FirstOrDefault(Func(Of ExtensionStoreItem, Boolean))
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Object)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Object)
  id: FirstOrDefault(System.Object)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: FirstOrDefault(Object)
  nameWithType: ExtensionsRepository.FirstOrDefault(Object)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault(System.Object)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nReturns the first element stored in the repository that contains the extension instance reference.\n"
  syntax:
    content: public ExtensionStoreItem FirstOrDefault(object extensionInstanceReference)
    parameters:
    - id: extensionInstanceReference
      type: System.Object
      description: The extension instance reference which is searched in the repository
    return:
      type: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
      description: Returns the first element stored in the repository that contains the instance reference.
    content.vb: Public Function FirstOrDefault(extensionInstanceReference As Object) As ExtensionStoreItem
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``1(System.Type,System.Type)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``1(System.Type,System.Type)
  id: GetAssignableInstanceOrDefault``1(System.Type,System.Type)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: GetAssignableInstanceOrDefault<TResult>(Type, Type)
  nameWithType: ExtensionsRepository.GetAssignableInstanceOrDefault<TResult>(Type, Type)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault<TResult>(System.Type, System.Type)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nReturns an extension instance from the repository which can be assigned to a specified TResult type or null if none was found.\n"
  syntax:
    content: >-
      public TResult GetAssignableInstanceOrDefault<TResult>(Type extensionAttributeType, Type extensionType)
          where TResult : class
    parameters:
    - id: extensionAttributeType
      type: System.Type
      description: The type for an attribute decorating the extension for which the search is done.
    - id: extensionType
      type: System.Type
      description: The extension type for which the search is done.
    typeParameters:
    - id: TResult
      description: The assignable instance type which is required from the extension store.
    return:
      type: '{TResult}'
      description: Returns the extension instance assignable to TResult.
    content.vb: Public Function GetAssignableInstanceOrDefault(Of TResult As Class)(extensionAttributeType As Type, extensionType As Type) As TResult
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault*
  nameWithType.vb: ExtensionsRepository.GetAssignableInstanceOrDefault(Of TResult)(Type, Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault(Of TResult)(System.Type, System.Type)
  name.vb: GetAssignableInstanceOrDefault(Of TResult)(Type, Type)
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``3
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``3
  id: GetAssignableInstanceOrDefault``3
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: GetAssignableInstanceOrDefault<TAttribute, TExtensionType, TResult>()
  nameWithType: ExtensionsRepository.GetAssignableInstanceOrDefault<TAttribute, TExtensionType, TResult>()
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault<TAttribute, TExtensionType, TResult>()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nReturns an extension instance from the repository which can be assigned to a specified TResult type or null if none was found\n"
  syntax:
    content: >-
      public TResult GetAssignableInstanceOrDefault<TAttribute, TExtensionType, TResult>()
          where TAttribute : ExtensionAttribute where TResult : class
    typeParameters:
    - id: TAttribute
      description: The extension attribute type for which the search is done.
    - id: TExtensionType
      description: The extension type for which the search is done.
    - id: TResult
      description: The assignable instance type which is required from the extension store.
    return:
      type: '{TResult}'
      description: Returns the extension instance assignable to TResult.
    content.vb: Public Function GetAssignableInstanceOrDefault(Of TAttribute As ExtensionAttribute, TExtensionType, TResult As Class) As TResult
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault*
  nameWithType.vb: ExtensionsRepository.GetAssignableInstanceOrDefault(Of TAttribute, TExtensionType, TResult)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault(Of TAttribute, TExtensionType, TResult)()
  name.vb: GetAssignableInstanceOrDefault(Of TAttribute, TExtensionType, TResult)()
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``1(Sdl.Core.PluginFramework.IExtension)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault``1(Sdl.Core.PluginFramework.IExtension)
  id: GetAssignableInstanceOrDefault``1(Sdl.Core.PluginFramework.IExtension)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: GetAssignableInstanceOrDefault<TResult>(IExtension)
  nameWithType: ExtensionsRepository.GetAssignableInstanceOrDefault<TResult>(IExtension)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault<TResult>(Sdl.Core.PluginFramework.IExtension)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nReturns an extension instance from the repository which can be assigned to a specified TResult type or null if none was found.\n"
  syntax:
    content: >-
      public TResult GetAssignableInstanceOrDefault<TResult>(IExtension extension)
          where TResult : class
    parameters:
    - id: extension
      type: Sdl.Core.PluginFramework.IExtension
      description: The extension instance for which the search is done.
    typeParameters:
    - id: TResult
      description: The assignable instance type which is required from the extension store.
    return:
      type: '{TResult}'
      description: Returns the extension instance assignable to TResult.
    content.vb: Public Function GetAssignableInstanceOrDefault(Of TResult As Class)(extension As IExtension) As TResult
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault*
  nameWithType.vb: ExtensionsRepository.GetAssignableInstanceOrDefault(Of TResult)(IExtension)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault(Of TResult)(Sdl.Core.PluginFramework.IExtension)
  name.vb: GetAssignableInstanceOrDefault(Of TResult)(IExtension)
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object})
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object})
  id: AddExtension``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object})
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: AddExtension<TResult>(IExtension, ExtensionArguments, Func<IExtension, Object, ExtensionArguments, Object>)
  nameWithType: ExtensionsRepository.AddExtension<TResult>(IExtension, ExtensionArguments, Func<IExtension, Object, ExtensionArguments, Object>)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension<TResult>(Sdl.Core.PluginFramework.IExtension, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Func<Sdl.Core.PluginFramework.IExtension, System.Object, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Object>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nAdd an extension to the repository\n"
  syntax:
    content: >-
      public TResult AddExtension<TResult>(IExtension extension, ExtensionArguments arguments, Func<IExtension, object, ExtensionArguments, object> instanceCreator)
          where TResult : class
    parameters:
    - id: extension
      type: Sdl.Core.PluginFramework.IExtension
      description: The extension object
    - id: arguments
      type: Sdl.Core.PluginFramework.Integration.ExtensionArguments
      description: The arguments required by the instance creator for the extension instance initialization
    - id: instanceCreator
      type: System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object}
      description: A delegate passed to initialize a custom extension instance which will get the extension object, default extension instance and the extension initializer arguments
    typeParameters:
    - id: TResult
      description: The instance which is stored or was created while storing.
    return:
      type: '{TResult}'
      description: The instance created and stored in the repository or an assignable instance already present in the repository.
    content.vb: Public Function AddExtension(Of TResult As Class)(extension As IExtension, arguments As ExtensionArguments, instanceCreator As Func(Of IExtension, Object, ExtensionArguments, Object)) As TResult
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension*
  nameWithType.vb: ExtensionsRepository.AddExtension(Of TResult)(IExtension, ExtensionArguments, Func(Of IExtension, Object, ExtensionArguments, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension(Of TResult)(Sdl.Core.PluginFramework.IExtension, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Func(Of Sdl.Core.PluginFramework.IExtension, System.Object, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Object))
  name.vb: AddExtension(Of TResult)(IExtension, ExtensionArguments, Func(Of IExtension, Object, ExtensionArguments, Object))
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance
  commentId: P:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance
  id: Instance
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: ExtensionsRepository.Instance
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nSingle instance of the ExtensionsRepository\n"
  syntax:
    content: public static ExtensionsRepository Instance { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
    content.vb: Public Shared ReadOnly Property Instance As ExtensionsRepository
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework.Integration
  commentId: N:Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: Sdl.Core.PluginFramework.Integration
  nameWithType: Sdl.Core.PluginFramework.Integration
  fullName: Sdl.Core.PluginFramework.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault
  isExternal: true
  name: FirstOrDefault
  nameWithType: ExtensionsRepository.FirstOrDefault
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.FirstOrDefault
- uid: System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean}
  commentId: '!:System.Func{Sdl.Core.PluginFramework.Integration.ExtensionStoreItem,System.Boolean}'
  definition: System.Func`2
  name: Func<ExtensionStoreItem, Boolean>
  nameWithType: Func<ExtensionStoreItem, Boolean>
  fullName: System.Func<Sdl.Core.PluginFramework.Integration.ExtensionStoreItem, System.Boolean>
  nameWithType.vb: Func(Of ExtensionStoreItem, Boolean)
  fullName.vb: System.Func(Of Sdl.Core.PluginFramework.Integration.ExtensionStoreItem, System.Boolean)
  name.vb: Func(Of ExtensionStoreItem, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
    name: ExtensionStoreItem
    nameWithType: ExtensionStoreItem
    fullName: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
    name: ExtensionStoreItem
    nameWithType: ExtensionStoreItem
    fullName: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
  parent: Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: ExtensionStoreItem
  nameWithType: ExtensionStoreItem
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionStoreItem
- uid: System.Func`2
  commentId: '!:System.Func`2'
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault
  isExternal: true
  name: GetAssignableInstanceOrDefault
  nameWithType: ExtensionsRepository.GetAssignableInstanceOrDefault
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.GetAssignableInstanceOrDefault
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Sdl.Core.PluginFramework.IExtension
  commentId: T:Sdl.Core.PluginFramework.IExtension
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IExtension
  nameWithType: IExtension
  fullName: Sdl.Core.PluginFramework.IExtension
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension
  isExternal: true
  name: AddExtension
  nameWithType: ExtensionsRepository.AddExtension
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.AddExtension
- uid: Sdl.Core.PluginFramework.Integration.ExtensionArguments
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionArguments
  parent: Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: ExtensionArguments
  nameWithType: ExtensionArguments
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionArguments
- uid: System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object}
  commentId: '!:System.Func{Sdl.Core.PluginFramework.IExtension,System.Object,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Object}'
  definition: System.Func`4
  name: Func<IExtension, Object, ExtensionArguments, Object>
  nameWithType: Func<IExtension, Object, ExtensionArguments, Object>
  fullName: System.Func<Sdl.Core.PluginFramework.IExtension, System.Object, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Object>
  nameWithType.vb: Func(Of IExtension, Object, ExtensionArguments, Object)
  fullName.vb: System.Func(Of Sdl.Core.PluginFramework.IExtension, System.Object, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Object)
  name.vb: Func(Of IExtension, Object, ExtensionArguments, Object)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.PluginFramework.Integration.ExtensionArguments
    name: ExtensionArguments
    nameWithType: ExtensionArguments
    fullName: Sdl.Core.PluginFramework.Integration.ExtensionArguments
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.PluginFramework.Integration.ExtensionArguments
    name: ExtensionArguments
    nameWithType: ExtensionArguments
    fullName: Sdl.Core.PluginFramework.Integration.ExtensionArguments
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: '!:System.Func`4'
  isExternal: true
  name: Func<, , , >
  nameWithType: Func<, , , >
  fullName: System.Func<, , , >
  nameWithType.vb: Func(Of , , , )
  fullName.vb: System.Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance
  isExternal: true
  name: Instance
  nameWithType: ExtensionsRepository.Instance
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository.Instance
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionsRepository
  parent: Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: ExtensionsRepository
  nameWithType: ExtensionsRepository
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsRepository
