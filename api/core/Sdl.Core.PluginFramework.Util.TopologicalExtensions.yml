### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Util.TopologicalExtensions
  commentId: T:Sdl.Core.PluginFramework.Util.TopologicalExtensions
  id: TopologicalExtensions
  parent: Sdl.Core.PluginFramework.Util
  children:
  - Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: TopologicalExtensions
  nameWithType: TopologicalExtensions
  fullName: Sdl.Core.PluginFramework.Util.TopologicalExtensions
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nThis contains Extension methods for Topological Sorting\n"
  syntax:
    content: 'public static class TopologicalExtensions : Object'
    content.vb: >-
      Public Module TopologicalExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0})
  id: TopologicalSort``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: Sdl.Core.PluginFramework.Util.TopologicalExtensions
  langs:
  - csharp
  - vb
  name: TopologicalSort<T>(IEnumerable<T>)
  nameWithType: TopologicalExtensions.TopologicalSort<T>(IEnumerable<T>)
  fullName: Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nSort an Enumerable by the TopologicalSortable interface\n"
  syntax:
    content: >-
      public static IEnumerable<T> TopologicalSort<T>(this IEnumerable<T> items)

          where T : ITopologicalSortable
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
      description: ITopologicalSortable items
    typeParameters:
    - id: T
      description: ITopologicalSortable type
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: Sorted items
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TopologicalSort(Of T As ITopologicalSortable)(items As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort*
  nameWithType.vb: TopologicalExtensions.TopologicalSort(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: TopologicalSort(Of T)(IEnumerable(Of T))
references:
- uid: Sdl.Core.PluginFramework.Util
  commentId: N:Sdl.Core.PluginFramework.Util
  isExternal: true
  name: Sdl.Core.PluginFramework.Util
  nameWithType: Sdl.Core.PluginFramework.Util
  fullName: Sdl.Core.PluginFramework.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort*
  commentId: Overload:Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort
  isExternal: true
  name: TopologicalSort
  nameWithType: TopologicalExtensions.TopologicalSort
  fullName: Sdl.Core.PluginFramework.Util.TopologicalExtensions.TopologicalSort
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: '!:System.Collections.Generic.IEnumerable{``0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
