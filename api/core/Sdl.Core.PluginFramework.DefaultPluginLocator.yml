### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator
  commentId: T:Sdl.Core.PluginFramework.DefaultPluginLocator
  id: DefaultPluginLocator
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  - Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  - Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  - Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  langs:
  - csharp
  - vb
  name: DefaultPluginLocator
  nameWithType: DefaultPluginLocator
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nImplementation of a plug-in locator (<xref href=\"Sdl.Core.PluginFramework.IPluginLocator\" data-throw-if-not-resolved=\"false\"></xref>) which loads locates plug-ins within\na directory on the local file system and an OpenExchange directory that contains sub-folders with individual plug-ins.\n"
  syntax:
    content: 'public sealed class DefaultPluginLocator : Object, IPluginLocator'
    content.vb: >-
      Public NotInheritable Class DefaultPluginLocator

          Inherits Object

          Implements IPluginLocator
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator
  - System.IDisposable
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  id: '#ctor'
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: DefaultPluginLocator()
  nameWithType: DefaultPluginLocator.DefaultPluginLocator()
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.DefaultPluginLocator()
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nCreates a default plug-in locator, which loads plug-ins from a &quot;Plugins&quot; subfolder of the installation folder and\nwill optionally search in a specified Open Exchange plug-in location.\n"
  syntax:
    content: public DefaultPluginLocator()
    content.vb: Public Sub New
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  id: GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: GetPluginDescriptors()
  nameWithType: DefaultPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns an array of plug-in descriptors for plug-ins found.\n"
  remarks: This locator looks for plug-in manifest files with the extension &quot;.plugin.xml&quot;.
  syntax:
    content: public IPluginDescriptor[] GetPluginDescriptors()
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor[]
      description: An array of plug-in descriptors.
    content.vb: Public Function GetPluginDescriptors As IPluginDescriptor()
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors*
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  id: Dispose
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DefaultPluginLocator.Dispose()
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nDisposes the plug-in locator.\n"
  remarks: This method is called automatically when the owning plug-in registry is disposed.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  commentId: P:Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  id: SystemPluginsDirectory
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: SystemPluginsDirectory
  nameWithType: DefaultPluginLocator.SystemPluginsDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets the system plug-ins directory.\n"
  syntax:
    content: public string SystemPluginsDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SystemPluginsDirectory As String
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.IPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginLocator
  nameWithType: IPluginLocator
  fullName: Sdl.Core.PluginFramework.IPluginLocator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  isExternal: true
  name: DefaultPluginLocator
  nameWithType: DefaultPluginLocator.DefaultPluginLocator
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.DefaultPluginLocator
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  isExternal: true
  name: GetPluginDescriptors
  nameWithType: DefaultPluginLocator.GetPluginDescriptors
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
- uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.IPluginLocator
  isExternal: true
  name: GetPluginDescriptors()
  nameWithType: IPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginDescriptor[]
  isExternal: true
  name: IPluginDescriptor[]
  nameWithType: IPluginDescriptor[]
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor[]
  nameWithType.vb: IPluginDescriptor()
  fullName.vb: Sdl.Core.PluginFramework.IPluginDescriptor()
  name.vb: IPluginDescriptor()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  isExternal: true
  name: Dispose
  nameWithType: DefaultPluginLocator.Dispose
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  isExternal: true
  name: SystemPluginsDirectory
  nameWithType: DefaultPluginLocator.SystemPluginsDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
