### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.IPlugin
  commentId: T:Sdl.Core.PluginFramework.IPlugin
  id: IPlugin
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.IPlugin.CanDisable
  - Sdl.Core.PluginFramework.IPlugin.CanEnable
  - Sdl.Core.PluginFramework.IPlugin.Descriptor
  - Sdl.Core.PluginFramework.IPlugin.Enabled
  - Sdl.Core.PluginFramework.IPlugin.Extensions
  - Sdl.Core.PluginFramework.IPlugin.GetPluginResource``1(System.String)
  - Sdl.Core.PluginFramework.IPlugin.Id
  - Sdl.Core.PluginFramework.IPlugin.IsDynamic
  - Sdl.Core.PluginFramework.IPlugin.Name
  - Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  - Sdl.Core.PluginFramework.IPlugin.Status
  - Sdl.Core.PluginFramework.IPlugin.Validate
  - Sdl.Core.PluginFramework.IPlugin.Version
  langs:
  - csharp
  - vb
  name: IPlugin
  nameWithType: IPlugin
  fullName: Sdl.Core.PluginFramework.IPlugin
  type: Interface
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Represents a plug-in, which provides a number of extensions.
  example: []
  syntax:
    content: public interface IPlugin
    content.vb: Public Interface IPlugin
- uid: Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  id: SetEnabled(System.Boolean)
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: SetEnabled(bool)
  nameWithType: IPlugin.SetEnabled(bool)
  fullName: Sdl.Core.PluginFramework.IPlugin.SetEnabled(bool)
  type: Method
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Enables or disables the plug-in.
  example: []
  syntax:
    content: bool SetEnabled(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
      description: True to enable the plug-in.
    return:
      type: System.Boolean
      description: True if disabling the plug-in does not require restarting the application, false otherwise.
    content.vb: Function SetEnabled(enabled As Boolean) As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.SetEnabled*
  nameWithType.vb: IPlugin.SetEnabled(Boolean)
  fullName.vb: Sdl.Core.PluginFramework.IPlugin.SetEnabled(Boolean)
  name.vb: SetEnabled(Boolean)
- uid: Sdl.Core.PluginFramework.IPlugin.GetPluginResource``1(System.String)
  commentId: M:Sdl.Core.PluginFramework.IPlugin.GetPluginResource``1(System.String)
  id: GetPluginResource``1(System.String)
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: GetPluginResource<T>(string)
  nameWithType: IPlugin.GetPluginResource<T>(string)
  fullName: Sdl.Core.PluginFramework.IPlugin.GetPluginResource<T>(string)
  type: Method
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Retrieves a resource of a specific type from the plug-ins resource file.
  remarks: >-
    The plug-in resource file is a .Net resource file, with extension ".plugin.resources". 
                For instance, when the plug-in manifest XML file is called "Myplugin.plugin.xml", the plug-in resource file should be called "MyPlugin.plugin.resources".
                Localized resources are supported by deploying additional resource files, following the naming convention "MyPlugin.plugin.LANGUAGECODE.resources".
  example: []
  syntax:
    content: 'T GetPluginResource<T>(string resourceName) where T : class'
    parameters:
    - id: resourceName
      type: System.String
      description: The name of the resource in the resource file.
    typeParameters:
    - id: T
      description: The type of the resource.
    return:
      type: '{T}'
      description: The resource with the specified name, or null if the resource does not exist.
    content.vb: Function GetPluginResource(Of T As Class)(resourceName As String) As T
  overload: Sdl.Core.PluginFramework.IPlugin.GetPluginResource*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when the resource with the specified name is not of the required type.
  nameWithType.vb: IPlugin.GetPluginResource(Of T)(String)
  fullName.vb: Sdl.Core.PluginFramework.IPlugin.GetPluginResource(Of T)(String)
  name.vb: GetPluginResource(Of T)(String)
- uid: Sdl.Core.PluginFramework.IPlugin.Validate
  commentId: M:Sdl.Core.PluginFramework.IPlugin.Validate
  id: Validate
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: IPlugin.Validate()
  fullName: Sdl.Core.PluginFramework.IPlugin.Validate()
  type: Method
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Validates this plug-in.
  example: []
  syntax:
    content: void Validate()
    content.vb: Sub Validate()
  overload: Sdl.Core.PluginFramework.IPlugin.Validate*
- uid: Sdl.Core.PluginFramework.IPlugin.Id
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Id
  id: Id
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: IPlugin.Id
  fullName: Sdl.Core.PluginFramework.IPlugin.Id
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Returns the unique id of the plug-in.
  example: []
  syntax:
    content: PluginId Id { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.PluginId
    content.vb: ReadOnly Property Id As PluginId
  overload: Sdl.Core.PluginFramework.IPlugin.Id*
- uid: Sdl.Core.PluginFramework.IPlugin.Version
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Version
  id: Version
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: IPlugin.Version
  fullName: Sdl.Core.PluginFramework.IPlugin.Version
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Gets the version of the plug-in.
  example: []
  syntax:
    content: string Version { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Version As String
  overload: Sdl.Core.PluginFramework.IPlugin.Version*
- uid: Sdl.Core.PluginFramework.IPlugin.Name
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Name
  id: Name
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IPlugin.Name
  fullName: Sdl.Core.PluginFramework.IPlugin.Name
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Returns the friendly name of the plug-in.
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Sdl.Core.PluginFramework.IPlugin.Name*
- uid: Sdl.Core.PluginFramework.IPlugin.Descriptor
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Descriptor
  id: Descriptor
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Descriptor
  nameWithType: IPlugin.Descriptor
  fullName: Sdl.Core.PluginFramework.IPlugin.Descriptor
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Returns the descriptor through which this plug-in manifest was loaded.
  example: []
  syntax:
    content: IPluginDescriptor Descriptor { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor
    content.vb: ReadOnly Property Descriptor As IPluginDescriptor
  overload: Sdl.Core.PluginFramework.IPlugin.Descriptor*
- uid: Sdl.Core.PluginFramework.IPlugin.Enabled
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Enabled
  id: Enabled
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Enabled
  nameWithType: IPlugin.Enabled
  fullName: Sdl.Core.PluginFramework.IPlugin.Enabled
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: True if the plug-in is enabled.
  example: []
  syntax:
    content: bool Enabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Enabled As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.Enabled*
- uid: Sdl.Core.PluginFramework.IPlugin.CanEnable
  commentId: P:Sdl.Core.PluginFramework.IPlugin.CanEnable
  id: CanEnable
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: CanEnable
  nameWithType: IPlugin.CanEnable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanEnable
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: >-
    Returns whether this plugin can be enabled. This uses the <xref href="Sdl.Core.PluginFramework.IPluginRegistry.PluginStateHandler" data-throw-if-not-resolved="false"></xref> to determine this and returns true

    if no such handler is specified.
  example: []
  syntax:
    content: bool CanEnable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanEnable As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.CanEnable*
- uid: Sdl.Core.PluginFramework.IPlugin.CanDisable
  commentId: P:Sdl.Core.PluginFramework.IPlugin.CanDisable
  id: CanDisable
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: CanDisable
  nameWithType: IPlugin.CanDisable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanDisable
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: >-
    Returns whether this plugin can be disabled. This uses the <xref href="Sdl.Core.PluginFramework.IPluginRegistry.PluginStateHandler" data-throw-if-not-resolved="false"></xref> to determine this and returns true

    if no such handler is specified.
  example: []
  syntax:
    content: bool CanDisable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanDisable As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.CanDisable*
- uid: Sdl.Core.PluginFramework.IPlugin.IsDynamic
  commentId: P:Sdl.Core.PluginFramework.IPlugin.IsDynamic
  id: IsDynamic
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: IsDynamic
  nameWithType: IPlugin.IsDynamic
  fullName: Sdl.Core.PluginFramework.IPlugin.IsDynamic
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: True if the plug-in can be enabled or disabled without having to restart the application.
  example: []
  syntax:
    content: bool IsDynamic { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsDynamic As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.IsDynamic*
- uid: Sdl.Core.PluginFramework.IPlugin.Extensions
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Extensions
  id: Extensions
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: IPlugin.Extensions
  fullName: Sdl.Core.PluginFramework.IPlugin.Extensions
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Returns the collection of extensions this plug-in provides.
  example: []
  syntax:
    content: ExtensionCollection Extensions { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.ExtensionCollection
    content.vb: ReadOnly Property Extensions As ExtensionCollection
  overload: Sdl.Core.PluginFramework.IPlugin.Extensions*
- uid: Sdl.Core.PluginFramework.IPlugin.Status
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Status
  id: Status
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: IPlugin.Status
  fullName: Sdl.Core.PluginFramework.IPlugin.Status
  type: Property
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: Gets the status of this plug-in.
  remarks: >-
    Only plug-ins with status <xref href="Sdl.Core.PluginFramework.PluginStatus.Initialized" data-throw-if-not-resolved="false"></xref>
                are fully functional and can instantiate their extensions. Plug-ins that have not been initialized must be initialized before use 
                by using <xref href="Sdl.Core.PluginFramework.IPluginInitializer" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: PluginStatus Status { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.PluginStatus
    content.vb: ReadOnly Property Status As PluginStatus
  overload: Sdl.Core.PluginFramework.IPlugin.Status*
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  href: Sdl.html
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
  spec.csharp:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
    href: Sdl.Core.html
  - name: .
  - uid: Sdl.Core.PluginFramework
    name: PluginFramework
    isExternal: true
    href: Sdl.Core.PluginFramework.html
  spec.vb:
  - uid: Sdl
    name: Sdl
    isExternal: true
    href: Sdl.html
  - name: .
  - uid: Sdl.Core
    name: Core
    isExternal: true
    href: Sdl.Core.html
  - name: .
  - uid: Sdl.Core.PluginFramework
    name: PluginFramework
    isExternal: true
    href: Sdl.Core.PluginFramework.html
- uid: Sdl.Core.PluginFramework.IPlugin.SetEnabled*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.SetEnabled
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_SetEnabled_System_Boolean_
  name: SetEnabled
  nameWithType: IPlugin.SetEnabled
  fullName: Sdl.Core.PluginFramework.IPlugin.SetEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidcastexception
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: Sdl.Core.PluginFramework.IPlugin.GetPluginResource*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.GetPluginResource
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_GetPluginResource__1_System_String_
  name: GetPluginResource
  nameWithType: IPlugin.GetPluginResource
  fullName: Sdl.Core.PluginFramework.IPlugin.GetPluginResource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.Core.PluginFramework.IPlugin.Validate*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Validate
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Validate
  name: Validate
  nameWithType: IPlugin.Validate
  fullName: Sdl.Core.PluginFramework.IPlugin.Validate
- uid: Sdl.Core.PluginFramework.IPlugin.Id*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Id
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Id
  name: Id
  nameWithType: IPlugin.Id
  fullName: Sdl.Core.PluginFramework.IPlugin.Id
- uid: Sdl.Core.PluginFramework.PluginId
  commentId: T:Sdl.Core.PluginFramework.PluginId
  parent: Sdl.Core.PluginFramework
  isExternal: true
  href: Sdl.Core.PluginFramework.PluginId.html
  name: PluginId
  nameWithType: PluginId
  fullName: Sdl.Core.PluginFramework.PluginId
- uid: Sdl.Core.PluginFramework.IPlugin.Version*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Version
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Version
  name: Version
  nameWithType: IPlugin.Version
  fullName: Sdl.Core.PluginFramework.IPlugin.Version
- uid: Sdl.Core.PluginFramework.IPlugin.Name*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Name
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Name
  name: Name
  nameWithType: IPlugin.Name
  fullName: Sdl.Core.PluginFramework.IPlugin.Name
- uid: Sdl.Core.PluginFramework.IPlugin.Descriptor*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Descriptor
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Descriptor
  name: Descriptor
  nameWithType: IPlugin.Descriptor
  fullName: Sdl.Core.PluginFramework.IPlugin.Descriptor
- uid: Sdl.Core.PluginFramework.IPluginDescriptor
  commentId: T:Sdl.Core.PluginFramework.IPluginDescriptor
  parent: Sdl.Core.PluginFramework
  isExternal: true
  href: Sdl.Core.PluginFramework.IPluginDescriptor.html
  name: IPluginDescriptor
  nameWithType: IPluginDescriptor
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor
- uid: Sdl.Core.PluginFramework.IPlugin.Enabled*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Enabled
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Enabled
  name: Enabled
  nameWithType: IPlugin.Enabled
  fullName: Sdl.Core.PluginFramework.IPlugin.Enabled
- uid: Sdl.Core.PluginFramework.IPluginRegistry.PluginStateHandler
  commentId: P:Sdl.Core.PluginFramework.IPluginRegistry.PluginStateHandler
  isExternal: true
  href: Sdl.Core.PluginFramework.IPluginRegistry.html#Sdl_Core_PluginFramework_IPluginRegistry_PluginStateHandler
  name: PluginStateHandler
  nameWithType: IPluginRegistry.PluginStateHandler
  fullName: Sdl.Core.PluginFramework.IPluginRegistry.PluginStateHandler
- uid: Sdl.Core.PluginFramework.IPlugin.CanEnable*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.CanEnable
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_CanEnable
  name: CanEnable
  nameWithType: IPlugin.CanEnable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanEnable
- uid: Sdl.Core.PluginFramework.IPlugin.CanDisable*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.CanDisable
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_CanDisable
  name: CanDisable
  nameWithType: IPlugin.CanDisable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanDisable
- uid: Sdl.Core.PluginFramework.IPlugin.IsDynamic*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.IsDynamic
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_IsDynamic
  name: IsDynamic
  nameWithType: IPlugin.IsDynamic
  fullName: Sdl.Core.PluginFramework.IPlugin.IsDynamic
- uid: Sdl.Core.PluginFramework.IPlugin.Extensions*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Extensions
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Extensions
  name: Extensions
  nameWithType: IPlugin.Extensions
  fullName: Sdl.Core.PluginFramework.IPlugin.Extensions
- uid: Sdl.Core.PluginFramework.ExtensionCollection
  commentId: T:Sdl.Core.PluginFramework.ExtensionCollection
  parent: Sdl.Core.PluginFramework
  isExternal: true
  href: Sdl.Core.PluginFramework.ExtensionCollection.html
  name: ExtensionCollection
  nameWithType: ExtensionCollection
  fullName: Sdl.Core.PluginFramework.ExtensionCollection
- uid: Sdl.Core.PluginFramework.PluginStatus.Initialized
  commentId: F:Sdl.Core.PluginFramework.PluginStatus.Initialized
  isExternal: true
  href: Sdl.Core.PluginFramework.PluginStatus.html#Sdl_Core_PluginFramework_PluginStatus_Initialized
  name: Initialized
  nameWithType: PluginStatus.Initialized
  fullName: Sdl.Core.PluginFramework.PluginStatus.Initialized
- uid: Sdl.Core.PluginFramework.IPluginInitializer
  commentId: T:Sdl.Core.PluginFramework.IPluginInitializer
  parent: Sdl.Core.PluginFramework
  isExternal: true
  href: Sdl.Core.PluginFramework.IPluginInitializer.html
  name: IPluginInitializer
  nameWithType: IPluginInitializer
  fullName: Sdl.Core.PluginFramework.IPluginInitializer
- uid: Sdl.Core.PluginFramework.IPlugin.Status*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Status
  isExternal: true
  href: Sdl.Core.PluginFramework.IPlugin.html#Sdl_Core_PluginFramework_IPlugin_Status
  name: Status
  nameWithType: IPlugin.Status
  fullName: Sdl.Core.PluginFramework.IPlugin.Status
- uid: Sdl.Core.PluginFramework.PluginStatus
  commentId: T:Sdl.Core.PluginFramework.PluginStatus
  parent: Sdl.Core.PluginFramework
  isExternal: true
  href: Sdl.Core.PluginFramework.PluginStatus.html
  name: PluginStatus
  nameWithType: PluginStatus
  fullName: Sdl.Core.PluginFramework.PluginStatus
