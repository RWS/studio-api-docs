### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.DefaultPluginTypeLoader
  commentId: T:Sdl.Core.PluginFramework.DefaultPluginTypeLoader
  id: DefaultPluginTypeLoader
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.DefaultPluginTypeLoader.#ctor
  - Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  langs:
  - csharp
  - vb
  name: DefaultPluginTypeLoader
  nameWithType: DefaultPluginTypeLoader
  fullName: Sdl.Core.PluginFramework.DefaultPluginTypeLoader
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nImplementation of a plug-in type loader (<xref href=\"Sdl.Core.PluginFramework.IPluginTypeLoader\" data-throw-if-not-resolved=\"false\"></xref>) which attempts to load types\nusing <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref>, assuming the plug-in assembly is available in one of the default assembly locations.\n"
  syntax:
    content: 'public class DefaultPluginTypeLoader : Object, IPluginTypeLoader'
    content.vb: >-
      Public Class DefaultPluginTypeLoader
          Inherits Object
          Implements IPluginTypeLoader
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.PluginFramework.IPluginTypeLoader
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.#ctor
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginTypeLoader.#ctor
  id: '#ctor'
  parent: Sdl.Core.PluginFramework.DefaultPluginTypeLoader
  langs:
  - csharp
  - vb
  name: DefaultPluginTypeLoader()
  nameWithType: DefaultPluginTypeLoader.DefaultPluginTypeLoader()
  fullName: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.DefaultPluginTypeLoader()
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nCreates an instance of DefaultPluginTypeLoader that can be used for loading Open Exchange plug-ins.\n"
  syntax:
    content: public DefaultPluginTypeLoader()
    content.vb: Public Sub New
  overload: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  id: LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  parent: Sdl.Core.PluginFramework.DefaultPluginTypeLoader
  langs:
  - csharp
  - vb
  name: LoadType(IPlugin, String)
  nameWithType: DefaultPluginTypeLoader.LoadType(IPlugin, String)
  fullName: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin, System.String)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nLoads the specified type, referred to in the manifest of the specified plug-in.  \nThis type loader will also check for Open Exchange plug-ins in their respective folders.\n"
  syntax:
    content: public Type LoadType(IPlugin plugin, string typeName)
    parameters:
    - id: plugin
      type: Sdl.Core.PluginFramework.IPlugin
      description: The plug-in which refers to the type.
    - id: typeName
      type: System.String
      description: The assembly-qualified type name of the requested type.
    return:
      type: System.Type
      description: "\nThe loaded type. Throws an exception if the type failes to load.\n"
    content.vb: Public Function LoadType(plugin As IPlugin, typeName As String) As Type
  overload: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType*
  implements:
  - Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.IPluginTypeLoader
  commentId: T:Sdl.Core.PluginFramework.IPluginTypeLoader
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginTypeLoader
  nameWithType: IPluginTypeLoader
  fullName: Sdl.Core.PluginFramework.IPluginTypeLoader
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginTypeLoader.#ctor
  isExternal: true
  name: DefaultPluginTypeLoader
  nameWithType: DefaultPluginTypeLoader.DefaultPluginTypeLoader
  fullName: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.DefaultPluginTypeLoader
- uid: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType
  isExternal: true
  name: LoadType
  nameWithType: DefaultPluginTypeLoader.LoadType
  fullName: Sdl.Core.PluginFramework.DefaultPluginTypeLoader.LoadType
- uid: Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  commentId: M:Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
  parent: Sdl.Core.PluginFramework.IPluginTypeLoader
  isExternal: true
  name: LoadType(IPlugin, String)
  nameWithType: IPluginTypeLoader.LoadType(IPlugin, String)
  fullName: Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin, System.String)
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
    name: LoadType
    nameWithType: IPluginTypeLoader.LoadType
    fullName: Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.PluginFramework.IPlugin
    name: IPlugin
    nameWithType: IPlugin
    fullName: Sdl.Core.PluginFramework.IPlugin
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType(Sdl.Core.PluginFramework.IPlugin,System.String)
    name: LoadType
    nameWithType: IPluginTypeLoader.LoadType
    fullName: Sdl.Core.PluginFramework.IPluginTypeLoader.LoadType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Sdl.Core.PluginFramework.IPlugin
    name: IPlugin
    nameWithType: IPlugin
    fullName: Sdl.Core.PluginFramework.IPlugin
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPlugin
  commentId: T:Sdl.Core.PluginFramework.IPlugin
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPlugin
  nameWithType: IPlugin
  fullName: Sdl.Core.PluginFramework.IPlugin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
