### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2
  commentId: T:Sdl.Core.PluginFramework.ObjectRegistry`2
  id: ObjectRegistry`2
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.ObjectRegistry`2.#ctor(Sdl.Core.PluginFramework.IPluginRegistry)
  - Sdl.Core.PluginFramework.ObjectRegistry`2.CreateObjects
  - Sdl.Core.PluginFramework.ObjectRegistry`2.ExtensionPoint
  langs:
  - csharp
  - vb
  name: ObjectRegistry<TExtensionAttribute, TExtensionType>
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nHelper class for implementers of extension points, which allows easy instantiation of all extensions\nregistered with an extension point identified by a specific type of extension attribute.\n"
  syntax:
    content: 'public class ObjectRegistry<TExtensionAttribute, TExtensionType> : Object where TExtensionAttribute : ExtensionAttribute where TExtensionType : class'
    typeParameters:
    - id: TExtensionAttribute
      description: The type of extension attribute, identifying the extension point.
    - id: TExtensionType
      description: The type of the extension implementation classes for the extension point.
    content.vb: >-
      Public Class ObjectRegistry(Of TExtensionAttribute As ExtensionAttribute, TExtensionType As Class)

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - Sdl.Core.PluginFramework.Util.SortedObjectRegistry`2
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType)
  name.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType)
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2.#ctor(Sdl.Core.PluginFramework.IPluginRegistry)
  commentId: M:Sdl.Core.PluginFramework.ObjectRegistry`2.#ctor(Sdl.Core.PluginFramework.IPluginRegistry)
  id: '#ctor(Sdl.Core.PluginFramework.IPluginRegistry)'
  parent: Sdl.Core.PluginFramework.ObjectRegistry`2
  langs:
  - csharp
  - vb
  name: ObjectRegistry(IPluginRegistry)
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>.ObjectRegistry(IPluginRegistry)
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>.ObjectRegistry(Sdl.Core.PluginFramework.IPluginRegistry)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nConstructs an object registry for the specified extension attribute.\n"
  syntax:
    content: public ObjectRegistry(IPluginRegistry pluginRegistry)
    parameters:
    - id: pluginRegistry
      type: Sdl.Core.PluginFramework.IPluginRegistry
      description: The plug-in registry from which to retrieve the extensions.
    content.vb: Public Sub New(pluginRegistry As IPluginRegistry)
  overload: Sdl.Core.PluginFramework.ObjectRegistry`2.#ctor*
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType).ObjectRegistry(IPluginRegistry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType).ObjectRegistry(Sdl.Core.PluginFramework.IPluginRegistry)
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2.CreateObjects
  commentId: M:Sdl.Core.PluginFramework.ObjectRegistry`2.CreateObjects
  id: CreateObjects
  parent: Sdl.Core.PluginFramework.ObjectRegistry`2
  langs:
  - csharp
  - vb
  name: CreateObjects()
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>.CreateObjects()
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>.CreateObjects()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nCreates an instance of all the objects registered with the extension point an returns them as an array.\n"
  syntax:
    content: public virtual TExtensionType[] CreateObjects()
    return:
      type: '{TExtensionType}[]'
      description: An array, containing a new instance of every object registered with the extension point.
    content.vb: Public Overridable Function CreateObjects As TExtensionType()
  overload: Sdl.Core.PluginFramework.ObjectRegistry`2.CreateObjects*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: Thrown when any of the created objects cannot be cast to the required type.
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType).CreateObjects()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType).CreateObjects()
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2.ExtensionPoint
  commentId: P:Sdl.Core.PluginFramework.ObjectRegistry`2.ExtensionPoint
  id: ExtensionPoint
  parent: Sdl.Core.PluginFramework.ObjectRegistry`2
  langs:
  - csharp
  - vb
  name: ExtensionPoint
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>.ExtensionPoint
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>.ExtensionPoint
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns the id of the extension point from which the objects should be loaded.\n"
  syntax:
    content: public IExtensionPoint ExtensionPoint { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.IExtensionPoint
    content.vb: Public ReadOnly Property ExtensionPoint As IExtensionPoint
  overload: Sdl.Core.PluginFramework.ObjectRegistry`2.ExtensionPoint*
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType).ExtensionPoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType).ExtensionPoint
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.ObjectRegistry`2.#ctor
  isExternal: true
  name: ObjectRegistry
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>.ObjectRegistry
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>.ObjectRegistry
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType).ObjectRegistry
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType).ObjectRegistry
- uid: Sdl.Core.PluginFramework.IPluginRegistry
  commentId: T:Sdl.Core.PluginFramework.IPluginRegistry
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginRegistry
  nameWithType: IPluginRegistry
  fullName: Sdl.Core.PluginFramework.IPluginRegistry
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2.CreateObjects*
  commentId: Overload:Sdl.Core.PluginFramework.ObjectRegistry`2.CreateObjects
  isExternal: true
  name: CreateObjects
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>.CreateObjects
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>.CreateObjects
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType).CreateObjects
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType).CreateObjects
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: true
- uid: '{TExtensionType}[]'
  isExternal: true
  name: TExtensionType[]
  nameWithType: TExtensionType[]
  fullName: TExtensionType[]
  nameWithType.vb: TExtensionType()
  fullName.vb: TExtensionType()
  name.vb: TExtensionType()
  spec.csharp:
  - name: TExtensionType
    nameWithType: TExtensionType
    fullName: TExtensionType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TExtensionType
    nameWithType: TExtensionType
    fullName: TExtensionType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.PluginFramework.ObjectRegistry`2.ExtensionPoint*
  commentId: Overload:Sdl.Core.PluginFramework.ObjectRegistry`2.ExtensionPoint
  isExternal: true
  name: ExtensionPoint
  nameWithType: ObjectRegistry<TExtensionAttribute, TExtensionType>.ExtensionPoint
  fullName: Sdl.Core.PluginFramework.ObjectRegistry<TExtensionAttribute, TExtensionType>.ExtensionPoint
  nameWithType.vb: ObjectRegistry(Of TExtensionAttribute, TExtensionType).ExtensionPoint
  fullName.vb: Sdl.Core.PluginFramework.ObjectRegistry(Of TExtensionAttribute, TExtensionType).ExtensionPoint
- uid: Sdl.Core.PluginFramework.IExtensionPoint
  commentId: T:Sdl.Core.PluginFramework.IExtensionPoint
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IExtensionPoint
  nameWithType: IExtensionPoint
  fullName: Sdl.Core.PluginFramework.IExtensionPoint
