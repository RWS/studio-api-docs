### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers
  commentId: T:Sdl.Core.Globalization.LegacyAsyncHelpers
  id: LegacyAsyncHelpers
  parent: Sdl.Core.Globalization
  children:
  - Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode(System.Func{System.Threading.Tasks.Task})
  - Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  - Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode(System.Func{System.Threading.Tasks.Task})
  - Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  langs:
  - csharp
  - vb
  name: LegacyAsyncHelpers
  nameWithType: LegacyAsyncHelpers
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  syntax:
    content: public static class LegacyAsyncHelpers
    content.vb: Public Module LegacyAsyncHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: WrapAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: Sdl.Core.Globalization.LegacyAsyncHelpers
  langs:
  - csharp
  - vb
  name: WrapAsyncCode<T>(Func<Task<T>>)
  nameWithType: LegacyAsyncHelpers.WrapAsyncCode<T>(Func<Task<T>>)
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode<T>(System.Func<System.Threading.Tasks.Task<T>>)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  syntax:
    content: public static T WrapAsyncCode<T>(Func<Task<T>> fn)
    parameters:
    - id: fn
      type: System.Func{System.Threading.Tasks.Task{{T}}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function WrapAsyncCode(Of T)(fn As Func(Of Task(Of T))) As T
  overload: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode*
  nameWithType.vb: LegacyAsyncHelpers.WrapAsyncCode(Of T)(Func(Of Task(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode(Of T)(System.Func(Of System.Threading.Tasks.Task(Of T)))
  name.vb: WrapAsyncCode(Of T)(Func(Of Task(Of T)))
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode(System.Func{System.Threading.Tasks.Task})
  commentId: M:Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode(System.Func{System.Threading.Tasks.Task})
  id: WrapAsyncCode(System.Func{System.Threading.Tasks.Task})
  parent: Sdl.Core.Globalization.LegacyAsyncHelpers
  langs:
  - csharp
  - vb
  name: WrapAsyncCode(Func<Task>)
  nameWithType: LegacyAsyncHelpers.WrapAsyncCode(Func<Task>)
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  syntax:
    content: public static void WrapAsyncCode(Func<Task> fn)
    parameters:
    - id: fn
      type: System.Func{System.Threading.Tasks.Task}
    content.vb: Public Shared Sub WrapAsyncCode(fn As Func(Of Task))
  overload: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode*
  nameWithType.vb: LegacyAsyncHelpers.WrapAsyncCode(Func(Of Task))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode(System.Func(Of System.Threading.Tasks.Task))
  name.vb: WrapAsyncCode(Func(Of Task))
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: WrapUnavoidableAsyncCode``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: Sdl.Core.Globalization.LegacyAsyncHelpers
  langs:
  - csharp
  - vb
  name: WrapUnavoidableAsyncCode<T>(Func<Task<T>>)
  nameWithType: LegacyAsyncHelpers.WrapUnavoidableAsyncCode<T>(Func<Task<T>>)
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode<T>(System.Func<System.Threading.Tasks.Task<T>>)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  syntax:
    content: public static T WrapUnavoidableAsyncCode<T>(Func<Task<T>> fn)
    parameters:
    - id: fn
      type: System.Func{System.Threading.Tasks.Task{{T}}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function WrapUnavoidableAsyncCode(Of T)(fn As Func(Of Task(Of T))) As T
  overload: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode*
  nameWithType.vb: LegacyAsyncHelpers.WrapUnavoidableAsyncCode(Of T)(Func(Of Task(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode(Of T)(System.Func(Of System.Threading.Tasks.Task(Of T)))
  name.vb: WrapUnavoidableAsyncCode(Of T)(Func(Of Task(Of T)))
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode(System.Func{System.Threading.Tasks.Task})
  commentId: M:Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode(System.Func{System.Threading.Tasks.Task})
  id: WrapUnavoidableAsyncCode(System.Func{System.Threading.Tasks.Task})
  parent: Sdl.Core.Globalization.LegacyAsyncHelpers
  langs:
  - csharp
  - vb
  name: WrapUnavoidableAsyncCode(Func<Task>)
  nameWithType: LegacyAsyncHelpers.WrapUnavoidableAsyncCode(Func<Task>)
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization
  syntax:
    content: public static void WrapUnavoidableAsyncCode(Func<Task> fn)
    parameters:
    - id: fn
      type: System.Func{System.Threading.Tasks.Task}
    content.vb: Public Shared Sub WrapUnavoidableAsyncCode(fn As Func(Of Task))
  overload: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode*
  nameWithType.vb: LegacyAsyncHelpers.WrapUnavoidableAsyncCode(Func(Of Task))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode(System.Func(Of System.Threading.Tasks.Task))
  name.vb: WrapUnavoidableAsyncCode(Func(Of Task))
references:
- uid: Sdl.Core.Globalization
  commentId: N:Sdl.Core.Globalization
  isExternal: true
  name: Sdl.Core.Globalization
  nameWithType: Sdl.Core.Globalization
  fullName: Sdl.Core.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode*
  commentId: Overload:Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode
  isExternal: true
  name: WrapAsyncCode
  nameWithType: LegacyAsyncHelpers.WrapAsyncCode
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapAsyncCode
- uid: System.Func{System.Threading.Tasks.Task{{T}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<T>>
  nameWithType: Func<Task<T>>
  fullName: System.Func<System.Threading.Tasks.Task<T>>
  nameWithType.vb: Func(Of Task(Of T))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of T))
  name.vb: Func(Of Task(Of T))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode*
  commentId: Overload:Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode
  isExternal: true
  name: WrapUnavoidableAsyncCode
  nameWithType: LegacyAsyncHelpers.WrapUnavoidableAsyncCode
  fullName: Sdl.Core.Globalization.LegacyAsyncHelpers.WrapUnavoidableAsyncCode
