### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  commentId: T:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  id: IThirdPartyPluginDescriptor
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated
  - Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version
  langs:
  - csharp
  - vb
  name: IThirdPartyPluginDescriptor
  nameWithType: IThirdPartyPluginDescriptor
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nRepresents a third-party plug-in descriptor, which gives access to a seperate third-party plug-in manifest.\n"
  syntax:
    content: 'public interface IThirdPartyPluginDescriptor : IPluginDescriptor'
    content.vb: >-
      Public Interface IThirdPartyPluginDescriptor
          Inherits IPluginDescriptor
  inheritedMembers:
  - Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
  - Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource(System.String)
  - Sdl.Core.PluginFramework.IPluginDescriptor.Name
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  id: ThirdPartyManifestFilePath
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: ThirdPartyManifestFilePath
  nameWithType: IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets the full third-party manifest file path.\n"
  syntax:
    content: string ThirdPartyManifestFilePath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property ThirdPartyManifestFilePath As String
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author
  id: Author
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: Author
  nameWithType: IThirdPartyPluginDescriptor.Author
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns the author or company name of the plug-in developer as defined in the third-party manifest.\n"
  syntax:
    content: string Author { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Author As String
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description
  id: Description
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: IThirdPartyPluginDescriptor.Description
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns the description of the plug-in as defined in the third-party manifest.\n"
  syntax:
    content: string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Description As String
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName
  id: PlugInName
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: PlugInName
  nameWithType: IThirdPartyPluginDescriptor.PlugInName
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns the name of the plug-in as defined in the third-party manifest.\n"
  syntax:
    content: string PlugInName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property PlugInName As String
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version
  id: Version
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: IThirdPartyPluginDescriptor.Version
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns the version of the plug-in as defined in the third-party manifest.\n"
  syntax:
    content: Version Version { get; }
    parameters: []
    return:
      type: System.Version
    content.vb: ReadOnly Property Version As Version
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated
  id: Validated
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: Validated
  nameWithType: IThirdPartyPluginDescriptor.Validated
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns true if the plug-in validated against the requried installed versions of the SDL Trados Studio APIs.\n"
  syntax:
    content: bool Validated { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Validated As Boolean
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  commentId: P:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  id: InvalidSdlAssemblyReferences
  parent: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor
  langs:
  - csharp
  - vb
  name: InvalidSdlAssemblyReferences
  nameWithType: IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nThis list contains the SDL API assemblies that failed verification\n"
  syntax:
    content: List<InvalidSdlAssemblyReference> InvalidSdlAssemblyReferences { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.InvalidSdlAssemblyReference}
    content.vb: ReadOnly Property InvalidSdlAssemblyReferences As List(Of InvalidSdlAssemblyReference)
  overload: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
  commentId: M:Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
  parent: Sdl.Core.PluginFramework.IPluginDescriptor
  isExternal: true
  name: GetPluginManifestStream()
  nameWithType: IPluginDescriptor.GetPluginManifestStream()
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
    name: GetPluginManifestStream
    nameWithType: IPluginDescriptor.GetPluginManifestStream
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
    name: GetPluginManifestStream
    nameWithType: IPluginDescriptor.GetPluginManifestStream
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginManifestStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource(System.String)
  commentId: M:Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource(System.String)
  parent: Sdl.Core.PluginFramework.IPluginDescriptor
  isExternal: true
  name: GetPluginResource(String)
  nameWithType: IPluginDescriptor.GetPluginResource(String)
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource(System.String)
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource(System.String)
    name: GetPluginResource
    nameWithType: IPluginDescriptor.GetPluginResource
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource(System.String)
    name: GetPluginResource
    nameWithType: IPluginDescriptor.GetPluginResource
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor.GetPluginResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginDescriptor.Name
  commentId: P:Sdl.Core.PluginFramework.IPluginDescriptor.Name
  parent: Sdl.Core.PluginFramework.IPluginDescriptor
  isExternal: true
  name: Name
  nameWithType: IPluginDescriptor.Name
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor.Name
- uid: Sdl.Core.PluginFramework.IPluginDescriptor
  commentId: T:Sdl.Core.PluginFramework.IPluginDescriptor
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginDescriptor
  nameWithType: IPluginDescriptor
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  isExternal: true
  name: ThirdPartyManifestFilePath
  nameWithType: IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.ThirdPartyManifestFilePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author
  isExternal: true
  name: Author
  nameWithType: IThirdPartyPluginDescriptor.Author
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Author
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description
  isExternal: true
  name: Description
  nameWithType: IThirdPartyPluginDescriptor.Description
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Description
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName
  isExternal: true
  name: PlugInName
  nameWithType: IThirdPartyPluginDescriptor.PlugInName
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.PlugInName
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version
  isExternal: true
  name: Version
  nameWithType: IThirdPartyPluginDescriptor.Version
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Version
- uid: System.Version
  commentId: '!:System.Version'
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated
  isExternal: true
  name: Validated
  nameWithType: IThirdPartyPluginDescriptor.Validated
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.Validated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences*
  commentId: Overload:Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  isExternal: true
  name: InvalidSdlAssemblyReferences
  nameWithType: IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
  fullName: Sdl.Core.PluginFramework.IThirdPartyPluginDescriptor.InvalidSdlAssemblyReferences
- uid: System.Collections.Generic.List{Sdl.Core.PluginFramework.InvalidSdlAssemblyReference}
  commentId: '!:System.Collections.Generic.List{Sdl.Core.PluginFramework.InvalidSdlAssemblyReference}'
  definition: System.Collections.Generic.List`1
  name: List<InvalidSdlAssemblyReference>
  nameWithType: List<InvalidSdlAssemblyReference>
  fullName: System.Collections.Generic.List<Sdl.Core.PluginFramework.InvalidSdlAssemblyReference>
  nameWithType.vb: List(Of InvalidSdlAssemblyReference)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.PluginFramework.InvalidSdlAssemblyReference)
  name.vb: List(Of InvalidSdlAssemblyReference)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.InvalidSdlAssemblyReference
    name: InvalidSdlAssemblyReference
    nameWithType: InvalidSdlAssemblyReference
    fullName: Sdl.Core.PluginFramework.InvalidSdlAssemblyReference
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.InvalidSdlAssemblyReference
    name: InvalidSdlAssemblyReference
    nameWithType: InvalidSdlAssemblyReference
    fullName: Sdl.Core.PluginFramework.InvalidSdlAssemblyReference
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
