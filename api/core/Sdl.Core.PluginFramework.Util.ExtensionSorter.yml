### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Util.ExtensionSorter
  commentId: T:Sdl.Core.PluginFramework.Util.ExtensionSorter
  id: ExtensionSorter
  parent: Sdl.Core.PluginFramework.Util
  children:
  - Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension})
  langs:
  - csharp
  - vb
  name: ExtensionSorter
  nameWithType: ExtensionSorter
  fullName: Sdl.Core.PluginFramework.Util.ExtensionSorter
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nUtility class that sorts sortable extensions.\n"
  remarks: This class only supports sortable extensions, i.e. extensions marked with an extension attribute that extends <xref href="Sdl.Core.PluginFramework.Util.SortableExtensionAttribute" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: 'public static class ExtensionSorter : Object'
    content.vb: >-
      Public Module ExtensionSorter
          Inherits Object
  seealso:
  - linkId: Sdl.Core.PluginFramework.Util.SortableExtensionAttribute
    commentId: T:Sdl.Core.PluginFramework.Util.SortableExtensionAttribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension})
  commentId: M:Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension})
  id: Sort(System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension})
  parent: Sdl.Core.PluginFramework.Util.ExtensionSorter
  langs:
  - csharp
  - vb
  name: Sort(IEnumerable<IExtension>)
  nameWithType: ExtensionSorter.Sort(IEnumerable<IExtension>)
  fullName: Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort(System.Collections.Generic.IEnumerable<Sdl.Core.PluginFramework.IExtension>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nSorts the specified extensions according to the according to the <xref href=\"Sdl.Core.PluginFramework.Util.SortableExtensionAttribute.InsertBefore\" data-throw-if-not-resolved=\"false\"></xref>\nand <xref href=\"Sdl.Core.PluginFramework.Util.SortableExtensionAttribute.InsertAfter\" data-throw-if-not-resolved=\"false\"></xref> properties.\n"
  syntax:
    content: public static IList<IExtension> Sort(IEnumerable<IExtension> extensions)
    parameters:
    - id: extensions
      type: System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension}
      description: The extensions to sort.
    return:
      type: System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension}
      description: A sorted list of extensions.
    content.vb: Public Shared Function Sort(extensions As IEnumerable(Of IExtension)) As IList(Of IExtension)
  overload: Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if one of the extensions specified does not target a sortable extenion point.
  nameWithType.vb: ExtensionSorter.Sort(IEnumerable(Of IExtension))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort(System.Collections.Generic.IEnumerable(Of Sdl.Core.PluginFramework.IExtension))
  name.vb: Sort(IEnumerable(Of IExtension))
references:
- uid: Sdl.Core.PluginFramework.Util
  commentId: N:Sdl.Core.PluginFramework.Util
  isExternal: true
  name: Sdl.Core.PluginFramework.Util
  nameWithType: Sdl.Core.PluginFramework.Util
  fullName: Sdl.Core.PluginFramework.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.Util.SortableExtensionAttribute
  commentId: T:Sdl.Core.PluginFramework.Util.SortableExtensionAttribute
  isExternal: true
  name: SortableExtensionAttribute
  nameWithType: SortableExtensionAttribute
  fullName: Sdl.Core.PluginFramework.Util.SortableExtensionAttribute
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort*
  commentId: Overload:Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort
  isExternal: true
  name: Sort
  nameWithType: ExtensionSorter.Sort
  fullName: Sdl.Core.PluginFramework.Util.ExtensionSorter.Sort
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension}
  commentId: '!:System.Collections.Generic.IEnumerable{Sdl.Core.PluginFramework.IExtension}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IExtension>
  nameWithType: IEnumerable<IExtension>
  fullName: System.Collections.Generic.IEnumerable<Sdl.Core.PluginFramework.IExtension>
  nameWithType.vb: IEnumerable(Of IExtension)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.Core.PluginFramework.IExtension)
  name.vb: IEnumerable(Of IExtension)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension}
  commentId: '!:System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension}'
  definition: System.Collections.Generic.IList`1
  name: IList<IExtension>
  nameWithType: IList<IExtension>
  fullName: System.Collections.Generic.IList<Sdl.Core.PluginFramework.IExtension>
  nameWithType.vb: IList(Of IExtension)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.PluginFramework.IExtension)
  name.vb: IList(Of IExtension)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
