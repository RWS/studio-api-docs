### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.ExtensionCollection
  commentId: T:Sdl.Core.PluginFramework.ExtensionCollection
  id: ExtensionCollection
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.ExtensionCollection.#ctor(System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension})
  - Sdl.Core.PluginFramework.ExtensionCollection.Item(System.String)
  langs:
  - csharp
  - vb
  name: ExtensionCollection
  nameWithType: ExtensionCollection
  fullName: Sdl.Core.PluginFramework.ExtensionCollection
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nRead-only collection of extensions.\n"
  syntax:
    content: 'public class ExtensionCollection : ReadOnlyCollection<IExtension>'
    content.vb: >-
      Public Class ExtensionCollection
          Inherits ReadOnlyCollection(Of IExtension)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.PluginFramework.ExtensionCollection.#ctor(System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension})
  commentId: M:Sdl.Core.PluginFramework.ExtensionCollection.#ctor(System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension})
  id: '#ctor(System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension})'
  parent: Sdl.Core.PluginFramework.ExtensionCollection
  langs:
  - csharp
  - vb
  name: ExtensionCollection(IList<IExtension>)
  nameWithType: ExtensionCollection.ExtensionCollection(IList<IExtension>)
  fullName: Sdl.Core.PluginFramework.ExtensionCollection.ExtensionCollection(System.Collections.Generic.IList<Sdl.Core.PluginFramework.IExtension>)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nConstructor for ExtenstionCollection that it&apos;s accepting a list of extensions \n"
  syntax:
    content: public ExtensionCollection(IList<IExtension> list)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension}
    content.vb: Public Sub New(list As IList(Of IExtension))
  overload: Sdl.Core.PluginFramework.ExtensionCollection.#ctor*
  nameWithType.vb: ExtensionCollection.ExtensionCollection(IList(Of IExtension))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.PluginFramework.ExtensionCollection.ExtensionCollection(System.Collections.Generic.IList(Of Sdl.Core.PluginFramework.IExtension))
  name.vb: ExtensionCollection(IList(Of IExtension))
- uid: Sdl.Core.PluginFramework.ExtensionCollection.Item(System.String)
  commentId: P:Sdl.Core.PluginFramework.ExtensionCollection.Item(System.String)
  id: Item(System.String)
  parent: Sdl.Core.PluginFramework.ExtensionCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ExtensionCollection.Item[String]
  fullName: Sdl.Core.PluginFramework.ExtensionCollection.Item[System.String]
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nGets the <xref href=\"Sdl.Core.PluginFramework.IExtension\" data-throw-if-not-resolved=\"false\"></xref> with the specified extension id.\n"
  syntax:
    content: public IExtension this[string extensionId] { get; }
    parameters:
    - id: extensionId
      type: System.String
    return:
      type: Sdl.Core.PluginFramework.IExtension
    content.vb: Public ReadOnly Property Item(extensionId As String) As IExtension
  overload: Sdl.Core.PluginFramework.ExtensionCollection.Item*
  nameWithType.vb: ExtensionCollection.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Sdl.Core.PluginFramework.ExtensionCollection.Item(System.String)
  name.vb: Item(String)
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.ExtensionCollection.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionCollection.#ctor
  isExternal: true
  name: ExtensionCollection
  nameWithType: ExtensionCollection.ExtensionCollection
  fullName: Sdl.Core.PluginFramework.ExtensionCollection.ExtensionCollection
- uid: System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension}
  commentId: '!:System.Collections.Generic.IList{Sdl.Core.PluginFramework.IExtension}'
  definition: System.Collections.Generic.IList`1
  name: IList<IExtension>
  nameWithType: IList<IExtension>
  fullName: System.Collections.Generic.IList<Sdl.Core.PluginFramework.IExtension>
  nameWithType.vb: IList(Of IExtension)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Core.PluginFramework.IExtension)
  name.vb: IList(Of IExtension)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IExtension
    name: IExtension
    nameWithType: IExtension
    fullName: Sdl.Core.PluginFramework.IExtension
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.ExtensionCollection.Item*
  commentId: Overload:Sdl.Core.PluginFramework.ExtensionCollection.Item
  isExternal: true
  name: Item
  nameWithType: ExtensionCollection.Item
  fullName: Sdl.Core.PluginFramework.ExtensionCollection.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.PluginFramework.IExtension
  commentId: T:Sdl.Core.PluginFramework.IExtension
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IExtension
  nameWithType: IExtension
  fullName: Sdl.Core.PluginFramework.IExtension
