### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  id: CultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  children:
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose(System.Boolean)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  langs:
  - csharp
  - vb
  name: CultureMetadataManager
  nameWithType: CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nImplementation of <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\nthat uses a memory cache for the metadata retrieved.\nIntended for singleton use.\n"
  syntax:
    content: 'public class CultureMetadataManager : ICultureMetadataManager, IDisposable'
    content.vb: >-
      Public Class CultureMetadataManager
          Implements ICultureMetadataManager, IDisposable
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync
  id: GetDataVersionAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetDataVersionAsync()
  nameWithType: CultureMetadataManager.GetDataVersionAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<string> GetDataVersionAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Public Function GetDataVersionAsync As Task(Of String)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  id: GetAllUnitMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllUnitMetadataAsync(String)
  nameWithType: CultureMetadataManager.GetAllUnitMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<List<UnitMetadata>> GetAllUnitMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Public Function GetAllUnitMetadataAsync(languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync(System.String)
  id: GetUnitMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitMetadataAsync(String)
  nameWithType: CultureMetadataManager.GetUnitMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<List<UnitMetadata>> GetUnitMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Public Function GetUnitMetadataAsync(languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  id: GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllUnitMetadataFromLabelAsync(String, String)
  nameWithType: CultureMetadataManager.GetAllUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<List<UnitMetadata>> GetAllUnitMetadataFromLabelAsync(string label, string languageCode)
    parameters:
    - id: label
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Public Function GetAllUnitMetadataFromLabelAsync(label As String, languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  id: GetLanguagesAsync(System.String[],System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguagesAsync(String[], Boolean)
  nameWithType: CultureMetadataManager.GetLanguagesAsync(String[], Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync(System.String[], System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase[]> GetLanguagesAsync(string[] languageCodes = null, bool ignoreMachineCultures = false)
    parameters:
    - id: languageCodes
      type: System.String[]
    - id: ignoreMachineCultures
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Public Function GetLanguagesAsync(languageCodes As String() = Nothing, ignoreMachineCultures As Boolean = False) As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  nameWithType.vb: CultureMetadataManager.GetLanguagesAsync(String(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync(System.String(), System.Boolean)
  name.vb: GetLanguagesAsync(String(), Boolean)
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  id: GetAllSpecificLanguagesAsync(System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllSpecificLanguagesAsync(Boolean)
  nameWithType: CultureMetadataManager.GetAllSpecificLanguagesAsync(Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase[]> GetAllSpecificLanguagesAsync(bool ignoreMachineCultures = false)
    parameters:
    - id: ignoreMachineCultures
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Public Function GetAllSpecificLanguagesAsync(ignoreMachineCultures As Boolean = False) As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String)
  id: GetLanguageAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String)
  nameWithType: CultureMetadataManager.GetLanguageAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase> GetLanguageAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
    content.vb: Public Function GetLanguageAsync(languageCode As String) As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String,System.String)
  id: GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String, String)
  nameWithType: CultureMetadataManager.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase> GetLanguageAsync(string languageCodeInProduct, string productId)
    parameters:
    - id: languageCodeInProduct
      type: System.String
    - id: productId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
    content.vb: Public Function GetLanguageAsync(languageCodeInProduct As String, productId As String) As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  id: GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguageMetadataAsync(String[])
  nameWithType: CultureMetadataManager.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageMetadata[]> GetLanguageMetadataAsync(string[] languageCodes = null)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Public Function GetLanguageMetadataAsync(languageCodes As String() = Nothing) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  nameWithType.vb: CultureMetadataManager.GetLanguageMetadataAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  id: GetAlternativeLanguageCodesAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAlternativeLanguageCodesAsync(String, String)
  nameWithType: CultureMetadataManager.GetAlternativeLanguageCodesAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<IList<AlternativeLanguageCode>> GetAlternativeLanguageCodesAsync(string productId, string languageCode)
    parameters:
    - id: productId
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
    content.vb: Public Function GetAlternativeLanguageCodesAsync(productId As String, languageCode As String) As Task(Of IList(Of AlternativeLanguageCode))
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync
  id: GetAllNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllNeutralLanguagesAsync()
  nameWithType: CultureMetadataManager.GetAllNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase[]> GetAllNeutralLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Public Function GetAllNeutralLanguagesAsync As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync
  id: GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProductsAsync()
  nameWithType: CultureMetadataManager.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<Product[]> GetAllRegisteredProductsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
    content.vb: Public Function GetAllRegisteredProductsAsync As Task(Of Product())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  id: GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetSupportedLanguagesAsync(String)
  nameWithType: CultureMetadataManager.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageBase[]> GetSupportedLanguagesAsync(string productId)
    parameters:
    - id: productId
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Public Function GetSupportedLanguagesAsync(productId As String) As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync
  id: GetUnitDefinitionsAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitDefinitionsAsync()
  nameWithType: CultureMetadataManager.GetUnitDefinitionsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<UnitDefinition[]> GetUnitDefinitionsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
    content.vb: Public Function GetUnitDefinitionsAsync As Task(Of UnitDefinition())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync(System.String)
  id: GetNumberMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetNumberMetadataAsync(String)
  nameWithType: CultureMetadataManager.GetNumberMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<NumberMetadata> GetNumberMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata}
    content.vb: Public Function GetNumberMetadataAsync(languageCode As String) As Task(Of NumberMetadata)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  id: GetPreferredLabelValueSetAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetPreferredLabelValueSetAsync(String, String)
  nameWithType: CultureMetadataManager.GetPreferredLabelValueSetAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LabelValueSet> GetPreferredLabelValueSetAsync(string unitKey, string languageCode)
    parameters:
    - id: unitKey
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
    content.vb: Public Function GetPreferredLabelValueSetAsync(unitKey As String, languageCode As String) As Task(Of LabelValueSet)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  id: GetApplicableLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetApplicableLanguageMetadataAsync(String[])
  nameWithType: CultureMetadataManager.GetApplicableLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<LanguageMetadata[]> GetApplicableLanguageMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Public Function GetApplicableLanguageMetadataAsync(languageCodes As String()) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync*
  exceptions:
  - type: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataException
    commentId: T:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataException
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  nameWithType.vb: CultureMetadataManager.GetApplicableLanguageMetadataAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String())
  name.vb: GetApplicableLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync(System.String)
  id: GetStableCultureInfoAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetStableCultureInfoAsync(String)
  nameWithType: CultureMetadataManager.GetStableCultureInfoAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<StableCultureInfo> GetStableCultureInfoAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo}
    content.vb: Public Function GetStableCultureInfoAsync(languageCode As String) As Task(Of StableCultureInfo)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  id: GetStableCultureInfosAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetStableCultureInfosAsync(String[])
  nameWithType: CultureMetadataManager.GetStableCultureInfosAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<StableCultureInfo[]> GetStableCultureInfosAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo[]}
    content.vb: Public Function GetStableCultureInfosAsync(languageCodes As String()) As Task(Of StableCultureInfo())
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  nameWithType.vb: CultureMetadataManager.GetStableCultureInfosAsync(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync(System.String())
  name.vb: GetStableCultureInfosAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  id: GetUnitMetadataFromKeyAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitMetadataFromKeyAsync(String, String)
  nameWithType: CultureMetadataManager.GetUnitMetadataFromKeyAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<(UnitMetadata unitMetadata, string languageCodeFound)> GetUnitMetadataFromKeyAsync(string unitKey, string languageCode)
    parameters:
    - id: unitKey
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
    content.vb: Public Function GetUnitMetadataFromKeyAsync(unitKey As String, languageCode As String) As Task(Of(unitMetadata As UnitMetadata, languageCodeFound As String)(Of UnitMetadata , String))
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  id: GetUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitMetadataFromLabelAsync(String, String)
  nameWithType: CultureMetadataManager.GetUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSee <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public Task<UnitMetadata> GetUnitMetadataFromLabelAsync(string label, string languageCode)
    parameters:
    - id: label
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
    content.vb: Public Function GetUnitMetadataFromLabelAsync(label As String, languageCode As String) As Task(Of UnitMetadata)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync*
  implements:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose(System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: CultureMetadataManager.Dispose(Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose(System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\n\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose
  id: Dispose
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: CultureMetadataManager.Dispose()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\n\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync
  isExternal: true
  name: GetDataVersionAsync
  nameWithType: CultureMetadataManager.GetDataVersionAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetDataVersionAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetDataVersionAsync()
  nameWithType: ICultureMetadataManager.GetDataVersionAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
    name: GetDataVersionAsync
    nameWithType: ICultureMetadataManager.GetDataVersionAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
    name: GetDataVersionAsync
    nameWithType: ICultureMetadataManager.GetDataVersionAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync
  isExternal: true
  name: GetAllUnitMetadataAsync
  nameWithType: CultureMetadataManager.GetAllUnitMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetAllUnitMetadataAsync(String)
  nameWithType: ICultureMetadataManager.GetAllUnitMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
    name: GetAllUnitMetadataAsync
    nameWithType: ICultureMetadataManager.GetAllUnitMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
    name: GetAllUnitMetadataAsync
    nameWithType: ICultureMetadataManager.GetAllUnitMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<UnitMetadata>>
  nameWithType: Task<List<UnitMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Sdl.Core.Globalization.UnitMetadata.UnitMetadata>>
  nameWithType.vb: Task(Of List(Of UnitMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata))
  name.vb: Task(Of List(Of UnitMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync
  isExternal: true
  name: GetUnitMetadataAsync
  nameWithType: CultureMetadataManager.GetUnitMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetUnitMetadataAsync(String)
  nameWithType: ICultureMetadataManager.GetUnitMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
    name: GetUnitMetadataAsync
    nameWithType: ICultureMetadataManager.GetUnitMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
    name: GetUnitMetadataAsync
    nameWithType: ICultureMetadataManager.GetUnitMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync
  isExternal: true
  name: GetAllUnitMetadataFromLabelAsync
  nameWithType: CultureMetadataManager.GetAllUnitMetadataFromLabelAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllUnitMetadataFromLabelAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetAllUnitMetadataFromLabelAsync(String, String)
  nameWithType: ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
    name: GetAllUnitMetadataFromLabelAsync
    nameWithType: ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
    name: GetAllUnitMetadataFromLabelAsync
    nameWithType: ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync
  isExternal: true
  name: GetLanguagesAsync
  nameWithType: CultureMetadataManager.GetLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetLanguagesAsync(String[], Boolean)
  nameWithType: ICultureMetadataManager.GetLanguagesAsync(String[], Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[], System.Boolean)
  nameWithType.vb: ICultureMetadataManager.GetLanguagesAsync(String(), Boolean)
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String(), System.Boolean)
  name.vb: GetLanguagesAsync(String(), Boolean)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
    name: GetLanguagesAsync
    nameWithType: ICultureMetadataManager.GetLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
    name: GetLanguagesAsync
    nameWithType: ICultureMetadataManager.GetLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageBase[]>
  nameWithType: Task<LanguageBase[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageBase[]>
  nameWithType.vb: Task(Of LanguageBase())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageBase())
  name.vb: Task(Of LanguageBase())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync
  isExternal: true
  name: GetAllSpecificLanguagesAsync
  nameWithType: CultureMetadataManager.GetAllSpecificLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllSpecificLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetAllSpecificLanguagesAsync(Boolean)
  nameWithType: ICultureMetadataManager.GetAllSpecificLanguagesAsync(Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
    name: GetAllSpecificLanguagesAsync
    nameWithType: ICultureMetadataManager.GetAllSpecificLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
    name: GetAllSpecificLanguagesAsync
    nameWithType: ICultureMetadataManager.GetAllSpecificLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync
  isExternal: true
  name: GetLanguageAsync
  nameWithType: CultureMetadataManager.GetLanguageAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetLanguageAsync(String)
  nameWithType: ICultureMetadataManager.GetLanguageAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
    name: GetLanguageAsync
    nameWithType: ICultureMetadataManager.GetLanguageAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
    name: GetLanguageAsync
    nameWithType: ICultureMetadataManager.GetLanguageAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageBase>
  nameWithType: Task<LanguageBase>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageBase>
  nameWithType.vb: Task(Of LanguageBase)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageBase)
  name.vb: Task(Of LanguageBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetLanguageAsync(String, String)
  nameWithType: ICultureMetadataManager.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
    name: GetLanguageAsync
    nameWithType: ICultureMetadataManager.GetLanguageAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
    name: GetLanguageAsync
    nameWithType: ICultureMetadataManager.GetLanguageAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync
  isExternal: true
  name: GetLanguageMetadataAsync
  nameWithType: CultureMetadataManager.GetLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetLanguageMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetLanguageMetadataAsync(String[])
  nameWithType: ICultureMetadataManager.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  nameWithType.vb: ICultureMetadataManager.GetLanguageMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
    name: GetLanguageMetadataAsync
    nameWithType: ICultureMetadataManager.GetLanguageMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
    name: GetLanguageMetadataAsync
    nameWithType: ICultureMetadataManager.GetLanguageMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageMetadata[]>
  nameWithType: Task<LanguageMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]>
  nameWithType.vb: Task(Of LanguageMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata())
  name.vb: Task(Of LanguageMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync
  isExternal: true
  name: GetAlternativeLanguageCodesAsync
  nameWithType: CultureMetadataManager.GetAlternativeLanguageCodesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAlternativeLanguageCodesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetAlternativeLanguageCodesAsync(String, String)
  nameWithType: ICultureMetadataManager.GetAlternativeLanguageCodesAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
    name: GetAlternativeLanguageCodesAsync
    nameWithType: ICultureMetadataManager.GetAlternativeLanguageCodesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
    name: GetAlternativeLanguageCodesAsync
    nameWithType: ICultureMetadataManager.GetAlternativeLanguageCodesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<AlternativeLanguageCode>>
  nameWithType: Task<IList<AlternativeLanguageCode>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>>
  nameWithType.vb: Task(Of IList(Of AlternativeLanguageCode))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode))
  name.vb: Task(Of IList(Of AlternativeLanguageCode))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync
  isExternal: true
  name: GetAllNeutralLanguagesAsync
  nameWithType: CultureMetadataManager.GetAllNeutralLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllNeutralLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetAllNeutralLanguagesAsync()
  nameWithType: ICultureMetadataManager.GetAllNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
    name: GetAllNeutralLanguagesAsync
    nameWithType: ICultureMetadataManager.GetAllNeutralLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
    name: GetAllNeutralLanguagesAsync
    nameWithType: ICultureMetadataManager.GetAllNeutralLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync
  isExternal: true
  name: GetAllRegisteredProductsAsync
  nameWithType: CultureMetadataManager.GetAllRegisteredProductsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetAllRegisteredProductsAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetAllRegisteredProductsAsync()
  nameWithType: ICultureMetadataManager.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
    name: GetAllRegisteredProductsAsync
    nameWithType: ICultureMetadataManager.GetAllRegisteredProductsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
    name: GetAllRegisteredProductsAsync
    nameWithType: ICultureMetadataManager.GetAllRegisteredProductsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Product[]>
  nameWithType: Task<Product[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageRegistry.Product[]>
  nameWithType.vb: Task(Of Product())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageRegistry.Product())
  name.vb: Task(Of Product())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync
  isExternal: true
  name: GetSupportedLanguagesAsync
  nameWithType: CultureMetadataManager.GetSupportedLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetSupportedLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetSupportedLanguagesAsync(String)
  nameWithType: ICultureMetadataManager.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
    name: GetSupportedLanguagesAsync
    nameWithType: ICultureMetadataManager.GetSupportedLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
    name: GetSupportedLanguagesAsync
    nameWithType: ICultureMetadataManager.GetSupportedLanguagesAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync
  isExternal: true
  name: GetUnitDefinitionsAsync
  nameWithType: CultureMetadataManager.GetUnitDefinitionsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitDefinitionsAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetUnitDefinitionsAsync()
  nameWithType: ICultureMetadataManager.GetUnitDefinitionsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync()
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
    name: GetUnitDefinitionsAsync
    nameWithType: ICultureMetadataManager.GetUnitDefinitionsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
    name: GetUnitDefinitionsAsync
    nameWithType: ICultureMetadataManager.GetUnitDefinitionsAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitDefinition[]>
  nameWithType: Task<UnitDefinition[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]>
  nameWithType.vb: Task(Of UnitDefinition())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitDefinition.UnitDefinition())
  name.vb: Task(Of UnitDefinition())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync
  isExternal: true
  name: GetNumberMetadataAsync
  nameWithType: CultureMetadataManager.GetNumberMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetNumberMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetNumberMetadataAsync(String)
  nameWithType: ICultureMetadataManager.GetNumberMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
    name: GetNumberMetadataAsync
    nameWithType: ICultureMetadataManager.GetNumberMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
    name: GetNumberMetadataAsync
    nameWithType: ICultureMetadataManager.GetNumberMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NumberMetadata>
  nameWithType: Task<NumberMetadata>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.NumberMetadata.NumberMetadata>
  nameWithType.vb: Task(Of NumberMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.NumberMetadata.NumberMetadata)
  name.vb: Task(Of NumberMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync
  isExternal: true
  name: GetPreferredLabelValueSetAsync
  nameWithType: CultureMetadataManager.GetPreferredLabelValueSetAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetPreferredLabelValueSetAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetPreferredLabelValueSetAsync(String, String)
  nameWithType: ICultureMetadataManager.GetPreferredLabelValueSetAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
    name: GetPreferredLabelValueSetAsync
    nameWithType: ICultureMetadataManager.GetPreferredLabelValueSetAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
    name: GetPreferredLabelValueSetAsync
    nameWithType: ICultureMetadataManager.GetPreferredLabelValueSetAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LabelValueSet>
  nameWithType: Task<LabelValueSet>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.LabelValueSet>
  nameWithType.vb: Task(Of LabelValueSet)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.LabelValueSet)
  name.vb: Task(Of LabelValueSet)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    name: LabelValueSet
    nameWithType: LabelValueSet
    fullName: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    name: LabelValueSet
    nameWithType: LabelValueSet
    fullName: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync
  isExternal: true
  name: GetApplicableLanguageMetadataAsync
  nameWithType: CultureMetadataManager.GetApplicableLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetApplicableLanguageMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetApplicableLanguageMetadataAsync(String[])
  nameWithType: ICultureMetadataManager.GetApplicableLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  nameWithType.vb: ICultureMetadataManager.GetApplicableLanguageMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String())
  name.vb: GetApplicableLanguageMetadataAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
    name: GetApplicableLanguageMetadataAsync
    nameWithType: ICultureMetadataManager.GetApplicableLanguageMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
    name: GetApplicableLanguageMetadataAsync
    nameWithType: ICultureMetadataManager.GetApplicableLanguageMetadataAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataException
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataException
  isExternal: true
  name: CultureMetadataException
  nameWithType: CultureMetadataException
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataException
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync
  isExternal: true
  name: GetStableCultureInfoAsync
  nameWithType: CultureMetadataManager.GetStableCultureInfoAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfoAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetStableCultureInfoAsync(String)
  nameWithType: ICultureMetadataManager.GetStableCultureInfoAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
    name: GetStableCultureInfoAsync
    nameWithType: ICultureMetadataManager.GetStableCultureInfoAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
    name: GetStableCultureInfoAsync
    nameWithType: ICultureMetadataManager.GetStableCultureInfoAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StableCultureInfo>
  nameWithType: Task<StableCultureInfo>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.StableCultureInfo>
  nameWithType.vb: Task(Of StableCultureInfo)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.StableCultureInfo)
  name.vb: Task(Of StableCultureInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync
  isExternal: true
  name: GetStableCultureInfosAsync
  nameWithType: CultureMetadataManager.GetStableCultureInfosAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetStableCultureInfosAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetStableCultureInfosAsync(String[])
  nameWithType: ICultureMetadataManager.GetStableCultureInfosAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  nameWithType.vb: ICultureMetadataManager.GetStableCultureInfosAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String())
  name.vb: GetStableCultureInfosAsync(String())
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
    name: GetStableCultureInfosAsync
    nameWithType: ICultureMetadataManager.GetStableCultureInfosAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
    name: GetStableCultureInfosAsync
    nameWithType: ICultureMetadataManager.GetStableCultureInfosAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StableCultureInfo[]>
  nameWithType: Task<StableCultureInfo[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.StableCultureInfo[]>
  nameWithType.vb: Task(Of StableCultureInfo())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.StableCultureInfo())
  name.vb: Task(Of StableCultureInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync
  isExternal: true
  name: GetUnitMetadataFromKeyAsync
  nameWithType: CultureMetadataManager.GetUnitMetadataFromKeyAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromKeyAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetUnitMetadataFromKeyAsync(String, String)
  nameWithType: ICultureMetadataManager.GetUnitMetadataFromKeyAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
    name: GetUnitMetadataFromKeyAsync
    nameWithType: ICultureMetadataManager.GetUnitMetadataFromKeyAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
    name: GetUnitMetadataFromKeyAsync
    nameWithType: ICultureMetadataManager.GetUnitMetadataFromKeyAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2)<UnitMetadata, String>>
  nameWithType: Task<(T1, T2)<UnitMetadata, String>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<Sdl.Core.Globalization.UnitMetadata.UnitMetadata, System.String>>
  nameWithType.vb: Task(Of (T1, T2)(Of UnitMetadata, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata, System.String))
  name.vb: Task(Of (T1, T2)(Of UnitMetadata, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync
  isExternal: true
  name: GetUnitMetadataFromLabelAsync
  nameWithType: CultureMetadataManager.GetUnitMetadataFromLabelAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.GetUnitMetadataFromLabelAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  isExternal: true
  name: GetUnitMetadataFromLabelAsync(String, String)
  nameWithType: ICultureMetadataManager.GetUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String, System.String)
  spec.csharp:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
    name: GetUnitMetadataFromLabelAsync
    nameWithType: ICultureMetadataManager.GetUnitMetadataFromLabelAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
    name: GetUnitMetadataFromLabelAsync
    nameWithType: ICultureMetadataManager.GetUnitMetadataFromLabelAsync
    fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitMetadata>
  nameWithType: Task<UnitMetadata>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.UnitMetadata>
  nameWithType.vb: Task(Of UnitMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata)
  name.vb: Task(Of UnitMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose
  isExternal: true
  name: Dispose
  nameWithType: CultureMetadataManager.Dispose
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
