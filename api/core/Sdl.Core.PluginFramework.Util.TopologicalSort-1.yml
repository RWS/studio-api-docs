### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Util.TopologicalSort`1
  commentId: T:Sdl.Core.PluginFramework.Util.TopologicalSort`1
  id: TopologicalSort`1
  parent: Sdl.Core.PluginFramework.Util
  children:
  - Sdl.Core.PluginFramework.Util.TopologicalSort`1.Sort(System.Collections.Generic.IList{`0})
  langs:
  - csharp
  - vb
  name: TopologicalSort<T>
  nameWithType: TopologicalSort<T>
  fullName: Sdl.Core.PluginFramework.Util.TopologicalSort<T>
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nClass for sorting lists topologically.\n"
  syntax:
    content: 'public static class TopologicalSort<T> : Object where T : ITopologicalSortable'
    typeParameters:
    - id: T
      description: The type of item to sort. Needs to implement or extend the <xref href="Sdl.Core.PluginFramework.Util.ITopologicalSortable" data-throw-if-not-resolved="false"></xref> interface.
    content.vb: >-
      Public Module TopologicalSort(Of T As ITopologicalSortable)
          Inherits Object
  seealso:
  - linkId: Sdl.Core.PluginFramework.Util.ITopologicalSortable
    commentId: T:Sdl.Core.PluginFramework.Util.ITopologicalSortable
  inheritance:
  - System.Object
  nameWithType.vb: TopologicalSort(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: Sdl.Core.PluginFramework.Util.TopologicalSort(Of T)
  name.vb: TopologicalSort(Of T)
- uid: Sdl.Core.PluginFramework.Util.TopologicalSort`1.Sort(System.Collections.Generic.IList{`0})
  commentId: M:Sdl.Core.PluginFramework.Util.TopologicalSort`1.Sort(System.Collections.Generic.IList{`0})
  id: Sort(System.Collections.Generic.IList{`0})
  parent: Sdl.Core.PluginFramework.Util.TopologicalSort`1
  langs:
  - csharp
  - vb
  name: Sort(IList<T>)
  nameWithType: TopologicalSort<T>.Sort(IList<T>)
  fullName: Sdl.Core.PluginFramework.Util.TopologicalSort<T>.Sort(System.Collections.Generic.IList<T>)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Util
  summary: "\nSorts the specified list topologically.\n"
  syntax:
    content: public static void Sort(IList<T> items)
    parameters:
    - id: items
      type: System.Collections.Generic.IList{{T}}
      description: List of items to sort.
    content.vb: Public Shared Sub Sort(items As IList(Of T))
  overload: Sdl.Core.PluginFramework.Util.TopologicalSort`1.Sort*
  nameWithType.vb: TopologicalSort(Of T).Sort(IList(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Util.TopologicalSort(Of T).Sort(System.Collections.Generic.IList(Of T))
  name.vb: Sort(IList(Of T))
references:
- uid: Sdl.Core.PluginFramework.Util
  commentId: N:Sdl.Core.PluginFramework.Util
  isExternal: true
  name: Sdl.Core.PluginFramework.Util
  nameWithType: Sdl.Core.PluginFramework.Util
  fullName: Sdl.Core.PluginFramework.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.Util.ITopologicalSortable
  commentId: T:Sdl.Core.PluginFramework.Util.ITopologicalSortable
  isExternal: true
  name: ITopologicalSortable
  nameWithType: ITopologicalSortable
  fullName: Sdl.Core.PluginFramework.Util.ITopologicalSortable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Util.TopologicalSort`1.Sort*
  commentId: Overload:Sdl.Core.PluginFramework.Util.TopologicalSort`1.Sort
  isExternal: true
  name: Sort
  nameWithType: TopologicalSort<T>.Sort
  fullName: Sdl.Core.PluginFramework.Util.TopologicalSort<T>.Sort
  nameWithType.vb: TopologicalSort(Of T).Sort
  fullName.vb: Sdl.Core.PluginFramework.Util.TopologicalSort(Of T).Sort
- uid: System.Collections.Generic.IList{{T}}
  commentId: '!:System.Collections.Generic.IList{`0}'
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
