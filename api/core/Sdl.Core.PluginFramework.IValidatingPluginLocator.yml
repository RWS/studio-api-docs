### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IValidatingPluginLocator
  id: IValidatingPluginLocator
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  - Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  langs:
  - csharp
  - vb
  name: IValidatingPluginLocator
  nameWithType: IValidatingPluginLocator
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: 'public interface IValidatingPluginLocator : IPluginLocator'
    content.vb: >-
      Public Interface IValidatingPluginLocator

          Inherits IPluginLocator, IDisposable
  inheritedMembers:
  - Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  commentId: P:Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  id: ValidatedDescriptors
  parent: Sdl.Core.PluginFramework.IValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: ValidatedDescriptors
  nameWithType: IValidatingPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: List<IPluginDescriptor> ValidatedDescriptors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
    content.vb: ReadOnly Property ValidatedDescriptors As List(Of IPluginDescriptor)
  overload: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  commentId: P:Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  id: InvalidDescriptors
  parent: Sdl.Core.PluginFramework.IValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: InvalidDescriptors
  nameWithType: IValidatingPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nThis property exposes a list of plug-in descriptors that have failed to validate against the original .sdlplugin package and it&apos;s embedded signature.\n"
  syntax:
    content: List<IPluginDescriptor> InvalidDescriptors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
    content.vb: ReadOnly Property InvalidDescriptors As List(Of IPluginDescriptor)
  overload: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.IPluginLocator
  isExternal: true
  name: GetPluginDescriptors()
  nameWithType: IPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginLocator
  nameWithType: IPluginLocator
  fullName: Sdl.Core.PluginFramework.IPluginLocator
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  isExternal: true
  name: ValidatedDescriptors
  nameWithType: IValidatingPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
- uid: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
  commentId: '!:System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}'
  definition: System.Collections.Generic.List`1
  name: List<IPluginDescriptor>
  nameWithType: List<IPluginDescriptor>
  fullName: System.Collections.Generic.List<Sdl.Core.PluginFramework.IPluginDescriptor>
  nameWithType.vb: List(Of IPluginDescriptor)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.PluginFramework.IPluginDescriptor)
  name.vb: List(Of IPluginDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  isExternal: true
  name: InvalidDescriptors
  nameWithType: IValidatingPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
