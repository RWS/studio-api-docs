### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings
  id: CultureMetadataManagerSettings
  parent: Sdl.Core.Globalization.CultureMetadataManager
  children:
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.#ctor
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  - Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures
  langs:
  - csharp
  - vb
  name: CultureMetadataManagerSettings
  nameWithType: CultureMetadataManagerSettings
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings
  type: Class
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSettings for <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManager\" data-throw-if-not-resolved=\"false\"></xref>\n"
  syntax:
    content: public class CultureMetadataManagerSettings
    content.vb: Public Class CultureMetadataManagerSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.#ctor
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.#ctor
  id: '#ctor'
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings
  langs:
  - csharp
  - vb
  name: CultureMetadataManagerSettings()
  nameWithType: CultureMetadataManagerSettings.CultureMetadataManagerSettings()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.CultureMetadataManagerSettings()
  type: Constructor
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  syntax:
    content: public CultureMetadataManagerSettings()
    content.vb: Public Sub New
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  commentId: P:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  id: DataVersionCheckIntervalSeconds
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings
  langs:
  - csharp
  - vb
  name: DataVersionCheckIntervalSeconds
  nameWithType: CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSpecifies polling interval for caling <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService.GetVersionAsync\" data-throw-if-not-resolved=\"false\"></xref>\nto check for updated data\n"
  syntax:
    content: public int DataVersionCheckIntervalSeconds { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DataVersionCheckIntervalSeconds As Integer
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures
  commentId: P:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures
  id: IncludeMachineCultures
  parent: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings
  langs:
  - csharp
  - vb
  name: IncludeMachineCultures
  nameWithType: CultureMetadataManagerSettings.IncludeMachineCultures
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures
  type: Property
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nIf true, if data is requested using a culture code not supported by the <xref href=\"Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService\" data-throw-if-not-resolved=\"false\"></xref>\nimplementation provided, then an attempt will be made to retrieve the data from the \nculture installed on the machine. \n"
  remarks: "Note: this applies to <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String%5b%5d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>\n<xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public bool IncludeMachineCultures { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IncludeMachineCultures As Boolean
  overload: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.#ctor*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.#ctor
  isExternal: true
  name: CultureMetadataManagerSettings
  nameWithType: CultureMetadataManagerSettings.CultureMetadataManagerSettings
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.CultureMetadataManagerSettings
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  isExternal: true
  name: DataVersionCheckIntervalSeconds
  nameWithType: CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.DataVersionCheckIntervalSeconds
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures
  isExternal: true
  name: IncludeMachineCultures
  nameWithType: CultureMetadataManagerSettings.IncludeMachineCultures
  fullName: Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
