### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  id: ExtensionsFactory
  parent: Sdl.Core.PluginFramework.Integration
  children:
  - Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  - Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  - Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  langs:
  - csharp
  - vb
  name: ExtensionsFactory
  nameWithType: ExtensionsFactory
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nImplements the creation of the extension objects\n"
  syntax:
    content: 'public sealed class ExtensionsFactory : Object'
    content.vb: >-
      Public NotInheritable Class ExtensionsFactory

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  id: Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  langs:
  - csharp
  - vb
  name: Create<TAttribute, TResult>(ExtensionArguments, Boolean)
  nameWithType: ExtensionsFactory.Create<TAttribute, TResult>(ExtensionArguments, Boolean)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create<TAttribute, TResult>(Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nCreates the list of all the extension objects based on there attribute and instance type.\n"
  syntax:
    content: >-
      public static IEnumerable<TResult> Create<TAttribute, TResult>(ExtensionArguments arguments = null, bool useCache = true)

          where TAttribute : ExtensionAttribute where TResult : class
    parameters:
    - id: arguments
      type: Sdl.Core.PluginFramework.Integration.ExtensionArguments
      description: Optional arguments possible required by the object initializer.
    - id: useCache
      type: System.Boolean
      description: Determines if the instance should be retrieved from the cache if exist or create a new one an store it in the cache.
    typeParameters:
    - id: TAttribute
      description: The attributes which decorates the extension classes.
    - id: TResult
      description: The instance result type expected.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: The extension instance.
    content.vb: Public Shared Function Create(Of TAttribute As ExtensionAttribute, TResult As Class)(arguments As ExtensionArguments = Nothing, useCache As Boolean = True) As IEnumerable(Of TResult)
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create*
  nameWithType.vb: ExtensionsFactory.Create(Of TAttribute, TResult)(ExtensionArguments, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create(Of TAttribute, TResult)(Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  name.vb: Create(Of TAttribute, TResult)(ExtensionArguments, Boolean)
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  id: Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  langs:
  - csharp
  - vb
  name: Create<TResult>(IExtension, ExtensionArguments, Boolean)
  nameWithType: ExtensionsFactory.Create<TResult>(IExtension, ExtensionArguments, Boolean)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create<TResult>(Sdl.Core.PluginFramework.IExtension, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  summary: "\nCreate an extension instance based on its extension and the result type.\n"
  syntax:
    content: >-
      public static TResult Create<TResult>(IExtension extension, ExtensionArguments arguments = null, bool useCache = true)

          where TResult : class
    parameters:
    - id: extension
      type: Sdl.Core.PluginFramework.IExtension
      description: The extension for which the instance is created.
    - id: arguments
      type: Sdl.Core.PluginFramework.Integration.ExtensionArguments
      description: Optional arguments possible required by the object initializer.
    - id: useCache
      type: System.Boolean
      description: Determines if the instance should be retrieved from the cache if exist or create a new one an store it in the cache.
    typeParameters:
    - id: TResult
      description: The instance result type expected.
    return:
      type: '{TResult}'
      description: The extension instance.
    content.vb: Public Shared Function Create(Of TResult As Class)(extension As IExtension, arguments As ExtensionArguments = Nothing, useCache As Boolean = True) As TResult
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create*
  nameWithType.vb: ExtensionsFactory.Create(Of TResult)(IExtension, ExtensionArguments, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create(Of TResult)(Sdl.Core.PluginFramework.IExtension, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  name.vb: Create(Of TResult)(IExtension, ExtensionArguments, Boolean)
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  id: '#ctor'
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  langs:
  - csharp
  - vb
  name: ExtensionsFactory()
  nameWithType: ExtensionsFactory.ExtensionsFactory()
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.ExtensionsFactory()
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  syntax:
    content: public ExtensionsFactory()
    content.vb: Public Sub New
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.PluginFramework.Integration
  commentId: N:Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: Sdl.Core.PluginFramework.Integration
  nameWithType: Sdl.Core.PluginFramework.Integration
  fullName: Sdl.Core.PluginFramework.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create
  isExternal: true
  name: Create
  nameWithType: ExtensionsFactory.Create
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create
- uid: Sdl.Core.PluginFramework.Integration.ExtensionArguments
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionArguments
  parent: Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: ExtensionArguments
  nameWithType: ExtensionArguments
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionArguments
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: '!:System.Collections.Generic.IEnumerable{``1}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IExtension
  commentId: T:Sdl.Core.PluginFramework.IExtension
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IExtension
  nameWithType: IExtension
  fullName: Sdl.Core.PluginFramework.IExtension
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  isExternal: true
  name: ExtensionsFactory
  nameWithType: ExtensionsFactory.ExtensionsFactory
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.ExtensionsFactory
