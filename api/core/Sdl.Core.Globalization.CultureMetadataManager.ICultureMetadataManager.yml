### YamlMime:ManagedReference
items:
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  commentId: T:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  id: ICultureMetadataManager
  parent: Sdl.Core.Globalization.CultureMetadataManager
  children:
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  - Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  langs:
  - csharp
  - vb
  name: ICultureMetadataManager
  nameWithType: ICultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  type: Interface
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nProvides access to metadata for controlled use of \n<xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> and additional language information.\n"
  remarks: 'The implementation deals with '
  syntax:
    content: public interface ICultureMetadataManager
    content.vb: Public Interface ICultureMetadataManager
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  id: GetDataVersionAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetDataVersionAsync()
  nameWithType: ICultureMetadataManager.GetDataVersionAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns a string representing the version for the entire set of language \ndata and metadata managed. The format of the string is not defined, but\nits value can be compared with a previous value to check whether any\ndata has changed.\n"
  syntax:
    content: Task<string> GetDataVersionAsync()
    return:
      type: System.Threading.Tasks.Task{System.String}
    content.vb: Function GetDataVersionAsync As Task(Of String)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[],System.Boolean)
  id: GetLanguagesAsync(System.String[],System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguagesAsync(String[], Boolean)
  nameWithType: ICultureMetadataManager.GetLanguagesAsync(String[], Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String[], System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.LanguageBase\" data-throw-if-not-resolved=\"false\"></xref> either for all\nsupported languages, or for the subset of codes specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodes</code>.\n"
  remarks: If an unknown language code is specified, it is omitted from the results
  syntax:
    content: Task<LanguageBase[]> GetLanguagesAsync(string[] languageCodes = null, bool ignoreMachineCultures = false)
    parameters:
    - id: languageCodes
      type: System.String[]
    - id: ignoreMachineCultures
      type: System.Boolean
      description: >-
        If true, results include only languages provided

        by <xref href="Sdl.Core.Globalization.CultureMetadataService.ICultureMetadataService" data-throw-if-not-resolved="false"></xref> and not any machine cultures,

        regardless of the value of <xref href="Sdl.Core.Globalization.CultureMetadataManager.CultureMetadataManagerSettings.IncludeMachineCultures" data-throw-if-not-resolved="false"></xref>
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Function GetLanguagesAsync(languageCodes As String() = Nothing, ignoreMachineCultures As Boolean = False) As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync*
  nameWithType.vb: ICultureMetadataManager.GetLanguagesAsync(String(), Boolean)
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String(), System.Boolean)
  name.vb: GetLanguagesAsync(String(), Boolean)
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  id: GetLanguageAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String)
  nameWithType: ICultureMetadataManager.GetLanguageAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nSame behaviour as <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String%5b%5d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> but for a single language code.\nIf the code is unknown, a <xref href=\"Sdl.Core.Globalization.UnsupportedLanguageException\" data-throw-if-not-resolved=\"false\"></xref> is thrown\n"
  syntax:
    content: Task<LanguageBase> GetLanguageAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
    content.vb: Function GetLanguageAsync(languageCode As String) As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String,System.String)
  id: GetLanguageAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguageAsync(String, String)
  nameWithType: ICultureMetadataManager.GetLanguageAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nGets a language based on the code used in a specific product\n"
  syntax:
    content: Task<LanguageBase> GetLanguageAsync(string languageCodeInProduct, string productId)
    parameters:
    - id: languageCodeInProduct
      type: System.String
      description: Code as used in product
    - id: productId
      type: System.String
      description: ID of product
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
      description: LanguageBase corresponding to that code for the given product
    content.vb: Function GetLanguageAsync(languageCodeInProduct As String, productId As String) As Task(Of LanguageBase)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  id: GetAllNeutralLanguagesAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllNeutralLanguagesAsync()
  nameWithType: ICultureMetadataManager.GetAllNeutralLanguagesAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.LanguageBase\" data-throw-if-not-resolved=\"false\"></xref> for which\n<xref href=\"Sdl.Core.Globalization.LanguageData.IsNeutral\" data-throw-if-not-resolved=\"false\"></xref> is true\n"
  syntax:
    content: Task<LanguageBase[]> GetAllNeutralLanguagesAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Function GetAllNeutralLanguagesAsync As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  id: GetAllSpecificLanguagesAsync(System.Boolean)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllSpecificLanguagesAsync(Boolean)
  nameWithType: ICultureMetadataManager.GetAllSpecificLanguagesAsync(Boolean)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync(System.Boolean)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.LanguageBase\" data-throw-if-not-resolved=\"false\"></xref> for which\n<xref href=\"Sdl.Core.Globalization.LanguageData.IsNeutral\" data-throw-if-not-resolved=\"false\"></xref> is false\n"
  syntax:
    content: Task<LanguageBase[]> GetAllSpecificLanguagesAsync(bool ignoreMachineCultures = false)
    parameters:
    - id: ignoreMachineCultures
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
    content.vb: Function GetAllSpecificLanguagesAsync(ignoreMachineCultures As Boolean = False) As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  id: GetAllRegisteredProductsAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllRegisteredProductsAsync()
  nameWithType: ICultureMetadataManager.GetAllRegisteredProductsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nPresents a list of all the products supported by the model\n"
  syntax:
    content: Task<Product[]> GetAllRegisteredProductsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
      description: list of Product objects
    content.vb: Function GetAllRegisteredProductsAsync As Task(Of Product())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  id: GetSupportedLanguagesAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetSupportedLanguagesAsync(String)
  nameWithType: ICultureMetadataManager.GetSupportedLanguagesAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nGets all supported languages for a given product\n"
  syntax:
    content: Task<LanguageBase[]> GetSupportedLanguagesAsync(string productId)
    parameters:
    - id: productId
      type: System.String
      description: Id of the searched product
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
      description: Array of all supported languages for a product
    content.vb: Function GetSupportedLanguagesAsync(productId As String) As Task(Of LanguageBase())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String,System.String)
  id: GetAlternativeLanguageCodesAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAlternativeLanguageCodesAsync(String, String)
  nameWithType: ICultureMetadataManager.GetAlternativeLanguageCodesAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nGets an alternative language code for the language represented by languageCode and for product represented by productId\n"
  syntax:
    content: Task<IList<AlternativeLanguageCode>> GetAlternativeLanguageCodesAsync(string productId, string languageCode)
    parameters:
    - id: productId
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
      description: string that represents the alternative language code for the language and the product given
    content.vb: Function GetAlternativeLanguageCodesAsync(productId As String, languageCode As String) As Task(Of IList(Of AlternativeLanguageCode))
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  id: GetApplicableLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetApplicableLanguageMetadataAsync(String[])
  nameWithType: ICultureMetadataManager.GetApplicableLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata\" data-throw-if-not-resolved=\"false\"></xref>\nfor the codes specified, mapping to different codes where required\n(the result for a region-neutral code may be the default\nregion-specific value) \n"
  syntax:
    content: Task<LanguageMetadata[]> GetApplicableLanguageMetadataAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Function GetApplicableLanguageMetadataAsync(languageCodes As String()) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync*
  nameWithType.vb: ICultureMetadataManager.GetApplicableLanguageMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync(System.String())
  name.vb: GetApplicableLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  id: GetLanguageMetadataAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetLanguageMetadataAsync(String[])
  nameWithType: ICultureMetadataManager.GetLanguageMetadataAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata\" data-throw-if-not-resolved=\"false\"></xref> either for all\nsupported languages, or for the subset of codes specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCodes</code>.\n"
  syntax:
    content: Task<LanguageMetadata[]> GetLanguageMetadataAsync(string[] languageCodes = null)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
    content.vb: Function GetLanguageMetadataAsync(languageCodes As String() = Nothing) As Task(Of LanguageMetadata())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync*
  nameWithType.vb: ICultureMetadataManager.GetLanguageMetadataAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync(System.String())
  name.vb: GetLanguageMetadataAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  id: GetStableCultureInfoAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetStableCultureInfoAsync(String)
  nameWithType: ICultureMetadataManager.GetStableCultureInfoAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturn an <xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref> that can be used as\na more controlled <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> with additional\nproperties.\n"
  syntax:
    content: Task<StableCultureInfo> GetStableCultureInfoAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo}
    content.vb: Function GetStableCultureInfoAsync(languageCode As String) As Task(Of StableCultureInfo)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  id: GetStableCultureInfosAsync(System.String[])
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetStableCultureInfosAsync(String[])
  nameWithType: ICultureMetadataManager.GetStableCultureInfosAsync(String[])
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String[])
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturn <xref href=\"Sdl.Core.Globalization.StableCultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that can be used as\na more controlled <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> with additional\nproperties.\n"
  syntax:
    content: Task<StableCultureInfo[]> GetStableCultureInfosAsync(string[] languageCodes)
    parameters:
    - id: languageCodes
      type: System.String[]
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo[]}
    content.vb: Function GetStableCultureInfosAsync(languageCodes As String()) As Task(Of StableCultureInfo())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync*
  nameWithType.vb: ICultureMetadataManager.GetStableCultureInfosAsync(String())
  fullName.vb: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync(System.String())
  name.vb: GetStableCultureInfosAsync(String())
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  id: GetNumberMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetNumberMetadataAsync(String)
  nameWithType: ICultureMetadataManager.GetNumberMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCode</code> is not in the list\nreturned by <xref href=\"Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync(System.String%5b%5d%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, otherwise \nthe <xref href=\"Sdl.Core.Globalization.NumberMetadata.NumberMetadata\" data-throw-if-not-resolved=\"false\"></xref> defined\nfor the culture <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCode</code>, or if none found, for the parent\nculture if available, or default metadata if no match is found.\n"
  syntax:
    content: Task<NumberMetadata> GetNumberMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata}
    content.vb: Function GetNumberMetadataAsync(languageCode As String) As Task(Of NumberMetadata)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  id: GetUnitDefinitionsAsync
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitDefinitionsAsync()
  nameWithType: ICultureMetadataManager.GetUnitDefinitionsAsync()
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync()
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns an array of <xref href=\"Sdl.Core.Globalization.UnitDefinition\" data-throw-if-not-resolved=\"false\"></xref> describing all units defined\n"
  syntax:
    content: Task<UnitDefinition[]> GetUnitDefinitionsAsync()
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
    content.vb: Function GetUnitDefinitionsAsync As Task(Of UnitDefinition())
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String,System.String)
  id: GetUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitMetadataFromLabelAsync(String, String)
  nameWithType: ICultureMetadataManager.GetUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns the first <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> corresponding to <code data-dev-comment-type=\"paramref\" class=\"paramref\">label</code>\nfor the culture <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCode</code>, or if none found, for the parent\nculture if available, or null if no match is found.\n"
  syntax:
    content: Task<UnitMetadata> GetUnitMetadataFromLabelAsync(string label, string languageCode)
    parameters:
    - id: label
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
    content.vb: Function GetUnitMetadataFromLabelAsync(label As String, languageCode As String) As Task(Of UnitMetadata)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  id: GetAllUnitMetadataFromLabelAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllUnitMetadataFromLabelAsync(String, String)
  nameWithType: ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns all <xref href=\"Sdl.Core.Globalization.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> corresponding to <code data-dev-comment-type=\"paramref\" class=\"paramref\">label</code>\nfor the culture <code data-dev-comment-type=\"paramref\" class=\"paramref\">languageCode</code>, or if none found, for the parent\nculture if available, or null if no match is found.\n"
  remarks: >-
    For some cultures, a given label might be used for two or more different units, e.g. as a top-level default label for

    one unit, and a language-specific plural form for another unit.
  syntax:
    content: Task<List<UnitMetadata>> GetAllUnitMetadataFromLabelAsync(string label, string languageCode)
    parameters:
    - id: label
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Function GetAllUnitMetadataFromLabelAsync(label As String, languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  id: GetAllUnitMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetAllUnitMetadataAsync(String)
  nameWithType: ICultureMetadataManager.GetAllUnitMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nProvide all metadata that should be recognised in the language for\nall units, from all levels of hierarchy. Note: may therefore return\nmultiple <xref href=\"Sdl.Core.Globalization.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> objects with the same <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata.UnitKey\" data-throw-if-not-resolved=\"false\"></xref> .\nRespects the <xref href=\"Sdl.Core.Globalization.UnitMetadata.UnitMetadata.DoNotInherit\" data-throw-if-not-resolved=\"false\"></xref> flag, i.e. objects above\nwill not be included.\n"
  syntax:
    content: Task<List<UnitMetadata>> GetAllUnitMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Function GetAllUnitMetadataAsync(languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  id: GetUnitMetadataAsync(System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitMetadataAsync(String)
  nameWithType: ICultureMetadataManager.GetUnitMetadataAsync(String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync(System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns the metadata defined for the specific language only, or null \nif there is none.\n"
  syntax:
    content: Task<List<UnitMetadata>> GetUnitMetadataAsync(string languageCode)
    parameters:
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
    content.vb: Function GetUnitMetadataAsync(languageCode As String) As Task(Of List(Of UnitMetadata))
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String,System.String)
  id: GetPreferredLabelValueSetAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetPreferredLabelValueSetAsync(String, String)
  nameWithType: ICultureMetadataManager.GetPreferredLabelValueSetAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns the preferred <xref href=\"Sdl.Core.Globalization.UnitMetadata.LabelValueSet\" data-throw-if-not-resolved=\"false\"></xref> to use for the unit\nspecified in the language specified.\n"
  syntax:
    content: Task<LabelValueSet> GetPreferredLabelValueSetAsync(string unitKey, string languageCode)
    parameters:
    - id: unitKey
      type: System.String
    - id: languageCode
      type: System.String
    return:
      type: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
    content.vb: Function GetPreferredLabelValueSetAsync(unitKey As String, languageCode As String) As Task(Of LabelValueSet)
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync*
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  commentId: M:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String,System.String)
  id: GetUnitMetadataFromKeyAsync(System.String,System.String)
  parent: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager
  langs:
  - csharp
  - vb
  name: GetUnitMetadataFromKeyAsync(String, String)
  nameWithType: ICultureMetadataManager.GetUnitMetadataFromKeyAsync(String, String)
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync(System.String, System.String)
  type: Method
  source:
    path: Sdl.Core.Globalization.Async
    isExternal: true
  assemblies:
  - Sdl.Core.Globalization.Async
  namespace: Sdl.Core.Globalization.CultureMetadataManager
  summary: "\nReturns the most language-specific <xref href=\"Sdl.Core.Globalization.UnitMetadata\" data-throw-if-not-resolved=\"false\"></xref> available for\nthe unit and language specified, checking parent language and top-level/neutral metadata\n"
  syntax:
    content: Task<(UnitMetadata unitMetadata, string languageCodeFound)> GetUnitMetadataFromKeyAsync(string unitKey, string languageCode)
    parameters:
    - id: unitKey
      type: System.String
    - id: languageCode
      type: System.String
      description: The language to check
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
    content.vb: Function GetUnitMetadataFromKeyAsync(unitKey As String, languageCode As String) As Task(Of(unitMetadata As UnitMetadata, languageCodeFound As String)(Of UnitMetadata , String))
  overload: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync*
references:
- uid: Sdl.Core.Globalization.CultureMetadataManager
  commentId: N:Sdl.Core.Globalization.CultureMetadataManager
  isExternal: true
  name: Sdl.Core.Globalization.CultureMetadataManager
  nameWithType: Sdl.Core.Globalization.CultureMetadataManager
  fullName: Sdl.Core.Globalization.CultureMetadataManager
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
  isExternal: true
  name: GetDataVersionAsync
  nameWithType: ICultureMetadataManager.GetDataVersionAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetDataVersionAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync
  isExternal: true
  name: GetLanguagesAsync
  nameWithType: ICultureMetadataManager.GetLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguagesAsync
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageBase[]>
  nameWithType: Task<LanguageBase[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageBase[]>
  nameWithType.vb: Task(Of LanguageBase())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageBase())
  name.vb: Task(Of LanguageBase())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync
  isExternal: true
  name: GetLanguageAsync
  nameWithType: ICultureMetadataManager.GetLanguageAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageBase}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageBase>
  nameWithType: Task<LanguageBase>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageBase>
  nameWithType.vb: Task(Of LanguageBase)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageBase)
  name.vb: Task(Of LanguageBase)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageBase
    name: LanguageBase
    nameWithType: LanguageBase
    fullName: Sdl.Core.Globalization.LanguageBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
  isExternal: true
  name: GetAllNeutralLanguagesAsync
  nameWithType: ICultureMetadataManager.GetAllNeutralLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllNeutralLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync
  isExternal: true
  name: GetAllSpecificLanguagesAsync
  nameWithType: ICultureMetadataManager.GetAllSpecificLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllSpecificLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
  isExternal: true
  name: GetAllRegisteredProductsAsync
  nameWithType: ICultureMetadataManager.GetAllRegisteredProductsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllRegisteredProductsAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageRegistry.Product[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Product[]>
  nameWithType: Task<Product[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageRegistry.Product[]>
  nameWithType.vb: Task(Of Product())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageRegistry.Product())
  name.vb: Task(Of Product())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.Product
    name: Product
    nameWithType: Product
    fullName: Sdl.Core.Globalization.LanguageRegistry.Product
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync
  isExternal: true
  name: GetSupportedLanguagesAsync
  nameWithType: ICultureMetadataManager.GetSupportedLanguagesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetSupportedLanguagesAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync
  isExternal: true
  name: GetAlternativeLanguageCodesAsync
  nameWithType: ICultureMetadataManager.GetAlternativeLanguageCodesAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAlternativeLanguageCodesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<AlternativeLanguageCode>>
  nameWithType: Task<IList<AlternativeLanguageCode>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode>>
  nameWithType.vb: Task(Of IList(Of AlternativeLanguageCode))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode))
  name.vb: Task(Of IList(Of AlternativeLanguageCode))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    name: AlternativeLanguageCode
    nameWithType: AlternativeLanguageCode
    fullName: Sdl.Core.Globalization.LanguageRegistry.AlternativeLanguageCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync
  isExternal: true
  name: GetApplicableLanguageMetadataAsync
  nameWithType: ICultureMetadataManager.GetApplicableLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetApplicableLanguageMetadataAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LanguageMetadata[]>
  nameWithType: Task<LanguageMetadata[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata[]>
  nameWithType.vb: Task(Of LanguageMetadata())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata())
  name.vb: Task(Of LanguageMetadata())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    name: LanguageMetadata
    nameWithType: LanguageMetadata
    fullName: Sdl.Core.Globalization.LanguageMetadata.LanguageMetadata
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync
  isExternal: true
  name: GetLanguageMetadataAsync
  nameWithType: ICultureMetadataManager.GetLanguageMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetLanguageMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync
  isExternal: true
  name: GetStableCultureInfoAsync
  nameWithType: ICultureMetadataManager.GetStableCultureInfoAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfoAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StableCultureInfo>
  nameWithType: Task<StableCultureInfo>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.StableCultureInfo>
  nameWithType.vb: Task(Of StableCultureInfo)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.StableCultureInfo)
  name.vb: Task(Of StableCultureInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync
  isExternal: true
  name: GetStableCultureInfosAsync
  nameWithType: ICultureMetadataManager.GetStableCultureInfosAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetStableCultureInfosAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.StableCultureInfo[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StableCultureInfo[]>
  nameWithType: Task<StableCultureInfo[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.StableCultureInfo[]>
  nameWithType.vb: Task(Of StableCultureInfo())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.StableCultureInfo())
  name.vb: Task(Of StableCultureInfo())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.StableCultureInfo
    name: StableCultureInfo
    nameWithType: StableCultureInfo
    fullName: Sdl.Core.Globalization.StableCultureInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync
  isExternal: true
  name: GetNumberMetadataAsync
  nameWithType: ICultureMetadataManager.GetNumberMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetNumberMetadataAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.NumberMetadata.NumberMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NumberMetadata>
  nameWithType: Task<NumberMetadata>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.NumberMetadata.NumberMetadata>
  nameWithType.vb: Task(Of NumberMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.NumberMetadata.NumberMetadata)
  name.vb: Task(Of NumberMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    name: NumberMetadata
    nameWithType: NumberMetadata
    fullName: Sdl.Core.Globalization.NumberMetadata.NumberMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
  isExternal: true
  name: GetUnitDefinitionsAsync
  nameWithType: ICultureMetadataManager.GetUnitDefinitionsAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitDefinitionsAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitDefinition[]>
  nameWithType: Task<UnitDefinition[]>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitDefinition.UnitDefinition[]>
  nameWithType.vb: Task(Of UnitDefinition())
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitDefinition.UnitDefinition())
  name.vb: Task(Of UnitDefinition())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    name: UnitDefinition
    nameWithType: UnitDefinition
    fullName: Sdl.Core.Globalization.UnitDefinition.UnitDefinition
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync
  isExternal: true
  name: GetUnitMetadataFromLabelAsync
  nameWithType: ICultureMetadataManager.GetUnitMetadataFromLabelAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromLabelAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UnitMetadata>
  nameWithType: Task<UnitMetadata>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.UnitMetadata>
  nameWithType.vb: Task(Of UnitMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata)
  name.vb: Task(Of UnitMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
  isExternal: true
  name: GetAllUnitMetadataFromLabelAsync
  nameWithType: ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataFromLabelAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Sdl.Core.Globalization.UnitMetadata.UnitMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<UnitMetadata>>
  nameWithType: Task<List<UnitMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Sdl.Core.Globalization.UnitMetadata.UnitMetadata>>
  nameWithType.vb: Task(Of List(Of UnitMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata))
  name.vb: Task(Of List(Of UnitMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync
  isExternal: true
  name: GetAllUnitMetadataAsync
  nameWithType: ICultureMetadataManager.GetAllUnitMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetAllUnitMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync
  isExternal: true
  name: GetUnitMetadataAsync
  nameWithType: ICultureMetadataManager.GetUnitMetadataAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataAsync
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync
  isExternal: true
  name: GetPreferredLabelValueSetAsync
  nameWithType: ICultureMetadataManager.GetPreferredLabelValueSetAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetPreferredLabelValueSetAsync
- uid: System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
  commentId: T:System.Threading.Tasks.Task{Sdl.Core.Globalization.UnitMetadata.LabelValueSet}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LabelValueSet>
  nameWithType: Task<LabelValueSet>
  fullName: System.Threading.Tasks.Task<Sdl.Core.Globalization.UnitMetadata.LabelValueSet>
  nameWithType.vb: Task(Of LabelValueSet)
  fullName.vb: System.Threading.Tasks.Task(Of Sdl.Core.Globalization.UnitMetadata.LabelValueSet)
  name.vb: Task(Of LabelValueSet)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    name: LabelValueSet
    nameWithType: LabelValueSet
    fullName: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    name: LabelValueSet
    nameWithType: LabelValueSet
    fullName: Sdl.Core.Globalization.UnitMetadata.LabelValueSet
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync*
  commentId: Overload:Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync
  isExternal: true
  name: GetUnitMetadataFromKeyAsync
  nameWithType: ICultureMetadataManager.GetUnitMetadataFromKeyAsync
  fullName: Sdl.Core.Globalization.CultureMetadataManager.ICultureMetadataManager.GetUnitMetadataFromKeyAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{Sdl.Core.Globalization.UnitMetadata.UnitMetadata,System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2)<UnitMetadata, String>>
  nameWithType: Task<(T1, T2)<UnitMetadata, String>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<Sdl.Core.Globalization.UnitMetadata.UnitMetadata, System.String>>
  nameWithType.vb: Task(Of (T1, T2)(Of UnitMetadata, String))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of Sdl.Core.Globalization.UnitMetadata.UnitMetadata, System.String))
  name.vb: Task(Of (T1, T2)(Of UnitMetadata, String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: (T1, T2)
    nameWithType: (T1, T2)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    name: UnitMetadata
    nameWithType: UnitMetadata
    fullName: Sdl.Core.Globalization.UnitMetadata.UnitMetadata
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
