### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  id: ITerminologyProvider
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32)
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32,System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage})
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search(System.String,Sdl.Terminology.TerminologyProvider.Core.ILanguage,Sdl.Terminology.TerminologyProvider.Core.ILanguage,System.Int32,Sdl.Terminology.TerminologyProvider.Core.SearchMode,System.Boolean)
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault(System.Boolean)
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri
  langs:
  - csharp
  - vb
  name: ITerminologyProvider
  nameWithType: ITerminologyProvider
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  type: Interface
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nProvides access to a terminology provider, which in turn provides access to termbases.\n"
  remarks: "\nImplement <xref href=\"Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider\" data-throw-if-not-resolved=\"false\"></xref> interface when creating a terminology provider.\n"
  syntax:
    content: 'public interface ITerminologyProvider : IDisposable'
    content.vb: >-
      Public Interface ITerminologyProvider
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault(System.Boolean)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault(System.Boolean)
  id: SetDefault(System.Boolean)
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: SetDefault(Boolean)
  nameWithType: ITerminologyProvider.SetDefault(Boolean)
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault(System.Boolean)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nSet the terminology provider as default\n"
  syntax:
    content: void SetDefault(bool value)
    parameters:
    - id: value
      type: System.Boolean
      description: Determines if it is set as default or not
    content.vb: Sub SetDefault(value As Boolean)
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault*
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages
  id: GetLanguages
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: GetLanguages()
  nameWithType: ITerminologyProvider.GetLanguages()
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages()
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nReturns a list of the language languages available for this terminology provider\n"
  syntax:
    content: IList<ILanguage> GetLanguages()
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.ILanguage}
      description: The list of language definitions for a terms
    content.vb: Function GetLanguages As IList(Of ILanguage)
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages*
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32)
  id: GetEntry(System.Int32)
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: GetEntry(Int32)
  nameWithType: ITerminologyProvider.GetEntry(Int32)
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGet an entry definition from the terminology provider\n"
  syntax:
    content: IEntry GetEntry(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The entry id to get.
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.IEntry
      description: The entry object. Returns null if an entry with the specified id does not exists in the terminology provider.
    content.vb: Function GetEntry(id As Integer) As IEntry
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry*
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32,System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage})
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32,System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage})
  id: GetEntry(System.Int32,System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage})
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: GetEntry(Int32, IEnumerable<ILanguage>)
  nameWithType: ITerminologyProvider.GetEntry(Int32, IEnumerable<ILanguage>)
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32, System.Collections.Generic.IEnumerable<Sdl.Terminology.TerminologyProvider.Core.ILanguage>)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGet an entry from the terminology provider\n"
  syntax:
    content: IEntry GetEntry(int id, IEnumerable<ILanguage> languages)
    parameters:
    - id: id
      type: System.Int32
      description: The entry id to get.
    - id: languages
      type: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage}
      description: The languages to fill for the requested entry.
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.IEntry
      description: The entry object. Returns null if an entry with the specified id does not exists in the terminology provider.
    content.vb: Function GetEntry(id As Integer, languages As IEnumerable(Of ILanguage)) As IEntry
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry*
  nameWithType.vb: ITerminologyProvider.GetEntry(Int32, IEnumerable(Of ILanguage))
  fullName.vb: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry(System.Int32, System.Collections.Generic.IEnumerable(Of Sdl.Terminology.TerminologyProvider.Core.ILanguage))
  name.vb: GetEntry(Int32, IEnumerable(Of ILanguage))
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search(System.String,Sdl.Terminology.TerminologyProvider.Core.ILanguage,Sdl.Terminology.TerminologyProvider.Core.ILanguage,System.Int32,Sdl.Terminology.TerminologyProvider.Core.SearchMode,System.Boolean)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search(System.String,Sdl.Terminology.TerminologyProvider.Core.ILanguage,Sdl.Terminology.TerminologyProvider.Core.ILanguage,System.Int32,Sdl.Terminology.TerminologyProvider.Core.SearchMode,System.Boolean)
  id: Search(System.String,Sdl.Terminology.TerminologyProvider.Core.ILanguage,Sdl.Terminology.TerminologyProvider.Core.ILanguage,System.Int32,Sdl.Terminology.TerminologyProvider.Core.SearchMode,System.Boolean)
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Search(String, ILanguage, ILanguage, Int32, SearchMode, Boolean)
  nameWithType: ITerminologyProvider.Search(String, ILanguage, ILanguage, Int32, SearchMode, Boolean)
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search(System.String, Sdl.Terminology.TerminologyProvider.Core.ILanguage, Sdl.Terminology.TerminologyProvider.Core.ILanguage, System.Int32, Sdl.Terminology.TerminologyProvider.Core.SearchMode, System.Boolean)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nPerforms a search over the current terminology provider\n"
  syntax:
    content: IList<ISearchResult> Search(string text, ILanguage source, ILanguage destination, int maxResultsCount, SearchMode mode, bool targetRequired)
    parameters:
    - id: text
      type: System.String
      description: The text to search for
    - id: source
      type: Sdl.Terminology.TerminologyProvider.Core.ILanguage
      description: Source language
    - id: destination
      type: Sdl.Terminology.TerminologyProvider.Core.ILanguage
      description: Destination language
    - id: maxResultsCount
      type: System.Int32
      description: Maximum number of result to return
    - id: mode
      type: Sdl.Terminology.TerminologyProvider.Core.SearchMode
      description: 'search mode: normal, fuzzy, full text'
    - id: targetRequired
      type: System.Boolean
      description: True to return only term with target language term definition
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.ISearchResult}
      description: The list of found terms
    content.vb: Function Search(text As String, source As ILanguage, destination As ILanguage, maxResultsCount As Integer, mode As SearchMode, targetRequired As Boolean) As IList(Of ISearchResult)
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search*
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name
  id: Name
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ITerminologyProvider.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGets the display name of the terminology provider\n"
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description
  id: Description
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ITerminologyProvider.Description
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGets the terminology provider description\n"
  syntax:
    content: string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Description As String
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id
  id: Id
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ITerminologyProvider.Id
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGets the unique ID of the terminology provider\n"
  syntax:
    content: string Id { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Id As String
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri
  id: Uri
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: ITerminologyProvider.Uri
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGets the URI of this terminology provider.\n"
  syntax:
    content: Uri Uri { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: ReadOnly Property Uri As Uri
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type
  id: Type
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ITerminologyProvider.Type
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGets the type of the terminology provider.\n"
  syntax:
    content: TerminologyProviderType Type { get; }
    parameters: []
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderType
    content.vb: ReadOnly Property Type As TerminologyProviderType
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly
  id: IsReadOnly
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ITerminologyProvider.IsReadOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nRead only flag for the terminology provider.\n"
  syntax:
    content: bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsReadOnly As Boolean
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled
  id: SearchEnabled
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: SearchEnabled
  nameWithType: ITerminologyProvider.SearchEnabled
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGets the terminology provider search enabled flag.\n"
  syntax:
    content: bool SearchEnabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property SearchEnabled As Boolean
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition
  id: Definition
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider
  langs:
  - csharp
  - vb
  name: Definition
  nameWithType: ITerminologyProvider.Definition
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nGet a list of terminology provider definition objects\n"
  syntax:
    content: IDefinition Definition { get; }
    parameters: []
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.IDefinition
    content.vb: ReadOnly Property Definition As IDefinition
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault
  isExternal: true
  name: SetDefault
  nameWithType: ITerminologyProvider.SetDefault
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SetDefault
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages
  isExternal: true
  name: GetLanguages
  nameWithType: ITerminologyProvider.GetLanguages
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetLanguages
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.ILanguage}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.ILanguage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ILanguage>
  nameWithType: IList<ILanguage>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.ILanguage>
  nameWithType.vb: IList(Of ILanguage)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.ILanguage)
  name.vb: IList(Of ILanguage)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    name: ILanguage
    nameWithType: ILanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    name: ILanguage
    nameWithType: ILanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry
  isExternal: true
  name: GetEntry
  nameWithType: ITerminologyProvider.GetEntry
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.GetEntry
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.Terminology.TerminologyProvider.Core.IEntry
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IEntry
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: IEntry
  nameWithType: IEntry
  fullName: Sdl.Terminology.TerminologyProvider.Core.IEntry
- uid: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.ILanguage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ILanguage>
  nameWithType: IEnumerable<ILanguage>
  fullName: System.Collections.Generic.IEnumerable<Sdl.Terminology.TerminologyProvider.Core.ILanguage>
  nameWithType.vb: IEnumerable(Of ILanguage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.Terminology.TerminologyProvider.Core.ILanguage)
  name.vb: IEnumerable(Of ILanguage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    name: ILanguage
    nameWithType: ILanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    name: ILanguage
    nameWithType: ILanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search
  isExternal: true
  name: Search
  nameWithType: ITerminologyProvider.Search
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Search
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.ILanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: ILanguage
  nameWithType: ILanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
- uid: Sdl.Terminology.TerminologyProvider.Core.SearchMode
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.SearchMode
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: SearchMode
  nameWithType: SearchMode
  fullName: Sdl.Terminology.TerminologyProvider.Core.SearchMode
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.ISearchResult}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.ISearchResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ISearchResult>
  nameWithType: IList<ISearchResult>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.ISearchResult>
  nameWithType.vb: IList(Of ISearchResult)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.ISearchResult)
  name.vb: IList(Of ISearchResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.ISearchResult
    name: ISearchResult
    nameWithType: ISearchResult
    fullName: Sdl.Terminology.TerminologyProvider.Core.ISearchResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.ISearchResult
    name: ISearchResult
    nameWithType: ISearchResult
    fullName: Sdl.Terminology.TerminologyProvider.Core.ISearchResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name
  isExternal: true
  name: Name
  nameWithType: ITerminologyProvider.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Name
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description
  isExternal: true
  name: Description
  nameWithType: ITerminologyProvider.Description
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Description
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id
  isExternal: true
  name: Id
  nameWithType: ITerminologyProvider.Id
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Id
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri
  isExternal: true
  name: Uri
  nameWithType: ITerminologyProvider.Uri
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Uri
- uid: System.Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type
  isExternal: true
  name: Type
  nameWithType: ITerminologyProvider.Type
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Type
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderType
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderType
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: TerminologyProviderType
  nameWithType: TerminologyProviderType
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderType
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ITerminologyProvider.IsReadOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.IsReadOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled
  isExternal: true
  name: SearchEnabled
  nameWithType: ITerminologyProvider.SearchEnabled
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.SearchEnabled
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition
  isExternal: true
  name: Definition
  nameWithType: ITerminologyProvider.Definition
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyProvider.Definition
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinition
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IDefinition
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: IDefinition
  nameWithType: IDefinition
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinition
