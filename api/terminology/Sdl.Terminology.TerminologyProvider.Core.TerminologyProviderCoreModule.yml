### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  id: TerminologyProviderCoreModule
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.#ctor
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize(Sdl.Platform.Interfaces.DI.IContainer)
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality(Sdl.Platform.Interfaces.DI.IContainer)
  - Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices(Sdl.Platform.Interfaces.DI.IContainer)
  langs:
  - csharp
  - vb
  name: TerminologyProviderCoreModule
  nameWithType: TerminologyProviderCoreModule
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  type: Class
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  syntax:
    content: public class TerminologyProviderCoreModule
    content.vb: Public Class TerminologyProviderCoreModule
  inheritance:
  - System.Object
  implements:
  - Sdl.Platform.Interfaces.DI.IModule
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize(Sdl.Platform.Interfaces.DI.IContainer)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize(Sdl.Platform.Interfaces.DI.IContainer)
  id: Initialize(Sdl.Platform.Interfaces.DI.IContainer)
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  langs:
  - csharp
  - vb
  name: Initialize(IContainer)
  nameWithType: TerminologyProviderCoreModule.Initialize(IContainer)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize(Sdl.Platform.Interfaces.DI.IContainer)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  syntax:
    content: public void Initialize(IContainer container)
    parameters:
    - id: container
      type: Sdl.Platform.Interfaces.DI.IContainer
    content.vb: Public Sub Initialize(container As IContainer)
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality(Sdl.Platform.Interfaces.DI.IContainer)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality(Sdl.Platform.Interfaces.DI.IContainer)
  id: MinimumAPIFunctionality(Sdl.Platform.Interfaces.DI.IContainer)
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  langs:
  - csharp
  - vb
  name: MinimumAPIFunctionality(IContainer)
  nameWithType: TerminologyProviderCoreModule.MinimumAPIFunctionality(IContainer)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality(Sdl.Platform.Interfaces.DI.IContainer)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  syntax:
    content: public void MinimumAPIFunctionality(IContainer container)
    parameters:
    - id: container
      type: Sdl.Platform.Interfaces.DI.IContainer
    content.vb: Public Sub MinimumAPIFunctionality(container As IContainer)
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices(Sdl.Platform.Interfaces.DI.IContainer)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices(Sdl.Platform.Interfaces.DI.IContainer)
  id: StartServices(Sdl.Platform.Interfaces.DI.IContainer)
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  langs:
  - csharp
  - vb
  name: StartServices(IContainer)
  nameWithType: TerminologyProviderCoreModule.StartServices(IContainer)
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices(Sdl.Platform.Interfaces.DI.IContainer)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  syntax:
    content: public void StartServices(IContainer container)
    parameters:
    - id: container
      type: Sdl.Platform.Interfaces.DI.IContainer
    content.vb: Public Sub StartServices(container As IContainer)
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.#ctor
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.#ctor
  id: '#ctor'
  parent: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule
  langs:
  - csharp
  - vb
  name: TerminologyProviderCoreModule()
  nameWithType: TerminologyProviderCoreModule.TerminologyProviderCoreModule()
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.TerminologyProviderCoreModule()
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  syntax:
    content: public TerminologyProviderCoreModule()
    content.vb: Public Sub New
  overload: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Platform.Interfaces.DI.IModule
  commentId: '!:Sdl.Platform.Interfaces.DI.IModule'
  isExternal: true
  name: IModule
  nameWithType: IModule
  fullName: Sdl.Platform.Interfaces.DI.IModule
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize
  isExternal: true
  name: Initialize
  nameWithType: TerminologyProviderCoreModule.Initialize
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.Initialize
- uid: Sdl.Platform.Interfaces.DI.IContainer
  isExternal: true
  name: IContainer
  nameWithType: IContainer
  fullName: Sdl.Platform.Interfaces.DI.IContainer
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality
  isExternal: true
  name: MinimumAPIFunctionality
  nameWithType: TerminologyProviderCoreModule.MinimumAPIFunctionality
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.MinimumAPIFunctionality
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices
  isExternal: true
  name: StartServices
  nameWithType: TerminologyProviderCoreModule.StartServices
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.StartServices
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.#ctor*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.#ctor
  isExternal: true
  name: TerminologyProviderCoreModule
  nameWithType: TerminologyProviderCoreModule.TerminologyProviderCoreModule
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyProviderCoreModule.TerminologyProviderCoreModule
