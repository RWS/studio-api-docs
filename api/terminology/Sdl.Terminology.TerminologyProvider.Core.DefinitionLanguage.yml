### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  id: DefinitionLanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.#ctor
  - Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional
  - Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale
  - Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name
  - Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly
  langs:
  - csharp
  - vb
  name: DefinitionLanguage
  nameWithType: DefinitionLanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  type: Class
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe language default implementation for the termbase provider definition\n"
  syntax:
    content: 'public class DefinitionLanguage : IDefinitionLanguage, ILanguage'
    content.vb: >-
      Public Class DefinitionLanguage
          Implements IDefinitionLanguage, ILanguage
  inheritance:
  - System.Object
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.#ctor
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.#ctor
  id: '#ctor'
  parent: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  langs:
  - csharp
  - vb
  name: DefinitionLanguage()
  nameWithType: DefinitionLanguage.DefinitionLanguage()
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.DefinitionLanguage()
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  syntax:
    content: public DefinitionLanguage()
    content.vb: Public Sub New
  overload: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly
  id: TargetOnly
  parent: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  langs:
  - csharp
  - vb
  name: TargetOnly
  nameWithType: DefinitionLanguage.TargetOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines if it is available for the target language only\n"
  syntax:
    content: public bool? TargetOnly { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property TargetOnly As Boolean?
  overload: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly*
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional
  id: IsBidirectional
  parent: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  langs:
  - csharp
  - vb
  name: IsBidirectional
  nameWithType: DefinitionLanguage.IsBidirectional
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDetermines if the language is bidirectional\n"
  syntax:
    content: public bool? IsBidirectional { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property IsBidirectional As Boolean?
  overload: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional*
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name
  id: Name
  parent: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DefinitionLanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe name of the language\n"
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name*
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale
  id: Locale
  parent: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
  langs:
  - csharp
  - vb
  name: Locale
  nameWithType: DefinitionLanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThe language culture information\n"
  syntax:
    content: public CultureInfo Locale { get; set; }
    parameters: []
    return:
      type: System.Globalization.CultureInfo
    content.vb: Public Property Locale As CultureInfo
  overload: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale*
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: IDefinitionLanguage
  nameWithType: IDefinitionLanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.ILanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: ILanguage
  nameWithType: ILanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.#ctor*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.#ctor
  isExternal: true
  name: DefinitionLanguage
  nameWithType: DefinitionLanguage.DefinitionLanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.DefinitionLanguage
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly
  isExternal: true
  name: TargetOnly
  nameWithType: DefinitionLanguage.TargetOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.TargetOnly
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
  parent: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  isExternal: true
  name: TargetOnly
  nameWithType: IDefinitionLanguage.TargetOnly
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.TargetOnly
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional
  isExternal: true
  name: IsBidirectional
  nameWithType: DefinitionLanguage.IsBidirectional
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.IsBidirectional
- uid: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
  parent: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage
  isExternal: true
  name: IsBidirectional
  nameWithType: IDefinitionLanguage.IsBidirectional
  fullName: Sdl.Terminology.TerminologyProvider.Core.IDefinitionLanguage.IsBidirectional
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name
  isExternal: true
  name: Name
  nameWithType: DefinitionLanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Name
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  parent: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  isExternal: true
  name: Name
  nameWithType: ILanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale
  isExternal: true
  name: Locale
  nameWithType: DefinitionLanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage.Locale
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  parent: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  isExternal: true
  name: Locale
  nameWithType: ILanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
