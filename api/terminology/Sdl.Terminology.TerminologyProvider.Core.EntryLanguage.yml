### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  id: EntryLanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.#ctor
  - Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields
  - Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale
  - Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name
  - Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry
  - Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms
  langs:
  - csharp
  - vb
  name: EntryLanguage
  nameWithType: EntryLanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  type: Class
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nTerminology provider entry language\n"
  syntax:
    content: 'public class EntryLanguage : ILanguage'
    content.vb: >-
      Public Class EntryLanguage
          Implements ILanguage
  inheritance:
  - System.Object
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.#ctor
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.#ctor
  id: '#ctor'
  parent: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  langs:
  - csharp
  - vb
  name: EntryLanguage()
  nameWithType: EntryLanguage.EntryLanguage()
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.EntryLanguage()
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDefault constructor\n"
  syntax:
    content: public EntryLanguage()
    content.vb: Public Sub New
  overload: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name
  id: Name
  parent: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EntryLanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nentry containing this language\n"
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name*
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale
  id: Locale
  parent: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  langs:
  - csharp
  - vb
  name: Locale
  nameWithType: EntryLanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nentry culture info\n"
  syntax:
    content: public CultureCode Locale { get; set; }
    parameters: []
    return:
      type: Sdl.Core.Globalization.CultureCode
    content.vb: Public Property Locale As CultureCode
  overload: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale*
  implements:
  - Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry
  id: ParentEntry
  parent: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  langs:
  - csharp
  - vb
  name: ParentEntry
  nameWithType: EntryLanguage.ParentEntry
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nentry parent\n"
  syntax:
    content: public Entry ParentEntry { get; set; }
    parameters: []
    return:
      type: Sdl.Terminology.TerminologyProvider.Core.Entry
    content.vb: Public Property ParentEntry As Entry
  overload: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields
  id: Fields
  parent: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: EntryLanguage.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nLanguage level fields \n"
  syntax:
    content: public IList<EntryField> Fields { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.EntryField}
    content.vb: Public Property Fields As IList(Of EntryField)
  overload: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms
  id: Terms
  parent: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage
  langs:
  - csharp
  - vb
  name: Terms
  nameWithType: EntryLanguage.Terms
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nTerms for this language\n"
  syntax:
    content: public IList<EntryTerm> Terms { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.EntryTerm}
    content.vb: Public Property Terms As IList(Of EntryTerm)
  overload: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.ILanguage
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: ILanguage
  nameWithType: ILanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.#ctor*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.#ctor
  isExternal: true
  name: EntryLanguage
  nameWithType: EntryLanguage.EntryLanguage
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.EntryLanguage
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name
  isExternal: true
  name: Name
  nameWithType: EntryLanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Name
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
  parent: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  isExternal: true
  name: Name
  nameWithType: ILanguage.Name
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale
  isExternal: true
  name: Locale
  nameWithType: EntryLanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Locale
- uid: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
  parent: Sdl.Terminology.TerminologyProvider.Core.ILanguage
  isExternal: true
  name: Locale
  nameWithType: ILanguage.Locale
  fullName: Sdl.Terminology.TerminologyProvider.Core.ILanguage.Locale
- uid: Sdl.Core.Globalization.CultureCode
  isExternal: true
  name: CultureCode
  nameWithType: CultureCode
  fullName: Sdl.Core.Globalization.CultureCode
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry
  isExternal: true
  name: ParentEntry
  nameWithType: EntryLanguage.ParentEntry
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.ParentEntry
- uid: Sdl.Terminology.TerminologyProvider.Core.Entry
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.Entry
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Entry
  nameWithType: Entry
  fullName: Sdl.Terminology.TerminologyProvider.Core.Entry
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields
  isExternal: true
  name: Fields
  nameWithType: EntryLanguage.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Fields
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.EntryField}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.EntryField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<EntryField>
  nameWithType: IList<EntryField>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.EntryField>
  nameWithType.vb: IList(Of EntryField)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.EntryField)
  name.vb: IList(Of EntryField)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.EntryField
    name: EntryField
    nameWithType: EntryField
    fullName: Sdl.Terminology.TerminologyProvider.Core.EntryField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.EntryField
    name: EntryField
    nameWithType: EntryField
    fullName: Sdl.Terminology.TerminologyProvider.Core.EntryField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms
  isExternal: true
  name: Terms
  nameWithType: EntryLanguage.Terms
  fullName: Sdl.Terminology.TerminologyProvider.Core.EntryLanguage.Terms
- uid: System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.EntryTerm}
  commentId: T:System.Collections.Generic.IList{Sdl.Terminology.TerminologyProvider.Core.EntryTerm}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<EntryTerm>
  nameWithType: IList<EntryTerm>
  fullName: System.Collections.Generic.IList<Sdl.Terminology.TerminologyProvider.Core.EntryTerm>
  nameWithType.vb: IList(Of EntryTerm)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.Terminology.TerminologyProvider.Core.EntryTerm)
  name.vb: IList(Of EntryTerm)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.EntryTerm
    name: EntryTerm
    nameWithType: EntryTerm
    fullName: Sdl.Terminology.TerminologyProvider.Core.EntryTerm
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.EntryTerm
    name: EntryTerm
    nameWithType: EntryTerm
    fullName: Sdl.Terminology.TerminologyProvider.Core.EntryTerm
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
