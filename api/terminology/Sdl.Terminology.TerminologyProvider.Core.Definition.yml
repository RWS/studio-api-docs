### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.Definition
  id: Definition
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.Definition.#ctor(System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField},System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage})
  - Sdl.Terminology.TerminologyProvider.Core.Definition.Fields
  - Sdl.Terminology.TerminologyProvider.Core.Definition.Languages
  langs:
  - csharp
  - vb
  name: Definition
  nameWithType: Definition
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition
  type: Class
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nTerminology provider definition\n"
  syntax:
    content: public class Definition
    content.vb: Public Class Definition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition.#ctor(System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField},System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage})
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.Definition.#ctor(System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField},System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage})
  id: '#ctor(System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField},System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage})'
  parent: Sdl.Terminology.TerminologyProvider.Core.Definition
  langs:
  - csharp
  - vb
  name: Definition(IEnumerable<DescriptiveField>, IEnumerable<DefinitionLanguage>)
  nameWithType: Definition.Definition(IEnumerable<DescriptiveField>, IEnumerable<DefinitionLanguage>)
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition.Definition(System.Collections.Generic.IEnumerable<Sdl.Terminology.TerminologyProvider.Core.DescriptiveField>, System.Collections.Generic.IEnumerable<Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage>)
  type: Constructor
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nDefinition constructor\n"
  syntax:
    content: public Definition(IEnumerable<DescriptiveField> fields, IEnumerable<DefinitionLanguage> languages)
    parameters:
    - id: fields
      type: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField}
      description: The list of available fields.
    - id: languages
      type: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage}
      description: The list of available languages.
    content.vb: Public Sub New(fields As IEnumerable(Of DescriptiveField), languages As IEnumerable(Of DefinitionLanguage))
  overload: Sdl.Terminology.TerminologyProvider.Core.Definition.#ctor*
  nameWithType.vb: Definition.Definition(IEnumerable(Of DescriptiveField), IEnumerable(Of DefinitionLanguage))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.Terminology.TerminologyProvider.Core.Definition.Definition(System.Collections.Generic.IEnumerable(Of Sdl.Terminology.TerminologyProvider.Core.DescriptiveField), System.Collections.Generic.IEnumerable(Of Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage))
  name.vb: Definition(IEnumerable(Of DescriptiveField), IEnumerable(Of DefinitionLanguage))
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition.Fields
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.Definition.Fields
  id: Fields
  parent: Sdl.Terminology.TerminologyProvider.Core.Definition
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: Definition.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition.Fields
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nList of available fields\n"
  syntax:
    content: public IEnumerable<DescriptiveField> Fields { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField}
    content.vb: Public Property Fields As IEnumerable(Of DescriptiveField)
  overload: Sdl.Terminology.TerminologyProvider.Core.Definition.Fields*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition.Languages
  commentId: P:Sdl.Terminology.TerminologyProvider.Core.Definition.Languages
  id: Languages
  parent: Sdl.Terminology.TerminologyProvider.Core.Definition
  langs:
  - csharp
  - vb
  name: Languages
  nameWithType: Definition.Languages
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition.Languages
  type: Property
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nList of available languages\n"
  syntax:
    content: public IEnumerable<DefinitionLanguage> Languages { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage}
    content.vb: Public Property Languages As IEnumerable(Of DefinitionLanguage)
  overload: Sdl.Terminology.TerminologyProvider.Core.Definition.Languages*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition.#ctor*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.Definition.#ctor
  isExternal: true
  name: Definition
  nameWithType: Definition.Definition
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition.Definition
- uid: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DescriptiveField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DescriptiveField>
  nameWithType: IEnumerable<DescriptiveField>
  fullName: System.Collections.Generic.IEnumerable<Sdl.Terminology.TerminologyProvider.Core.DescriptiveField>
  nameWithType.vb: IEnumerable(Of DescriptiveField)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.Terminology.TerminologyProvider.Core.DescriptiveField)
  name.vb: IEnumerable(Of DescriptiveField)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.DescriptiveField
    name: DescriptiveField
    nameWithType: DescriptiveField
    fullName: Sdl.Terminology.TerminologyProvider.Core.DescriptiveField
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.DescriptiveField
    name: DescriptiveField
    nameWithType: DescriptiveField
    fullName: Sdl.Terminology.TerminologyProvider.Core.DescriptiveField
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage}
  commentId: T:System.Collections.Generic.IEnumerable{Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DefinitionLanguage>
  nameWithType: IEnumerable<DefinitionLanguage>
  fullName: System.Collections.Generic.IEnumerable<Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage>
  nameWithType.vb: IEnumerable(Of DefinitionLanguage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage)
  name.vb: IEnumerable(Of DefinitionLanguage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
    name: DefinitionLanguage
    nameWithType: DefinitionLanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
    name: DefinitionLanguage
    nameWithType: DefinitionLanguage
    fullName: Sdl.Terminology.TerminologyProvider.Core.DefinitionLanguage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition.Fields*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.Definition.Fields
  isExternal: true
  name: Fields
  nameWithType: Definition.Fields
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition.Fields
- uid: Sdl.Terminology.TerminologyProvider.Core.Definition.Languages*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.Definition.Languages
  isExternal: true
  name: Languages
  nameWithType: Definition.Languages
  fullName: Sdl.Terminology.TerminologyProvider.Core.Definition.Languages
