### YamlMime:ManagedReference
items:
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport
  id: ITerminologyImport
  parent: Sdl.Terminology.TerminologyProvider.Core
  children:
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  - Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.String,System.String)
  langs:
  - csharp
  - vb
  name: ITerminologyImport
  nameWithType: ITerminologyImport
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport
  type: Interface
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nThis interface should be implemented by terminology providers in order to provide import functionality\n"
  syntax:
    content: public interface ITerminologyImport
    content.vb: Public Interface ITerminologyImport
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.String,System.String)
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.String,System.String)
  id: Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.String,System.String)
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport
  langs:
  - csharp
  - vb
  name: Import(TerminologyImportType, String, String)
  nameWithType: ITerminologyImport.Import(TerminologyImportType, String, String)
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType, System.String, System.String)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nPerforms a termbase import\n"
  syntax:
    content: void Import(TerminologyImportType importType, string importFile, string termbaseDefinition = null)
    parameters:
    - id: importType
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType
      description: The import type
    - id: importFile
      type: System.String
      description: The path of the import file
    - id: termbaseDefinition
      type: System.String
      description: The path of the termbase definition file
    content.vb: Sub Import(importType As TerminologyImportType, importFile As String, termbaseDefinition As String = Nothing)
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import*
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  id: Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})
  parent: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport
  langs:
  - csharp
  - vb
  name: Import(TerminologyImportType, List<String>, Dictionary<String, String>)
  nameWithType: ITerminologyImport.Import(TerminologyImportType, List<String>, Dictionary<String, String>)
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType, System.Collections.Generic.List<System.String>, System.Collections.Generic.Dictionary<System.String, System.String>)
  type: Method
  source:
    path: Sdl.Terminology.TerminologyProvider.Core
    isExternal: true
  assemblies:
  - Sdl.Terminology.TerminologyProvider.Core
  namespace: Sdl.Terminology.TerminologyProvider.Core
  summary: "\nPerforms a termbase import\n"
  remarks: "\nUse the import properties to pass additional parameters to the import process.\nE.g. add the &quot;xdtFile&quot; property for a MultiTerm termbase definition file\n"
  syntax:
    content: void Import(TerminologyImportType importType, List<string> importFiles, Dictionary<string, string> importProperties = null)
    parameters:
    - id: importType
      type: Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType
      description: The import type
    - id: importFiles
      type: System.Collections.Generic.List{System.String}
      description: The path of the import files
    - id: importProperties
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: The import properties
    content.vb: Sub Import(importType As TerminologyImportType, importFiles As List(Of String), importProperties As Dictionary(Of String, String) = Nothing)
  overload: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import*
  nameWithType.vb: ITerminologyImport.Import(TerminologyImportType, List(Of String), Dictionary(Of String, String))
  fullName.vb: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import(Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType, System.Collections.Generic.List(Of System.String), System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Import(TerminologyImportType, List(Of String), Dictionary(Of String, String))
references:
- uid: Sdl.Terminology.TerminologyProvider.Core
  commentId: N:Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: Sdl.Terminology.TerminologyProvider.Core
  nameWithType: Sdl.Terminology.TerminologyProvider.Core
  fullName: Sdl.Terminology.TerminologyProvider.Core
- uid: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import*
  commentId: Overload:Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import
  isExternal: true
  name: Import
  nameWithType: ITerminologyImport.Import
  fullName: Sdl.Terminology.TerminologyProvider.Core.ITerminologyImport.Import
- uid: Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType
  commentId: T:Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType
  parent: Sdl.Terminology.TerminologyProvider.Core
  isExternal: true
  name: TerminologyImportType
  nameWithType: TerminologyImportType
  fullName: Sdl.Terminology.TerminologyProvider.Core.TerminologyImportType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
