### YamlMime:ManagedReference
items:
- uid: Sdl.Core.TM.ImportExport.Tools
  commentId: T:Sdl.Core.TM.ImportExport.Tools
  id: Tools
  parent: Sdl.Core.TM.ImportExport
  children:
  - Sdl.Core.TM.ImportExport.Tools.#ctor
  - Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual(Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken)
  - Sdl.Core.TM.ImportExport.Tools.CopyTm(Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.Int32,System.Int32)
  - Sdl.Core.TM.ImportExport.Tools.ExclusiveImport(System.String,System.String,Sdl.LanguagePlatform.TranslationMemory.ImportSettings,System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs})
  - Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm(Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.String)
  langs:
  - csharp
  - vb
  name: Tools
  nameWithType: Tools
  fullName: Sdl.Core.TM.ImportExport.Tools
  type: Class
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public class Tools
    content.vb: Public Class Tools
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.TM.ImportExport.Tools.CopyTm(Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.Int32,System.Int32)
  commentId: M:Sdl.Core.TM.ImportExport.Tools.CopyTm(Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.Int32,System.Int32)
  id: CopyTm(Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.Int32,System.Int32)
  parent: Sdl.Core.TM.ImportExport.Tools
  langs:
  - csharp
  - vb
  name: CopyTm(FileContainer, PersistentObjectToken, DatabaseContainer, PersistentObjectToken, Int32, Int32)
  nameWithType: Tools.CopyTm(FileContainer, PersistentObjectToken, DatabaseContainer, PersistentObjectToken, Int32, Int32)
  fullName: Sdl.Core.TM.ImportExport.Tools.CopyTm(Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer, Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken, Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer, Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken, System.Int32, System.Int32)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public static void CopyTm(FileContainer sourceContainer, PersistentObjectToken sourceTmId, DatabaseContainer destContainer, PersistentObjectToken destTmId, int timeoutSeconds = 600, int batchSize = 0)
    parameters:
    - id: sourceContainer
      type: Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer
    - id: sourceTmId
      type: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
    - id: destContainer
      type: Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer
    - id: destTmId
      type: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
    - id: timeoutSeconds
      type: System.Int32
    - id: batchSize
      type: System.Int32
    content.vb: Public Shared Sub CopyTm(sourceContainer As FileContainer, sourceTmId As PersistentObjectToken, destContainer As DatabaseContainer, destTmId As PersistentObjectToken, timeoutSeconds As Integer = 600, batchSize As Integer = 0)
  overload: Sdl.Core.TM.ImportExport.Tools.CopyTm*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm(Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.String)
  commentId: M:Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm(Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.String)
  id: FileBasedTmFromServerBasedTm(Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,System.String)
  parent: Sdl.Core.TM.ImportExport.Tools
  langs:
  - csharp
  - vb
  name: FileBasedTmFromServerBasedTm(DatabaseContainer, PersistentObjectToken, String)
  nameWithType: Tools.FileBasedTmFromServerBasedTm(DatabaseContainer, PersistentObjectToken, String)
  fullName: Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm(Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer, Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken, System.String)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public static PersistentObjectToken FileBasedTmFromServerBasedTm(DatabaseContainer container, PersistentObjectToken tmId, string tmFile)
    parameters:
    - id: container
      type: Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer
    - id: tmId
      type: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
    - id: tmFile
      type: System.String
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
    content.vb: Public Shared Function FileBasedTmFromServerBasedTm(container As DatabaseContainer, tmId As PersistentObjectToken, tmFile As String) As PersistentObjectToken
  overload: Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.TM.ImportExport.Tools.ExclusiveImport(System.String,System.String,Sdl.LanguagePlatform.TranslationMemory.ImportSettings,System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs})
  commentId: M:Sdl.Core.TM.ImportExport.Tools.ExclusiveImport(System.String,System.String,Sdl.LanguagePlatform.TranslationMemory.ImportSettings,System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs})
  id: ExclusiveImport(System.String,System.String,Sdl.LanguagePlatform.TranslationMemory.ImportSettings,System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs})
  parent: Sdl.Core.TM.ImportExport.Tools
  langs:
  - csharp
  - vb
  name: ExclusiveImport(String, String, ImportSettings, Action<Object, BatchImportedEventArgs>)
  nameWithType: Tools.ExclusiveImport(String, String, ImportSettings, Action<Object, BatchImportedEventArgs>)
  fullName: Sdl.Core.TM.ImportExport.Tools.ExclusiveImport(System.String, System.String, Sdl.LanguagePlatform.TranslationMemory.ImportSettings, System.Action<System.Object, Sdl.Core.TM.ImportExport.BatchImportedEventArgs>)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public static ImportStatistics ExclusiveImport(string tmFile, string inputFile, ImportSettings settings, Action<object, BatchImportedEventArgs> batchEvent = null)
    parameters:
    - id: tmFile
      type: System.String
    - id: inputFile
      type: System.String
    - id: settings
      type: Sdl.LanguagePlatform.TranslationMemory.ImportSettings
    - id: batchEvent
      type: System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs}
    return:
      type: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
    content.vb: Public Shared Function ExclusiveImport(tmFile As String, inputFile As String, settings As ImportSettings, batchEvent As Action(Of Object, BatchImportedEventArgs) = Nothing) As ImportStatistics
  overload: Sdl.Core.TM.ImportExport.Tools.ExclusiveImport*
  nameWithType.vb: Tools.ExclusiveImport(String, String, ImportSettings, Action(Of Object, BatchImportedEventArgs))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.TM.ImportExport.Tools.ExclusiveImport(System.String, System.String, Sdl.LanguagePlatform.TranslationMemory.ImportSettings, System.Action(Of System.Object, Sdl.Core.TM.ImportExport.BatchImportedEventArgs))
  name.vb: ExclusiveImport(String, String, ImportSettings, Action(Of Object, BatchImportedEventArgs))
- uid: Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual(Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken)
  commentId: M:Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual(Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken)
  id: CheckTmsEqual(Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken,Sdl.LanguagePlatform.TranslationMemoryImpl.Container,Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken)
  parent: Sdl.Core.TM.ImportExport.Tools
  langs:
  - csharp
  - vb
  name: CheckTmsEqual(Container, PersistentObjectToken, Container, PersistentObjectToken)
  nameWithType: Tools.CheckTmsEqual(Container, PersistentObjectToken, Container, PersistentObjectToken)
  fullName: Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual(Sdl.LanguagePlatform.TranslationMemoryImpl.Container, Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken, Sdl.LanguagePlatform.TranslationMemoryImpl.Container, Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken)
  type: Method
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public static void CheckTmsEqual(Container container1, PersistentObjectToken tmId1, Container container2, PersistentObjectToken tmId2)
    parameters:
    - id: container1
      type: Sdl.LanguagePlatform.TranslationMemoryImpl.Container
    - id: tmId1
      type: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
    - id: container2
      type: Sdl.LanguagePlatform.TranslationMemoryImpl.Container
    - id: tmId2
      type: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
    content.vb: Public Shared Sub CheckTmsEqual(container1 As Container, tmId1 As PersistentObjectToken, container2 As Container, tmId2 As PersistentObjectToken)
  overload: Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.TM.ImportExport.Tools.#ctor
  commentId: M:Sdl.Core.TM.ImportExport.Tools.#ctor
  id: '#ctor'
  parent: Sdl.Core.TM.ImportExport.Tools
  langs:
  - csharp
  - vb
  name: Tools()
  nameWithType: Tools.Tools()
  fullName: Sdl.Core.TM.ImportExport.Tools.Tools()
  type: Constructor
  source:
    path: Sdl.Core.TM.ImportExport
    isExternal: true
  assemblies:
  - Sdl.Core.TM.ImportExport
  namespace: Sdl.Core.TM.ImportExport
  syntax:
    content: public Tools()
    content.vb: Public Sub New
  overload: Sdl.Core.TM.ImportExport.Tools.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.TM.ImportExport
  commentId: N:Sdl.Core.TM.ImportExport
  isExternal: true
  name: Sdl.Core.TM.ImportExport
  nameWithType: Sdl.Core.TM.ImportExport
  fullName: Sdl.Core.TM.ImportExport
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.TM.ImportExport.Tools.CopyTm*
  commentId: Overload:Sdl.Core.TM.ImportExport.Tools.CopyTm
  isExternal: true
  name: CopyTm
  nameWithType: Tools.CopyTm
  fullName: Sdl.Core.TM.ImportExport.Tools.CopyTm
- uid: Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer
  commentId: '!:Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer'
  isExternal: true
  name: FileContainer
  nameWithType: FileContainer
  fullName: Sdl.LanguagePlatform.TranslationMemoryImpl.FileContainer
- uid: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: PersistentObjectToken
  nameWithType: PersistentObjectToken
  fullName: Sdl.LanguagePlatform.TranslationMemory.PersistentObjectToken
- uid: Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer
  isExternal: true
  name: DatabaseContainer
  nameWithType: DatabaseContainer
  fullName: Sdl.LanguagePlatform.TranslationMemoryImpl.DatabaseContainer
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.TranslationMemory
  commentId: N:Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: Sdl.LanguagePlatform.TranslationMemory
  nameWithType: Sdl.LanguagePlatform.TranslationMemory
  fullName: Sdl.LanguagePlatform.TranslationMemory
- uid: Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm*
  commentId: Overload:Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm
  isExternal: true
  name: FileBasedTmFromServerBasedTm
  nameWithType: Tools.FileBasedTmFromServerBasedTm
  fullName: Sdl.Core.TM.ImportExport.Tools.FileBasedTmFromServerBasedTm
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.TM.ImportExport.Tools.ExclusiveImport*
  commentId: Overload:Sdl.Core.TM.ImportExport.Tools.ExclusiveImport
  isExternal: true
  name: ExclusiveImport
  nameWithType: Tools.ExclusiveImport
  fullName: Sdl.Core.TM.ImportExport.Tools.ExclusiveImport
- uid: Sdl.LanguagePlatform.TranslationMemory.ImportSettings
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ImportSettings
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: ImportSettings
  nameWithType: ImportSettings
  fullName: Sdl.LanguagePlatform.TranslationMemory.ImportSettings
- uid: System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs}
  commentId: T:System.Action{System.Object,Sdl.Core.TM.ImportExport.BatchImportedEventArgs}
  parent: System
  definition: System.Action`2
  name: Action<Object, BatchImportedEventArgs>
  nameWithType: Action<Object, BatchImportedEventArgs>
  fullName: System.Action<System.Object, Sdl.Core.TM.ImportExport.BatchImportedEventArgs>
  nameWithType.vb: Action(Of Object, BatchImportedEventArgs)
  fullName.vb: System.Action(Of System.Object, Sdl.Core.TM.ImportExport.BatchImportedEventArgs)
  name.vb: Action(Of Object, BatchImportedEventArgs)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    name: BatchImportedEventArgs
    nameWithType: BatchImportedEventArgs
    fullName: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    name: BatchImportedEventArgs
    nameWithType: BatchImportedEventArgs
    fullName: Sdl.Core.TM.ImportExport.BatchImportedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
  commentId: T:Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
  parent: Sdl.LanguagePlatform.TranslationMemory
  isExternal: true
  name: ImportStatistics
  nameWithType: ImportStatistics
  fullName: Sdl.LanguagePlatform.TranslationMemory.ImportStatistics
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual*
  commentId: Overload:Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual
  isExternal: true
  name: CheckTmsEqual
  nameWithType: Tools.CheckTmsEqual
  fullName: Sdl.Core.TM.ImportExport.Tools.CheckTmsEqual
- uid: Sdl.LanguagePlatform.TranslationMemoryImpl.Container
  isExternal: true
  name: Container
  nameWithType: Container
  fullName: Sdl.LanguagePlatform.TranslationMemoryImpl.Container
- uid: Sdl.Core.TM.ImportExport.Tools.#ctor*
  commentId: Overload:Sdl.Core.TM.ImportExport.Tools.#ctor
  isExternal: true
  name: Tools
  nameWithType: Tools.Tools
  fullName: Sdl.Core.TM.ImportExport.Tools.Tools
