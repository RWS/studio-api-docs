### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.StringUtilities
  commentId: T:Sdl.LanguagePlatform.Core.StringUtilities
  id: StringUtilities
  parent: Sdl.LanguagePlatform.Core
  children:
  - Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)
  - Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)
  - Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})
  - Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])
  - Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)
  - Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)
  langs:
  - csharp
  - vb
  name: StringUtilities
  nameWithType: StringUtilities
  fullName: Sdl.LanguagePlatform.Core.StringUtilities
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static class StringUtilities
    content.vb: Public Module StringUtilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  id: DetermineCasing(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: DetermineCasing(String)
  nameWithType: StringUtilities.DetermineCasing(String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static StringUtilities.Casing DetermineCasing(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: Sdl.LanguagePlatform.Core.StringUtilities.Casing
    content.vb: Public Shared Function DetermineCasing(s As String) As StringUtilities.Casing
  overload: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String,System.Char[])
  id: StartWithAny(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: StartWithAny(String, Char[])
  nameWithType: StringUtilities.StartWithAny(String, Char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String, System.Char[])
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static bool StartWithAny(string s, char[] characterList)
    parameters:
    - id: s
      type: System.String
    - id: characterList
      type: System.Char[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function StartWithAny(s As String, characterList As Char()) As Boolean
  overload: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny*
  nameWithType.vb: StringUtilities.StartWithAny(String, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny(System.String, System.Char())
  name.vb: StartWithAny(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String,System.Char[])
  id: EndsWithAny(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: EndsWithAny(String, Char[])
  nameWithType: StringUtilities.EndsWithAny(String, Char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String, System.Char[])
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static bool EndsWithAny(string s, char[] characterList)
    parameters:
    - id: s
      type: System.String
    - id: characterList
      type: System.Char[]
    return:
      type: System.Boolean
    content.vb: Public Shared Function EndsWithAny(s As String, characterList As Char()) As Boolean
  overload: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny*
  nameWithType.vb: StringUtilities.EndsWithAny(String, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny(System.String, System.Char())
  name.vb: EndsWithAny(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  id: IsAllWhitespace(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: IsAllWhitespace(String)
  nameWithType: StringUtilities.IsAllWhitespace(String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static bool IsAllWhitespace(string t)
    parameters:
    - id: t
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsAllWhitespace(t As String) As Boolean
  overload: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  id: EscapeString(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: EscapeString(String)
  nameWithType: StringUtilities.EscapeString(String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string EscapeString(string s)
    parameters:
    - id: s
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function EscapeString(s As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String,System.Predicate{System.Char})
  id: RemoveAll(System.String,System.Predicate{System.Char})
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: RemoveAll(String, Predicate<Char>)
  nameWithType: StringUtilities.RemoveAll(String, Predicate<Char>)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String, System.Predicate<System.Char>)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string RemoveAll(string s, Predicate<char> property)
    parameters:
    - id: s
      type: System.String
    - id: property
      type: System.Predicate{System.Char}
    return:
      type: System.String
    content.vb: Public Shared Function RemoveAll(s As String, property As Predicate(Of Char)) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll*
  nameWithType.vb: StringUtilities.RemoveAll(String, Predicate(Of Char))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll(System.String, System.Predicate(Of System.Char))
  name.vb: RemoveAll(String, Predicate(Of Char))
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String,System.String)
  id: EscapeString(System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: EscapeString(String, String)
  nameWithType: StringUtilities.EscapeString(String, String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString(System.String, System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string EscapeString(string s, string charactersToEscape)
    parameters:
    - id: s
      type: System.String
    - id: charactersToEscape
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function EscapeString(s As String, charactersToEscape As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String,System.Char[])
  id: GetPrefixLength(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: GetPrefixLength(String, Char[])
  nameWithType: StringUtilities.GetPrefixLength(String, Char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String, System.Char[])
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static int GetPrefixLength(string s, char[] prefixChars)
    parameters:
    - id: s
      type: System.String
    - id: prefixChars
      type: System.Char[]
    return:
      type: System.Int32
    content.vb: Public Shared Function GetPrefixLength(s As String, prefixChars As Char()) As Integer
  overload: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength*
  nameWithType.vb: StringUtilities.GetPrefixLength(String, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength(System.String, System.Char())
  name.vb: GetPrefixLength(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String,System.Char[])
  id: GetSuffixLength(System.String,System.Char[])
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: GetSuffixLength(String, Char[])
  nameWithType: StringUtilities.GetSuffixLength(String, Char[])
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String, System.Char[])
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static int GetSuffixLength(string s, char[] suffixChars)
    parameters:
    - id: s
      type: System.String
    - id: suffixChars
      type: System.Char[]
    return:
      type: System.Int32
    content.vb: Public Shared Function GetSuffixLength(s As String, suffixChars As Char()) As Integer
  overload: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength*
  nameWithType.vb: StringUtilities.GetSuffixLength(String, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength(System.String, System.Char())
  name.vb: GetSuffixLength(String, Char())
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String,System.Char[],System.String@)
  id: TrimStart(System.String,System.Char[],System.String@)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: TrimStart(String, Char[], out String)
  nameWithType: StringUtilities.TrimStart(String, Char[], out String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String, System.Char[], out System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string TrimStart(string s, char[] trimCharacters, out string trimmedPrefix)
    parameters:
    - id: s
      type: System.String
    - id: trimCharacters
      type: System.Char[]
    - id: trimmedPrefix
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function TrimStart(s As String, trimCharacters As Char(), ByRef trimmedPrefix As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart*
  nameWithType.vb: StringUtilities.TrimStart(String, Char(), ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart(System.String, System.Char(), ByRef System.String)
  name.vb: TrimStart(String, Char(), ByRef String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String,System.Char[],System.String@)
  id: TrimEnd(System.String,System.Char[],System.String@)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: TrimEnd(String, Char[], out String)
  nameWithType: StringUtilities.TrimEnd(String, Char[], out String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String, System.Char[], out System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string TrimEnd(string s, char[] trimCharacters, out string trimmedSuffix)
    parameters:
    - id: s
      type: System.String
    - id: trimCharacters
      type: System.Char[]
    - id: trimmedSuffix
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function TrimEnd(s As String, trimCharacters As Char(), ByRef trimmedSuffix As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd*
  nameWithType.vb: StringUtilities.TrimEnd(String, Char(), ByRef String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd(System.String, System.Char(), ByRef System.String)
  name.vb: TrimEnd(String, Char(), ByRef String)
- uid: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String,System.String)
  id: MergeStrings(System.String,System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: MergeStrings(String, String)
  nameWithType: StringUtilities.MergeStrings(String, String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings(System.String, System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string MergeStrings(string a, string b)
    parameters:
    - id: a
      type: System.String
    - id: b
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function MergeStrings(a As String, b As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32,System.Boolean)
  id: GenerateRandomWord(System.Int32,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: GenerateRandomWord(Int32, Boolean)
  nameWithType: StringUtilities.GenerateRandomWord(Int32, Boolean)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord(System.Int32, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string GenerateRandomWord(int length, bool initialUpper)
    parameters:
    - id: length
      type: System.Int32
    - id: initialUpper
      type: System.Boolean
    return:
      type: System.String
    content.vb: Public Shared Function GenerateRandomWord(length As Integer, initialUpper As Boolean) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  id: HalfWidthToFullWidth(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: HalfWidthToFullWidth(String)
  nameWithType: StringUtilities.HalfWidthToFullWidth(String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string HalfWidthToFullWidth(string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function HalfWidthToFullWidth(input As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  commentId: M:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  id: HalfWidthToFullWidth2(System.String)
  parent: Sdl.LanguagePlatform.Core.StringUtilities
  langs:
  - csharp
  - vb
  name: HalfWidthToFullWidth2(String)
  nameWithType: StringUtilities.HalfWidthToFullWidth2(String)
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2(System.String)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core
  syntax:
    content: public static string HalfWidthToFullWidth2(string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function HalfWidthToFullWidth2(input As String) As String
  overload: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sdl.LanguagePlatform.Core
  commentId: N:Sdl.LanguagePlatform.Core
  isExternal: true
  name: Sdl.LanguagePlatform.Core
  nameWithType: Sdl.LanguagePlatform.Core
  fullName: Sdl.LanguagePlatform.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing
  isExternal: true
  name: DetermineCasing
  nameWithType: StringUtilities.DetermineCasing
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.DetermineCasing
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.StringUtilities.Casing
  commentId: T:Sdl.LanguagePlatform.Core.StringUtilities.Casing
  parent: Sdl.LanguagePlatform.Core
  isExternal: true
  name: StringUtilities.Casing
  nameWithType: StringUtilities.Casing
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.Casing
- uid: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny
  isExternal: true
  name: StartWithAny
  nameWithType: StringUtilities.StartWithAny
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.StartWithAny
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny
  isExternal: true
  name: EndsWithAny
  nameWithType: StringUtilities.EndsWithAny
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EndsWithAny
- uid: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace
  isExternal: true
  name: IsAllWhitespace
  nameWithType: StringUtilities.IsAllWhitespace
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.IsAllWhitespace
- uid: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.EscapeString
  isExternal: true
  name: EscapeString
  nameWithType: StringUtilities.EscapeString
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.EscapeString
- uid: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll
  isExternal: true
  name: RemoveAll
  nameWithType: StringUtilities.RemoveAll
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.RemoveAll
- uid: System.Predicate{System.Char}
  commentId: T:System.Predicate{System.Char}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Char>
  nameWithType: Predicate<Char>
  fullName: System.Predicate<System.Char>
  nameWithType.vb: Predicate(Of Char)
  fullName.vb: System.Predicate(Of System.Char)
  name.vb: Predicate(Of Char)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength
  isExternal: true
  name: GetPrefixLength
  nameWithType: StringUtilities.GetPrefixLength
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetPrefixLength
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength
  isExternal: true
  name: GetSuffixLength
  nameWithType: StringUtilities.GetSuffixLength
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GetSuffixLength
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.TrimStart
  isExternal: true
  name: TrimStart
  nameWithType: StringUtilities.TrimStart
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimStart
- uid: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd
  isExternal: true
  name: TrimEnd
  nameWithType: StringUtilities.TrimEnd
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.TrimEnd
- uid: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings
  isExternal: true
  name: MergeStrings
  nameWithType: StringUtilities.MergeStrings
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.MergeStrings
- uid: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord
  isExternal: true
  name: GenerateRandomWord
  nameWithType: StringUtilities.GenerateRandomWord
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.GenerateRandomWord
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth
  isExternal: true
  name: HalfWidthToFullWidth
  nameWithType: StringUtilities.HalfWidthToFullWidth
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth
- uid: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2*
  commentId: Overload:Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2
  isExternal: true
  name: HalfWidthToFullWidth2
  nameWithType: StringUtilities.HalfWidthToFullWidth2
  fullName: Sdl.LanguagePlatform.Core.StringUtilities.HalfWidthToFullWidth2
