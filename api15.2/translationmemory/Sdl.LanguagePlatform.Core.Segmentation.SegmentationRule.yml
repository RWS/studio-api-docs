### YamlMime:ManagedReference
items:
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  id: SegmentationRule
  parent: Sdl.LanguagePlatform.Core.Segmentation
  children:
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  - Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  langs:
  - csharp
  - vb
  name: SegmentationRule
  nameWithType: SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  type: Class
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: 'public class SegmentationRule : ICloneable'
    content.vb: >-
      Public Class SegmentationRule
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  id: '#ctor'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule()
  nameWithType: SegmentationRule.SegmentationRule()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule()
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public SegmentationRule()
    content.vb: Public Sub New
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  id: '#ctor(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule(SegmentationRule)
  nameWithType: SegmentationRule.SegmentationRule(SegmentationRule)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public SegmentationRule(SegmentationRule other)
    parameters:
    - id: other
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
    content.vb: Public Sub New(other As SegmentationRule)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  id: '#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule(String, SegmentationContext)
  nameWithType: SegmentationRule.SegmentationRule(String, SegmentationContext)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(System.String, Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public SegmentationRule(string description, SegmentationContext matchingContext)
    parameters:
    - id: description
      type: System.String
    - id: matchingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    content.vb: Public Sub New(description As String, matchingContext As SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})
  id: '#ctor(System.String,Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext,System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext})'
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: SegmentationRule(String, SegmentationContext, List<SegmentationContext>)
  nameWithType: SegmentationRule.SegmentationRule(String, SegmentationContext, List<SegmentationContext>)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(System.String, Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext, System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext>)
  type: Constructor
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public SegmentationRule(string description, SegmentationContext matchingContext, List<SegmentationContext> exceptions)
    parameters:
    - id: description
      type: System.String
    - id: matchingContext
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    - id: exceptions
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
    content.vb: Public Sub New(description As String, matchingContext As SegmentationContext, exceptions As List(Of SegmentationContext))
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  nameWithType.vb: SegmentationRule.SegmentationRule(String, SegmentationContext, List(Of SegmentationContext))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule(System.String, Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext, System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext))
  name.vb: SegmentationRule(String, SegmentationContext, List(Of SegmentationContext))
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  id: ToString
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SegmentationRule.ToString()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  id: AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: AddException(SegmentationContext)
  nameWithType: SegmentationRule.AddException(SegmentationContext)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException(Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public void AddException(SegmentationContext context)
    parameters:
    - id: context
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    content.vb: Public Sub AddException(context As SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  id: MatchesAt(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MatchesAt(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationRule.MatchesAt(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public bool MatchesAt(string input, int position, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
    - id: position
      type: System.Int32
    - id: assumeEof
      type: System.Boolean
    - id: followedByWordBreak
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Public Function MatchesAt(input As String, position As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  id: FindFirstMatch(System.String,System.Int32,System.Boolean,System.Boolean)
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: FindFirstMatch(String, Int32, Boolean, Boolean)
  nameWithType: SegmentationRule.FindFirstMatch(String, Int32, Boolean, Boolean)
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch(System.String, System.Int32, System.Boolean, System.Boolean)
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public int FindFirstMatch(string input, int startOffset, bool assumeEof, bool followedByWordBreak)
    parameters:
    - id: input
      type: System.String
    - id: startOffset
      type: System.Int32
    - id: assumeEof
      type: System.Boolean
    - id: followedByWordBreak
      type: System.Boolean
    return:
      type: System.Int32
    content.vb: Public Function FindFirstMatch(input As String, startOffset As Integer, assumeEof As Boolean, followedByWordBreak As Boolean) As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  commentId: M:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  id: Clone
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: SegmentationRule.Clone()
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone()
  type: Method
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public object Clone()
    return:
      type: System.Object
    content.vb: Public Function Clone As Object
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  id: IsEnabled
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: SegmentationRule.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public bool IsEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsEnabled As Boolean
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  id: MinimumChars
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MinimumChars
  nameWithType: SegmentationRule.MinimumChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public int MinimumChars { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MinimumChars As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  id: MinimumWords
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MinimumWords
  nameWithType: SegmentationRule.MinimumWords
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public int MinimumWords { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MinimumWords As Integer
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  id: Type
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: SegmentationRule.Type
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public RuleType Type { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.RuleType
    content.vb: Public Property Type As RuleType
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  id: Origin
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: SegmentationRule.Origin
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public RuleOrigin Origin { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
    content.vb: Public Property Origin As RuleOrigin
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  id: Description
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SegmentationRule.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public LocalizedString Description { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
    content.vb: Public Property Description As LocalizedString
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  id: MatchingContext
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: MatchingContext
  nameWithType: SegmentationRule.MatchingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public SegmentationContext MatchingContext { get; set; }
    parameters: []
    return:
      type: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    content.vb: Public Property MatchingContext As SegmentationContext
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  commentId: P:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  id: Exceptions
  parent: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  langs:
  - csharp
  - vb
  name: Exceptions
  nameWithType: SegmentationRule.Exceptions
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  type: Property
  source:
    path: Sdl.LanguagePlatform.Core
    isExternal: true
  assemblies:
  - Sdl.LanguagePlatform.Core
  namespace: Sdl.LanguagePlatform.Core.Segmentation
  syntax:
    content: public List<SegmentationContext> Exceptions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
    content.vb: Public Property Exceptions As List(Of SegmentationContext)
  overload: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Sdl.LanguagePlatform.Core.Segmentation
  commentId: N:Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: Sdl.LanguagePlatform.Core.Segmentation
  nameWithType: Sdl.LanguagePlatform.Core.Segmentation
  fullName: Sdl.LanguagePlatform.Core.Segmentation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.#ctor
  isExternal: true
  name: SegmentationRule
  nameWithType: SegmentationRule.SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.SegmentationRule
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationRule
  nameWithType: SegmentationRule
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: SegmentationContext
  nameWithType: SegmentationContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
- uid: System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
  commentId: T:System.Collections.Generic.List{Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SegmentationContext>
  nameWithType: List<SegmentationContext>
  fullName: System.Collections.Generic.List<Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext>
  nameWithType.vb: List(Of SegmentationContext)
  fullName.vb: System.Collections.Generic.List(Of Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext)
  name.vb: List(Of SegmentationContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    name: SegmentationContext
    nameWithType: SegmentationContext
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    name: SegmentationContext
    nameWithType: SegmentationContext
    fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
  isExternal: true
  name: ToString
  nameWithType: SegmentationRule.ToString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.ToString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException
  isExternal: true
  name: AddException
  nameWithType: SegmentationRule.AddException
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.AddException
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt
  isExternal: true
  name: MatchesAt
  nameWithType: SegmentationRule.MatchesAt
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchesAt
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch
  isExternal: true
  name: FindFirstMatch
  nameWithType: SegmentationRule.FindFirstMatch
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.FindFirstMatch
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
  isExternal: true
  name: Clone
  nameWithType: SegmentationRule.Clone
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
  isExternal: true
  name: IsEnabled
  nameWithType: SegmentationRule.IsEnabled
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.IsEnabled
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
  isExternal: true
  name: MinimumChars
  nameWithType: SegmentationRule.MinimumChars
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumChars
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
  isExternal: true
  name: MinimumWords
  nameWithType: SegmentationRule.MinimumWords
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MinimumWords
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
  isExternal: true
  name: Type
  nameWithType: SegmentationRule.Type
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Type
- uid: Sdl.LanguagePlatform.Core.Segmentation.RuleType
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.RuleType
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: RuleType
  nameWithType: RuleType
  fullName: Sdl.LanguagePlatform.Core.Segmentation.RuleType
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
  isExternal: true
  name: Origin
  nameWithType: SegmentationRule.Origin
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Origin
- uid: Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: RuleOrigin
  nameWithType: RuleOrigin
  fullName: Sdl.LanguagePlatform.Core.Segmentation.RuleOrigin
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
  isExternal: true
  name: Description
  nameWithType: SegmentationRule.Description
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Description
- uid: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  commentId: T:Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
  parent: Sdl.LanguagePlatform.Core.Segmentation
  isExternal: true
  name: LocalizedString
  nameWithType: LocalizedString
  fullName: Sdl.LanguagePlatform.Core.Segmentation.LocalizedString
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
  isExternal: true
  name: MatchingContext
  nameWithType: SegmentationRule.MatchingContext
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.MatchingContext
- uid: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions*
  commentId: Overload:Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
  isExternal: true
  name: Exceptions
  nameWithType: SegmentationRule.Exceptions
  fullName: Sdl.LanguagePlatform.Core.Segmentation.SegmentationRule.Exceptions
