### YamlMime:ManagedReference
items:
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  commentId: T:Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  id: ISegmentIterator
  parent: Sdl.TranslationStudio.Api.Editor
  children:
  - Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment
  - Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next
  - Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous
  - Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment
  langs:
  - csharp
  - vb
  name: ISegmentIterator
  nameWithType: ISegmentIterator
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  type: Interface
  source:
    path: Sdl.TranslationStudio.Api
    isExternal: true
  assemblies:
  - Sdl.TranslationStudio.Api
  namespace: Sdl.TranslationStudio.Api.Editor
  summary: "\nProvides a way to iterate over the segments of a Document or View. \n"
  syntax:
    content: public interface ISegmentIterator
    content.vb: Public Interface ISegmentIterator
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next
  commentId: M:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next
  id: Next
  parent: Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  langs:
  - csharp
  - vb
  name: Next()
  nameWithType: ISegmentIterator.Next()
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next()
  type: Method
  source:
    path: Sdl.TranslationStudio.Api
    isExternal: true
  assemblies:
  - Sdl.TranslationStudio.Api
  namespace: Sdl.TranslationStudio.Api.Editor
  summary: "\nThe iterator is initially positioned before the first element.\nThe first call to Next() moves the iterator over the first element.\n"
  syntax:
    content: bool Next()
    return:
      type: System.Boolean
      description: True if successfully moved to the next segment. False if reached end.
    content.vb: Function Next As Boolean
  overload: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next*
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous
  commentId: M:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous
  id: Previous
  parent: Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  langs:
  - csharp
  - vb
  name: Previous()
  nameWithType: ISegmentIterator.Previous()
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous()
  type: Method
  source:
    path: Sdl.TranslationStudio.Api
    isExternal: true
  assemblies:
  - Sdl.TranslationStudio.Api
  namespace: Sdl.TranslationStudio.Api.Editor
  summary: "\nThe iterator is initially positioned before the first element.\nThe first call to Previous() moves the iterator over the first element.\n"
  syntax:
    content: bool Previous()
    return:
      type: System.Boolean
      description: True if successfully moved to the previous segment. False if reached start.
    content.vb: Function Previous As Boolean
  overload: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous*
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment
  commentId: P:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment
  id: CurrentSegment
  parent: Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  langs:
  - csharp
  - vb
  name: CurrentSegment
  nameWithType: ISegmentIterator.CurrentSegment
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment
  type: Property
  source:
    path: Sdl.TranslationStudio.Api
    isExternal: true
  assemblies:
  - Sdl.TranslationStudio.Api
  namespace: Sdl.TranslationStudio.Api.Editor
  summary: "\nThe segment the iterator is currently positioned over. \n"
  syntax:
    content: ISegmentContainerNode CurrentSegment { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
    content.vb: ReadOnly Property CurrentSegment As ISegmentContainerNode
  overload: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment
  commentId: P:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment
  id: ShouldIteratorSkipSegment
  parent: Sdl.TranslationStudio.Api.Editor.ISegmentIterator
  langs:
  - csharp
  - vb
  name: ShouldIteratorSkipSegment
  nameWithType: ISegmentIterator.ShouldIteratorSkipSegment
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment
  type: Property
  source:
    path: Sdl.TranslationStudio.Api
    isExternal: true
  assemblies:
  - Sdl.TranslationStudio.Api
  namespace: Sdl.TranslationStudio.Api.Editor
  summary: "\nAllows The Caller To Specify A Method That Returns True/False That Will Contain\nCustom Logic About Whether A Segment Should Be Skipped Or Not.\n"
  syntax:
    content: Predicate<ISegmentContainerNode> ShouldIteratorSkipSegment { get; set; }
    parameters: []
    return:
      type: System.Predicate{Sdl.DesktopEditor.EditorApi.ISegmentContainerNode}
    content.vb: Property ShouldIteratorSkipSegment As Predicate(Of ISegmentContainerNode)
  overload: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment*
  modifiers.csharp:
  - get
  - set
references:
- uid: Sdl.TranslationStudio.Api.Editor
  commentId: N:Sdl.TranslationStudio.Api.Editor
  isExternal: true
  name: Sdl.TranslationStudio.Api.Editor
  nameWithType: Sdl.TranslationStudio.Api.Editor
  fullName: Sdl.TranslationStudio.Api.Editor
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next*
  commentId: Overload:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next
  isExternal: true
  name: Next
  nameWithType: ISegmentIterator.Next
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Next
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous*
  commentId: Overload:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous
  isExternal: true
  name: Previous
  nameWithType: ISegmentIterator.Previous
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.Previous
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment*
  commentId: Overload:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment
  isExternal: true
  name: CurrentSegment
  nameWithType: ISegmentIterator.CurrentSegment
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.CurrentSegment
- uid: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
  commentId: T:Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ISegmentContainerNode
  nameWithType: ISegmentContainerNode
  fullName: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment*
  commentId: Overload:Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment
  isExternal: true
  name: ShouldIteratorSkipSegment
  nameWithType: ISegmentIterator.ShouldIteratorSkipSegment
  fullName: Sdl.TranslationStudio.Api.Editor.ISegmentIterator.ShouldIteratorSkipSegment
- uid: System.Predicate{Sdl.DesktopEditor.EditorApi.ISegmentContainerNode}
  commentId: T:System.Predicate{Sdl.DesktopEditor.EditorApi.ISegmentContainerNode}
  parent: System
  definition: System.Predicate`1
  name: Predicate<ISegmentContainerNode>
  nameWithType: Predicate<ISegmentContainerNode>
  fullName: System.Predicate<Sdl.DesktopEditor.EditorApi.ISegmentContainerNode>
  nameWithType.vb: Predicate(Of ISegmentContainerNode)
  fullName.vb: System.Predicate(Of Sdl.DesktopEditor.EditorApi.ISegmentContainerNode)
  name.vb: Predicate(Of ISegmentContainerNode)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
    name: ISegmentContainerNode
    nameWithType: ISegmentContainerNode
    fullName: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
    name: ISegmentContainerNode
    nameWithType: ISegmentContainerNode
    fullName: Sdl.DesktopEditor.EditorApi.ISegmentContainerNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
