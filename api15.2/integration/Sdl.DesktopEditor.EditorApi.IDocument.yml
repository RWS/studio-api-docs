### YamlMime:ManagedReference
items:
- uid: Sdl.DesktopEditor.EditorApi.IDocument
  commentId: T:Sdl.DesktopEditor.EditorApi.IDocument
  id: IDocument
  parent: Sdl.DesktopEditor.EditorApi
  children:
  - Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange
  - Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted
  - Sdl.DesktopEditor.EditorApi.IDocument.ContentChanged
  - Sdl.DesktopEditor.EditorApi.IDocument.Copy
  - Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText(System.Boolean)
  - Sdl.DesktopEditor.EditorApi.IDocument.Delete
  - Sdl.DesktopEditor.EditorApi.IDocument.EditOperationCompleting
  - Sdl.DesktopEditor.EditorApi.IDocument.EditOperationStarting
  - Sdl.DesktopEditor.EditorApi.IDocument.IsDirty
  - Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.ContentRange)
  - Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.IContentSelection)
  - Sdl.DesktopEditor.EditorApi.IDocument.Replace(Sdl.DesktopEditor.EditorApi.IDocumentFragment)
  - Sdl.DesktopEditor.EditorApi.IDocument.RootContainer
  - Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer
  langs:
  - csharp
  - vb
  name: IDocument
  nameWithType: IDocument
  fullName: Sdl.DesktopEditor.EditorApi.IDocument
  type: Interface
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe document is the container for all data displayed in the editor.\n"
  remarks: "\n<p>\nThe document content is typically manipulated through the \n<xref href=\"Sdl.DesktopEditor.EditorApi.IEditControl.Selection\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: 'public interface IDocument : IDisposable'
    content.vb: >-
      Public Interface IDocument
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.ContentRange)
  commentId: M:Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.ContentRange)
  id: MoveActiveRange(Sdl.DesktopEditor.EditorApi.ContentRange)
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: MoveActiveRange(ContentRange)
  nameWithType: IDocument.MoveActiveRange(ContentRange)
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.ContentRange)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMethod allowing the client to set the <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange\" data-throw-if-not-resolved=\"false\"></xref> to the range provided.\n"
  syntax:
    content: void MoveActiveRange(ContentRange range)
    parameters:
    - id: range
      type: Sdl.DesktopEditor.EditorApi.ContentRange
      description: The range to move the active range to. This must be from the same document.
    content.vb: Sub MoveActiveRange(range As ContentRange)
  overload: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange*
- uid: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.IContentSelection)
  commentId: M:Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.IContentSelection)
  id: MoveActiveRange(Sdl.DesktopEditor.EditorApi.IContentSelection)
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: MoveActiveRange(IContentSelection)
  nameWithType: IDocument.MoveActiveRange(IContentSelection)
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.IContentSelection)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nMethod allowing the client to set the <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange\" data-throw-if-not-resolved=\"false\"></xref> to the location\ncorresponding to the selection.\n"
  syntax:
    content: void MoveActiveRange(IContentSelection selection)
    parameters:
    - id: selection
      type: Sdl.DesktopEditor.EditorApi.IContentSelection
      description: >-
        The selection corresponding to the range to move to.

        This must be from an edit control using the same document.
    content.vb: Sub MoveActiveRange(selection As IContentSelection)
  overload: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange*
- uid: Sdl.DesktopEditor.EditorApi.IDocument.Delete
  commentId: M:Sdl.DesktopEditor.EditorApi.IDocument.Delete
  id: Delete
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: IDocument.Delete()
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.Delete()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nDelete the current content of the active range.\n"
  remarks: "\n<p>\nAfter delete the <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange\" data-throw-if-not-resolved=\"false\"></xref> spans the location of the deleted content.\n</p>\n<p>Note that the range is not necessarily empty after this operation. \nFor example, it may contain ghost tags.</p>\n"
  syntax:
    content: void Delete()
    content.vb: Sub Delete
  overload: Sdl.DesktopEditor.EditorApi.IDocument.Delete*
- uid: Sdl.DesktopEditor.EditorApi.IDocument.Replace(Sdl.DesktopEditor.EditorApi.IDocumentFragment)
  commentId: M:Sdl.DesktopEditor.EditorApi.IDocument.Replace(Sdl.DesktopEditor.EditorApi.IDocumentFragment)
  id: Replace(Sdl.DesktopEditor.EditorApi.IDocumentFragment)
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: Replace(IDocumentFragment)
  nameWithType: IDocument.Replace(IDocumentFragment)
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.Replace(Sdl.DesktopEditor.EditorApi.IDocumentFragment)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nReplace the content of the active range with the content of the document fragment.\n"
  remarks: "\n<p>\nAfter execution the <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange\" data-throw-if-not-resolved=\"false\"></xref> spans the inserted content.\n</p>\n"
  syntax:
    content: void Replace(IDocumentFragment newContent)
    parameters:
    - id: newContent
      type: Sdl.DesktopEditor.EditorApi.IDocumentFragment
      description: The document fragment containing the content to replace.
    content.vb: Sub Replace(newContent As IDocumentFragment)
  overload: Sdl.DesktopEditor.EditorApi.IDocument.Replace*
- uid: Sdl.DesktopEditor.EditorApi.IDocument.Copy
  commentId: M:Sdl.DesktopEditor.EditorApi.IDocument.Copy
  id: Copy
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: Copy()
  nameWithType: IDocument.Copy()
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.Copy()
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nGets a detached copy of the active range content.\n"
  syntax:
    content: IDocumentFragment Copy()
    return:
      type: Sdl.DesktopEditor.EditorApi.IDocumentFragment
      description: A copy of the content contained in the active range.
    content.vb: Function Copy As IDocumentFragment
  overload: Sdl.DesktopEditor.EditorApi.IDocument.Copy*
- uid: Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText(System.Boolean)
  commentId: M:Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText(System.Boolean)
  id: CopyAsText(System.Boolean)
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: CopyAsText(Boolean)
  nameWithType: IDocument.CopyAsText(Boolean)
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText(System.Boolean)
  type: Method
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nGet the plain text content of the active range, as suited for Windows clipboard operations.\n\nIf writeSegmentsAsLineBreaks is true we will write a line break for every segment.\n"
  syntax:
    content: string CopyAsText(bool writeSegmentsAsLineBreaks)
    parameters:
    - id: writeSegmentsAsLineBreaks
      type: System.Boolean
    return:
      type: System.String
    content.vb: Function CopyAsText(writeSegmentsAsLineBreaks As Boolean) As String
  overload: Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText*
- uid: Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange
  commentId: P:Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange
  id: ActiveRange
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: ActiveRange
  nameWithType: IDocument.ActiveRange
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe range in the document on which operations such as <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.Delete\" data-throw-if-not-resolved=\"false\"></xref>, \n<xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.Replace(Sdl.DesktopEditor.EditorApi.IDocumentFragment)\" data-throw-if-not-resolved=\"false\"></xref> etc. are executed.\n"
  remarks: "\n<p>\nThe range is intended as a read-only object. Changing its properties\nwill NOT move the active range in the document. Use <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange(Sdl.DesktopEditor.EditorApi.ContentRange)\" data-throw-if-not-resolved=\"false\"></xref> to\nexplicitly change the active range in the document.\n</p>\n<p>\nAPI clients set the active range before executing methods on the document. The range\nis also updated by methods that modify document content.\n</p>\n"
  syntax:
    content: ContentRange ActiveRange { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.ContentRange
    content.vb: ReadOnly Property ActiveRange As ContentRange
  overload: Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IDocument.RootContainer
  commentId: P:Sdl.DesktopEditor.EditorApi.IDocument.RootContainer
  id: RootContainer
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: RootContainer
  nameWithType: IDocument.RootContainer
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.RootContainer
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe root container of all content in the document.\n"
  syntax:
    content: IAbstractContainerNode RootContainer { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
    content.vb: ReadOnly Property RootContainer As IAbstractContainerNode
  overload: Sdl.DesktopEditor.EditorApi.IDocument.RootContainer*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IDocument.IsDirty
  commentId: P:Sdl.DesktopEditor.EditorApi.IDocument.IsDirty
  id: IsDirty
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: IsDirty
  nameWithType: IDocument.IsDirty
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.IsDirty
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nIf <code>true</code> this indicates that the document content has been changed since the\nlast time this flag was reset.\n"
  remarks: "\n<p>\nThe edit control automatically sets this flag to <code>true</code> every time some content \nchanges in the editor (through API or user action).\n</p>\n<p>\nSet this flag to <code>false</code> when the document is saved. That allows you to keep track\nof whether any changes have been made to it in order to determine if\nthe document may need to be saved again at a later point.\n</p>\n<p>\nSince the editor does not provide Open/Save operations it is the API client&apos;s responsibility\nto reset this flag after such operations.\n</p>\n"
  syntax:
    content: bool IsDirty { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsDirty As Boolean
  overload: Sdl.DesktopEditor.EditorApi.IDocument.IsDirty*
  modifiers.csharp:
  - get
  - set
- uid: Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer
  commentId: P:Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer
  id: UndoBuffer
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: UndoBuffer
  nameWithType: IDocument.UndoBuffer
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer
  type: Property
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThe Undo/Redo buffer used for editing operations on the document content.\n"
  remarks: >-
    Note: There is no need to go through the undo buffer to invoke

    the &apos;Undo&apos; and &apos;Redo&apos; commands for the editor. If the edit control is available it is

    preferable to call <xref href="Sdl.DesktopEditor.EditorApi.IEditControl.Undo" data-throw-if-not-resolved="false"></xref> and <xref href="Sdl.DesktopEditor.EditorApi.IEditControl.Redo" data-throw-if-not-resolved="false"></xref>

    directly as this will allow the control to update user selection and caret positioning.
  syntax:
    content: IUndoBuffer UndoBuffer { get; }
    parameters: []
    return:
      type: Sdl.DesktopEditor.EditorApi.IUndoBuffer
    content.vb: ReadOnly Property UndoBuffer As IUndoBuffer
  overload: Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.DesktopEditor.EditorApi.IDocument.ContentChanged
  commentId: E:Sdl.DesktopEditor.EditorApi.IDocument.ContentChanged
  id: ContentChanged
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: ContentChanged
  nameWithType: IDocument.ContentChanged
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.ContentChanged
  type: Event
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nFired when content in the document is changed in any way.\n"
  remarks: "\n<p>\nThis event is typcially fired immediately when the content is changed, which\ncan be before the controls displaying the content have been updated.\n</p>\n"
  syntax:
    content: event EventHandler<DocumentContentChangedEventArgs> ContentChanged
    return:
      type: System.EventHandler{Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs}
    content.vb: Event ContentChanged As EventHandler(Of DocumentContentChangedEventArgs)
- uid: Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted
  commentId: E:Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted
  id: AfterEditOperationAborted
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: AfterEditOperationAborted
  nameWithType: IDocument.AfterEditOperationAborted
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted
  type: Event
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nIf an edit operation in the control is aborted (i.e. an exception is thrown)\nthis event will be fired after the corresponding composite operation has been \nrolled back.\n"
  syntax:
    content: event EventHandler<EditOperationAbortedEventArgs> AfterEditOperationAborted
    return:
      type: System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs}
    content.vb: Event AfterEditOperationAborted As EventHandler(Of EditOperationAbortedEventArgs)
- uid: Sdl.DesktopEditor.EditorApi.IDocument.EditOperationCompleting
  commentId: E:Sdl.DesktopEditor.EditorApi.IDocument.EditOperationCompleting
  id: EditOperationCompleting
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: EditOperationCompleting
  nameWithType: IDocument.EditOperationCompleting
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.EditOperationCompleting
  type: Event
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThis event is fired when a (composite) edit operation is completing. You can\nhandle this event to determine what changes are allowed in the edit control,\nby examining the edit operations (e.g. using a visitor) and throwing a \n<xref href=\"Sdl.DesktopEditor.EditorApi.InvalidEditOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the changes are not to your liking.\n"
  remarks: "\n<p>\nThe message of the <xref href=\"Sdl.DesktopEditor.EditorApi.InvalidEditOperationException\" data-throw-if-not-resolved=\"false\"></xref> is passed to the \n<xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted\" data-throw-if-not-resolved=\"false\"></xref> event\nand may be shown to the user to explain why the edit was not permitted.\n</p>\n<p>\nAvoid throwing exceptions of other types in this event handler. \nIf an exception of another type is thrown the operation will still be aborted, but\nthe message passed to <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted\" data-throw-if-not-resolved=\"false\"></xref> \nwill be what <code>System.Exception.ToString()</code> returns, which cannot be considered user friendly.\n</p>\n<p>\nImportant: Do not call <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref> from this event handler. \nThat could yield unpredictable results since the operation is completing as a result of a \ncall to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> (or a similar internal mechanism inside\nthe edit control implementation) and the number of calls to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nmust always match the number of calls to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> plus\nthe number of calls to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: event EventHandler<EditOperationCompletingEventArgs> EditOperationCompleting
    return:
      type: System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs}
    content.vb: Event EditOperationCompleting As EventHandler(Of EditOperationCompletingEventArgs)
- uid: Sdl.DesktopEditor.EditorApi.IDocument.EditOperationStarting
  commentId: E:Sdl.DesktopEditor.EditorApi.IDocument.EditOperationStarting
  id: EditOperationStarting
  parent: Sdl.DesktopEditor.EditorApi.IDocument
  langs:
  - csharp
  - vb
  name: EditOperationStarting
  nameWithType: IDocument.EditOperationStarting
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.EditOperationStarting
  type: Event
  source:
    path: Sdl.DesktopEditor.EditorApi
    isExternal: true
  assemblies:
  - Sdl.DesktopEditor.EditorApi
  namespace: Sdl.DesktopEditor.EditorApi
  summary: "\nThis event is fired when a (composite) edit operation is started, there are no changes done at\nthis moment to the internal document structure. You can handle this event to determine what changes\nare allowed in the edit control or do last minute modifications before new content is interted/deleted modified,\nby examining the edit operations (e.g. using a visitor) and throwing a \n<xref href=\"Sdl.DesktopEditor.EditorApi.InvalidEditOperationException\" data-throw-if-not-resolved=\"false\"></xref> if the changes are not to your liking.\n"
  remarks: "\n<p>\nThe message of the <xref href=\"Sdl.DesktopEditor.EditorApi.InvalidEditOperationException\" data-throw-if-not-resolved=\"false\"></xref> is passed to the \n<xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted\" data-throw-if-not-resolved=\"false\"></xref> event\nand may be shown to the user to explain why the edit was not permitted.\n</p>\n<p>\nAvoid throwing exceptions of other types in this event handler. \nIf an exception of another type is thrown the operation will still be aborted, but\nthe message passed to <xref href=\"Sdl.DesktopEditor.EditorApi.IDocument.AfterEditOperationAborted\" data-throw-if-not-resolved=\"false\"></xref> \nwill be what <code>System.Exception.ToString()</code> returns, which cannot be considered user friendly.\n</p>\n<p>\nImportant: Do not call <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref> from this event handler. \nThat could yield unpredictable results since the operation is completing as a result of a \ncall to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> (or a similar internal mechanism inside\nthe edit control implementation) and the number of calls to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.BeginCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nmust always match the number of calls to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.EndCompositeOperation\" data-throw-if-not-resolved=\"false\"></xref> plus\nthe number of calls to <xref href=\"Sdl.DesktopEditor.EditorApi.IUndoBuffer.AbortCompositeOperation(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  syntax:
    content: event EventHandler<EditOperationCompletingEventArgs> EditOperationStarting
    return:
      type: System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs}
    content.vb: Event EditOperationStarting As EventHandler(Of EditOperationCompletingEventArgs)
references:
- uid: Sdl.DesktopEditor.EditorApi
  commentId: N:Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: Sdl.DesktopEditor.EditorApi
  nameWithType: Sdl.DesktopEditor.EditorApi
  fullName: Sdl.DesktopEditor.EditorApi
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  parent: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  definition: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  name: ForWindowFromFrameworkElement(Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  commentId: M:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
  isExternal: true
  name: ForWindowFromFrameworkElement(Object, Action<Window>)
  nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action<Window>)
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action<System.Windows.Window>)
  nameWithType.vb: WindowsControlUtils.ForWindowFromFrameworkElement(Object, Action(Of Window))
  fullName.vb: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object, System.Action(Of System.Windows.Window))
  name.vb: ForWindowFromFrameworkElement(Object, Action(Of Window))
  spec.csharp:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement(System.Object,System.Action{System.Windows.Window})
    name: ForWindowFromFrameworkElement
    nameWithType: WindowsControlUtils.ForWindowFromFrameworkElement
    fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils.ForWindowFromFrameworkElement
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Windows.Window
    name: Window
    nameWithType: Window
    fullName: System.Windows.Window
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  commentId: T:Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
  parent: Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: WindowsControlUtils
  nameWithType: WindowsControlUtils
  fullName: Sdl.Desktop.Platform.Controls.Controls.WindowsControlUtils
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Desktop.Platform.Controls.Controls
  commentId: N:Sdl.Desktop.Platform.Controls.Controls
  isExternal: true
  name: Sdl.Desktop.Platform.Controls.Controls
  nameWithType: Sdl.Desktop.Platform.Controls.Controls
  fullName: Sdl.Desktop.Platform.Controls.Controls
- uid: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange
  isExternal: true
  name: MoveActiveRange
  nameWithType: IDocument.MoveActiveRange
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.MoveActiveRange
- uid: Sdl.DesktopEditor.EditorApi.ContentRange
  commentId: T:Sdl.DesktopEditor.EditorApi.ContentRange
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: ContentRange
  nameWithType: ContentRange
  fullName: Sdl.DesktopEditor.EditorApi.ContentRange
- uid: Sdl.DesktopEditor.EditorApi.IContentSelection
  commentId: T:Sdl.DesktopEditor.EditorApi.IContentSelection
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IContentSelection
  nameWithType: IContentSelection
  fullName: Sdl.DesktopEditor.EditorApi.IContentSelection
- uid: Sdl.DesktopEditor.EditorApi.IDocument.Delete*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.Delete
  isExternal: true
  name: Delete
  nameWithType: IDocument.Delete
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.Delete
- uid: Sdl.DesktopEditor.EditorApi.IDocument.Replace*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.Replace
  isExternal: true
  name: Replace
  nameWithType: IDocument.Replace
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.Replace
- uid: Sdl.DesktopEditor.EditorApi.IDocumentFragment
  commentId: T:Sdl.DesktopEditor.EditorApi.IDocumentFragment
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IDocumentFragment
  nameWithType: IDocumentFragment
  fullName: Sdl.DesktopEditor.EditorApi.IDocumentFragment
- uid: Sdl.DesktopEditor.EditorApi.IDocument.Copy*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.Copy
  isExternal: true
  name: Copy
  nameWithType: IDocument.Copy
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.Copy
- uid: Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText
  isExternal: true
  name: CopyAsText
  nameWithType: IDocument.CopyAsText
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.CopyAsText
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange
  isExternal: true
  name: ActiveRange
  nameWithType: IDocument.ActiveRange
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.ActiveRange
- uid: Sdl.DesktopEditor.EditorApi.IDocument.RootContainer*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.RootContainer
  isExternal: true
  name: RootContainer
  nameWithType: IDocument.RootContainer
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.RootContainer
- uid: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
  commentId: T:Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IAbstractContainerNode
  nameWithType: IAbstractContainerNode
  fullName: Sdl.DesktopEditor.EditorApi.IAbstractContainerNode
- uid: Sdl.DesktopEditor.EditorApi.IDocument.IsDirty*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.IsDirty
  isExternal: true
  name: IsDirty
  nameWithType: IDocument.IsDirty
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.IsDirty
- uid: Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer*
  commentId: Overload:Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer
  isExternal: true
  name: UndoBuffer
  nameWithType: IDocument.UndoBuffer
  fullName: Sdl.DesktopEditor.EditorApi.IDocument.UndoBuffer
- uid: Sdl.DesktopEditor.EditorApi.IUndoBuffer
  commentId: T:Sdl.DesktopEditor.EditorApi.IUndoBuffer
  parent: Sdl.DesktopEditor.EditorApi
  isExternal: true
  name: IUndoBuffer
  nameWithType: IUndoBuffer
  fullName: Sdl.DesktopEditor.EditorApi.IUndoBuffer
- uid: System.EventHandler{Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs}
  commentId: T:System.EventHandler{Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<DocumentContentChangedEventArgs>
  nameWithType: EventHandler<DocumentContentChangedEventArgs>
  fullName: System.EventHandler<Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs>
  nameWithType.vb: EventHandler(Of DocumentContentChangedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs)
  name.vb: EventHandler(Of DocumentContentChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs
    name: DocumentContentChangedEventArgs
    nameWithType: DocumentContentChangedEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs
    name: DocumentContentChangedEventArgs
    nameWithType: DocumentContentChangedEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.DocumentContentChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs}
  commentId: T:System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EditOperationAbortedEventArgs>
  nameWithType: EventHandler<EditOperationAbortedEventArgs>
  fullName: System.EventHandler<Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs>
  nameWithType.vb: EventHandler(Of EditOperationAbortedEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs)
  name.vb: EventHandler(Of EditOperationAbortedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs
    name: EditOperationAbortedEventArgs
    nameWithType: EditOperationAbortedEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs
    name: EditOperationAbortedEventArgs
    nameWithType: EditOperationAbortedEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.EditOperationAbortedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs}
  commentId: T:System.EventHandler{Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EditOperationCompletingEventArgs>
  nameWithType: EventHandler<EditOperationCompletingEventArgs>
  fullName: System.EventHandler<Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs>
  nameWithType.vb: EventHandler(Of EditOperationCompletingEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs)
  name.vb: EventHandler(Of EditOperationCompletingEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs
    name: EditOperationCompletingEventArgs
    nameWithType: EditOperationCompletingEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs
    name: EditOperationCompletingEventArgs
    nameWithType: EditOperationCompletingEventArgs
    fullName: Sdl.DesktopEditor.EditorApi.EditOperationCompletingEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
