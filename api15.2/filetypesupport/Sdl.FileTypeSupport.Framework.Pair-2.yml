### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.Pair`2
  commentId: T:Sdl.FileTypeSupport.Framework.Pair`2
  id: Pair`2
  parent: Sdl.FileTypeSupport.Framework
  children:
  - Sdl.FileTypeSupport.Framework.Pair`2.#ctor(`0,`1)
  - Sdl.FileTypeSupport.Framework.Pair`2.Clone
  - Sdl.FileTypeSupport.Framework.Pair`2.Equals(System.Object)
  - Sdl.FileTypeSupport.Framework.Pair`2.First
  - Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode
  - Sdl.FileTypeSupport.Framework.Pair`2.Second
  langs:
  - csharp
  - vb
  name: Pair<FirstType, SecondType>
  nameWithType: Pair<FirstType, SecondType>
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nTwo objects as one.\nUse this e.g. to store objects that belong together in a single collection.\n"
  syntax:
    content: 'public class Pair<FirstType, SecondType> : ICloneable'
    typeParameters:
    - id: FirstType
    - id: SecondType
    content.vb: >-
      Public Class Pair(Of FirstType, SecondType)
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Pair(Of FirstType, SecondType)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType)
  name.vb: Pair(Of FirstType, SecondType)
- uid: Sdl.FileTypeSupport.Framework.Pair`2.#ctor(`0,`1)
  commentId: M:Sdl.FileTypeSupport.Framework.Pair`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: Sdl.FileTypeSupport.Framework.Pair`2
  langs:
  - csharp
  - vb
  name: Pair(FirstType, SecondType)
  nameWithType: Pair<FirstType, SecondType>.Pair(FirstType, SecondType)
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Pair(FirstType, SecondType)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nContruct a new pair form the specifiec objects.\n"
  syntax:
    content: public Pair(FirstType first, SecondType second)
    parameters:
    - id: first
      type: '{FirstType}'
    - id: second
      type: '{SecondType}'
    content.vb: Public Sub New(first As FirstType, second As SecondType)
  overload: Sdl.FileTypeSupport.Framework.Pair`2.#ctor*
  nameWithType.vb: Pair(Of FirstType, SecondType).Pair(FirstType, SecondType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Pair(FirstType, SecondType)
- uid: Sdl.FileTypeSupport.Framework.Pair`2.Equals(System.Object)
  commentId: M:Sdl.FileTypeSupport.Framework.Pair`2.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.FileTypeSupport.Framework.Pair`2
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Pair<FirstType, SecondType>.Equals(Object)
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Equals(System.Object)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\n<code>true</code> if First and Second are equal for both objects.\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.FileTypeSupport.Framework.Pair`2.Equals*
  nameWithType.vb: Pair(Of FirstType, SecondType).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Equals(System.Object)
- uid: Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode
  commentId: M:Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode
  id: GetHashCode
  parent: Sdl.FileTypeSupport.Framework.Pair`2
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Pair<FirstType, SecondType>.GetHashCode()
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.GetHashCode()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nReturns a combiniation of the hash codes of First and Second.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode*
  nameWithType.vb: Pair(Of FirstType, SecondType).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).GetHashCode()
- uid: Sdl.FileTypeSupport.Framework.Pair`2.Clone
  commentId: M:Sdl.FileTypeSupport.Framework.Pair`2.Clone
  id: Clone
  parent: Sdl.FileTypeSupport.Framework.Pair`2
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Pair<FirstType, SecondType>.Clone()
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Clone()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nClone the pair. If a type implements ICloneable it is deep cloned, otherwise a shallow clone is used.\n"
  syntax:
    content: public virtual object Clone()
    return:
      type: System.Object
    content.vb: Public Overridable Function Clone As Object
  overload: Sdl.FileTypeSupport.Framework.Pair`2.Clone*
  implements:
  - System.ICloneable.Clone
  nameWithType.vb: Pair(Of FirstType, SecondType).Clone()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Clone()
- uid: Sdl.FileTypeSupport.Framework.Pair`2.First
  commentId: P:Sdl.FileTypeSupport.Framework.Pair`2.First
  id: First
  parent: Sdl.FileTypeSupport.Framework.Pair`2
  langs:
  - csharp
  - vb
  name: First
  nameWithType: Pair<FirstType, SecondType>.First
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.First
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nThe first of the two objects in the pair.\n"
  syntax:
    content: public FirstType First { get; set; }
    parameters: []
    return:
      type: '{FirstType}'
    content.vb: Public Property First As FirstType
  overload: Sdl.FileTypeSupport.Framework.Pair`2.First*
  nameWithType.vb: Pair(Of FirstType, SecondType).First
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).First
- uid: Sdl.FileTypeSupport.Framework.Pair`2.Second
  commentId: P:Sdl.FileTypeSupport.Framework.Pair`2.Second
  id: Second
  parent: Sdl.FileTypeSupport.Framework.Pair`2
  langs:
  - csharp
  - vb
  name: Second
  nameWithType: Pair<FirstType, SecondType>.Second
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Second
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nThe second of the two objects in the pair.\n"
  syntax:
    content: public SecondType Second { get; set; }
    parameters: []
    return:
      type: '{SecondType}'
    content.vb: Public Property Second As SecondType
  overload: Sdl.FileTypeSupport.Framework.Pair`2.Second*
  nameWithType.vb: Pair(Of FirstType, SecondType).Second
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Second
references:
- uid: Sdl.FileTypeSupport.Framework
  commentId: N:Sdl.FileTypeSupport.Framework
  isExternal: true
  name: Sdl.FileTypeSupport.Framework
  nameWithType: Sdl.FileTypeSupport.Framework
  fullName: Sdl.FileTypeSupport.Framework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.Pair`2.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Pair`2.#ctor
  isExternal: true
  name: Pair
  nameWithType: Pair<FirstType, SecondType>.Pair
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Pair
  nameWithType.vb: Pair(Of FirstType, SecondType).Pair
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Pair
- uid: '{FirstType}'
  commentId: '!:FirstType'
  definition: FirstType
  name: FirstType
  nameWithType: FirstType
  fullName: FirstType
- uid: '{SecondType}'
  commentId: '!:SecondType'
  definition: SecondType
  name: SecondType
  nameWithType: SecondType
  fullName: SecondType
- uid: FirstType
  name: FirstType
  nameWithType: FirstType
  fullName: FirstType
- uid: SecondType
  name: SecondType
  nameWithType: SecondType
  fullName: SecondType
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Pair`2.Equals*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Pair`2.Equals
  isExternal: true
  name: Equals
  nameWithType: Pair<FirstType, SecondType>.Equals
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Equals
  nameWithType.vb: Pair(Of FirstType, SecondType).Equals
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Pair`2.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: Pair<FirstType, SecondType>.GetHashCode
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.GetHashCode
  nameWithType.vb: Pair(Of FirstType, SecondType).GetHashCode
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.FileTypeSupport.Framework.Pair`2.Clone*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Pair`2.Clone
  isExternal: true
  name: Clone
  nameWithType: Pair<FirstType, SecondType>.Clone
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Clone
  nameWithType.vb: Pair(Of FirstType, SecondType).Clone
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Pair`2.First*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Pair`2.First
  isExternal: true
  name: First
  nameWithType: Pair<FirstType, SecondType>.First
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.First
  nameWithType.vb: Pair(Of FirstType, SecondType).First
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).First
- uid: Sdl.FileTypeSupport.Framework.Pair`2.Second*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Pair`2.Second
  isExternal: true
  name: Second
  nameWithType: Pair<FirstType, SecondType>.Second
  fullName: Sdl.FileTypeSupport.Framework.Pair<FirstType, SecondType>.Second
  nameWithType.vb: Pair(Of FirstType, SecondType).Second
  fullName.vb: Sdl.FileTypeSupport.Framework.Pair(Of FirstType, SecondType).Second
