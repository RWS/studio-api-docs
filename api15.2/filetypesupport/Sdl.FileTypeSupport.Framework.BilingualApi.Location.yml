### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.Location
  id: Location
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  children:
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Boolean)
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals(System.Object)
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling
  - Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: Location
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nRepresents a location inside a possibly nested <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
  remarks: "\n<p>\nThe parent in the top level location (index 0) is the root container (often IParagraph or ISegment).\nThe <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel\" data-throw-if-not-resolved=\"false\"></xref> is the location in the lowest level.\n</p>\n"
  syntax:
    content: 'public class Location : ICloneable'
    content.vb: >-
      Public Class Location
          Implements ICloneable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor
  id: '#ctor'
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Location()
  nameWithType: Location.Location()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Location()
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nDefault constructor\n"
  syntax:
    content: public Location()
    content.vb: Public Sub New
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)
  id: '#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)'
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Location(LevelLocation)
  nameWithType: Location.Location(LevelLocation)
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Location(Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nInitializes the location with one level only.\nThis generates a location that is equivalent to the passed-in LevelLocation.\n"
  syntax:
    content: public Location(LevelLocation location)
    parameters:
    - id: location
      type: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
      description: must not be null
    content.vb: Public Sub New(location As LevelLocation)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Boolean)
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Boolean)
  id: '#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,System.Boolean)'
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Location(IAbstractMarkupDataContainer, Boolean)
  nameWithType: Location.Location(IAbstractMarkupDataContainer, Boolean)
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Location(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer, System.Boolean)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nInitialize the location to the first or last position in the specified root container.\n"
  syntax:
    content: public Location(IAbstractMarkupDataContainer rootContainer, bool firstLocation)
    parameters:
    - id: rootContainer
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer
    - id: firstLocation
      type: System.Boolean
      description: >-
        Indicates whether the location should be initialized to the

        first or the last available location of the root container. Pass true to initialize

        it to the first location, and false to initialize it to the last location.
    content.vb: Public Sub New(rootContainer As IAbstractMarkupDataContainer, firstLocation As Boolean)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)
  id: '#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer,Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)'
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Location(IAbstractMarkupDataContainer, IAbstractMarkupData)
  nameWithType: Location.Location(IAbstractMarkupDataContainer, IAbstractMarkupData)
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Location(Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer, Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nCreates a location that corresponds to the position of the item with regards to the\nspecified root container.\n"
  syntax:
    content: public Location(IAbstractMarkupDataContainer rootContainer, IAbstractMarkupData itemAtLocation)
    parameters:
    - id: rootContainer
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer
      description: Must not be null
    - id: itemAtLocation
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData
      description: >-
        Must be an item somewhere inside the root container, i.e.

        the root container must be an ancestor to the item.
    content.vb: Public Sub New(rootContainer As IAbstractMarkupDataContainer, itemAtLocation As IAbstractMarkupData)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  id: '#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)'
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Location(Location)
  nameWithType: Location.Location(Location)
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Location(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nCreates a deep clone\n"
  syntax:
    content: public Location(Location other)
    parameters:
    - id: other
      type: Sdl.FileTypeSupport.Framework.BilingualApi.Location
    content.vb: Public Sub New(other As Location)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext
  id: MoveNext
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: Location.MoveNext()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nAdvances to the next possible location. This will move to\nthe next available position according to the following priority list:\n<ul><li></li><li></li><li></li></ul>\nIf no such location is available (i.e. the location is currently behind the last item in the top level), \nthe location is not changed, and the method returns false.\n\nIf the location is invalid, the behavior is undefined and exceptions may be thrown.\n"
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
      description: True if location was successfully advanced to the next possible position.
    content.vb: Public Function MoveNext As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious
  id: MovePrevious
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MovePrevious()
  nameWithType: Location.MovePrevious()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nMoves the location to the preceding available position according to the following priority list:\n<ul><li></li><li></li><li></li></ul>\nIf no parent is available (i.e. location is before the first item in the top level), the location\nis not changed, and the method returns false.\n"
  syntax:
    content: public bool MovePrevious()
    return:
      type: System.Boolean
      description: True if the location was successfully moved to a previous position.
    content.vb: Public Function MovePrevious As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling
  id: MoveNextSibling
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MoveNextSibling()
  nameWithType: Location.MoveNextSibling()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nAdvance the location to the next sibling position in the current bottom layer.\n\nIf no next sibling position is available (i.e. the location is already behind the\nlast item in the parent collection), the location is not changed, and this method\nreturns false.\n"
  syntax:
    content: public bool MoveNextSibling()
    return:
      type: System.Boolean
      description: True if the location was changed successfully
    content.vb: Public Function MoveNextSibling As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling
  id: MovePreviousSibling
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MovePreviousSibling()
  nameWithType: Location.MovePreviousSibling()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nMoves the location to the preceding sibling position in the current bottom layer.\n\nIf no previous sibling location is available (i.e. the current location is already\nat the start of the parent collection), the location is not changed, and this method\nreturns false.\n"
  syntax:
    content: public bool MovePreviousSibling()
    return:
      type: System.Boolean
      description: True if the location was changed successfully
    content.vb: Public Function MovePreviousSibling As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent
  id: MoveParent
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MoveParent()
  nameWithType: Location.MoveParent()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nChanges the location to refer to the position just before the parent of the current \nbottom level location.\n\nIf no parent location is available (i.e. the location is already in the top layer),\nthe location is not changed, and this method returns false.\n"
  syntax:
    content: public bool MoveParent()
    return:
      type: System.Boolean
      description: True if the location was changed successfully
    content.vb: Public Function MoveParent As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild
  id: MoveFirstChild
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MoveFirstChild()
  nameWithType: Location.MoveFirstChild()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nChanges the location to refer to the position just before the first child node\nof the item at the current location.\n\nIf no child node is available (i.e. the current location does not refer to a\nnode that is an IAbstractMarkupDataContainer), the location is not changed, and \nthis method returns false.\n\nNote that if the item at the current location is a container, but it has\nno content, the location is still advanced to a location at the index 0 inside\nthe collection, as it is possible to insert new content there.\n"
  syntax:
    content: public bool MoveFirstChild()
    return:
      type: System.Boolean
      description: True if the location was changed successfully
    content.vb: Public Function MoveFirstChild As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild
  id: MoveLastChild
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: MoveLastChild()
  nameWithType: Location.MoveLastChild()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nChanges the location to just behind the last child node of the item\nat the current location.\n\nIf no child node is available (i.e. the current location does not refer to a\nnode that is an IAbstractMarkupDataContainer), the location is not changed, and \nthis method returns false.\n\nNote that if the item at the current location is a container, but it has\nno content, the location is still advanced to a location at the index 0 inside\nthe collection, as it is possible to insert new content there.\n"
  syntax:
    content: public bool MoveLastChild()
    return:
      type: System.Boolean
      description: True if the location was changed successfully
    content.vb: Public Function MoveLastChild As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone
  id: Clone
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Location.Clone()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nCreates a deep clone of this object.\n"
  syntax:
    content: public object Clone()
    return:
      type: System.Object
    content.vb: Public Function Clone As Object
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone*
  implements:
  - System.ICloneable.Clone
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals(System.Object)
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals(System.Object)
  id: Equals(System.Object)
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Location.Equals(Object)
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals(System.Object)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nReturns <code>true</code> if this location refers to the same position as the other location.\n"
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode
  id: GetHashCode
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Location.GetHashCode()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nReturns the hash code of the levels in this location.\n"
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString
  commentId: M:Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString
  id: ToString
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Location.ToString()
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nOverridden to provide more useful information while debugging\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels
  id: Levels
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Levels
  nameWithType: Location.Levels
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nProvides access to the actual collection of levels that this location represents.\n"
  syntax:
    content: public List<LevelLocation> Levels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation}
    content.vb: Public ReadOnly Property Levels As List(Of LevelLocation)
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd
  id: IsAtEnd
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: IsAtEnd
  nameWithType: Location.IsAtEnd
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\n<code>True</code> if the <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method \nreturns <code>false</code>.\n"
  syntax:
    content: public bool IsAtEnd { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAtEnd As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart
  id: IsAtStart
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: IsAtStart
  nameWithType: Location.IsAtStart
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\n<code>True</code> if the <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious\" data-throw-if-not-resolved=\"false\"></xref> method \nreturns <code>false</code>.\n"
  syntax:
    content: public bool IsAtStart { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAtStart As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel
  id: BottomLevel
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: BottomLevel
  nameWithType: Location.BottomLevel
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nQuick access to the most specific level\n"
  syntax:
    content: public LevelLocation BottomLevel { get; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
    content.vb: Public ReadOnly Property BottomLevel As LevelLocation
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation
  id: ItemAtLocation
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: ItemAtLocation
  nameWithType: Location.ItemAtLocation
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nReturns the item at the location specified by the bottom level.\n\nIf the location is not valid, or if there is not item at the location\n(i.e. if it is a location after the last element in a collection), this\nproperty returns null.\n"
  syntax:
    content: public IAbstractMarkupData ItemAtLocation { get; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData
    content.vb: Public ReadOnly Property ItemAtLocation As IAbstractMarkupData
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth
  id: Depth
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: Depth
  nameWithType: Location.Depth
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nReturns the number of levels in the location.\n"
  syntax:
    content: public int Depth { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Depth As Integer
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid
  commentId: P:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid
  id: IsValid
  parent: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  langs:
  - csharp
  - vb
  name: IsValid
  nameWithType: Location.IsValid
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.BilingualApi
  summary: "\nTrue if all levels are valid locations and each\nlevel corresponds to the location defined in the parent layer.\n"
  syntax:
    content: public bool IsValid { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsValid As Boolean
  overload: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.FileTypeSupport.Framework.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ICloneable
  commentId: T:System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.#ctor
  isExternal: true
  name: Location
  nameWithType: Location.Location
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Location
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: LevelLocation
  nameWithType: LevelLocation
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IAbstractMarkupDataContainer
  nameWithType: IAbstractMarkupDataContainer
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupDataContainer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: IAbstractMarkupData
  nameWithType: IAbstractMarkupData
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.IAbstractMarkupData
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.Location
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Location
  nameWithType: Location
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext
  isExternal: true
  name: MoveNext
  nameWithType: Location.MoveNext
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious
  isExternal: true
  name: MovePrevious
  nameWithType: Location.MovePrevious
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling
  isExternal: true
  name: MoveNextSibling
  nameWithType: Location.MoveNextSibling
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNextSibling
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling
  isExternal: true
  name: MovePreviousSibling
  nameWithType: Location.MovePreviousSibling
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePreviousSibling
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent
  isExternal: true
  name: MoveParent
  nameWithType: Location.MoveParent
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveParent
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild
  isExternal: true
  name: MoveFirstChild
  nameWithType: Location.MoveFirstChild
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveFirstChild
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild
  isExternal: true
  name: MoveLastChild
  nameWithType: Location.MoveLastChild
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveLastChild
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone
  isExternal: true
  name: Clone
  nameWithType: Location.Clone
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Clone
- uid: System.ICloneable.Clone
  commentId: M:System.ICloneable.Clone
  parent: System.ICloneable
  isExternal: true
  name: Clone()
  nameWithType: ICloneable.Clone()
  fullName: System.ICloneable.Clone()
  spec.csharp:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ICloneable.Clone
    name: Clone
    nameWithType: ICloneable.Clone
    fullName: System.ICloneable.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals
  isExternal: true
  name: Equals
  nameWithType: Location.Equals
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode
  isExternal: true
  name: GetHashCode
  nameWithType: Location.GetHashCode
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString
  isExternal: true
  name: ToString
  nameWithType: Location.ToString
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels
  isExternal: true
  name: Levels
  nameWithType: Location.Levels
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Levels
- uid: System.Collections.Generic.List{Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation}
  commentId: T:System.Collections.Generic.List{Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<LevelLocation>
  nameWithType: List<LevelLocation>
  fullName: System.Collections.Generic.List<Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation>
  nameWithType.vb: List(Of LevelLocation)
  fullName.vb: System.Collections.Generic.List(Of Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation)
  name.vb: List(Of LevelLocation)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
    name: LevelLocation
    nameWithType: LevelLocation
    fullName: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
    name: LevelLocation
    nameWithType: LevelLocation
    fullName: Sdl.FileTypeSupport.Framework.BilingualApi.LevelLocation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd
  isExternal: true
  name: IsAtEnd
  nameWithType: Location.IsAtEnd
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtEnd
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart
  isExternal: true
  name: IsAtStart
  nameWithType: Location.IsAtStart
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsAtStart
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel
  isExternal: true
  name: BottomLevel
  nameWithType: Location.BottomLevel
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.BottomLevel
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation
  isExternal: true
  name: ItemAtLocation
  nameWithType: Location.ItemAtLocation
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.ItemAtLocation
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth
  isExternal: true
  name: Depth
  nameWithType: Location.Depth
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.Depth
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid*
  commentId: Overload:Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid
  isExternal: true
  name: IsValid
  nameWithType: Location.IsValid
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location.IsValid
