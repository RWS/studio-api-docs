### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.FileJanitor
  commentId: T:Sdl.FileTypeSupport.Framework.FileJanitor
  id: FileJanitor
  parent: Sdl.FileTypeSupport.Framework
  children:
  - Sdl.FileTypeSupport.Framework.FileJanitor.#ctor(System.String)
  - Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete
  - Sdl.FileTypeSupport.Framework.FileJanitor.Deleted
  - Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty
  - Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile
  - Sdl.FileTypeSupport.Framework.FileJanitor.Dispose
  - Sdl.FileTypeSupport.Framework.FileJanitor.Dispose(System.Boolean)
  - Sdl.FileTypeSupport.Framework.FileJanitor.FilePath
  - Sdl.FileTypeSupport.Framework.FileJanitor.Finalize
  langs:
  - csharp
  - vb
  name: FileJanitor
  nameWithType: FileJanitor
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nDeletes the associated file when this object is finalized or disposed.\n"
  remarks: "\n<p>\nProvides a convenient way to manage session-scope temporary files. Make sure that\nall objects needing access to the file holds a reference to the corresponding FileJanitor object.\nWhen the file janitor is garbage collected or disposed the file is deleted.\n</p>\n<p>\nThe class also implements <code>IDisposable</code> interface. The\nfile is deleted in the <code>Dispose()</code> implementation.\n</p>\n<p>\nIf the file for some reason cannot be deleted no error is raised.\n</p>\n<p>\nNote that the .NET Framework does not guarantee that finalizers will be called,\nso there is always a possibility that the file does not get deleted.\n</p>\n"
  syntax:
    content: 'public class FileJanitor : IDisposable'
    content.vb: >-
      Public Class FileJanitor
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.#ctor(System.String)
  commentId: M:Sdl.FileTypeSupport.Framework.FileJanitor.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: FileJanitor(String)
  nameWithType: FileJanitor.FileJanitor(String)
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.FileJanitor(System.String)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nAssociates the janitor with the specified file.\n"
  syntax:
    content: public FileJanitor(string filePath)
    parameters:
    - id: filePath
      type: System.String
    content.vb: Public Sub New(filePath As String)
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Finalize
  commentId: M:Sdl.FileTypeSupport.Framework.FileJanitor.Finalize
  id: Finalize
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: FileJanitor.Finalize()
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Finalize()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nDeletes the file, if possible.\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose(System.Boolean)
  commentId: M:Sdl.FileTypeSupport.Framework.FileJanitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: FileJanitor.Dispose(Boolean)
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose(System.Boolean)
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nImplementation of the recommended dispose protocol. Deletes the file if possible.\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true if this method is called from IDisposable.Dispose() and false if called from Finalizer
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile
  commentId: M:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile
  id: DeleteFile
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: DeleteFile()
  nameWithType: FileJanitor.DeleteFile()
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nDelete the file, if possible. Also deletes the directory if it is empty and <xref href=\"Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty\" data-throw-if-not-resolved=\"false\"></xref> is true.\n"
  syntax:
    content: public virtual void DeleteFile()
    content.vb: Public Overridable Sub DeleteFile
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose
  commentId: M:Sdl.FileTypeSupport.Framework.FileJanitor.Dispose
  id: Dispose
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FileJanitor.Dispose()
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nDeletes the file, if it exists.\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.FilePath
  commentId: P:Sdl.FileTypeSupport.Framework.FileJanitor.FilePath
  id: FilePath
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: FilePath
  nameWithType: FileJanitor.FilePath
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.FilePath
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nFull path to the file to be deleted.\n"
  syntax:
    content: public string FilePath { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FilePath As String
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.FilePath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty
  commentId: P:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty
  id: DeleteDirectoryIfEmpty
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: DeleteDirectoryIfEmpty
  nameWithType: FileJanitor.DeleteDirectoryIfEmpty
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nIf <code>true</code> a check will be made after the file\nhas been deleted, and if no other files exist in the\nsame directory that directory will also be deleted.\n"
  syntax:
    content: public bool DeleteDirectoryIfEmpty { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property DeleteDirectoryIfEmpty As Boolean
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete
  commentId: P:Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete
  id: CancelDelete
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: CancelDelete
  nameWithType: FileJanitor.CancelDelete
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nIf <code>true</code> then this Janitored file is not deleted when this instance is disposed.\n"
  syntax:
    content: public bool CancelDelete { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CancelDelete As Boolean
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Deleted
  commentId: P:Sdl.FileTypeSupport.Framework.FileJanitor.Deleted
  id: Deleted
  parent: Sdl.FileTypeSupport.Framework.FileJanitor
  langs:
  - csharp
  - vb
  name: Deleted
  nameWithType: FileJanitor.Deleted
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Deleted
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework
  summary: "\nIf <code>true</code> then this managed file was sucessfully deleted.\n"
  syntax:
    content: public bool Deleted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Deleted As Boolean
  overload: Sdl.FileTypeSupport.Framework.FileJanitor.Deleted*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.FileTypeSupport.Framework
  commentId: N:Sdl.FileTypeSupport.Framework
  isExternal: true
  name: Sdl.FileTypeSupport.Framework
  nameWithType: Sdl.FileTypeSupport.Framework
  fullName: Sdl.FileTypeSupport.Framework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.#ctor
  isExternal: true
  name: FileJanitor
  nameWithType: FileJanitor.FileJanitor
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.FileJanitor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Finalize*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.Finalize
  isExternal: true
  name: Finalize
  nameWithType: FileJanitor.Finalize
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Finalize
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.Dispose
  isExternal: true
  name: Dispose
  nameWithType: FileJanitor.Dispose
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Dispose
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile
  isExternal: true
  name: DeleteFile
  nameWithType: FileJanitor.DeleteFile
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteFile
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.FilePath*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.FilePath
  isExternal: true
  name: FilePath
  nameWithType: FileJanitor.FilePath
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.FilePath
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty
  isExternal: true
  name: DeleteDirectoryIfEmpty
  nameWithType: FileJanitor.DeleteDirectoryIfEmpty
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.DeleteDirectoryIfEmpty
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete
  isExternal: true
  name: CancelDelete
  nameWithType: FileJanitor.CancelDelete
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.CancelDelete
- uid: Sdl.FileTypeSupport.Framework.FileJanitor.Deleted*
  commentId: Overload:Sdl.FileTypeSupport.Framework.FileJanitor.Deleted
  isExternal: true
  name: Deleted
  nameWithType: FileJanitor.Deleted
  fullName: Sdl.FileTypeSupport.Framework.FileJanitor.Deleted
