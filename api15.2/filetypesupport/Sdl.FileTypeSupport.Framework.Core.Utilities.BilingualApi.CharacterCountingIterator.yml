### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  commentId: T:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  id: CharacterCountingIterator
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  children:
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location,System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor},System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor})
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext
  - Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious
  langs:
  - csharp
  - vb
  name: CharacterCountingIterator
  nameWithType: CharacterCountingIterator
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  type: Class
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nIterator that counts characters of text and tag items\nas it is moved forward and backward through the content of a paragraph.\n"
  remarks: "\n<p>\nCharacters are counted in a similar fashion to how the content is\nrepresented in native API.\n</p>\n<p>\nMoving over a text item increments the count according to the number\nof characters that are found in the text.\n</p>\n<p>\nMoving over the start of a tag pair increments the count according to\nthe number of characters in the tag content of the start tag properties.\n</p>\n<p>\nMoving over the end of a tag pair increments the count according to \nthe number of characters in the tag content of the end tag properties.\n</p>\n<p>\nMoving over a placeholder tag increments the count according the \nnumber of characters in the tag content of the placeholder tag properties.\n</p>\n<p>\nMoving over a locked content node increments the count according to the number\nof characters that are present in all tags and text in the locked content (recursively).\n</p>\n<p>\nThis component is used by the framework for approximate mapping of locations \nbetween the bilingual content and the native output format.\n</p>\n"
  syntax:
    content: public class CharacterCountingIterator
    content.vb: Public Class CharacterCountingIterator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  id: '#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location)'
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: CharacterCountingIterator(Location)
  nameWithType: CharacterCountingIterator.CharacterCountingIterator(Location)
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCountingIterator(Sdl.FileTypeSupport.Framework.BilingualApi.Location)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nCreate the iterator with a specified start location. The root parent of the location\ndetermines the scope of the iteration. The iterator will not count past the end of the\ntop-level parent.\n"
  syntax:
    content: public CharacterCountingIterator(Location startLocation)
    parameters:
    - id: startLocation
      type: Sdl.FileTypeSupport.Framework.BilingualApi.Location
      description: >-
        The location passed to the iterator will be used and modified by the iterator.

        If you do not want the location to change, pass in a clone.
    content.vb: Public Sub New(startLocation As Location)
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location,System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor},System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor})
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location,System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor},System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor})
  id: '#ctor(Sdl.FileTypeSupport.Framework.BilingualApi.Location,System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor},System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor})'
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: CharacterCountingIterator(Location, Func<CharacterCountingIterator.ICharacterCountingVisitor>, Func<CharacterCountingIterator.ICharacterCountingVisitor>)
  nameWithType: CharacterCountingIterator.CharacterCountingIterator(Location, Func<CharacterCountingIterator.ICharacterCountingVisitor>, Func<CharacterCountingIterator.ICharacterCountingVisitor>)
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCountingIterator(Sdl.FileTypeSupport.Framework.BilingualApi.Location, System.Func<Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor>, System.Func<Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor>)
  type: Constructor
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nThis constructor overload allows a custom implementations of the \ncounter visitor implementations.\n"
  remarks: "\n<p>\nUse this constructor with factory methods to create your own versions of\nthe <xref href=\"Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.StartOfItemCharacterCounterVisitor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.EndOfItemCharacterCounterVisitor\" data-throw-if-not-resolved=\"false\"></xref>\nto customize the character counting algorithm.\n</p>\n"
  syntax:
    content: public CharacterCountingIterator(Location startLocation, Func<CharacterCountingIterator.ICharacterCountingVisitor> startCounterFactory, Func<CharacterCountingIterator.ICharacterCountingVisitor> endCounterFactory)
    parameters:
    - id: startLocation
      type: Sdl.FileTypeSupport.Framework.BilingualApi.Location
    - id: startCounterFactory
      type: System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor}
      description: "\n<p>\nFactory method to create the implementation of the visitor that\nis used to count characters at the start of container nodes.\n</p>\n"
    - id: endCounterFactory
      type: System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor}
      description: "\n<p>\nFactory method to create the implementation of the visitor that\nis used to count characters at the end of container nodes.\n</p>\n"
    content.vb: Public Sub New(startLocation As Location, startCounterFactory As Func(Of CharacterCountingIterator.ICharacterCountingVisitor), endCounterFactory As Func(Of CharacterCountingIterator.ICharacterCountingVisitor))
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor*
  nameWithType.vb: CharacterCountingIterator.CharacterCountingIterator(Location, Func(Of CharacterCountingIterator.ICharacterCountingVisitor), Func(Of CharacterCountingIterator.ICharacterCountingVisitor))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCountingIterator(Sdl.FileTypeSupport.Framework.BilingualApi.Location, System.Func(Of Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor), System.Func(Of Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor))
  name.vb: CharacterCountingIterator(Location, Func(Of CharacterCountingIterator.ICharacterCountingVisitor), Func(Of CharacterCountingIterator.ICharacterCountingVisitor))
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext
  id: MoveNext
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: CharacterCountingIterator.MoveNext()
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nIncrements the character count by the number of characters between\nthe current location and the next location, and advances the location one step \nby calling <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.Location.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public bool MoveNext()
    return:
      type: System.Boolean
    content.vb: Public Function MoveNext As Boolean
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious
  commentId: M:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious
  id: MovePrevious
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: MovePrevious()
  nameWithType: CharacterCountingIterator.MovePrevious()
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious()
  type: Method
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nDecrements the character count by the number of characters between\nthe current location and the next location, and moves to the previous\nlocation by calling <xref href=\"Sdl.FileTypeSupport.Framework.BilingualApi.Location.MovePrevious\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public bool MovePrevious()
    return:
      type: System.Boolean
    content.vb: Public Function MovePrevious As Boolean
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount
  id: CharacterCount
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: CharacterCount
  nameWithType: CharacterCountingIterator.CharacterCount
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nNumber of characters counted up to this location.\n"
  remarks: "\n<p>\nIf moving backwards of the start location, this may be a negative number.\n</p>\n<p>\nAssign to this property to reset the counter.\n</p>\n"
  syntax:
    content: public int CharacterCount { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property CharacterCount As Integer
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation
  id: CurrentLocation
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: CurrentLocation
  nameWithType: CharacterCountingIterator.CurrentLocation
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nThe current counting location\n"
  remarks: "\n<p>\nAssigning to this property has the effect of &quot;jumping&quot; to the new\nlocation without affecting the accumulated character count.\n</p>\n"
  syntax:
    content: public Location CurrentLocation { get; set; }
    parameters: []
    return:
      type: Sdl.FileTypeSupport.Framework.BilingualApi.Location
    content.vb: Public Property CurrentLocation As Location
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation
  id: CharactersToNextLocation
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: CharactersToNextLocation
  nameWithType: CharacterCountingIterator.CharactersToNextLocation
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nThe number of characters that that appear between the current\nlocation and the next available location.\n"
  remarks: "\n<p>\nThis property is 0 if no location is available after the current location.\n</p>\n"
  syntax:
    content: public int CharactersToNextLocation { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CharactersToNextLocation As Integer
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation
  commentId: P:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation
  id: CharactersToPreviousLocation
  parent: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator
  langs:
  - csharp
  - vb
  name: CharactersToPreviousLocation
  nameWithType: CharacterCountingIterator.CharactersToPreviousLocation
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core.Utilities
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core.Utilities
  namespace: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  summary: "\nThe number of characters that appear between the current location\nand the preceding location.\n"
  remarks: "\n<p>\nThis property returns 0 if no previous location exists.\n</p>\n"
  syntax:
    content: public int CharactersToPreviousLocation { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property CharactersToPreviousLocation As Integer
  overload: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.#ctor
  isExternal: true
  name: CharacterCountingIterator
  nameWithType: CharacterCountingIterator.CharacterCountingIterator
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCountingIterator
- uid: Sdl.FileTypeSupport.Framework.BilingualApi.Location
  commentId: T:Sdl.FileTypeSupport.Framework.BilingualApi.Location
  parent: Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Location
  nameWithType: Location
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi.Location
- uid: Sdl.FileTypeSupport.Framework.BilingualApi
  commentId: N:Sdl.FileTypeSupport.Framework.BilingualApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.BilingualApi
  nameWithType: Sdl.FileTypeSupport.Framework.BilingualApi
  fullName: Sdl.FileTypeSupport.Framework.BilingualApi
- uid: System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor}
  commentId: T:System.Func{Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor}
  parent: System
  definition: System.Func`1
  name: Func<CharacterCountingIterator.ICharacterCountingVisitor>
  nameWithType: Func<CharacterCountingIterator.ICharacterCountingVisitor>
  fullName: System.Func<Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor>
  nameWithType.vb: Func(Of CharacterCountingIterator.ICharacterCountingVisitor)
  fullName.vb: System.Func(Of Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor)
  name.vb: Func(Of CharacterCountingIterator.ICharacterCountingVisitor)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor
    name: CharacterCountingIterator.ICharacterCountingVisitor
    nameWithType: CharacterCountingIterator.ICharacterCountingVisitor
    fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor
    name: CharacterCountingIterator.ICharacterCountingVisitor
    nameWithType: CharacterCountingIterator.ICharacterCountingVisitor
    fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.ICharacterCountingVisitor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext
  isExternal: true
  name: MoveNext
  nameWithType: CharacterCountingIterator.MoveNext
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MoveNext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious
  isExternal: true
  name: MovePrevious
  nameWithType: CharacterCountingIterator.MovePrevious
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.MovePrevious
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount
  isExternal: true
  name: CharacterCount
  nameWithType: CharacterCountingIterator.CharacterCount
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharacterCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation
  isExternal: true
  name: CurrentLocation
  nameWithType: CharacterCountingIterator.CurrentLocation
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CurrentLocation
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation
  isExternal: true
  name: CharactersToNextLocation
  nameWithType: CharacterCountingIterator.CharactersToNextLocation
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToNextLocation
- uid: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation*
  commentId: Overload:Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation
  isExternal: true
  name: CharactersToPreviousLocation
  nameWithType: CharacterCountingIterator.CharactersToPreviousLocation
  fullName: Sdl.FileTypeSupport.Framework.Core.Utilities.BilingualApi.CharacterCountingIterator.CharactersToPreviousLocation
