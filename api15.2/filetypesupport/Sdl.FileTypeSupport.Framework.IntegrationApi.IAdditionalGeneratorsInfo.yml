### YamlMime:ManagedReference
items:
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
  id: IAdditionalGeneratorsInfo
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  children:
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators
  langs:
  - csharp
  - vb
  name: IAdditionalGeneratorsInfo
  nameWithType: IAdditionalGeneratorsInfo
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
  type: Interface
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nCollection of information on the extra generators that are specified for this file type\nin addition to the default generator. These generators will be used for tasks such as\npreviewing the file and generating the original document format from older bilingual formats (ITD and TTX).\n"
  syntax:
    content: 'public interface IAdditionalGeneratorsInfo : IFileTypeDefinitionAware'
    content.vb: >-
      Public Interface IAdditionalGeneratorsInfo
          Inherits IFileTypeDefinitionAware
  inheritedMembers:
  - Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware.FileTypeDefinition
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators
  id: Generators
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo
  langs:
  - csharp
  - vb
  name: Generators
  nameWithType: IAdditionalGeneratorsInfo.Generators
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators
  type: Property
  source:
    path: Sdl.FileTypeSupport.Framework.Core
    isExternal: true
  assemblies:
  - Sdl.FileTypeSupport.Framework.Core
  namespace: Sdl.FileTypeSupport.Framework.IntegrationApi
  summary: "\nThe list of information on the additional generators\n"
  syntax:
    content: IList<IGeneratorInfo> Generators { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo}
    content.vb: ReadOnly Property Generators As IList(Of IGeneratorInfo)
  overload: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi
  commentId: N:Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: Sdl.FileTypeSupport.Framework.IntegrationApi
  nameWithType: Sdl.FileTypeSupport.Framework.IntegrationApi
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware.FileTypeDefinition
  commentId: P:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware.FileTypeDefinition
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware
  isExternal: true
  name: FileTypeDefinition
  nameWithType: IFileTypeDefinitionAware.FileTypeDefinition
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware.FileTypeDefinition
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware
  commentId: T:Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware
  parent: Sdl.FileTypeSupport.Framework.IntegrationApi
  isExternal: true
  name: IFileTypeDefinitionAware
  nameWithType: IFileTypeDefinitionAware
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IFileTypeDefinitionAware
- uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators*
  commentId: Overload:Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators
  isExternal: true
  name: Generators
  nameWithType: IAdditionalGeneratorsInfo.Generators
  fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IAdditionalGeneratorsInfo.Generators
- uid: System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo}
  commentId: T:System.Collections.Generic.IList{Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IGeneratorInfo>
  nameWithType: IList<IGeneratorInfo>
  fullName: System.Collections.Generic.IList<Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo>
  nameWithType.vb: IList(Of IGeneratorInfo)
  fullName.vb: System.Collections.Generic.IList(Of Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo)
  name.vb: IList(Of IGeneratorInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    name: IGeneratorInfo
    nameWithType: IGeneratorInfo
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    name: IGeneratorInfo
    nameWithType: IGeneratorInfo
    fullName: Sdl.FileTypeSupport.Framework.IntegrationApi.IGeneratorInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
