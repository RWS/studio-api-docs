### YamlMime:ManagedReference
items:
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence
  commentId: T:Sdl.ProjectAutomation.FileBased.TaskSequence
  id: TaskSequence
  parent: Sdl.ProjectAutomation.FileBased
  children:
  - Sdl.ProjectAutomation.FileBased.TaskSequence.#ctor
  - Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles
  - Sdl.ProjectAutomation.FileBased.TaskSequence.Status
  - Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks
  langs:
  - csharp
  - vb
  name: TaskSequence
  nameWithType: TaskSequence
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence
  type: Class
  source:
    path: Sdl.ProjectAutomation.FileBased
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.FileBased
  namespace: Sdl.ProjectAutomation.FileBased
  summary: "\nRepresents a sequence of automatic tasks that is executing or has finished executing.\n"
  remarks: To execute a task sequence, use <xref href="Sdl.ProjectAutomation.FileBased.FileBasedProject.RunAutomaticTasks(System.Guid%5b%5d%2cSystem.String%5b%5d)" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public class TaskSequence
    content.vb: Public Class TaskSequence
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.#ctor
  commentId: M:Sdl.ProjectAutomation.FileBased.TaskSequence.#ctor
  id: '#ctor'
  parent: Sdl.ProjectAutomation.FileBased.TaskSequence
  langs:
  - csharp
  - vb
  name: TaskSequence()
  nameWithType: TaskSequence.TaskSequence()
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.TaskSequence()
  type: Constructor
  source:
    path: Sdl.ProjectAutomation.FileBased
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.FileBased
  namespace: Sdl.ProjectAutomation.FileBased
  syntax:
    content: public TaskSequence()
    content.vb: Public Sub New
  overload: Sdl.ProjectAutomation.FileBased.TaskSequence.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks
  commentId: P:Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks
  id: SubTasks
  parent: Sdl.ProjectAutomation.FileBased.TaskSequence
  langs:
  - csharp
  - vb
  name: SubTasks
  nameWithType: TaskSequence.SubTasks
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks
  type: Property
  source:
    path: Sdl.ProjectAutomation.FileBased
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.FileBased
  namespace: Sdl.ProjectAutomation.FileBased
  summary: "\nGets the automatic tasks that are part of this sequence.\n"
  remarks: "There is not necessarily a subtask for every automatic task template ID that was passed to \n<xref href=\"Sdl.ProjectAutomation.FileBased.FileBasedProject.RunAutomaticTasks(System.Guid%5b%5d%2cSystem.String%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref>. Consecutive content-processing tasks \nwill always be running in parallel within one automatic task, which is represented by a single <xref href=\"Sdl.ProjectAutomation.Core.AutomaticTask\" data-throw-if-not-resolved=\"false\"></xref>\nobject which is associated with multiple automatic task templates (<xref href=\"Sdl.ProjectAutomation.Core.AutomaticTask.TemplateIds\" data-throw-if-not-resolved=\"false\"></xref>)."
  syntax:
    content: public AutomaticTask[] SubTasks { get; }
    parameters: []
    return:
      type: Sdl.ProjectAutomation.Core.AutomaticTask[]
    content.vb: Public ReadOnly Property SubTasks As AutomaticTask()
  overload: Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.Status
  commentId: P:Sdl.ProjectAutomation.FileBased.TaskSequence.Status
  id: Status
  parent: Sdl.ProjectAutomation.FileBased.TaskSequence
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: TaskSequence.Status
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.Status
  type: Property
  source:
    path: Sdl.ProjectAutomation.FileBased
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.FileBased
  namespace: Sdl.ProjectAutomation.FileBased
  summary: "\nGets the status of this task sequence.\n"
  syntax:
    content: public TaskStatus Status { get; }
    parameters: []
    return:
      type: Sdl.ProjectAutomation.Core.TaskStatus
    content.vb: Public ReadOnly Property Status As TaskStatus
  overload: Sdl.ProjectAutomation.FileBased.TaskSequence.Status*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles
  commentId: P:Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles
  id: OutputFiles
  parent: Sdl.ProjectAutomation.FileBased.TaskSequence
  langs:
  - csharp
  - vb
  name: OutputFiles
  nameWithType: TaskSequence.OutputFiles
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles
  type: Property
  source:
    path: Sdl.ProjectAutomation.FileBased
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.FileBased
  namespace: Sdl.ProjectAutomation.FileBased
  summary: "\nGets the output files of this task sequence. \n"
  remarks: >-
    This will only populated if the task sequence was successfully completed, i.e. <xref href="Sdl.ProjectAutomation.FileBased.TaskSequence.Status" data-throw-if-not-resolved="false"></xref> is <xref href="Sdl.ProjectAutomation.Core.TaskStatus.Completed" data-throw-if-not-resolved="false"></xref>.

    This property always reflects the output files of the last task in the sequence.
  syntax:
    content: public TaskFileInfo[] OutputFiles { get; }
    parameters: []
    return:
      type: Sdl.ProjectAutomation.Core.TaskFileInfo[]
    content.vb: Public ReadOnly Property OutputFiles As TaskFileInfo()
  overload: Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.ProjectAutomation.FileBased
  commentId: N:Sdl.ProjectAutomation.FileBased
  isExternal: true
  name: Sdl.ProjectAutomation.FileBased
  nameWithType: Sdl.ProjectAutomation.FileBased
  fullName: Sdl.ProjectAutomation.FileBased
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.#ctor*
  commentId: Overload:Sdl.ProjectAutomation.FileBased.TaskSequence.#ctor
  isExternal: true
  name: TaskSequence
  nameWithType: TaskSequence.TaskSequence
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.TaskSequence
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks*
  commentId: Overload:Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks
  isExternal: true
  name: SubTasks
  nameWithType: TaskSequence.SubTasks
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.SubTasks
- uid: Sdl.ProjectAutomation.Core.AutomaticTask[]
  isExternal: true
  name: AutomaticTask[]
  nameWithType: AutomaticTask[]
  fullName: Sdl.ProjectAutomation.Core.AutomaticTask[]
  nameWithType.vb: AutomaticTask()
  fullName.vb: Sdl.ProjectAutomation.Core.AutomaticTask()
  name.vb: AutomaticTask()
  spec.csharp:
  - uid: Sdl.ProjectAutomation.Core.AutomaticTask
    name: AutomaticTask
    nameWithType: AutomaticTask
    fullName: Sdl.ProjectAutomation.Core.AutomaticTask
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.ProjectAutomation.Core.AutomaticTask
    name: AutomaticTask
    nameWithType: AutomaticTask
    fullName: Sdl.ProjectAutomation.Core.AutomaticTask
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.Status*
  commentId: Overload:Sdl.ProjectAutomation.FileBased.TaskSequence.Status
  isExternal: true
  name: Status
  nameWithType: TaskSequence.Status
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.Status
- uid: Sdl.ProjectAutomation.Core.TaskStatus
  commentId: T:Sdl.ProjectAutomation.Core.TaskStatus
  parent: Sdl.ProjectAutomation.Core
  isExternal: true
  name: TaskStatus
  nameWithType: TaskStatus
  fullName: Sdl.ProjectAutomation.Core.TaskStatus
- uid: Sdl.ProjectAutomation.Core
  commentId: N:Sdl.ProjectAutomation.Core
  isExternal: true
  name: Sdl.ProjectAutomation.Core
  nameWithType: Sdl.ProjectAutomation.Core
  fullName: Sdl.ProjectAutomation.Core
- uid: Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles*
  commentId: Overload:Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles
  isExternal: true
  name: OutputFiles
  nameWithType: TaskSequence.OutputFiles
  fullName: Sdl.ProjectAutomation.FileBased.TaskSequence.OutputFiles
- uid: Sdl.ProjectAutomation.Core.TaskFileInfo[]
  isExternal: true
  name: TaskFileInfo[]
  nameWithType: TaskFileInfo[]
  fullName: Sdl.ProjectAutomation.Core.TaskFileInfo[]
  nameWithType.vb: TaskFileInfo()
  fullName.vb: Sdl.ProjectAutomation.Core.TaskFileInfo()
  name.vb: TaskFileInfo()
  spec.csharp:
  - uid: Sdl.ProjectAutomation.Core.TaskFileInfo
    name: TaskFileInfo
    nameWithType: TaskFileInfo
    fullName: Sdl.ProjectAutomation.Core.TaskFileInfo
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.ProjectAutomation.Core.TaskFileInfo
    name: TaskFileInfo
    nameWithType: TaskFileInfo
    fullName: Sdl.ProjectAutomation.Core.TaskFileInfo
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
