### YamlMime:ManagedReference
items:
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  commentId: T:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  id: ExportForReviewTaskSettings
  parent: Sdl.ProjectAutomation.Settings
  children:
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.#ctor
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue(System.String)
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor
  - Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType
  langs:
  - csharp
  - vb
  name: ExportForReviewTaskSettings
  nameWithType: ExportForReviewTaskSettings
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  type: Class
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nSettings group class for the &apos;Export for Review&apos; automatic task settings.\n"
  syntax:
    content: 'public class ExportForReviewTaskSettings : SettingsGroup'
    content.vb: >-
      Public Class ExportForReviewTaskSettings
          Inherits SettingsGroup
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.#ctor
  commentId: M:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.#ctor
  id: '#ctor'
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: ExportForReviewTaskSettings()
  nameWithType: ExportForReviewTaskSettings.ExportForReviewTaskSettings()
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExportForReviewTaskSettings()
  type: Constructor
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nDefault constructor. You should never create this object manually. Use <xref href=\"Sdl.Core.Settings.ISettingsBundle.GetSettingsGroup(System.String)\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  syntax:
    content: public ExportForReviewTaskSettings()
    content.vb: Public Sub New
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue(System.String)
  commentId: M:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue(System.String)
  id: GetDefaultValue(System.String)
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: GetDefaultValue(String)
  nameWithType: ExportForReviewTaskSettings.GetDefaultValue(String)
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue(System.String)
  type: Method
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the default value.\n"
  syntax:
    content: protected override object GetDefaultValue(string settingId)
    parameters:
    - id: settingId
      type: System.String
      description: The setting id.
    return:
      type: System.Object
    content.vb: Protected Overrides Function GetDefaultValue(settingId As String) As Object
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location
  id: Location
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: ExportForReviewTaskSettings.Location
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that specifies the root folder where the review files will be created. Default: Empty String.\n"
  syntax:
    content: public Setting<string> Location { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.String}
    content.vb: Public ReadOnly Property Location As Setting(Of String)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix
  id: FileNamePrefix
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: FileNamePrefix
  nameWithType: ExportForReviewTaskSettings.FileNamePrefix
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that specifies the prefix that will be added to each review filename... . Default: Empty String.\n"
  syntax:
    content: public Setting<string> FileNamePrefix { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.String}
    content.vb: Public ReadOnly Property FileNamePrefix As Setting(Of String)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType
  id: TableLayoutType
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: TableLayoutType
  nameWithType: ExportForReviewTaskSettings.TableLayoutType
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the format of the review file, &apos;Top-down&apos; or &apos;Side-by-side&apos;... . Default: Side-by-side.\n"
  syntax:
    content: public Setting<LayoutType.TableType> TableLayoutType { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType}
    content.vb: Public ReadOnly Property TableLayoutType As Setting(Of LayoutType.TableType)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor
  id: ContextMatchColor
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: ContextMatchColor
  nameWithType: ExportForReviewTaskSettings.ContextMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the code to be used for highlighting context matches . Default: Color.LightGray.\n"
  syntax:
    content: public Setting<Color> ContextMatchColor { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Drawing.Color}
    content.vb: Public ReadOnly Property ContextMatchColor As Setting(Of Color)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor
  id: PerfectMatchColor
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: PerfectMatchColor
  nameWithType: ExportForReviewTaskSettings.PerfectMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the code to be used for highlighting perfect matches . Default: Color.LightGray.\n"
  syntax:
    content: public Setting<Color> PerfectMatchColor { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Drawing.Color}
    content.vb: Public ReadOnly Property PerfectMatchColor As Setting(Of Color)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor
  id: ExactMatchColor
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: ExactMatchColor
  nameWithType: ExportForReviewTaskSettings.ExactMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the code to be used for highlighting exact matches . Default: Color.PaleGreen.\n"
  syntax:
    content: public Setting<Color> ExactMatchColor { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Drawing.Color}
    content.vb: Public ReadOnly Property ExactMatchColor As Setting(Of Color)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor
  id: FuzzyMatchColor
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: FuzzyMatchColor
  nameWithType: ExportForReviewTaskSettings.FuzzyMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the code to be used for highlighting fuzzy matches . Default: Color.Wheat.\n"
  syntax:
    content: public Setting<Color> FuzzyMatchColor { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Drawing.Color}
    content.vb: Public ReadOnly Property FuzzyMatchColor As Setting(Of Color)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor
  id: NoMatchColor
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: NoMatchColor
  nameWithType: ExportForReviewTaskSettings.NoMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the code to be used for highlighting no matches . Default: Color.White.\n"
  syntax:
    content: public Setting<Color> NoMatchColor { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Drawing.Color}
    content.vb: Public ReadOnly Property NoMatchColor As Setting(Of Color)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting
  commentId: P:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting
  id: OverwriteExisting
  parent: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings
  langs:
  - csharp
  - vb
  name: OverwriteExisting
  nameWithType: ExportForReviewTaskSettings.OverwriteExisting
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that states the code to be used for highlighting no matches . Default: Color.White.\n"
  syntax:
    content: public Setting<bool> OverwriteExisting { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Boolean}
    content.vb: Public ReadOnly Property OverwriteExisting As Setting(Of Boolean)
  overload: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.ProjectAutomation.Settings
  commentId: N:Sdl.ProjectAutomation.Settings
  isExternal: true
  name: Sdl.ProjectAutomation.Settings
  nameWithType: Sdl.ProjectAutomation.Settings
  fullName: Sdl.ProjectAutomation.Settings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.#ctor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.#ctor
  isExternal: true
  name: ExportForReviewTaskSettings
  nameWithType: ExportForReviewTaskSettings.ExportForReviewTaskSettings
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExportForReviewTaskSettings
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue
  isExternal: true
  name: GetDefaultValue
  nameWithType: ExportForReviewTaskSettings.GetDefaultValue
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.GetDefaultValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location
  isExternal: true
  name: Location
  nameWithType: ExportForReviewTaskSettings.Location
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.Location
- uid: Sdl.Core.Settings.Setting{System.String}
  commentId: '!:Sdl.Core.Settings.Setting{System.String}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<String>
  nameWithType: Setting<String>
  fullName: Sdl.Core.Settings.Setting<System.String>
  nameWithType.vb: Setting(Of String)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.String)
  name.vb: Setting(Of String)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Settings.Setting`1
  isExternal: true
  name: Setting<>
  nameWithType: Setting<>
  fullName: Sdl.Core.Settings.Setting<>
  nameWithType.vb: Setting(Of )
  fullName.vb: Sdl.Core.Settings.Setting(Of )
  name.vb: Setting(Of )
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix
  isExternal: true
  name: FileNamePrefix
  nameWithType: ExportForReviewTaskSettings.FileNamePrefix
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FileNamePrefix
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType
  isExternal: true
  name: TableLayoutType
  nameWithType: ExportForReviewTaskSettings.TableLayoutType
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.TableLayoutType
- uid: Sdl.Core.Settings.Setting{Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType}
  commentId: '!:Sdl.Core.Settings.Setting{Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<LayoutType.TableType>
  nameWithType: Setting<LayoutType.TableType>
  fullName: Sdl.Core.Settings.Setting<Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType>
  nameWithType.vb: Setting(Of LayoutType.TableType)
  fullName.vb: Sdl.Core.Settings.Setting(Of Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType)
  name.vb: Setting(Of LayoutType.TableType)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType
    name: LayoutType.TableType
    nameWithType: LayoutType.TableType
    fullName: Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType
    name: LayoutType.TableType
    nameWithType: LayoutType.TableType
    fullName: Sdl.FileTypeSupport.Utilities.SdlXliffConvertor.LayoutType.TableType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor
  isExternal: true
  name: ContextMatchColor
  nameWithType: ExportForReviewTaskSettings.ContextMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ContextMatchColor
- uid: Sdl.Core.Settings.Setting{System.Drawing.Color}
  commentId: '!:Sdl.Core.Settings.Setting{System.Drawing.Color}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<Color>
  nameWithType: Setting<Color>
  fullName: Sdl.Core.Settings.Setting<System.Drawing.Color>
  nameWithType.vb: Setting(Of Color)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.Drawing.Color)
  name.vb: Setting(Of Color)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Drawing.Color
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor
  isExternal: true
  name: PerfectMatchColor
  nameWithType: ExportForReviewTaskSettings.PerfectMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.PerfectMatchColor
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor
  isExternal: true
  name: ExactMatchColor
  nameWithType: ExportForReviewTaskSettings.ExactMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.ExactMatchColor
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor
  isExternal: true
  name: FuzzyMatchColor
  nameWithType: ExportForReviewTaskSettings.FuzzyMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.FuzzyMatchColor
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor
  isExternal: true
  name: NoMatchColor
  nameWithType: ExportForReviewTaskSettings.NoMatchColor
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.NoMatchColor
- uid: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting*
  commentId: Overload:Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting
  isExternal: true
  name: OverwriteExisting
  nameWithType: ExportForReviewTaskSettings.OverwriteExisting
  fullName: Sdl.ProjectAutomation.Settings.ExportForReviewTaskSettings.OverwriteExisting
- uid: Sdl.Core.Settings.Setting{System.Boolean}
  commentId: '!:Sdl.Core.Settings.Setting{System.Boolean}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<Boolean>
  nameWithType: Setting<Boolean>
  fullName: Sdl.Core.Settings.Setting<System.Boolean>
  nameWithType.vb: Setting(Of Boolean)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.Boolean)
  name.vb: Setting(Of Boolean)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
