### YamlMime:ManagedReference
items:
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  commentId: T:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  id: PseudoTranslateSettings
  parent: Sdl.ProjectAutomation.Settings
  children:
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.#ctor
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue(System.String)
  - Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary
  langs:
  - csharp
  - vb
  name: PseudoTranslateSettings
  nameWithType: PseudoTranslateSettings
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  type: Class
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nSettings group class for the Pseudo-translate automatic task settings.\n"
  syntax:
    content: 'public class PseudoTranslateSettings : SettingsGroup'
    content.vb: >-
      Public Class PseudoTranslateSettings
          Inherits SettingsGroup
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.#ctor
  commentId: M:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.#ctor
  id: '#ctor'
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: PseudoTranslateSettings()
  nameWithType: PseudoTranslateSettings.PseudoTranslateSettings()
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.PseudoTranslateSettings()
  type: Constructor
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nDefault constructor. You should never create this object manually. Use <xref href=\"Sdl.Core.Settings.ISettingsBundle.GetSettingsGroup(System.String)\" data-throw-if-not-resolved=\"false\"></xref> instead.\n"
  syntax:
    content: public PseudoTranslateSettings()
    content.vb: Public Sub New
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue(System.String)
  commentId: M:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue(System.String)
  id: GetDefaultValue(System.String)
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: GetDefaultValue(String)
  nameWithType: PseudoTranslateSettings.GetDefaultValue(String)
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue(System.String)
  type: Method
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the default value for the sepcified settings. Always returns null.\nOverride this method in extending classes to define default setting values.\n"
  syntax:
    content: protected override object GetDefaultValue(string settingId)
    parameters:
    - id: settingId
      type: System.String
      description: The setting id.
    return:
      type: System.Object
      description: "\nThe default value, or null if no default value is available.\n"
    content.vb: Protected Overrides Function GetDefaultValue(settingId As String) As Object
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd
  id: AppendEnd
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: AppendEnd
  nameWithType: PseudoTranslateSettings.AppendEnd
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nIf <code>true</code>, the string specified by <xref href=\"Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString\" data-throw-if-not-resolved=\"false\"></xref> will be appended to \nthe end of each pseudo-translated string.\n"
  syntax:
    content: public Setting<bool> AppendEnd { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Boolean}
    content.vb: Public ReadOnly Property AppendEnd As Setting(Of Boolean)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart
  id: AppendStart
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: AppendStart
  nameWithType: PseudoTranslateSettings.AppendStart
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nIf <code>true</code>, the string specified by <xref href=\"Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString\" data-throw-if-not-resolved=\"false\"></xref> will be appended to \nthe start of each pseudo-translated string.\n"
  syntax:
    content: public Setting<bool> AppendStart { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Boolean}
    content.vb: Public ReadOnly Property AppendStart As Setting(Of Boolean)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString
  id: AppendEndString
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: AppendEndString
  nameWithType: PseudoTranslateSettings.AppendEndString
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nThe string that will be appended to the end of each pseudo-translation, if <xref href=\"Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd\" data-throw-if-not-resolved=\"false\"></xref> is true.\n"
  syntax:
    content: public Setting<string> AppendEndString { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.String}
    content.vb: Public ReadOnly Property AppendEndString As Setting(Of String)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString
  id: AppendStartString
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: AppendStartString
  nameWithType: PseudoTranslateSettings.AppendStartString
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nThe string that will be appended to the start of each pseudo-translation, if <xref href=\"Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart\" data-throw-if-not-resolved=\"false\"></xref> is true.\n"
  syntax:
    content: public Setting<string> AppendStartString { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.String}
    content.vb: Public ReadOnly Property AppendStartString As Setting(Of String)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit
  id: AppendToUnit
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: AppendToUnit
  nameWithType: PseudoTranslateSettings.AppendToUnit
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nWhether to append <xref href=\"Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString\" data-throw-if-not-resolved=\"false\"></xref>\nto each segment, or to each paragraph.\n"
  syntax:
    content: public Setting<AppendToUnitType> AppendToUnit { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{Sdl.ProjectAutomation.Settings.AppendToUnitType}
    content.vb: Public ReadOnly Property AppendToUnit As Setting(Of AppendToUnitType)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary
  id: UseDictionary
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: UseDictionary
  nameWithType: PseudoTranslateSettings.UseDictionary
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nIf <code>true</code>, internal dictionaries will be used to generate content in the target language.\nIf a dictionary is not available for the target language, the English dictionary will be used.\nIf <code>false</code>, dollar signs will be used to represent characters in the pseudo-translations.\n"
  syntax:
    content: public Setting<bool> UseDictionary { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Boolean}
    content.vb: Public ReadOnly Property UseDictionary As Setting(Of Boolean)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit
  id: ExpansionLimit
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: ExpansionLimit
  nameWithType: PseudoTranslateSettings.ExpansionLimit
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nThe factor by which the length of pseudo-translated content will differ to the source content.\nFor example 1.3 would mean the pseudo-translations would be 30% longer than the source text.\n"
  syntax:
    content: public Setting<double> ExpansionLimit { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Double}
    content.vb: Public ReadOnly Property ExpansionLimit As Setting(Of Double)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation
  commentId: P:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation
  id: DeterministicPseudoTranslation
  parent: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings
  langs:
  - csharp
  - vb
  name: DeterministicPseudoTranslation
  nameWithType: PseudoTranslateSettings.DeterministicPseudoTranslation
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nWhen generating pseudo-translations using the internal dictionaries, if this setting is <code>true</code>\nthen the same translations will be generated every time pseudo-translate is run. Otherwise, \nrandom words will be used.\n"
  syntax:
    content: public Setting<bool> DeterministicPseudoTranslation { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.Boolean}
    content.vb: Public ReadOnly Property DeterministicPseudoTranslation As Setting(Of Boolean)
  overload: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.ProjectAutomation.Settings
  commentId: N:Sdl.ProjectAutomation.Settings
  isExternal: true
  name: Sdl.ProjectAutomation.Settings
  nameWithType: Sdl.ProjectAutomation.Settings
  fullName: Sdl.ProjectAutomation.Settings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.#ctor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.#ctor
  isExternal: true
  name: PseudoTranslateSettings
  nameWithType: PseudoTranslateSettings.PseudoTranslateSettings
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.PseudoTranslateSettings
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue
  isExternal: true
  name: GetDefaultValue
  nameWithType: PseudoTranslateSettings.GetDefaultValue
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.GetDefaultValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd
  isExternal: true
  name: AppendEnd
  nameWithType: PseudoTranslateSettings.AppendEnd
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEnd
- uid: Sdl.Core.Settings.Setting{System.Boolean}
  commentId: '!:Sdl.Core.Settings.Setting{System.Boolean}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<Boolean>
  nameWithType: Setting<Boolean>
  fullName: Sdl.Core.Settings.Setting<System.Boolean>
  nameWithType.vb: Setting(Of Boolean)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.Boolean)
  name.vb: Setting(Of Boolean)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Settings.Setting`1
  isExternal: true
  name: Setting<>
  nameWithType: Setting<>
  fullName: Sdl.Core.Settings.Setting<>
  nameWithType.vb: Setting(Of )
  fullName.vb: Sdl.Core.Settings.Setting(Of )
  name.vb: Setting(Of )
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart
  isExternal: true
  name: AppendStart
  nameWithType: PseudoTranslateSettings.AppendStart
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStart
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString
  isExternal: true
  name: AppendEndString
  nameWithType: PseudoTranslateSettings.AppendEndString
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendEndString
- uid: Sdl.Core.Settings.Setting{System.String}
  commentId: '!:Sdl.Core.Settings.Setting{System.String}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<String>
  nameWithType: Setting<String>
  fullName: Sdl.Core.Settings.Setting<System.String>
  nameWithType.vb: Setting(Of String)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.String)
  name.vb: Setting(Of String)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString
  isExternal: true
  name: AppendStartString
  nameWithType: PseudoTranslateSettings.AppendStartString
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendStartString
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit
  isExternal: true
  name: AppendToUnit
  nameWithType: PseudoTranslateSettings.AppendToUnit
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.AppendToUnit
- uid: Sdl.Core.Settings.Setting{Sdl.ProjectAutomation.Settings.AppendToUnitType}
  commentId: '!:Sdl.Core.Settings.Setting{Sdl.ProjectAutomation.Settings.AppendToUnitType}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<AppendToUnitType>
  nameWithType: Setting<AppendToUnitType>
  fullName: Sdl.Core.Settings.Setting<Sdl.ProjectAutomation.Settings.AppendToUnitType>
  nameWithType.vb: Setting(Of AppendToUnitType)
  fullName.vb: Sdl.Core.Settings.Setting(Of Sdl.ProjectAutomation.Settings.AppendToUnitType)
  name.vb: Setting(Of AppendToUnitType)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.ProjectAutomation.Settings.AppendToUnitType
    name: AppendToUnitType
    nameWithType: AppendToUnitType
    fullName: Sdl.ProjectAutomation.Settings.AppendToUnitType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.ProjectAutomation.Settings.AppendToUnitType
    name: AppendToUnitType
    nameWithType: AppendToUnitType
    fullName: Sdl.ProjectAutomation.Settings.AppendToUnitType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary
  isExternal: true
  name: UseDictionary
  nameWithType: PseudoTranslateSettings.UseDictionary
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.UseDictionary
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit
  isExternal: true
  name: ExpansionLimit
  nameWithType: PseudoTranslateSettings.ExpansionLimit
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.ExpansionLimit
- uid: Sdl.Core.Settings.Setting{System.Double}
  commentId: '!:Sdl.Core.Settings.Setting{System.Double}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<Double>
  nameWithType: Setting<Double>
  fullName: Sdl.Core.Settings.Setting<System.Double>
  nameWithType.vb: Setting(Of Double)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.Double)
  name.vb: Setting(Of Double)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation*
  commentId: Overload:Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation
  isExternal: true
  name: DeterministicPseudoTranslation
  nameWithType: PseudoTranslateSettings.DeterministicPseudoTranslation
  fullName: Sdl.ProjectAutomation.Settings.PseudoTranslateSettings.DeterministicPseudoTranslation
