### YamlMime:ManagedReference
items:
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings
  commentId: T:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings
  id: CreateRegulatorBundleTaskSettings
  parent: Sdl.ProjectAutomation.Settings
  children:
  - Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.#ctor
  - Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue(System.String)
  - Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location
  langs:
  - csharp
  - vb
  name: CreateRegulatorBundleTaskSettings
  nameWithType: CreateRegulatorBundleTaskSettings
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings
  type: Class
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nSettings for the &quot;Create Regulator Bundle Task&quot;\n"
  syntax:
    content: >-
      [Obsolete("The Create Regulator Bundle Task has been deprecated.")]

      public class CreateRegulatorBundleTaskSettings : SettingsGroup
    content.vb: >-
      <Obsolete("The Create Regulator Bundle Task has been deprecated.")>

      Public Class CreateRegulatorBundleTaskSettings
          Inherits SettingsGroup
  inheritance:
  - System.Object
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The Create Regulator Bundle Task has been deprecated.
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue(System.String)
  commentId: M:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue(System.String)
  id: GetDefaultValue(System.String)
  parent: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings
  langs:
  - csharp
  - vb
  name: GetDefaultValue(String)
  nameWithType: CreateRegulatorBundleTaskSettings.GetDefaultValue(String)
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue(System.String)
  type: Method
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGet the default value of the settings item\n"
  syntax:
    content: protected override object GetDefaultValue(string settingId)
    parameters:
    - id: settingId
      type: System.String
    return:
      type: System.Object
    content.vb: Protected Overrides Function GetDefaultValue(settingId As String) As Object
  overload: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.#ctor
  commentId: M:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.#ctor
  id: '#ctor'
  parent: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings
  langs:
  - csharp
  - vb
  name: CreateRegulatorBundleTaskSettings()
  nameWithType: CreateRegulatorBundleTaskSettings.CreateRegulatorBundleTaskSettings()
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.CreateRegulatorBundleTaskSettings()
  type: Constructor
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  syntax:
    content: public CreateRegulatorBundleTaskSettings()
    content.vb: Public Sub New
  overload: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location
  commentId: P:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location
  id: Location
  parent: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: CreateRegulatorBundleTaskSettings.Location
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location
  type: Property
  source:
    path: Sdl.ProjectAutomation.Settings
    isExternal: true
  assemblies:
  - Sdl.ProjectAutomation.Settings
  namespace: Sdl.ProjectAutomation.Settings
  summary: "\nGets the setting that specifies the root folder where the bundle files will be created.\n"
  syntax:
    content: public Setting<string> Location { get; }
    parameters: []
    return:
      type: Sdl.Core.Settings.Setting{System.String}
    content.vb: Public ReadOnly Property Location As Setting(Of String)
  overload: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.ProjectAutomation.Settings
  commentId: N:Sdl.ProjectAutomation.Settings
  isExternal: true
  name: Sdl.ProjectAutomation.Settings
  nameWithType: Sdl.ProjectAutomation.Settings
  fullName: Sdl.ProjectAutomation.Settings
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue*
  commentId: Overload:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue
  isExternal: true
  name: GetDefaultValue
  nameWithType: CreateRegulatorBundleTaskSettings.GetDefaultValue
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.GetDefaultValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.#ctor*
  commentId: Overload:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.#ctor
  isExternal: true
  name: CreateRegulatorBundleTaskSettings
  nameWithType: CreateRegulatorBundleTaskSettings.CreateRegulatorBundleTaskSettings
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.CreateRegulatorBundleTaskSettings
- uid: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location*
  commentId: Overload:Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location
  isExternal: true
  name: Location
  nameWithType: CreateRegulatorBundleTaskSettings.Location
  fullName: Sdl.ProjectAutomation.Settings.CreateRegulatorBundleTaskSettings.Location
- uid: Sdl.Core.Settings.Setting{System.String}
  commentId: '!:Sdl.Core.Settings.Setting{System.String}'
  definition: Sdl.Core.Settings.Setting`1
  name: Setting<String>
  nameWithType: Setting<String>
  fullName: Sdl.Core.Settings.Setting<System.String>
  nameWithType.vb: Setting(Of String)
  fullName.vb: Sdl.Core.Settings.Setting(Of System.String)
  name.vb: Setting(Of String)
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.Settings.Setting`1
  isExternal: true
  name: Setting<>
  nameWithType: Setting<>
  fullName: Sdl.Core.Settings.Setting<>
  nameWithType.vb: Setting(Of )
  fullName.vb: Sdl.Core.Settings.Setting(Of )
  name.vb: Setting(Of )
  spec.csharp:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Sdl.Core.Settings.Setting`1
    name: Setting
    nameWithType: Setting
    fullName: Sdl.Core.Settings.Setting
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
