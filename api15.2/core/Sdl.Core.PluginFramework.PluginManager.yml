### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.PluginManager
  commentId: T:Sdl.Core.PluginFramework.PluginManager
  id: PluginManager
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache
  - Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,Sdl.Core.PluginFramework.IPluginFilter,System.Boolean,Sdl.Core.PluginFramework.IObjectResolver)
  - Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,System.Boolean)
  - Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry
  - Sdl.Core.PluginFramework.PluginManager.PluginLoadException
  - Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference(System.String)
  langs:
  - csharp
  - vb
  name: PluginManager
  nameWithType: PluginManager
  fullName: Sdl.Core.PluginFramework.PluginManager
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static class PluginManager
    content.vb: Public Module PluginManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache
  commentId: M:Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache
  id: CreateDefaultPluginCache
  parent: Sdl.Core.PluginFramework.PluginManager
  langs:
  - csharp
  - vb
  name: CreateDefaultPluginCache()
  nameWithType: PluginManager.CreateDefaultPluginCache()
  fullName: Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static IPluginCache CreateDefaultPluginCache()
    return:
      type: Sdl.Core.PluginFramework.IPluginCache
    content.vb: Public Shared Function CreateDefaultPluginCache As IPluginCache
  overload: Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference(System.String)
  commentId: M:Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference(System.String)
  id: ResolvePluginAssemblyReference(System.String)
  parent: Sdl.Core.PluginFramework.PluginManager
  langs:
  - csharp
  - vb
  name: ResolvePluginAssemblyReference(String)
  nameWithType: PluginManager.ResolvePluginAssemblyReference(String)
  fullName: Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference(System.String)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static string ResolvePluginAssemblyReference(string pluginAssemblyReference)
    parameters:
    - id: pluginAssemblyReference
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function ResolvePluginAssemblyReference(pluginAssemblyReference As String) As String
  overload: Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,Sdl.Core.PluginFramework.IPluginFilter,System.Boolean,Sdl.Core.PluginFramework.IObjectResolver)
  commentId: M:Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,Sdl.Core.PluginFramework.IPluginFilter,System.Boolean,Sdl.Core.PluginFramework.IObjectResolver)
  id: CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,Sdl.Core.PluginFramework.IPluginFilter,System.Boolean,Sdl.Core.PluginFramework.IObjectResolver)
  parent: Sdl.Core.PluginFramework.PluginManager
  langs:
  - csharp
  - vb
  name: CreatePluginRegistry(IPluginLocator, IPluginStateHandler, IPluginInitializer, IPluginTypeLoader, IPluginCache, IPluginFilter, Boolean, IObjectResolver)
  nameWithType: PluginManager.CreatePluginRegistry(IPluginLocator, IPluginStateHandler, IPluginInitializer, IPluginTypeLoader, IPluginCache, IPluginFilter, Boolean, IObjectResolver)
  fullName: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator, Sdl.Core.PluginFramework.IPluginStateHandler, Sdl.Core.PluginFramework.IPluginInitializer, Sdl.Core.PluginFramework.IPluginTypeLoader, Sdl.Core.PluginFramework.IPluginCache, Sdl.Core.PluginFramework.IPluginFilter, System.Boolean, Sdl.Core.PluginFramework.IObjectResolver)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static IPluginRegistry CreatePluginRegistry(IPluginLocator pluginLocator, IPluginStateHandler pluginStateHandler, IPluginInitializer pluginInitializer, IPluginTypeLoader pluginTypeLoader, IPluginCache pluginCache, IPluginFilter filter, bool validate, IObjectResolver objectResolver = null)
    parameters:
    - id: pluginLocator
      type: Sdl.Core.PluginFramework.IPluginLocator
    - id: pluginStateHandler
      type: Sdl.Core.PluginFramework.IPluginStateHandler
    - id: pluginInitializer
      type: Sdl.Core.PluginFramework.IPluginInitializer
    - id: pluginTypeLoader
      type: Sdl.Core.PluginFramework.IPluginTypeLoader
    - id: pluginCache
      type: Sdl.Core.PluginFramework.IPluginCache
    - id: filter
      type: Sdl.Core.PluginFramework.IPluginFilter
    - id: validate
      type: System.Boolean
    - id: objectResolver
      type: Sdl.Core.PluginFramework.IObjectResolver
    return:
      type: Sdl.Core.PluginFramework.IPluginRegistry
    content.vb: Public Shared Function CreatePluginRegistry(pluginLocator As IPluginLocator, pluginStateHandler As IPluginStateHandler, pluginInitializer As IPluginInitializer, pluginTypeLoader As IPluginTypeLoader, pluginCache As IPluginCache, filter As IPluginFilter, validate As Boolean, objectResolver As IObjectResolver = Nothing) As IPluginRegistry
  overload: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,System.Boolean)
  id: CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator,Sdl.Core.PluginFramework.IPluginStateHandler,Sdl.Core.PluginFramework.IPluginInitializer,Sdl.Core.PluginFramework.IPluginTypeLoader,Sdl.Core.PluginFramework.IPluginCache,System.Boolean)
  parent: Sdl.Core.PluginFramework.PluginManager
  langs:
  - csharp
  - vb
  name: CreatePluginRegistry(IPluginLocator, IPluginStateHandler, IPluginInitializer, IPluginTypeLoader, IPluginCache, Boolean)
  nameWithType: PluginManager.CreatePluginRegistry(IPluginLocator, IPluginStateHandler, IPluginInitializer, IPluginTypeLoader, IPluginCache, Boolean)
  fullName: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry(Sdl.Core.PluginFramework.IPluginLocator, Sdl.Core.PluginFramework.IPluginStateHandler, Sdl.Core.PluginFramework.IPluginInitializer, Sdl.Core.PluginFramework.IPluginTypeLoader, Sdl.Core.PluginFramework.IPluginCache, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static IPluginRegistry CreatePluginRegistry(IPluginLocator pluginLocator, IPluginStateHandler pluginStateHandler, IPluginInitializer pluginInitializer, IPluginTypeLoader pluginTypeLoader, IPluginCache pluginCache, bool validate)
    parameters:
    - id: pluginLocator
      type: Sdl.Core.PluginFramework.IPluginLocator
    - id: pluginStateHandler
      type: Sdl.Core.PluginFramework.IPluginStateHandler
    - id: pluginInitializer
      type: Sdl.Core.PluginFramework.IPluginInitializer
    - id: pluginTypeLoader
      type: Sdl.Core.PluginFramework.IPluginTypeLoader
    - id: pluginCache
      type: Sdl.Core.PluginFramework.IPluginCache
    - id: validate
      type: System.Boolean
    return:
      type: Sdl.Core.PluginFramework.IPluginRegistry
    content.vb: Public Shared Function CreatePluginRegistry(pluginLocator As IPluginLocator, pluginStateHandler As IPluginStateHandler, pluginInitializer As IPluginInitializer, pluginTypeLoader As IPluginTypeLoader, pluginCache As IPluginCache, validate As Boolean) As IPluginRegistry
  overload: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry
  commentId: P:Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry
  id: DefaultPluginRegistry
  parent: Sdl.Core.PluginFramework.PluginManager
  langs:
  - csharp
  - vb
  name: DefaultPluginRegistry
  nameWithType: PluginManager.DefaultPluginRegistry
  fullName: Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static IPluginRegistry DefaultPluginRegistry { get; set; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.IPluginRegistry
    content.vb: Public Shared Property DefaultPluginRegistry As IPluginRegistry
  overload: Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Sdl.Core.PluginFramework.PluginManager.PluginLoadException
  commentId: E:Sdl.Core.PluginFramework.PluginManager.PluginLoadException
  id: PluginLoadException
  parent: Sdl.Core.PluginFramework.PluginManager
  langs:
  - csharp
  - vb
  name: PluginLoadException
  nameWithType: PluginManager.PluginLoadException
  fullName: Sdl.Core.PluginFramework.PluginManager.PluginLoadException
  type: Event
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public static event EventHandler<PluginLoadExceptionEventArgs> PluginLoadException
    return:
      type: System.EventHandler{Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs}
    content.vb: Public Shared Event PluginLoadException As EventHandler(Of PluginLoadExceptionEventArgs)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache*
  commentId: Overload:Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache
  isExternal: true
  name: CreateDefaultPluginCache
  nameWithType: PluginManager.CreateDefaultPluginCache
  fullName: Sdl.Core.PluginFramework.PluginManager.CreateDefaultPluginCache
- uid: Sdl.Core.PluginFramework.IPluginCache
  commentId: T:Sdl.Core.PluginFramework.IPluginCache
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginCache
  nameWithType: IPluginCache
  fullName: Sdl.Core.PluginFramework.IPluginCache
- uid: Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference*
  commentId: Overload:Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference
  isExternal: true
  name: ResolvePluginAssemblyReference
  nameWithType: PluginManager.ResolvePluginAssemblyReference
  fullName: Sdl.Core.PluginFramework.PluginManager.ResolvePluginAssemblyReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry*
  commentId: Overload:Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry
  isExternal: true
  name: CreatePluginRegistry
  nameWithType: PluginManager.CreatePluginRegistry
  fullName: Sdl.Core.PluginFramework.PluginManager.CreatePluginRegistry
- uid: Sdl.Core.PluginFramework.IPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginLocator
  nameWithType: IPluginLocator
  fullName: Sdl.Core.PluginFramework.IPluginLocator
- uid: Sdl.Core.PluginFramework.IPluginStateHandler
  commentId: T:Sdl.Core.PluginFramework.IPluginStateHandler
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginStateHandler
  nameWithType: IPluginStateHandler
  fullName: Sdl.Core.PluginFramework.IPluginStateHandler
- uid: Sdl.Core.PluginFramework.IPluginInitializer
  commentId: T:Sdl.Core.PluginFramework.IPluginInitializer
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginInitializer
  nameWithType: IPluginInitializer
  fullName: Sdl.Core.PluginFramework.IPluginInitializer
- uid: Sdl.Core.PluginFramework.IPluginTypeLoader
  commentId: T:Sdl.Core.PluginFramework.IPluginTypeLoader
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginTypeLoader
  nameWithType: IPluginTypeLoader
  fullName: Sdl.Core.PluginFramework.IPluginTypeLoader
- uid: Sdl.Core.PluginFramework.IPluginFilter
  commentId: T:Sdl.Core.PluginFramework.IPluginFilter
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginFilter
  nameWithType: IPluginFilter
  fullName: Sdl.Core.PluginFramework.IPluginFilter
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.PluginFramework.IObjectResolver
  commentId: T:Sdl.Core.PluginFramework.IObjectResolver
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IObjectResolver
  nameWithType: IObjectResolver
  fullName: Sdl.Core.PluginFramework.IObjectResolver
- uid: Sdl.Core.PluginFramework.IPluginRegistry
  commentId: T:Sdl.Core.PluginFramework.IPluginRegistry
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginRegistry
  nameWithType: IPluginRegistry
  fullName: Sdl.Core.PluginFramework.IPluginRegistry
- uid: Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry*
  commentId: Overload:Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry
  isExternal: true
  name: DefaultPluginRegistry
  nameWithType: PluginManager.DefaultPluginRegistry
  fullName: Sdl.Core.PluginFramework.PluginManager.DefaultPluginRegistry
- uid: System.EventHandler{Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs}
  commentId: T:System.EventHandler{Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<PluginLoadExceptionEventArgs>
  nameWithType: EventHandler<PluginLoadExceptionEventArgs>
  fullName: System.EventHandler<Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs>
  nameWithType.vb: EventHandler(Of PluginLoadExceptionEventArgs)
  fullName.vb: System.EventHandler(Of Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs)
  name.vb: EventHandler(Of PluginLoadExceptionEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
    name: PluginLoadExceptionEventArgs
    nameWithType: PluginLoadExceptionEventArgs
    fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
    name: PluginLoadExceptionEventArgs
    nameWithType: PluginLoadExceptionEventArgs
    fullName: Sdl.Core.PluginFramework.PluginLoadExceptionEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
