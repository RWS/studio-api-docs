### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  id: ExtensionsFactory
  parent: Sdl.Core.PluginFramework.Integration
  children:
  - Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  - Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  - Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  langs:
  - csharp
  - vb
  name: ExtensionsFactory
  nameWithType: ExtensionsFactory
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  syntax:
    content: public sealed class ExtensionsFactory
    content.vb: Public NotInheritable Class ExtensionsFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  id: Create``2(Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  langs:
  - csharp
  - vb
  name: Create<TAttribute, TResult>(ExtensionArguments, Boolean)
  nameWithType: ExtensionsFactory.Create<TAttribute, TResult>(ExtensionArguments, Boolean)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create<TAttribute, TResult>(Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  syntax:
    content: >-
      public static IEnumerable<TResult> Create<TAttribute, TResult>(ExtensionArguments arguments = null, bool useCache = true)
          where TAttribute : ExtensionAttribute where TResult : class
    parameters:
    - id: arguments
      type: Sdl.Core.PluginFramework.Integration.ExtensionArguments
    - id: useCache
      type: System.Boolean
    typeParameters:
    - id: TAttribute
    - id: TResult
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
    content.vb: Public Shared Function Create(Of TAttribute As ExtensionAttribute, TResult As Class)(arguments As ExtensionArguments = Nothing, useCache As Boolean = True) As IEnumerable(Of TResult)
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create*
  nameWithType.vb: ExtensionsFactory.Create(Of TAttribute, TResult)(ExtensionArguments, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create(Of TAttribute, TResult)(Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  name.vb: Create(Of TAttribute, TResult)(ExtensionArguments, Boolean)
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  id: Create``1(Sdl.Core.PluginFramework.IExtension,Sdl.Core.PluginFramework.Integration.ExtensionArguments,System.Boolean)
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  langs:
  - csharp
  - vb
  name: Create<TResult>(IExtension, ExtensionArguments, Boolean)
  nameWithType: ExtensionsFactory.Create<TResult>(IExtension, ExtensionArguments, Boolean)
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create<TResult>(Sdl.Core.PluginFramework.IExtension, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  syntax:
    content: >-
      public static TResult Create<TResult>(IExtension extension, ExtensionArguments arguments = null, bool useCache = true)
          where TResult : class
    parameters:
    - id: extension
      type: Sdl.Core.PluginFramework.IExtension
    - id: arguments
      type: Sdl.Core.PluginFramework.Integration.ExtensionArguments
    - id: useCache
      type: System.Boolean
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
    content.vb: Public Shared Function Create(Of TResult As Class)(extension As IExtension, arguments As ExtensionArguments = Nothing, useCache As Boolean = True) As TResult
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create*
  nameWithType.vb: ExtensionsFactory.Create(Of TResult)(IExtension, ExtensionArguments, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create(Of TResult)(Sdl.Core.PluginFramework.IExtension, Sdl.Core.PluginFramework.Integration.ExtensionArguments, System.Boolean)
  name.vb: Create(Of TResult)(IExtension, ExtensionArguments, Boolean)
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  commentId: M:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  id: '#ctor'
  parent: Sdl.Core.PluginFramework.Integration.ExtensionsFactory
  langs:
  - csharp
  - vb
  name: ExtensionsFactory()
  nameWithType: ExtensionsFactory.ExtensionsFactory()
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.ExtensionsFactory()
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework.Integration
  syntax:
    content: public ExtensionsFactory()
    content.vb: Public Sub New
  overload: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Sdl.Core.PluginFramework.Integration
  commentId: N:Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: Sdl.Core.PluginFramework.Integration
  nameWithType: Sdl.Core.PluginFramework.Integration
  fullName: Sdl.Core.PluginFramework.Integration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create
  isExternal: true
  name: Create
  nameWithType: ExtensionsFactory.Create
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.Create
- uid: Sdl.Core.PluginFramework.Integration.ExtensionArguments
  commentId: T:Sdl.Core.PluginFramework.Integration.ExtensionArguments
  parent: Sdl.Core.PluginFramework.Integration
  isExternal: true
  name: ExtensionArguments
  nameWithType: ExtensionArguments
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionArguments
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.PluginFramework.IExtension
  commentId: T:Sdl.Core.PluginFramework.IExtension
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IExtension
  nameWithType: IExtension
  fullName: Sdl.Core.PluginFramework.IExtension
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.Integration.ExtensionsFactory.#ctor
  isExternal: true
  name: ExtensionsFactory
  nameWithType: ExtensionsFactory.ExtensionsFactory
  fullName: Sdl.Core.PluginFramework.Integration.ExtensionsFactory.ExtensionsFactory
