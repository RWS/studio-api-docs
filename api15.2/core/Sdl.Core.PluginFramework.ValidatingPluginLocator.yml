### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator
  commentId: T:Sdl.Core.PluginFramework.ValidatingPluginLocator
  id: ValidatingPluginLocator
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator)
  - Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator,System.Boolean)
  - Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose
  - Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors
  - Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors
  - Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors
  langs:
  - csharp
  - vb
  name: ValidatingPluginLocator
  nameWithType: ValidatingPluginLocator
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: 'public class ValidatingPluginLocator : IPluginLocator, IDisposable'
    content.vb: >-
      Public Class ValidatingPluginLocator
          Implements IPluginLocator, IDisposable
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator)
  commentId: M:Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator)
  id: '#ctor(Sdl.Core.PluginFramework.IPluginLocator)'
  parent: Sdl.Core.PluginFramework.ValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: ValidatingPluginLocator(IPluginLocator)
  nameWithType: ValidatingPluginLocator.ValidatingPluginLocator(IPluginLocator)
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatingPluginLocator(Sdl.Core.PluginFramework.IPluginLocator)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public ValidatingPluginLocator(IPluginLocator baseLocator)
    parameters:
    - id: baseLocator
      type: Sdl.Core.PluginFramework.IPluginLocator
    content.vb: Public Sub New(baseLocator As IPluginLocator)
  overload: Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator,System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator,System.Boolean)
  id: '#ctor(Sdl.Core.PluginFramework.IPluginLocator,System.Boolean)'
  parent: Sdl.Core.PluginFramework.ValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: ValidatingPluginLocator(IPluginLocator, Boolean)
  nameWithType: ValidatingPluginLocator.ValidatingPluginLocator(IPluginLocator, Boolean)
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatingPluginLocator(Sdl.Core.PluginFramework.IPluginLocator, System.Boolean)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public ValidatingPluginLocator(IPluginLocator baseLocator, bool isSecureMode)
    parameters:
    - id: baseLocator
      type: Sdl.Core.PluginFramework.IPluginLocator
    - id: isSecureMode
      type: System.Boolean
    content.vb: Public Sub New(baseLocator As IPluginLocator, isSecureMode As Boolean)
  overload: Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors
  id: GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.ValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: GetPluginDescriptors()
  nameWithType: ValidatingPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public IPluginDescriptor[] GetPluginDescriptors()
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor[]
    content.vb: Public Function GetPluginDescriptors As IPluginDescriptor()
  overload: Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors*
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose
  commentId: M:Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose
  id: Dispose
  parent: Sdl.Core.PluginFramework.ValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ValidatingPluginLocator.Dispose()
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors
  commentId: P:Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors
  id: ValidatedDescriptors
  parent: Sdl.Core.PluginFramework.ValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: ValidatedDescriptors
  nameWithType: ValidatingPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public List<IPluginDescriptor> ValidatedDescriptors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
    content.vb: Public ReadOnly Property ValidatedDescriptors As List(Of IPluginDescriptor)
  overload: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors
  commentId: P:Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors
  id: InvalidDescriptors
  parent: Sdl.Core.PluginFramework.ValidatingPluginLocator
  langs:
  - csharp
  - vb
  name: InvalidDescriptors
  nameWithType: ValidatingPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public List<IPluginDescriptor> InvalidDescriptors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
    content.vb: Public ReadOnly Property InvalidDescriptors As List(Of IPluginDescriptor)
  overload: Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.IPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginLocator
  nameWithType: IPluginLocator
  fullName: Sdl.Core.PluginFramework.IPluginLocator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingPluginLocator.#ctor
  isExternal: true
  name: ValidatingPluginLocator
  nameWithType: ValidatingPluginLocator.ValidatingPluginLocator
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatingPluginLocator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors
  isExternal: true
  name: GetPluginDescriptors
  nameWithType: ValidatingPluginLocator.GetPluginDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.GetPluginDescriptors
- uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.IPluginLocator
  isExternal: true
  name: GetPluginDescriptors()
  nameWithType: IPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginDescriptor[]
  isExternal: true
  name: IPluginDescriptor[]
  nameWithType: IPluginDescriptor[]
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor[]
  nameWithType.vb: IPluginDescriptor()
  fullName.vb: Sdl.Core.PluginFramework.IPluginDescriptor()
  name.vb: IPluginDescriptor()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose
  isExternal: true
  name: Dispose
  nameWithType: ValidatingPluginLocator.Dispose
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors
  isExternal: true
  name: ValidatedDescriptors
  nameWithType: ValidatingPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.ValidatedDescriptors
- uid: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
  commentId: T:System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<IPluginDescriptor>
  nameWithType: List<IPluginDescriptor>
  fullName: System.Collections.Generic.List<Sdl.Core.PluginFramework.IPluginDescriptor>
  nameWithType.vb: List(Of IPluginDescriptor)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.PluginFramework.IPluginDescriptor)
  name.vb: List(Of IPluginDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors
  isExternal: true
  name: InvalidDescriptors
  nameWithType: ValidatingPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingPluginLocator.InvalidDescriptors
