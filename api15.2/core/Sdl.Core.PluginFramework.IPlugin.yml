### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.IPlugin
  commentId: T:Sdl.Core.PluginFramework.IPlugin
  id: IPlugin
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.IPlugin.CanDisable
  - Sdl.Core.PluginFramework.IPlugin.CanEnable
  - Sdl.Core.PluginFramework.IPlugin.Descriptor
  - Sdl.Core.PluginFramework.IPlugin.Enabled
  - Sdl.Core.PluginFramework.IPlugin.Extensions
  - Sdl.Core.PluginFramework.IPlugin.GetPluginResource``1(System.String)
  - Sdl.Core.PluginFramework.IPlugin.Id
  - Sdl.Core.PluginFramework.IPlugin.IsDynamic
  - Sdl.Core.PluginFramework.IPlugin.Name
  - Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  - Sdl.Core.PluginFramework.IPlugin.Status
  - Sdl.Core.PluginFramework.IPlugin.Validate
  - Sdl.Core.PluginFramework.IPlugin.Version
  langs:
  - csharp
  - vb
  name: IPlugin
  nameWithType: IPlugin
  fullName: Sdl.Core.PluginFramework.IPlugin
  type: Interface
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public interface IPlugin
    content.vb: Public Interface IPlugin
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  commentId: M:Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  id: SetEnabled(System.Boolean)
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: SetEnabled(Boolean)
  nameWithType: IPlugin.SetEnabled(Boolean)
  fullName: Sdl.Core.PluginFramework.IPlugin.SetEnabled(System.Boolean)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: bool SetEnabled(bool enabled)
    parameters:
    - id: enabled
      type: System.Boolean
    return:
      type: System.Boolean
    content.vb: Function SetEnabled(enabled As Boolean) As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.SetEnabled*
- uid: Sdl.Core.PluginFramework.IPlugin.GetPluginResource``1(System.String)
  commentId: M:Sdl.Core.PluginFramework.IPlugin.GetPluginResource``1(System.String)
  id: GetPluginResource``1(System.String)
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: GetPluginResource<T>(String)
  nameWithType: IPlugin.GetPluginResource<T>(String)
  fullName: Sdl.Core.PluginFramework.IPlugin.GetPluginResource<T>(System.String)
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: >-
      T GetPluginResource<T>(string resourceName)
          where T : class
    parameters:
    - id: resourceName
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function GetPluginResource(Of T As Class)(resourceName As String) As T
  overload: Sdl.Core.PluginFramework.IPlugin.GetPluginResource*
  nameWithType.vb: IPlugin.GetPluginResource(Of T)(String)
  fullName.vb: Sdl.Core.PluginFramework.IPlugin.GetPluginResource(Of T)(System.String)
  name.vb: GetPluginResource(Of T)(String)
- uid: Sdl.Core.PluginFramework.IPlugin.Validate
  commentId: M:Sdl.Core.PluginFramework.IPlugin.Validate
  id: Validate
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: IPlugin.Validate()
  fullName: Sdl.Core.PluginFramework.IPlugin.Validate()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: void Validate()
    content.vb: Sub Validate
  overload: Sdl.Core.PluginFramework.IPlugin.Validate*
- uid: Sdl.Core.PluginFramework.IPlugin.Id
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Id
  id: Id
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: IPlugin.Id
  fullName: Sdl.Core.PluginFramework.IPlugin.Id
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: PluginId Id { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.PluginId
    content.vb: ReadOnly Property Id As PluginId
  overload: Sdl.Core.PluginFramework.IPlugin.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.Version
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Version
  id: Version
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: IPlugin.Version
  fullName: Sdl.Core.PluginFramework.IPlugin.Version
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: string Version { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Version As String
  overload: Sdl.Core.PluginFramework.IPlugin.Version*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.Name
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Name
  id: Name
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IPlugin.Name
  fullName: Sdl.Core.PluginFramework.IPlugin.Name
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Name As String
  overload: Sdl.Core.PluginFramework.IPlugin.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.Descriptor
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Descriptor
  id: Descriptor
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Descriptor
  nameWithType: IPlugin.Descriptor
  fullName: Sdl.Core.PluginFramework.IPlugin.Descriptor
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: IPluginDescriptor Descriptor { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor
    content.vb: ReadOnly Property Descriptor As IPluginDescriptor
  overload: Sdl.Core.PluginFramework.IPlugin.Descriptor*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.Enabled
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Enabled
  id: Enabled
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Enabled
  nameWithType: IPlugin.Enabled
  fullName: Sdl.Core.PluginFramework.IPlugin.Enabled
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: bool Enabled { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property Enabled As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.Enabled*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.CanEnable
  commentId: P:Sdl.Core.PluginFramework.IPlugin.CanEnable
  id: CanEnable
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: CanEnable
  nameWithType: IPlugin.CanEnable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanEnable
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: bool CanEnable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanEnable As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.CanEnable*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.CanDisable
  commentId: P:Sdl.Core.PluginFramework.IPlugin.CanDisable
  id: CanDisable
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: CanDisable
  nameWithType: IPlugin.CanDisable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanDisable
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: bool CanDisable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property CanDisable As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.CanDisable*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.IsDynamic
  commentId: P:Sdl.Core.PluginFramework.IPlugin.IsDynamic
  id: IsDynamic
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: IsDynamic
  nameWithType: IPlugin.IsDynamic
  fullName: Sdl.Core.PluginFramework.IPlugin.IsDynamic
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: bool IsDynamic { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsDynamic As Boolean
  overload: Sdl.Core.PluginFramework.IPlugin.IsDynamic*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.Extensions
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Extensions
  id: Extensions
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: IPlugin.Extensions
  fullName: Sdl.Core.PluginFramework.IPlugin.Extensions
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: ExtensionCollection Extensions { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.ExtensionCollection
    content.vb: ReadOnly Property Extensions As ExtensionCollection
  overload: Sdl.Core.PluginFramework.IPlugin.Extensions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Sdl.Core.PluginFramework.IPlugin.Status
  commentId: P:Sdl.Core.PluginFramework.IPlugin.Status
  id: Status
  parent: Sdl.Core.PluginFramework.IPlugin
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: IPlugin.Status
  fullName: Sdl.Core.PluginFramework.IPlugin.Status
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: PluginStatus Status { get; }
    parameters: []
    return:
      type: Sdl.Core.PluginFramework.PluginStatus
    content.vb: ReadOnly Property Status As PluginStatus
  overload: Sdl.Core.PluginFramework.IPlugin.Status*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: Sdl.Core.PluginFramework.IPlugin.SetEnabled*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.SetEnabled
  isExternal: true
  name: SetEnabled
  nameWithType: IPlugin.SetEnabled
  fullName: Sdl.Core.PluginFramework.IPlugin.SetEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.IPlugin.GetPluginResource*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.GetPluginResource
  isExternal: true
  name: GetPluginResource
  nameWithType: IPlugin.GetPluginResource
  fullName: Sdl.Core.PluginFramework.IPlugin.GetPluginResource
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Sdl.Core.PluginFramework.IPlugin.Validate*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Validate
  isExternal: true
  name: Validate
  nameWithType: IPlugin.Validate
  fullName: Sdl.Core.PluginFramework.IPlugin.Validate
- uid: Sdl.Core.PluginFramework.IPlugin.Id*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Id
  isExternal: true
  name: Id
  nameWithType: IPlugin.Id
  fullName: Sdl.Core.PluginFramework.IPlugin.Id
- uid: Sdl.Core.PluginFramework.PluginId
  commentId: T:Sdl.Core.PluginFramework.PluginId
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: PluginId
  nameWithType: PluginId
  fullName: Sdl.Core.PluginFramework.PluginId
- uid: Sdl.Core.PluginFramework.IPlugin.Version*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Version
  isExternal: true
  name: Version
  nameWithType: IPlugin.Version
  fullName: Sdl.Core.PluginFramework.IPlugin.Version
- uid: Sdl.Core.PluginFramework.IPlugin.Name*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Name
  isExternal: true
  name: Name
  nameWithType: IPlugin.Name
  fullName: Sdl.Core.PluginFramework.IPlugin.Name
- uid: Sdl.Core.PluginFramework.IPlugin.Descriptor*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Descriptor
  isExternal: true
  name: Descriptor
  nameWithType: IPlugin.Descriptor
  fullName: Sdl.Core.PluginFramework.IPlugin.Descriptor
- uid: Sdl.Core.PluginFramework.IPluginDescriptor
  commentId: T:Sdl.Core.PluginFramework.IPluginDescriptor
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginDescriptor
  nameWithType: IPluginDescriptor
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor
- uid: Sdl.Core.PluginFramework.IPlugin.Enabled*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Enabled
  isExternal: true
  name: Enabled
  nameWithType: IPlugin.Enabled
  fullName: Sdl.Core.PluginFramework.IPlugin.Enabled
- uid: Sdl.Core.PluginFramework.IPlugin.CanEnable*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.CanEnable
  isExternal: true
  name: CanEnable
  nameWithType: IPlugin.CanEnable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanEnable
- uid: Sdl.Core.PluginFramework.IPlugin.CanDisable*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.CanDisable
  isExternal: true
  name: CanDisable
  nameWithType: IPlugin.CanDisable
  fullName: Sdl.Core.PluginFramework.IPlugin.CanDisable
- uid: Sdl.Core.PluginFramework.IPlugin.IsDynamic*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.IsDynamic
  isExternal: true
  name: IsDynamic
  nameWithType: IPlugin.IsDynamic
  fullName: Sdl.Core.PluginFramework.IPlugin.IsDynamic
- uid: Sdl.Core.PluginFramework.IPlugin.Extensions*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Extensions
  isExternal: true
  name: Extensions
  nameWithType: IPlugin.Extensions
  fullName: Sdl.Core.PluginFramework.IPlugin.Extensions
- uid: Sdl.Core.PluginFramework.ExtensionCollection
  commentId: T:Sdl.Core.PluginFramework.ExtensionCollection
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: ExtensionCollection
  nameWithType: ExtensionCollection
  fullName: Sdl.Core.PluginFramework.ExtensionCollection
- uid: Sdl.Core.PluginFramework.IPlugin.Status*
  commentId: Overload:Sdl.Core.PluginFramework.IPlugin.Status
  isExternal: true
  name: Status
  nameWithType: IPlugin.Status
  fullName: Sdl.Core.PluginFramework.IPlugin.Status
- uid: Sdl.Core.PluginFramework.PluginStatus
  commentId: T:Sdl.Core.PluginFramework.PluginStatus
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: PluginStatus
  nameWithType: PluginStatus
  fullName: Sdl.Core.PluginFramework.PluginStatus
