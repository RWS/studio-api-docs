### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator
  commentId: T:Sdl.Core.PluginFramework.DefaultPluginLocator
  id: DefaultPluginLocator
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  - Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor(System.String,System.String,System.String)
  - Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  - Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  - Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins
  - Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  - Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory
  - Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  langs:
  - csharp
  - vb
  name: DefaultPluginLocator
  nameWithType: DefaultPluginLocator
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: 'public sealed class DefaultPluginLocator : IPluginLocator, IDisposable'
    content.vb: >-
      Public NotInheritable Class DefaultPluginLocator
          Implements IPluginLocator, IDisposable
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  id: '#ctor'
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: DefaultPluginLocator()
  nameWithType: DefaultPluginLocator.DefaultPluginLocator()
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.DefaultPluginLocator()
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public DefaultPluginLocator()
    content.vb: Public Sub New
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor(System.String,System.String,System.String)
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: DefaultPluginLocator(String, String, String)
  nameWithType: DefaultPluginLocator.DefaultPluginLocator(String, String, String)
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.DefaultPluginLocator(System.String, System.String, System.String)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public DefaultPluginLocator(string systemPluginsDirectory, string thirdPartyPluginsDirectory, string thirdPartyPluginsPackagesDirectory)
    parameters:
    - id: systemPluginsDirectory
      type: System.String
    - id: thirdPartyPluginsDirectory
      type: System.String
    - id: thirdPartyPluginsPackagesDirectory
      type: System.String
    content.vb: Public Sub New(systemPluginsDirectory As String, thirdPartyPluginsDirectory As String, thirdPartyPluginsPackagesDirectory As String)
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  id: GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: GetPluginDescriptors()
  nameWithType: DefaultPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public IPluginDescriptor[] GetPluginDescriptors()
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor[]
    content.vb: Public Function GetPluginDescriptors As IPluginDescriptor()
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors*
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  commentId: M:Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  id: Dispose
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DefaultPluginLocator.Dispose()
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins
  commentId: P:Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins
  id: LoadThirdPartyPlugins
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: LoadThirdPartyPlugins
  nameWithType: DefaultPluginLocator.LoadThirdPartyPlugins
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public bool LoadThirdPartyPlugins { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property LoadThirdPartyPlugins As Boolean
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  commentId: P:Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  id: SystemPluginsDirectory
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: SystemPluginsDirectory
  nameWithType: DefaultPluginLocator.SystemPluginsDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public string SystemPluginsDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SystemPluginsDirectory As String
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory
  commentId: P:Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory
  id: ThirdPartyPluginsDirectory
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: ThirdPartyPluginsDirectory
  nameWithType: DefaultPluginLocator.ThirdPartyPluginsDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public string ThirdPartyPluginsDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ThirdPartyPluginsDirectory As String
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  commentId: P:Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  id: ThirdPartyPluginsPackagesDirectory
  parent: Sdl.Core.PluginFramework.DefaultPluginLocator
  langs:
  - csharp
  - vb
  name: ThirdPartyPluginsPackagesDirectory
  nameWithType: DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  syntax:
    content: public string ThirdPartyPluginsPackagesDirectory { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ThirdPartyPluginsPackagesDirectory As String
  overload: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.IPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginLocator
  nameWithType: IPluginLocator
  fullName: Sdl.Core.PluginFramework.IPluginLocator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.#ctor
  isExternal: true
  name: DefaultPluginLocator
  nameWithType: DefaultPluginLocator.DefaultPluginLocator
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.DefaultPluginLocator
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
  isExternal: true
  name: GetPluginDescriptors
  nameWithType: DefaultPluginLocator.GetPluginDescriptors
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.GetPluginDescriptors
- uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.IPluginLocator
  isExternal: true
  name: GetPluginDescriptors()
  nameWithType: IPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginDescriptor[]
  isExternal: true
  name: IPluginDescriptor[]
  nameWithType: IPluginDescriptor[]
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor[]
  nameWithType.vb: IPluginDescriptor()
  fullName.vb: Sdl.Core.PluginFramework.IPluginDescriptor()
  name.vb: IPluginDescriptor()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
  isExternal: true
  name: Dispose
  nameWithType: DefaultPluginLocator.Dispose
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins
  isExternal: true
  name: LoadThirdPartyPlugins
  nameWithType: DefaultPluginLocator.LoadThirdPartyPlugins
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.LoadThirdPartyPlugins
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
  isExternal: true
  name: SystemPluginsDirectory
  nameWithType: DefaultPluginLocator.SystemPluginsDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.SystemPluginsDirectory
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory
  isExternal: true
  name: ThirdPartyPluginsDirectory
  nameWithType: DefaultPluginLocator.ThirdPartyPluginsDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsDirectory
- uid: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory*
  commentId: Overload:Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  isExternal: true
  name: ThirdPartyPluginsPackagesDirectory
  nameWithType: DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
  fullName: Sdl.Core.PluginFramework.DefaultPluginLocator.ThirdPartyPluginsPackagesDirectory
