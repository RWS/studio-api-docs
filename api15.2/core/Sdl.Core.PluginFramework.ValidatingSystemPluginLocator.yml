### YamlMime:ManagedReference
items:
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  commentId: T:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  id: ValidatingSystemPluginLocator
  parent: Sdl.Core.PluginFramework
  children:
  - Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator)
  - Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose
  - Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors
  - Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors
  - Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors
  langs:
  - csharp
  - vb
  name: ValidatingSystemPluginLocator
  nameWithType: ValidatingSystemPluginLocator
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  type: Class
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nThis class is an extension to an existing <xref href=\"Sdl.Core.PluginFramework.IPluginLocator\" data-throw-if-not-resolved=\"false\"></xref> interface and allows installed third party plugins to be\nvalidated against their .sdlplugin packages and it&apos;s embedded signature.\n"
  syntax:
    content: 'public class ValidatingSystemPluginLocator : Object, IValidatingPluginLocator, IPluginLocator, IDisposable'
    content.vb: >-
      Public Class ValidatingSystemPluginLocator
          Inherits Object
          Implements IValidatingPluginLocator, IPluginLocator, IDisposable
  inheritance:
  - System.Object
  implements:
  - Sdl.Core.PluginFramework.IValidatingPluginLocator
  - Sdl.Core.PluginFramework.IPluginLocator
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator)
  commentId: M:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.#ctor(Sdl.Core.PluginFramework.IPluginLocator)
  id: '#ctor(Sdl.Core.PluginFramework.IPluginLocator)'
  parent: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  langs:
  - csharp
  - vb
  name: ValidatingSystemPluginLocator(IPluginLocator)
  nameWithType: ValidatingSystemPluginLocator.ValidatingSystemPluginLocator(IPluginLocator)
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatingSystemPluginLocator(Sdl.Core.PluginFramework.IPluginLocator)
  type: Constructor
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nConstructs a ValidatingPluginLocator class using the supplied <xref href=\"Sdl.Core.PluginFramework.IPluginLocator\" data-throw-if-not-resolved=\"false\"></xref> base class and if Studio is started in secure mode.\n"
  syntax:
    content: public ValidatingSystemPluginLocator(IPluginLocator baseLocator)
    parameters:
    - id: baseLocator
      type: Sdl.Core.PluginFramework.IPluginLocator
      description: A base class that implements <xref href="Sdl.Core.PluginFramework.IPluginLocator" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Sub New(baseLocator As IPluginLocator)
  overload: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors
  id: GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  langs:
  - csharp
  - vb
  name: GetPluginDescriptors()
  nameWithType: ValidatingSystemPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nReturns an array of plug-in descriptors for plug-ins found.\n"
  syntax:
    content: public IPluginDescriptor[] GetPluginDescriptors()
    return:
      type: Sdl.Core.PluginFramework.IPluginDescriptor[]
      description: An array of plug-in descriptors.
    content.vb: Public Function GetPluginDescriptors As IPluginDescriptor()
  overload: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors*
  implements:
  - Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose
  commentId: M:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose
  id: Dispose
  parent: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ValidatingSystemPluginLocator.Dispose()
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose()
  type: Method
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nDisposes the plug-in locator.\n"
  remarks: This method is called automatically when the owning plug-in registry is disposed.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors
  commentId: P:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors
  id: ValidatedDescriptors
  parent: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  langs:
  - csharp
  - vb
  name: ValidatedDescriptors
  nameWithType: ValidatingSystemPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nThis property exposes a list of validated plug-in descriptors that can be inspected or added to.\n"
  remarks: If any plug-in descriptors are added to this list then they will also be returned by a call to <xref href="Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public List<IPluginDescriptor> ValidatedDescriptors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
    content.vb: Public ReadOnly Property ValidatedDescriptors As List(Of IPluginDescriptor)
  overload: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors*
  implements:
  - Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors
  commentId: P:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors
  id: InvalidDescriptors
  parent: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator
  langs:
  - csharp
  - vb
  name: InvalidDescriptors
  nameWithType: ValidatingSystemPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors
  type: Property
  source:
    path: Sdl.Core.PluginFramework
    isExternal: true
  assemblies:
  - Sdl.Core.PluginFramework
  namespace: Sdl.Core.PluginFramework
  summary: "\nThis property exposes a list of plug-in descriptors that have failed to validate against the original .sdlplugin package and it&apos;s embedded signature.\n"
  syntax:
    content: public List<IPluginDescriptor> InvalidDescriptors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
    content.vb: Public ReadOnly Property InvalidDescriptors As List(Of IPluginDescriptor)
  overload: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors*
  implements:
  - Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Sdl.Core.PluginFramework
  commentId: N:Sdl.Core.PluginFramework
  isExternal: true
  name: Sdl.Core.PluginFramework
  nameWithType: Sdl.Core.PluginFramework
  fullName: Sdl.Core.PluginFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IValidatingPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IValidatingPluginLocator
  nameWithType: IValidatingPluginLocator
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator
- uid: Sdl.Core.PluginFramework.IPluginLocator
  commentId: T:Sdl.Core.PluginFramework.IPluginLocator
  parent: Sdl.Core.PluginFramework
  isExternal: true
  name: IPluginLocator
  nameWithType: IPluginLocator
  fullName: Sdl.Core.PluginFramework.IPluginLocator
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.#ctor*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.#ctor
  isExternal: true
  name: ValidatingSystemPluginLocator
  nameWithType: ValidatingSystemPluginLocator.ValidatingSystemPluginLocator
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatingSystemPluginLocator
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors
  isExternal: true
  name: GetPluginDescriptors
  nameWithType: ValidatingSystemPluginLocator.GetPluginDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.GetPluginDescriptors
- uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  commentId: M:Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
  parent: Sdl.Core.PluginFramework.IPluginLocator
  isExternal: true
  name: GetPluginDescriptors()
  nameWithType: IPluginLocator.GetPluginDescriptors()
  fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    name: GetPluginDescriptors
    nameWithType: IPluginLocator.GetPluginDescriptors
    fullName: Sdl.Core.PluginFramework.IPluginLocator.GetPluginDescriptors
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.IPluginDescriptor[]
  isExternal: true
  name: IPluginDescriptor[]
  nameWithType: IPluginDescriptor[]
  fullName: Sdl.Core.PluginFramework.IPluginDescriptor[]
  nameWithType.vb: IPluginDescriptor()
  fullName.vb: Sdl.Core.PluginFramework.IPluginDescriptor()
  name.vb: IPluginDescriptor()
  spec.csharp:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose
  isExternal: true
  name: Dispose
  nameWithType: ValidatingSystemPluginLocator.Dispose
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.Dispose
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors
  isExternal: true
  name: ValidatedDescriptors
  nameWithType: ValidatingSystemPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.ValidatedDescriptors
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  commentId: P:Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
  parent: Sdl.Core.PluginFramework.IValidatingPluginLocator
  isExternal: true
  name: ValidatedDescriptors
  nameWithType: IValidatingPluginLocator.ValidatedDescriptors
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator.ValidatedDescriptors
- uid: System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}
  commentId: '!:System.Collections.Generic.List{Sdl.Core.PluginFramework.IPluginDescriptor}'
  definition: System.Collections.Generic.List`1
  name: List<IPluginDescriptor>
  nameWithType: List<IPluginDescriptor>
  fullName: System.Collections.Generic.List<Sdl.Core.PluginFramework.IPluginDescriptor>
  nameWithType.vb: List(Of IPluginDescriptor)
  fullName.vb: System.Collections.Generic.List(Of Sdl.Core.PluginFramework.IPluginDescriptor)
  name.vb: List(Of IPluginDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Sdl.Core.PluginFramework.IPluginDescriptor
    name: IPluginDescriptor
    nameWithType: IPluginDescriptor
    fullName: Sdl.Core.PluginFramework.IPluginDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors*
  commentId: Overload:Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors
  isExternal: true
  name: InvalidDescriptors
  nameWithType: ValidatingSystemPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.ValidatingSystemPluginLocator.InvalidDescriptors
- uid: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  commentId: P:Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
  parent: Sdl.Core.PluginFramework.IValidatingPluginLocator
  isExternal: true
  name: InvalidDescriptors
  nameWithType: IValidatingPluginLocator.InvalidDescriptors
  fullName: Sdl.Core.PluginFramework.IValidatingPluginLocator.InvalidDescriptors
